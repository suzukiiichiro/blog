<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on NLP</title><link>https://suzukiiichiro.github.io/posts/</link><description>Recent content in Posts on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 06 Mar 2023 22:31:15 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Ｎクイーン問題（４）制約フラグ</title><link>https://suzukiiichiro.github.io/posts/2023-03-06-01-n-queens-suzuki/</link><pubDate>Mon, 06 Mar 2023 22:31:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-06-01-n-queens-suzuki/</guid><description>この記事 N-Queens問題：Ｎクイーン問題（５）制約フラグ https://suzukiiichiro.github.io/posts/2023-03-06-01-n-queens-suzuki/ 過去記事 N-Queens問題：Ｎクイーン問題（４）バックトラック https://suzukiiichiro.github.io/posts/2023-02-21-01-n-queens-suzuki/ N-Quee</description></item><item><title/><link>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</link><pubDate>Tue, 21 Feb 2023 18:13:01 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</guid><description>書籍の紹介 詳解 シェルスクリプト 大型本 2006/1/16 Unixのプログラムは「ツール」と呼ばれます。 Unixは、処理を実現するために複数の道具(ツール)を組</description></item><item><title>Ｎクイーン問題（４）バックトラック</title><link>https://suzukiiichiro.github.io/posts/2023-02-21-01-n-queens-suzuki/</link><pubDate>Tue, 21 Feb 2023 18:13:01 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-21-01-n-queens-suzuki/</guid><description>この記事 N-Queens問題：Ｎクイーン問題（４）バックトラック https://suzukiiichiro.github.io/posts/2023-02-21-01-n-queens-suzuki/ 過去記事 N-Queens問題：Ｎクイーン問題（３）バックトラック準備編 https://suzukiiichiro.github.io/posts/2023-02-14-03-n-queens-suzuki/ N</description></item><item><title>Ｎクイーン問題（３）バックトラック準備編</title><link>https://suzukiiichiro.github.io/posts/2023-02-14-03-n-queens-suzuki/</link><pubDate>Tue, 14 Feb 2023 18:18:42 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-14-03-n-queens-suzuki/</guid><description>この記事 N-Queens問題：Ｎクイーン問題（３）バックトラック準備編 https://suzukiiichiro.github.io/posts/2023-02-14-03-n-queens-suzuki/ 前の記事 N-Queens問題：Ｎクイーン問題（２）ブルートフォース https://suzukiiichiro.github.io/posts/2023-02-14-02-n-queens-suzuki/</description></item><item><title>Ｎクイーン問題（２）ブルートフォース</title><link>https://suzukiiichiro.github.io/posts/2023-02-14-02-n-queens-suzuki/</link><pubDate>Tue, 14 Feb 2023 14:56:53 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-14-02-n-queens-suzuki/</guid><description>前回の記事 N-Queens問題：Ｎクイーン問題（１） https://suzukiiichiro.github.io/posts/2023-02-14-01-n-queens-suzuki/ エイト・クイーンのソース置き場 BashもJavaもPythonも！ https://github.com/suzukiiichiro/N-Queens 過去記事 N-Que</description></item><item><title>Ｎクイーン問題（１）について</title><link>https://suzukiiichiro.github.io/posts/2023-02-14-01-n-queens-suzuki/</link><pubDate>Tue, 14 Feb 2023 12:01:52 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-14-01-n-queens-suzuki/</guid><description>関連リンク エイト・クイーン（Ｎクイーン問題）をBash/Lua/Python/Java/C/OpenCL/CUDAなどあらゆるプログラミング</description></item><item><title>シェルスクリプト１０００本ノック</title><link>https://suzukiiichiro.github.io/posts/2023-02-01-01-oneliner-suzuki/</link><pubDate>Wed, 01 Feb 2023 13:08:01 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-01-01-oneliner-suzuki/</guid><description>シェルスクリプト１０００本ノック これからシェルスクリプトを勉強する人、なんとか本を見ながらかけるようになった人、バリバリ書いてきたけど、まだ</description></item><item><title>BASHシェルスクリプトで「キー入力待ち」処理を作ってみよう</title><link>https://suzukiiichiro.github.io/posts/2023-01-20-01-okyesno-suzuki/</link><pubDate>Fri, 20 Jan 2023 10:22:00 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-01-20-01-okyesno-suzuki/</guid><description>BASHシェルスクリプトで「キー入力待ち」プロンプトを実装する 説明も何もよくみるあれです。 実行しますか？ （y or N): 何かを押せば処理を続けたい場</description></item><item><title>【mapfile】bash/シェルスクリプトマニアックコマンドあれこれ１３</title><link>https://suzukiiichiro.github.io/posts/2023-01-12-01-mapfile-suzuki/</link><pubDate>Thu, 12 Jan 2023 16:00:05 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-01-12-01-mapfile-suzuki/</guid><description>mapfile（マップファイル） bash シェルの mapfile コマンドは、読み取り配列としてよく知られています。 主な目的は、標準入力行を読み取り、それらをイン</description></item><item><title>【ちょいと便利な】シェルスクリプトワンライナー特集２【一行完結】</title><link>https://suzukiiichiro.github.io/posts/2023-01-11-01-oneliner-suzuki/</link><pubDate>Wed, 11 Jan 2023 10:39:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-01-11-01-oneliner-suzuki/</guid><description>ワンライナー ワンライナー（英：one liner）とは 華麗な職人技によって処理を1行に全部詰め込んだ「1行ですべてが完結しているプログラムソー</description></item><item><title>MacOSをアップデートしてから、ターミナルを開くたびに、「The default interactive shell is now zsh.」というメッセージが表示されるようになりました。</title><link>https://suzukiiichiro.github.io/posts/2023-01-10-01-chsh-suzuki/</link><pubDate>Tue, 10 Jan 2023 11:39:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-01-10-01-chsh-suzuki/</guid><description>MacOSをアップデートしてから、ターミナルを開くたびに、「The default interactive shell is now zsh.」というメッセージが表示されるようになりました。 MacO</description></item><item><title>【ちょいと便利な】シェルスクリプトワンライナー特集【一行完結】</title><link>https://suzukiiichiro.github.io/posts/2022-11-30-01-oneliner-suzuki/</link><pubDate>Wed, 30 Nov 2022 11:23:02 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-30-01-oneliner-suzuki/</guid><description>ワンライナー ワンライナー（英：one liner）とは 華麗な職人技によって処理を1行に全部詰め込んだ「1行ですべてが完結しているプログラムソー</description></item><item><title>【ターミナルTIPS】ターミナルで知っておくとちょっとだけ便利なコマンド</title><link>https://suzukiiichiro.github.io/posts/2022-11-28-01-terminaltips-suzuki/</link><pubDate>Mon, 28 Nov 2022 11:49:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-28-01-terminaltips-suzuki/</guid><description>ターミナルトリック ターミナル（コンソール）で、「知っているとちょっとだけ便利なコマンド」を紹介します。 このコマンドはCtrlキーを押しながら</description></item><item><title>【set -x】bash/シェルスクリプトマニアックコマンドあれこれ１２</title><link>https://suzukiiichiro.github.io/posts/2022-11-10-01-set-x-suzuki/</link><pubDate>Thu, 10 Nov 2022 10:28:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-10-01-set-x-suzuki/</guid><description>スクリプトのデバッグ Bashは広範なデバッグ機能を提供しています。 デバッグの方法は３種類あります １．ターミナルの実行時に -x オプションを付与す</description></item><item><title>【nl】bash/シェルスクリプトマニアックコマンドあれこれ１１</title><link>https://suzukiiichiro.github.io/posts/2022-11-09-01-nl-suzuki/</link><pubDate>Wed, 09 Nov 2022 10:52:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-09-01-nl-suzuki/</guid><description>nlコマンド nl コマンドは、テキストファイルを行番号付きで出力するコマンドです。 cat -n コマンドでも行番号を付けることができますが、nl コマンドで</description></item><item><title>【comm】bash/シェルスクリプトマニアックコマンドあれこれ１０</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-comm-suzuki/</link><pubDate>Tue, 08 Nov 2022 17:38:59 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-comm-suzuki/</guid><description>commコマンド commコマンドは、テキストファイルを比較するコマンドです。 comm ファイル1 ファイル2 で2つのテキストファイルを比較し、ファイル</description></item><item><title>【shuf】bash/シェルスクリプトマニアックコマンドあれこれ９</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-shuf-suzuki/</link><pubDate>Tue, 08 Nov 2022 15:36:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-shuf-suzuki/</guid><description>shufコマンド shufはファイルやキーボードから入力した内容をシャッフル（shuffle）して出力するコマンドです。 乱数を扱う$RANDO</description></item><item><title>【numfmt】bash/シェルスクリプトマニアックコマンドあれこれ８</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-numfmt-suzuki/</link><pubDate>Tue, 08 Nov 2022 15:19:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-numfmt-suzuki/</guid><description>numfmtコマンド numfmtコマンドは、数値の桁揃えや、金額を表示する場合の３桁区切りを簡単に実行できる便利コマンドです。 numfmt --form</description></item><item><title>【rs】bash/シェルスクリプトマニアックコマンドあれこれ７</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-rs-suzuki/</link><pubDate>Tue, 08 Nov 2022 12:06:54 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-rs-suzuki/</guid><description>rsコマンド rsコマンドは、行列を入れ替えるコマンドです。 行列を入れ替える処理は、これはもう頻繁に起こるのです。 そのたびに頭を悩ませることに</description></item><item><title>【column】bash/シェルスクリプトマニアックコマンドあれこれ６</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-column-suzuki/</link><pubDate>Tue, 08 Nov 2022 11:41:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-column-suzuki/</guid><description>columnコマンド 「column」はテキストを、複数の列（column）に整形するコマンドです。 区切り文字を指定して表形式で表示する 普通の</description></item><item><title>【join】bash/シェルスクリプトマニアックコマンドあれこれ５</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-join-suzuki/</link><pubDate>Tue, 08 Nov 2022 11:25:36 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-join-suzuki/</guid><description>joinコマンド join は、2つのテキストファイルの内容を比較し、共通する項目がある行を連結するコマンドです。 例えば、 １つ目のテキストファイルに「</description></item><item><title>【paste】bash/シェルスクリプトマニアックコマンドあれこれ４</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-paste-suzuki/</link><pubDate>Tue, 08 Nov 2022 11:05:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-paste-suzuki/</guid><description>pasteコマンド pasteコマンドは、複数のファイルを行単位で連結するコマンドです。 $ pasteファイル1 ファイル2 で「ファイル1の1行目</description></item><item><title>【jot】Bash/シェルスクリプトマニアックコマンドあれこれ３</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-jot-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:40:40 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-jot-suzuki/</guid><description>jotコマンド 連番を生成する 文字列と組み合わせた連番を作成する printf のフォーマットで出力する 連番の範囲を指定して出力する 乱数を出力する jotコマ</description></item><item><title>【rev】bash/シェルスクリプトマニアックコマンドあれこれ２</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-rev-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:37:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-rev-suzuki/</guid><description>rev コマンド すべての行の文字の順序を逆にする 次の例に示すように、すべての行で文字の順序を逆にします。 tac コマンドはファイルの各行を上下反転します</description></item><item><title>【tac】bash/シェルスクリプトマニアックコマンドあれこれ１</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-tac-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:13:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-tac-suzuki/</guid><description>tacコマンド tac コマンドはファイルの内容を逆順に出力するコマンドです。 最後の行が最初に表示されます。 tac という言葉は、cat という言葉の逆です</description></item><item><title>【名著紹介】「ＵＮＩＸという考え方」ご紹介</title><link>https://suzukiiichiro.github.io/posts/2022-11-07-01-theideaofunix-suzuki/</link><pubDate>Mon, 07 Nov 2022 10:30:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-07-01-theideaofunix-suzuki/</guid><description>名著紹介 これほどまでシンプルに「UNIX/Linuxとは」について書かれた本はない。 「エンジニアとしての信念はUNIXである」とはどういうこ</description></item><item><title>【アルゴリズム ソート比較】ざっくりわかるシェルスクリプト２０</title><link>https://suzukiiichiro.github.io/posts/2022-11-02-01-sortcomp-suzuki/</link><pubDate>Wed, 02 Nov 2022 10:37:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-02-01-sortcomp-suzuki/</guid><description>ソート これまで、バブルソート、選択ソート、挿入ソート、マージソート、シェルソート、クイックソートを学習してきました。 【バブルソート】 https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/ 【選択</description></item><item><title>【アルゴリズム クイックソート】ざっくりわかるシェルスクリプト１９</title><link>https://suzukiiichiro.github.io/posts/2022-11-01-01-quicksort-suzuki/</link><pubDate>Tue, 01 Nov 2022 11:35:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-01-01-quicksort-suzuki/</guid><description>クイックソート クイックソートは、誰もが人気ナンバーワンと認めるソートアルゴリズムです。 クイックソート 理由として、クイックソートは多くの場合に</description></item><item><title>【アルゴリズム シェルソート】ざっくりわかるシェルスクリプト１８</title><link>https://suzukiiichiro.github.io/posts/2022-10-27-01-shellsort-suzuki/</link><pubDate>Thu, 27 Oct 2022 14:27:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-27-01-shellsort-suzuki/</guid><description>シェルソート シェルソートは、挿入ソートの欠点を補う形で考案されたソートアルゴリズムです。 シェルソート シェル＝貝殻 というのは「がせ情報」で、じ</description></item><item><title>【アルゴリズム マージソート】ざっくりわかるシェルスクリプト１７</title><link>https://suzukiiichiro.github.io/posts/2022-10-19-01-mergesort-suzuki/</link><pubDate>Wed, 19 Oct 2022 15:49:34 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-19-01-mergesort-suzuki/</guid><description>マージソート マージソートは、これまで紹介した「バブルソート」「挿入ソート」「選択ソート」と比べると、少なくともスピードの点ではずっと高速で効</description></item><item><title>【アルゴリズム 連結リスト】ざっくりわかるシェルスクリプト１６</title><link>https://suzukiiichiro.github.io/posts/2022-10-18-01-list-suzuki/</link><pubDate>Tue, 18 Oct 2022 11:31:36 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-18-01-list-suzuki/</guid><description>配列とリスト これまで配列について説明してきました。 配列で再帰を組む方法を前回説明しました。 配列は 非順序配列は探索が遅い 順序配列は挿入が遅い い</description></item><item><title>アルゴリズム日記 2022/10/12</title><link>https://suzukiiichiro.github.io/posts/2022-10-12-01-ani/</link><pubDate>Wed, 12 Oct 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-12-01-ani/</guid><description>10月12日 今マージソートを勉強しているのですが難しいので日記をつけて整理することにしました。 プログラムソースは以下です。 https://github.com/suzukiiichiro/Algorithms-And-Data-Structures/blob/master/Bash/05_1MergeSort.sh ロジックは配列を</description></item><item><title>【アルゴリズム 再帰】ざっくりわかるシェルスクリプト１５</title><link>https://suzukiiichiro.github.io/posts/2022-10-07-01-algorithm-recursion-suzuki/</link><pubDate>Fri, 07 Oct 2022 11:19:00 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-07-01-algorithm-recursion-suzuki/</guid><description>再帰 実行している関数自身の関数の処理内で、自分自身である関数を呼び出し実行することです。 再帰は必ず基底条件を明示する必要があります。 （基底条</description></item><item><title>【アルゴリズム キュー】ざっくりわかるシェルスクリプト１４</title><link>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-queue-suzuki/</link><pubDate>Thu, 06 Oct 2022 13:43:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-queue-suzuki/</guid><description>キュー キューはデータ構造の一つです。 キューは待ち行列とも呼ばれ、その名の通り行列に並ぶ事を考えるとイメージしやすいです。 行列においては、先に</description></item><item><title>【アルゴリズム スタック】ざっくりわかるシェルスクリプト１３</title><link>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-stack-suzuki/</link><pubDate>Thu, 06 Oct 2022 11:47:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-stack-suzuki/</guid><description>スタック スタックはデータ構造の一つです。 スタックの仕組みは、ものを縦に積み上げる事を考えるとイメージしやすいです。 積み上げられた山からものを</description></item><item><title>【アルゴリズム 挿入ソート】ざっくりわかるシェルスクリプト１２</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-insertionsort-suzuki/</link><pubDate>Wed, 05 Oct 2022 16:36:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-insertionsort-suzuki/</guid><description>挿入ソート 挿入ソートとは、未整列の要素を一つずつつまみ上げて、整列済みの列の適切な位置に挿入していくアルゴリズムです。 挿入ソートは、選択ソー</description></item><item><title>【アルゴリズム 選択ソート】ざっくりわかるシェルスクリプト１１</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-selectionsort-suzuki/</link><pubDate>Wed, 05 Oct 2022 14:49:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-selectionsort-suzuki/</guid><description>選択ソート 選択ソートは、未整列の配列要素の中から最小を選択し、配列先頭の整列済み列の末尾に追加していく並べ替えアルゴリズムです。 バブルソート</description></item><item><title>【アルゴリズム バブルソート】ざっくりわかるシェルスクリプト１０</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/</link><pubDate>Wed, 05 Oct 2022 11:06:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/</guid><description>バブルソート バブルソートは単純選択方法と同様、実現は簡単です。 しかし、比較回数と交換回数は最悪の場合、O(N^2)です。 ソート中に選ばれた最</description></item><item><title>【アルゴリズム ビッグオー】ざっくりわかるシェルスクリプト９</title><link>https://suzukiiichiro.github.io/posts/2022-10-04-01-algorithm-bigo-suzuki/</link><pubDate>Tue, 04 Oct 2022 13:47:09 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-04-01-algorithm-bigo-suzuki/</guid><description>Bash/シェルスクリプトで学ぶビッグオー ビッグオーとは？ オーダー記法です。 オーダー記法とは、「計算量の割合」です。 例）Aさんの年齢はｘ歳、</description></item><item><title>【アルゴリズム ２次元配列編】ざっくりわかるシェルスクリプト８</title><link>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-eval-array-suzuki/</link><pubDate>Mon, 03 Oct 2022 15:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-eval-array-suzuki/</guid><description>はじめに さて。 前回の章では、アルゴリズムを勉強していくためのもととなるテンプレートとして、配列に値を入れる仕組みと、配列の中身を表示する仕組</description></item><item><title>【アルゴリズム 配列準備編】ざっくりわかるシェルスクリプト７</title><link>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-array-suzuki/</link><pubDate>Mon, 03 Oct 2022 11:36:10 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-array-suzuki/</guid><description>Bashスクリプトで配列の準備 この章では、Bashスクリプトでいくつかのソートアルゴリズムを実行するための、元となるテンプレートを配列で作成</description></item><item><title>アルゴリズム日記 2022/09/29</title><link>https://suzukiiichiro.github.io/posts/2022-09-29-01-ani/</link><pubDate>Thu, 29 Sep 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-29-01-ani/</guid><description>9月29日 今日はバイナリサーチでツリーの中身を表示するメソッドを作成します。 こんな感じでルートノードから下に向かってツリーの中身を出力します</description></item><item><title>【アルゴリズム 配列編】ざっくりわかるシェルスクリプト６</title><link>https://suzukiiichiro.github.io/posts/2022-09-27-01-array-suzuki/</link><pubDate>Tue, 27 Sep 2022 10:31:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-27-01-array-suzuki/</guid><description>Bashスクリプト（シェルスクリプト） は５０年以上も前からUNIXプログラミングのエッセンスとして君臨し、現在もLinuxのコマンドの殆どを</description></item><item><title>アルゴリズム日記 2022/09/27</title><link>https://suzukiiichiro.github.io/posts/2022-09-27-01-ani/</link><pubDate>Tue, 27 Sep 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-27-01-ani/</guid><description>9月27日 アルゴリズムの勉強を始めました。 まずは基礎から。 バイナリサーチからスタートします。 それまでのものは鈴木先生が作成している以下のgi</description></item><item><title>【TIPS】ざっくりわかるシェルスクリプト</title><link>https://suzukiiichiro.github.io/posts/2022-09-26-01-tips-suzuki/</link><pubDate>Mon, 26 Sep 2022 14:19:38 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-26-01-tips-suzuki/</guid><description>ここではシェルスクリプトのBashについてのTIPSを紹介します。C言語やJavaといった高級言語にあってbashにはない部分について補完で</description></item><item><title>NQueen日記 2022/09/15</title><link>https://suzukiiichiro.github.io/posts/2022-09-15-01-ani/</link><pubDate>Thu, 15 Sep 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-15-01-ani/</guid><description>9月15日 グラフ理論を使ってエイトクイーンを解く方法があるらしい。 NetworkXを使ってエイト・クイーンパズルを解く https://analytics-note.xyz/graph-theory/networkx-eight-queens-puzzle/ まず、すべて効き筋同</description></item><item><title>NQueen日記 2022/09/09</title><link>https://suzukiiichiro.github.io/posts/2022-09-09-01-ani/</link><pubDate>Fri, 09 Sep 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-09-01-ani/</guid><description>9月9日 数が合わない点はsymmetryOps内での単純なコードの間違えだったため修正して数が合った。 ただ、速度が過去のロジックより２０％遅</description></item><item><title>NQueen日記 2022/09/05</title><link>https://suzukiiichiro.github.io/posts/2022-09-05-01-ani/</link><pubDate>Mon, 05 Sep 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-05-01-ani/</guid><description>9月5日 n13でsymmetryOps v2 とv1での違いを調査する。 正確な回答 v1の方が数が多いのでv1だけsymmetryOpsを突破したも</description></item><item><title>NQueen日記 2022/09/02</title><link>https://suzukiiichiro.github.io/posts/2022-09-02-01-ani/</link><pubDate>Fri, 02 Sep 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-02-01-ani/</guid><description>9月2日 正しい結果と間違った結果のtop,left,bottom,rightの値を比較してみる。 間違った結果の方が数が多いので、間違っている</description></item><item><title>NQueen日記 2022/08/30</title><link>https://suzukiiichiro.github.io/posts/2022-08-30-01-ani/</link><pubDate>Tue, 30 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-30-01-ani/</guid><description>8月30日 枝刈りを追加した。 追加前よりなぜか遅くなった。 symmetryOpsのロジックを変えると速くなるだろうか。 枝刈りを追加することによ</description></item><item><title>NQueen日記 2022/08/29</title><link>https://suzukiiichiro.github.io/posts/2022-08-29-01-ani/</link><pubDate>Mon, 29 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-29-01-ani/</guid><description>8月29日 ミラー処理を入れてみた。 ミラー処理は1行目については右側半分だけクイーンを置くというもの 奇数の場合は真ん中もやる。 ミラー処理を適用</description></item><item><title>NQueen日記 2022/08/18</title><link>https://suzukiiichiro.github.io/posts/2022-08-18-01-ani/</link><pubDate>Thu, 18 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-18-01-ani/</guid><description>8月18日 調べたところ、2辺が同じ場合は3辺目を比較する処理をコメントしていた コメントを外して実行したところ旧ロジックと同じ結果になった。 旧</description></item><item><title>NQueen日記 2022/08/17</title><link>https://suzukiiichiro.github.io/posts/2022-08-17-01-ani/</link><pubDate>Wed, 17 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-17-01-ani/</guid><description>8月17日 新旧ロジックでn2,n4,n8判定の差分をロギングして比較してみた。 以下が新ロジックだとn4だったが、旧ロジックだとn8だった t0:3,t1:5,l0:4,l1:2,b0:3,b1:5,r0:4,r1:6 t0:2,t1:6,l0:6,l1:2,b0:2,b1:6,r0:6,r1:4</description></item><item><title>NQueen日記 2022/08/12</title><link>https://suzukiiichiro.github.io/posts/2022-08-12-01-ani/</link><pubDate>Fri, 12 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-12-01-ani/</guid><description>8月12日 この前と同じようにn10について新旧ロジックを比較して見た。 新ロジックだけのルートは以下の2つだけだった。 どちらも正解にはならなか</description></item><item><title>NQueen日記 2022/08/10</title><link>https://suzukiiichiro.github.io/posts/2022-08-10-01-ani/</link><pubDate>Wed, 10 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-10-01-ani/</guid><description>8月10日 比較して同じだった場合は反時計回りに90度回転させたもの同士を比較するようにしてみた。 例えば 上2行と右2列が同じだった場合はそれぞ</description></item><item><title>NQueen日記 2022/08/09</title><link>https://suzukiiichiro.github.io/posts/2022-08-09-01-ani/</link><pubDate>Tue, 09 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-09-01-ani/</guid><description>8月9日 抽出した新ロジックだけのルートの中から、クイーン数に影響のあるもの、 symmetryOpsのあとで、NQueenをして最終行に到達す</description></item><item><title>NQueen日記 2022/08/08</title><link>https://suzukiiichiro.github.io/posts/2022-08-08-01-ani/</link><pubDate>Mon, 08 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-08-01-ani/</guid><description>8月8日 先日抽出した、新ロジックだけsymmetryOpsを突破した組み合わせのクイーンの配置を出力してみた。 t0:1,t1:3,l0:4,l1:7,b0:1,b1:3,r0:2,r1:7 7 6 5 4 3 2 1 0 ============================= 0| 00000010 1| 00001000 2|</description></item><item><title>NQueen日記 2022/08/05</title><link>https://suzukiiichiro.github.io/posts/2022-08-05-01-ani/</link><pubDate>Fri, 05 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-05-01-ani/</guid><description>8月5日 N8でsymmetryOps直後の新旧ロジックのクイーンの配置を比較してみた。 N8だとユニーク数の正しい数は12 新ロジックだとユニー</description></item><item><title>NQueen日記 2022/08/04</title><link>https://suzukiiichiro.github.io/posts/2022-08-04-01-ani/</link><pubDate>Thu, 04 Aug 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-08-04-01-ani/</guid><description>いままでのNQueenは NQueenは、ひとつの解には、盤面を90度・180度・270度回転、及びそれらの鏡像の合計8個の対称解が存在します</description></item><item><title>（２６）【tee】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-28-01-tee-suzuki/</link><pubDate>Thu, 28 Jul 2022 10:24:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-28-01-tee-suzuki/</guid><description>teeコマンド ファイルへのリダイレクトとパイプを同時に行う 出力するファイルは都度新規作成ではなく追記する teeコマンド概要 teeコマンドは、</description></item><item><title>（２５）【uniq】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-27-01-uniq-suzuki/</link><pubDate>Wed, 27 Jul 2022 15:06:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-27-01-uniq-suzuki/</guid><description>uniqコマンド 重複している行を削除する 大文字／小文字を区別しないで重複行を削除する 重複している行をカウントする uniqコマンド概要 uniq</description></item><item><title>（２５）【rev】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-rev-suzuki/</link><pubDate>Tue, 26 Jul 2022 11:11:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-rev-suzuki/</guid><description>revコマンド ファイルの各行を反転させる キーボードから入力した内容を反転させる revコマンド概要 reverseの語源を持つ「rev」は、ファ</description></item><item><title>（２４）【tac】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-tac-suzuki/</link><pubDate>Tue, 26 Jul 2022 11:10:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-tac-suzuki/</guid><description>tacコマンド ファイルを最終行から逆順に出力する tacコマンド概要 catコマンドを逆から読んだ「tac」はファイルの最終行から、行単位に逆順</description></item><item><title>（２３）【seq】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-seq-suzuki/</link><pubDate>Tue, 26 Jul 2022 10:40:19 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-seq-suzuki/</guid><description>seqコマンド 連続番号を出力する 開始の数と間隔を指定する 数字を逆順で出力する 書式を指定して出力する seqコマンド概要 sequenceの語源を</description></item><item><title>（２２）【jot】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-25-01-jot-suzuki/</link><pubDate>Mon, 25 Jul 2022 14:36:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-25-01-jot-suzuki/</guid><description>jotコマンド 連番を生成する 文字列と組み合わせた連番を作成する printf のフォーマットで出力する 連番の範囲を指定して出力する 乱数を出力する jotコマ</description></item><item><title>（２１）【sort】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-25-01-sort-suzuki/</link><pubDate>Mon, 25 Jul 2022 12:39:33 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-25-01-sort-suzuki/</guid><description>sortコマンド テキストファイルを並べ替える 数値の大小で並べ替える フィールドを指定して並べ替える CSVデータを並べ替える sortコマンド概要</description></item><item><title>（２０）【wc】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-20-01-wc-suzuki/</link><pubDate>Wed, 20 Jul 2022 11:46:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-20-01-wc-suzuki/</guid><description>wcコマンド 行数と単語数とバイト数を数える 文字数を数える 行数だけを表示する wcコマンド概要 「wc」はテキストファイルの行数や単語数（word</description></item><item><title>（１９）【tar】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-20-01-tar-suzuki/</link><pubDate>Wed, 20 Jul 2022 11:34:37 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-20-01-tar-suzuki/</guid><description>tarコマンド アーカイブファイルを作成する アーカイブファイルを展開する tarコマンド概要 「tar」は、複数のファイルを1つにまとめた“アーカ</description></item><item><title>（１８）【sed】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-sed-suzuki/</link><pubDate>Thu, 14 Jul 2022 15:00:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-sed-suzuki/</guid><description>sedコマンド概要 「sed」は「Stream EDitor」の略で、「sed スクリプトコマンド ファイル名」で、指定したファイルをコマンドに従っ</description></item><item><title>（１７）【expand】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-expand-suzuki/</link><pubDate>Thu, 14 Jul 2022 13:19:26 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-expand-suzuki/</guid><description>expandコマンド タブを空白に変換する（expandコマンド） タブの幅を指定する expandコマンド概要 「expand」はタブを空白に変換</description></item><item><title>（１６）【cut】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-cut-suzuki/</link><pubDate>Thu, 14 Jul 2022 11:19:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-cut-suzuki/</guid><description>cutコマンド 文字数を指定して切り出す フィールドを指定して切り出す 出力の区切り文字を変更する cutコマンド概要 「cut」は、ファイルを読み込</description></item><item><title>（１５）【du】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-13-01-du-suzuki/</link><pubDate>Wed, 13 Jul 2022 13:28:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-13-01-du-suzuki/</guid><description>duコマンド ディレクトリごとのディスク使用量を表示する ディスク使用量の合計だけを表示する カレントディレクトリ直下のファイル、ディレクトリごと</description></item><item><title>（１４）【df】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-13-01-df-suzuki/</link><pubDate>Wed, 13 Jul 2022 13:01:11 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-13-01-df-suzuki/</guid><description>dfコマンド ディスクの空き容量を調べる dfコマンド概要 「df」は、ディスクの空き領域（freeスペース）のサイズを集計して表示するコマンドで</description></item><item><title>（１３）【tr】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-08-01-tr-suzuki/</link><pubDate>Fri, 08 Jul 2022 11:17:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-08-01-tr-suzuki/</guid><description>trコマンド 文字を置換する 大文字／小文字を変換する 改行を除去する 固定長のデータをタブ区切りに変換する／カンマ区切りに変換する trコマンド概要</description></item><item><title>（１２）【nkf】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-08-01-nkf-suzuki/</link><pubDate>Fri, 08 Jul 2022 10:22:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-08-01-nkf-suzuki/</guid><description>nkfコマンド 文字コードと改行コードを変換する 文字コードを判定する 文字コードを変換してファイルを書き換える CentOS 7にnkfをインストールするには</description></item><item><title>（１１）【getopts】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-07-01-getopts-suzuki/</link><pubDate>Thu, 07 Jul 2022 11:27:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-07-01-getopts-suzuki/</guid><description>getoptsコマンド オプションを解析する エラーメッセージを表示しない 引数付きのオプションを使用する getoptsコマンド概要 「getopt</description></item><item><title>（１０）【chmod】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-06-01-chmod-suzuki/</link><pubDate>Wed, 06 Jul 2022 10:12:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-06-01-chmod-suzuki/</guid><description>chmodコマンド パーミッションを表すアルファベットと数値の意味 パーミッションを変更する パーミッションの変更内容を確認するには？ chmodコ</description></item><item><title>（９）【file】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-05-01-file-suzuki/</link><pubDate>Tue, 05 Jul 2022 10:22:08 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-05-01-file-suzuki/</guid><description>fileコマンド ファイルの形式を表示する ファイルのリストから調べる シンボリックリンクの参照先を調べる 圧縮されているファイルを調べる fileコ</description></item><item><title>（８）【grep】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-04-01-grep-suzuki/</link><pubDate>Mon, 04 Jul 2022 13:21:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-04-01-grep-suzuki/</guid><description>grepコマンド コマンドの実行結果から必要な箇所だけを抽出する 単語単位で検索する 前後の行も表示する 行番号付きで表示する 複数の文字列を指定して</description></item><item><title>第1回 pythonで自然言語解析（1）</title><link>https://suzukiiichiro.github.io/posts/2022-03-03-01-ani/</link><pubDate>Wed, 02 Mar 2022 18:25:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-03-03-01-ani/</guid><description>pythonで自然言語解析してみよう 新聞記事の要約を試みています。要約の文字数が指定されているので文抽出型の要約だけですと指定文字数よりオー</description></item><item><title>第9回 pythonでNQueen（エイトクイーン）対象解除法（2）</title><link>https://suzukiiichiro.github.io/posts/2022-02-17-01-ani/</link><pubDate>Thu, 17 Feb 2022 17:25:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-17-01-ani/</guid><description>対象解除法が正しいか検証してみよう 今回は対象解除法が正しいかどうかを検証するためプログラムを改造してクイーンを設置した場所を出力するようにし</description></item><item><title>CSSだけで簡単に1行や複数行の3点リーダーを付ける方法</title><link>https://suzukiiichiro.github.io/posts/2022-02-17-01-wyoshi/</link><pubDate>Thu, 17 Feb 2022 16:31:05 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-17-01-wyoshi/</guid><description>HTMLのレイアウトでは時には文字がはみ出した際に、3点リーダーと呼ばれる「…」をつける場合があります。 普通に記述してしまえば対応できますが</description></item><item><title>第8回 pythonでNQueen（エイトクイーン）対象解除法（1）</title><link>https://suzukiiichiro.github.io/posts/2022-02-16-01-ani/</link><pubDate>Wed, 16 Feb 2022 18:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-16-01-ani/</guid><description>対象解除法 今回から対象解除法を取り扱います。 解を見てみると左右反転だったり90度、180度回転すると同じものがあります。この性質を利用して探</description></item><item><title>第7回 pythonでNQueen（エイトクイーン）バックトラック（3）</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/</link><pubDate>Mon, 14 Feb 2022 17:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/</guid><description>バックトラック 今回も引き続きバックトラックを説明していきたいと思います。 前回はプログラムの概要を説明しましたが、今回はnqueenメソッドの</description></item><item><title>CSSでアプリのようにピタッとスナップするスクロールを作成</title><link>https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/</link><pubDate>Mon, 14 Feb 2022 12:33:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/</guid><description>出典元： CSS Scroll Snap - Ahmad Shadeed アプリなどで横スクロールしてコンテンツにスナップするといった動作をよく見かけると思いますが、CSSで横スクロールのUIを</description></item><item><title>（７）【kill】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/</link><pubDate>Mon, 14 Feb 2022 11:39:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/</guid><description>killコマンド killコマンドでプロセスIDを指定してプロセスを終了させる killallコマンドで名前を指定してプロセスを終了させる kil</description></item><item><title>（6）【less】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/</link><pubDate>Sun, 13 Feb 2022 16:35:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/</guid><description>lessコマンド テキストを1画面ずつ表示する キー操作のヘルプを表示する 長い行を折り返さずに表示する ファイルの末尾まで表示したらすぐに終了する</description></item><item><title>（5）【more】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/</link><pubDate>Sun, 13 Feb 2022 16:35:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/</guid><description>moreコマンド 長いメッセージやテキストファイルを1画面ずつ表示する テキストを1画面ずつ止めながら表示する 実行結果を止めながら表示したいとき</description></item><item><title>（４）【tail】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/</link><pubDate>Fri, 11 Feb 2022 14:31:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/</guid><description>tailコマンド tailコマンドでファイルの末尾部分だけを表示する ログファイルを監視する ファイルの特定の範囲の行を取り出す（headとtai</description></item><item><title>（３）【head】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/</link><pubDate>Thu, 10 Feb 2022 10:23:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/</guid><description>headコマンド headコマンドでファイルの先頭部分だけを表示する パイプを使って実行結果の最初の部分だけを確認する tailコマンドでファイル</description></item><item><title>（２）【cat】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/</link><pubDate>Wed, 09 Feb 2022 12:59:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/</guid><description>catコマンド ファイルの内容を表示する ファイルの内容を行番号付きで表示する 複数ファイルを連結して1つのファイルにする 概要 「cat」は、「co</description></item><item><title>第6回 pythonでNQueen（エイトクイーン）バックトラック（２）</title><link>https://suzukiiichiro.github.io/posts/2022-02-08-01-ani/</link><pubDate>Wed, 09 Feb 2022 12:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-08-01-ani/</guid><description>mainメソッド概要 今回は前回から引き続きバックトラックを説明していきたいと思います。 プログラムソースは以下のURLにあります。 https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py 429-4</description></item><item><title>（１）【echo】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/</link><pubDate>Wed, 09 Feb 2022 11:32:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/</guid><description>echoコマンド メッセージや環境変数を表示します。 概要 「echo」はメッセージなどを表示するコマンドです。 $echo メッセージ でメッセージを表示しま</description></item><item><title>Amazon EC2 Instance Retirementとメールが来たときの対応</title><link>https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/</link><pubDate>Tue, 08 Feb 2022 09:39:37 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/</guid><description>みなさんの中にもAWSのEC2を使った事がある人もいるかと思います。 そのAWSからある日、下記のようなメールが届きました。 Hello, EC2 has detected degradation of the underlying hardware</description></item><item><title>第5回 pythonでNQueen（エイトクイーン）バックトラック（１）</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/</link><pubDate>Mon, 07 Feb 2022 16:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/</guid><description>バックトラック 今回はバックトラックを説明していきたいと思います。 今回のバックトラックのロジックは前回の配置フラグの拡張版です。 配置フラグは上</description></item><item><title>SEO対策にXMLの更新日（lastmod）を正しく表示する方法</title><link>https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/</link><pubDate>Mon, 07 Feb 2022 11:28:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/</guid><description>Hugoを使って記事を作成しているのですが、サイトマップをみてみるとlastmodの値がすべて同じになってました。その原因と解決策を今回は探</description></item><item><title>Googleにインデックスされないときの対応方法は？</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/</link><pubDate>Fri, 04 Feb 2022 12:03:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/</guid><description>近年、ブログやWEBサイトを作って公開している人が増えてきました。 そうした中で、Googleにインデックスされるというのは非常に重大なことで</description></item><item><title>第4回 pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（２）</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/</link><pubDate>Fri, 04 Feb 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/</guid><description>配置フラグ（制約テスト高速化） 今回も引き続き配置フラグ（制約テスト高速化）を説明していきたいと思います。 前回はプログラムの概要を説明しました</description></item><item><title>第3回 pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（１）</title><link>https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/</link><pubDate>Thu, 03 Feb 2022 15:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/</guid><description>配置フラグ（制約テスト高速化） 前回は全くアルゴリズムを使わないで全パターン１行に１つずつクイーンを設置するブルートフォース 力任せ探索でした。</description></item><item><title>【grep/sed/awkも】ざっくりわかるシェルスクリプト５」</title><link>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</link><pubDate>Wed, 02 Feb 2022 15:55:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</guid><description>この記事はシェルスクリプトを４５分でざっくりマスターできるチュートリアルです。bashスクリプト「Hello, World」から、ifステート</description></item><item><title>第2回 pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（２）</title><link>https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/</link><pubDate>Tue, 01 Feb 2022 15:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/</guid><description>グローバル変数 今回は、前回からの引き続きでブルートフォース力任せ探索のプログラムの詳細部分を説明します。 プログラムのソースは以下のURLをご</description></item><item><title>javascriptで画面ロックする場合は、Workerを使ってみよう</title><link>https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/</link><pubDate>Tue, 01 Feb 2022 14:19:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/</guid><description>javascriptで重い処理を書く際やforやwhileなどのループを記述する際に気をつけないといけないのがUIロックです。 とくに重い処理</description></item><item><title>パソコンは不要。スマホ、タブレットでできるブログ投稿</title><link>https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/</link><pubDate>Fri, 28 Jan 2022 15:35:18 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/</guid><description>iPhoneやiPadなどのスマホ、タブレットは持ち運びに非常に便利です。パソコンよりも軽く、パソコンと同等の機能を備えてます。 そうした端末</description></item><item><title>iPadに開発環境を構築してみるテスト</title><link>https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/</link><pubDate>Fri, 28 Jan 2022 14:02:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/</guid><description>はじめに まずはこちらをやりましょう。 パソコンは不要。iPhoneやiPadなどのスマホ、タブレットでできるブログ投稿 必要なもの iPad Termiu</description></item><item><title>第1回 pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（１）</title><link>https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/</link><pubDate>Thu, 27 Jan 2022 15:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/</guid><description>Nクイーン問題とは Nクイーン問題とは、チェスの盤面にクイーンを１行に１個ずつ効き筋に当たらないように置いていこうという問題です。 https://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%A4%E3%83%88%E3%83%BB%E3%82%AF%E3%82%A4%E3%83%BC%E3%83%B3 Nクイーン</description></item><item><title>Amazon EC2でもGo言語とHugoを使えるようにする方法</title><link>https://suzukiiichiro.github.io/posts/2022-01-27-01-wyoshi/</link><pubDate>Thu, 27 Jan 2022 13:31:52 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-27-01-wyoshi/</guid><description>HugoをGitHub Pagesで展開していたのですが、今回はGitHub Pagesではなく、Amazon EC2にHugoをインストールして</description></item><item><title>HUGOでxmlやjsonファイルを複数出力する方法を詳しく解説</title><link>https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/</link><pubDate>Wed, 26 Jan 2022 14:37:51 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/</guid><description>HUGOは非常に強力な静的HTMLジェネレーターです。 複数のXMLを設置する機会があり、どうやったら設置できるのかなと悪戦苦闘しながら実装で</description></item><item><title>SVGとCSSでおしゃれでクールな最新のデザインにする</title><link>https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/</link><pubDate>Mon, 24 Jan 2022 16:18:06 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/</guid><description>出典元： Building UI Components With SVG and CSS - Ahmad Shadeed SVGはアイコンやイラストだけでなく、開発者が時々忘れてしまう隠れた力をたくさん持っています。 CSSと比較してS</description></item><item><title>e-Stat hampelで時系列データの異常値検知</title><link>https://suzukiiichiro.github.io/posts/2022-01-25-01-ani/</link><pubDate>Mon, 24 Jan 2022 13:50:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-25-01-ani/</guid><description>hampelによる異常値部分を追加しよう 前回はgoogle custom search の検索結果を利用して社会的に関心の高そうな列の抽出を試みました。 今回は、以前紹</description></item><item><title>【grep特集】ざっくりわかるシェルスクリプト４</title><link>https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/</link><pubDate>Mon, 24 Jan 2022 10:53:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/</guid><description>はじめに grep（グレップ）コマンド。UNIX/Linuxにおいてこれほど歴史あり、強力なコマンドはありません。そして多くのユーザーがこのコ</description></item><item><title>e-Stat でGoogle Custom Search APIを使おう（４）</title><link>https://suzukiiichiro.github.io/posts/2022-01-21-01-ani/</link><pubDate>Fri, 21 Jan 2022 13:50:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-21-01-ani/</guid><description>Google Custom Search APIの検索結果と統計名の列名をマッチンングさせる 今回は、前回取得したGoogle Custom Search APIの検索結果と統計名の列名をマッチンングさせ</description></item><item><title>e-Stat でGoogle Custom Search APIを使おう（３）</title><link>https://suzukiiichiro.github.io/posts/2022-01-20-01-ani/</link><pubDate>Thu, 20 Jan 2022 17:50:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-20-01-ani/</guid><description>google Custom Searchの検索結果をcsvに整形する 統計データから列名を取得してgoogle Custom Searchの検索結果に当てに行きマッチする回数の高い</description></item><item><title>2022年のWebデザインの最新トレンドとレイアウト</title><link>https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/</link><pubDate>Thu, 20 Jan 2022 17:36:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/</guid><description>出典元：Web design trends for 2022 | Layout この2年間で学んだことは、私たちは常に新しいものに適応し続けなければならないということです。2022年に向けて、デ</description></item><item><title>第0回のテーマ「Webデザイナー、コーダーってなに？」</title><link>https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/</link><pubDate>Thu, 20 Jan 2022 14:10:38 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/</guid><description>はじめに 「未経験でもWebデザイナー、コーダーになろう」ではWebデザイナーやコーダーなどWeb業界を目指す方に、現役Webデザイナー兼コー</description></item><item><title>e-Stat でGoogle Custom Search APIを使おう（２）</title><link>https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/</link><pubDate>Wed, 19 Jan 2022 18:31:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/</guid><description>Google Custom Search API 10件目以降の取得方法について 「木材流通統計調査」をgoogleで検索してみると最初の方は、政府関係の木材流通統計調査の概要説明など</description></item><item><title>CSSでもできる！知っておくべき重要なヒントとコツ 8選 8選</title><link>https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/</link><pubDate>Wed, 19 Jan 2022 08:08:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/</guid><description>出典元：8 Essential CSS Tips and Tricks Every Developer Should Know CSSは、HTMLスケルトンを設定した後、Webページにスタイルを追加するために使用されます。さらに、わずか数行</description></item><item><title>e-Stat でGoogle Custom Search APIを使おう（１）</title><link>https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/</link><pubDate>Wed, 19 Jan 2022 00:31:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/</guid><description>統計名でgoogle検索して関心度の高いキーワードを抽出しよう e-Statの解析の目標として、膨大な統計データの中から一般の人に関心度の高い</description></item><item><title>ファビコンは1サイズのみ！さらにダークモード対応させる</title><link>https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/</link><pubDate>Tue, 18 Jan 2022 17:17:37 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/</guid><description>最近ダークモードと呼ばれる機能に対応したアプリが増え、それと同じようにWebサイトでもダークモードに対応しているものを見かけるようになりまし</description></item><item><title>2022年に注目すべきモバイルアプリ開発トレンド 15選</title><link>https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/</link><pubDate>Mon, 17 Jan 2022 18:11:53 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/</guid><description>出典元：Top 15 Mobile App Development Trends to Watch for in 2022 モバイルアプリ開発業界は、驚異的なスピードで進化しています。このデジタルダーウィン時代に生き残り、繁栄する</description></item><item><title>s-Stat 時系列データで異常値を検知しよう（３）</title><link>https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/</link><pubDate>Mon, 17 Jan 2022 17:46:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/</guid><description>Pandas DataFrameオブジェクト Pandasでcsvをread_csvするとDataFrameオブジェクトとして読み込まれます。 DataFr</description></item><item><title>s-Stat 時系列データで異常値を検知しよう（２）</title><link>https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/</link><pubDate>Mon, 17 Jan 2022 10:51:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/</guid><description>hampel フィルタとは 時系列データの異常値検知で良いのないかなあと探しました。 最近は機械学習で時系列データの異常値検知をやっているものが結構ある感じ</description></item><item><title>overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止</title><link>https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/</link><pubDate>Sat, 15 Jan 2022 12:16:02 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/</guid><description>出典元： Prevent Scroll Chaining With Overscroll Behavior - Ahmad Shadeed position: fixedの要素があるとしましょう。スクロールがある場合は、要素の下部の境界に到達すると、ブラウザはbody要素</description></item><item><title>s-Stat 時系列データで異常値を検知しよう（１）</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/</link><pubDate>Fri, 14 Jan 2022 13:40:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/</guid><description>s-Stat 時系列データで異常値を検知しよう たくさんあるデータの中から関心の高そうな項目を抽出して表示しようというテーマでe-Statデータを取り扱っ</description></item><item><title>現役Webデザイナーが解説する初めてのHTML初心者講座</title><link>https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/</link><pubDate>Thu, 13 Jan 2022 14:14:30 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/</guid><description>はじめに HTMLをこれから始める人、HTMLってプログラムみたいで難しそうと思っている人、HTMLで挫折してしまった人。そういった人たちでも</description></item><item><title>【２０．スクリプトからの戻り値を渡す】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/</guid><description>関数からの戻り値の受け渡し 関数からの戻り値の受け渡し： Bash関数は、数値と文字列値の両方を渡すことができます。関数から文字列値を渡す方法を</description></item><item><title>【２１．ディレクトリを作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/</guid><description>ディレクトリを作成する ディレクトリを作成する： Bashは「mkdir」コマンドを使用して新しいディレクトリを作成します。&amp;lsquo;mak</description></item><item><title>【２２．存在を確認してディレクトリを作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/</guid><description>存在を確認してディレクトリを作成する 存在を確認してディレクトリを作成します。 &amp;lsquo;mkdir&amp;rsquo;コマンドを実行する前に、現</description></item><item><title>【２３．ファイルを読む】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/</guid><description>ファイルを読む ファイルを読む： whileループでreadコマンドを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。&amp;l</description></item><item><title>【２４．ファイルを削除する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/</guid><description>ファイルを削除する ファイルを削除します： &amp;lsquo;rm&amp;rsquo;コマンドは、ファイルまたはディレクトリを削除するためのコマンドです。</description></item><item><title>【２５．ファイルに追加】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/</guid><description>ファイルに追加 ファイルに追加： bashで「&amp;raquo;」演算子を使用すると、既存のファイルに新しいデータを追加できます。&amp;lsquo;ap</description></item><item><title>【２６．ファイルが存在するかどうかを確認】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/</guid><description>ファイルが存在するかどうかを確認 ファイルが存在するかどうかをテストします。 &amp;lsquo;-e&amp;rsquo;または&amp;rsquo;-f&amp;rsqu</description></item><item><title>【２７．mailコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/</guid><description>mailコマンド メールを送る： &amp;rsquo; mail &amp;lsquo;または &amp;rsquo; sendmail &amp;lsquo;コマンドを使用して電子メールを送信できます。これらのコマンドを使用す</description></item><item><title>【２８．dateコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/</guid><description>dateコマンド 現在の日付を解析する： dateコマンドを使用して、現在のシステムの日付と時刻の値を取得することができます。日付と時刻は、「Y</description></item><item><title>【２９．waitコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/</guid><description>waitコマンド waitコマンド： waitコマンドは、実行中のプロセスの完了を待機するLinuxの組み込みコマンドです。 waitコマンドは、</description></item><item><title>【３０．sleepコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/</guid><description>sleepコマンド sleepコマンド： コマンドの実行を特定の期間一時停止する場合は、sleepコマンドを使用できます。遅延量は、 秒（s）、分</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト３</title><link>https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>e-Statで新着一覧を取得しよう</title><link>https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/</link><pubDate>Wed, 12 Jan 2022 13:40:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/</guid><description>e-Statで新着一覧を取得しよう 毎日自動的に処理できるようにしたいので新着一覧を取得する必要があります。 新着一覧は、リスト取得用のAPIで</description></item><item><title>【１０．or 条件を if文で使う】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/</guid><description>or 条件を if文で使う orロジックでifステートメントを使用する： &amp;lsquo;||&amp;lsquo;は、ifステートメントでorロジックを定義す</description></item><item><title>【１１．else if と else】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/</guid><description>else if と else else ifステートメントの使用： else if条件の使用は、bashでは「elif」を定義します。&amp;rsquo;elseif_example.s</description></item><item><title>【１２．case 文】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/</guid><description>case 文 caseステートメントの使用： caseステートメントは、if-elseif-elseステートメントの代わりに使用されます。このステートメ</description></item><item><title>【１３．コマンドラインから引数を取得】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/</guid><description>コマンドラインから引数を取得 コマンドラインから引数を取得： Bashスクリプトは、他のプログラミング言語と同様に、コマンドライン引数から入力を</description></item><item><title>【１４．名前を使用してコマンドラインから引数を取得する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/</guid><description>名前を使用してコマンドラインから引数を取得する コマンドラインから名前付きの引数を取得： 名前付きのコマンドライン引数を読み取る方法を示します。</description></item><item><title>【１５．変数に2つの文字列を組み合わせる】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/</guid><description>変数に2つの文字列を組み合わせる 文字列変数を組み合わせる： 文字列変数はbashで簡単に組み合わせることができます。「string_combi</description></item><item><title>【１６．文字列の部分文字列を取得する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/</guid><description>文字列の部分文字列を取得する 文字列の部分文字列を取得します。 他のプログラミング言語と同様に、bashには文字列データから値を切り取る組み込み</description></item><item><title>【１７．変数に2つの数値を追加します】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/</guid><description>変数に2つの数値を追加します 2つの数字を追加します。 さまざまな方法でbashの算術演算を実行できます。次のスクリプトに、二重角かっこを使用し</description></item><item><title>【１８．関数を作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/</guid><description>関連記事 ざっくりわかるシェルスクリプト１」 ざっくりわかるシェルスクリプト２」 ざっくりわかるシェルスクリプト３」 関数を作成する 関数の作成： 簡単</description></item><item><title>【１９．関数パラメーターを使用する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/</guid><description>関数パラメーターを使用する パラメータを使用して関数を作成します。 Bashは、関数宣言時に関数パラメーターまたは引数を宣言できません。ただし、</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト２</title><link>https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>GASとアナリティクスで、Hugoに人気記事を表示させる</title><link>https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/</link><pubDate>Fri, 07 Jan 2022 11:54:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/</guid><description>簡単にできるHugoで人気の記事を表示する方法の2回目になります。 前回（簡単にできるHugoで人気の記事を表示する方法 #01）ではGAS（G</description></item><item><title>【１．Hello World】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/</guid><description>Hello World はじめてのbashコマンド「echo」 ターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, Worl</description></item><item><title>【２．echo コマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/</guid><description>echo コマンド echoコマンドの使用： さまざまなオプションでechoコマンドを使用できます。 次の例では、いくつかの便利なオプションについて説明し</description></item><item><title>【３．コメント】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/</guid><description>コメント コメントの使用 「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。 &amp;lsquo;comment_exampl</description></item><item><title>【４．マルチラインコメント】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/</guid><description>マルチラインコメント 複数行コメントの使用 bashではさまざまな方法で複数行コメントを使用できます。 次の例に簡単な方法を示します。 &amp;lsquo</description></item><item><title>【５．while ループ】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/</guid><description>while ループ whileループの使用 whileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成し</description></item><item><title>【６．for ループ】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/</guid><description>for ループ forループの使用 基本的なforループ宣言を示します。 &amp;lsquo;for_example.sh&amp;rsquo;という名前のファイルを</description></item><item><title>【７．対話型入力】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/</guid><description>対話型入力 ユーザー入力の取得 &amp;lsquo;read&amp;rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。 &amp;lsq</description></item><item><title>【８．If 文】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/</guid><description>if 文 if文を使う 単数、または複数の条件でif条件を使用できます。 このステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義さ</description></item><item><title>【９．and 条件を if 文で使う】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/</guid><description>and 条件を if 文で使う ANDロジックでifステートメントを使用する： 2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト１」</title><link>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>簡単にできるHugoで人気の記事を表示する方法を詳しく解説</title><link>https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/</link><pubDate>Thu, 06 Jan 2022 16:50:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/</guid><description>Hugoにはさまざまな機能があり、ブログを作るにはもってこいの静的サイトジェネレーターです。 関連記事も取得できて、検索機能もある「至れり尽く</description></item><item><title>シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし</title><link>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</link><pubDate>Thu, 06 Jan 2022 14:21:51 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</guid><description>はじめに ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようと</description></item><item><title>GitHub Pagesを使って無料でSSL付きのサイトを公開する</title><link>https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/</link><pubDate>Tue, 28 Dec 2021 12:07:19 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/</guid><description>デザイナーでもできるはじめてのHugoの2回目になります。 前回（デザイナーでもできるはじめてのHugo #01）はHugoのインストールから公</description></item><item><title>e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？</title><link>https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/</link><pubDate>Sun, 26 Dec 2021 21:54:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/</guid><description>私のe-Statでのデータマイニングの現在の目的は以下の通りです 大量の政府公開データの中から ①面白そうなデータをピックアップする ②データをわ</description></item><item><title>e-Statのデータの見方</title><link>https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/</link><pubDate>Sat, 25 Dec 2021 21:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/</guid><description>今回は前回登場したデータの内容を調べてみましょう。 「統計表情報取得」（リスト取得）APIで取得したデータをもとにe-Statのサイト（htt</description></item><item><title>知識ゼロからのe-Statマイニング</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/</link><pubDate>Fri, 24 Dec 2021 18:12:54 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/</guid><description>知識ゼロからのe-Statマイニング 日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-St</description></item><item><title>【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法</title><link>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</link><pubDate>Fri, 24 Dec 2021 11:55:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</guid><description>やりたいこと sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトして</description></item><item><title>SCSS/CSSを含んだファイルがGitHubActionsでビルドできない</title><link>https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/</link><pubDate>Fri, 24 Dec 2021 09:43:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/</guid><description>scssやsassを使ってcssを記述すると、CSSを構造化できてサイトのメンテナンス性が格段に上がります。 GitHub Pagesで公開しているHug</description></item><item><title>【プログレスバー】Bashでプログレスバーを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</link><pubDate>Thu, 23 Dec 2021 16:10:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</guid><description>プログレスバー ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。 処理が進むにつれて、ジリジリとメーターが右に増えていくあ</description></item><item><title>【unComp】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</link><pubDate>Thu, 23 Dec 2021 13:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</guid><description>できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断</description></item><item><title>【wLu】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</link><pubDate>Thu, 23 Dec 2021 10:27:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</guid><description>必要なもの ネットワーク漢字フィルター nkf ※macの場合、Homebrew が必要になります。 nkf インストールの手順 まず、nkfがインストールされて</description></item><item><title>hugoで[failed to unmarshal YAML]エラーが出た場合の対処法</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-03/</link><pubDate>Wed, 22 Dec 2021 21:22:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-03/</guid><description>エラーの内容 記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について hugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで</description></item><item><title>プライバシーポリシーページを設置する</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-02/</link><pubDate>Wed, 22 Dec 2021 17:40:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-02/</guid><description>github pagesでもgoogle adsenseの審査に通過したい！ ということで色々先人の方達のサイトをみさせていただいたところ google adsenseを</description></item><item><title>デザイナーでもできる初めてのHUGOでのサイト作成 #01</title><link>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/</link><pubDate>Wed, 22 Dec 2021 13:07:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/</guid><description>CMSではWordPressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージではないでしょうか。</description></item><item><title>Hugoでテーマが反映されない（画面が真っ白のまま）</title><link>https://suzukiiichiro.github.io/posts/2021-12-21/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21/</guid><description>Hugoではテーマ（theme）を使って簡単にブログやサイトを作成することが可能です。テーマはGitHubなどにたくさん公開されて簡単に導入</description></item><item><title>Hugoで記事を投稿してみよう！Hugoでの記事投稿の仕方。</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-01/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-01/</guid><description>記事を投稿する hugoで記事を作成して、投稿するためには専用のコマンドを使ってファイルを作成するか、postsなどのディレクトリにmarkd</description></item></channel></rss>