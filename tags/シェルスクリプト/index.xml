<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>シェルスクリプト on NLP</title><link>https://suzukiiichiro.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link><description>Recent content in シェルスクリプト on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 08 Nov 2022 10:40:40 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/tags/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/index.xml" rel="self" type="application/rss+xml"/><item><title>【jot】Bash/シェルスクリプトマニアックコマンドあれこれ３</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-jot-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:40:40 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-jot-suzuki/</guid><description>jotコマンド 連番を生成する 文字列と組み合わせた連番を作成する printf のフォーマットで出力する 連番の範囲を指定して出力する 乱数を出力する jotコマ</description></item><item><title>【rev】bash/シェルスクリプトマニアックコマンドあれこれ２</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-rev-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:37:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-rev-suzuki/</guid><description>rev コマンド すべての行の文字の順序を逆にする 次の例に示すように、すべての行で文字の順序を逆にします。 tac コマンドはファイルの各行を上下反転します</description></item><item><title>【tac】bash/シェルスクリプトマニアックコマンドあれこれ１</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-tac-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:13:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-tac-suzuki/</guid><description>tacコマンド tac コマンドはファイルの内容を逆順に出力するコマンドです。 最後の行が最初に表示されます。 tac という言葉は、cat という言葉の逆です</description></item><item><title>【名著紹介】「ＵＮＩＸという考え方」ご紹介</title><link>https://suzukiiichiro.github.io/posts/2022-11-07-01-theideaofunix-suzuki/</link><pubDate>Mon, 07 Nov 2022 10:30:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-07-01-theideaofunix-suzuki/</guid><description>名著紹介 これほどまでシンプルに「UNIX/Linuxとは」について書かれた本はない。 「エンジニアとしての信念はUNIXである」とはどういうこ</description></item><item><title>【アルゴリズム ソート比較】ざっくりわかるシェルスクリプト２０</title><link>https://suzukiiichiro.github.io/posts/2022-11-02-01-sortcomp-suzuki/</link><pubDate>Wed, 02 Nov 2022 10:37:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-02-01-sortcomp-suzuki/</guid><description>ソート これまで、バブルソート、選択ソート、挿入ソート、マージソート、シェルソート、クイックソートを学習してきました。 【バブルソート】 https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/ 【選択</description></item><item><title>【アルゴリズム クイックソート】ざっくりわかるシェルスクリプト１９</title><link>https://suzukiiichiro.github.io/posts/2022-11-01-01-quicksort-suzuki/</link><pubDate>Tue, 01 Nov 2022 11:35:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-01-01-quicksort-suzuki/</guid><description>クイックソート クイックソートは、誰もが人気ナンバーワンと認めるソートアルゴリズムです。 クイックソート 理由として、クイックソートは多くの場合に</description></item><item><title>【アルゴリズム シェルソート】ざっくりわかるシェルスクリプト１８</title><link>https://suzukiiichiro.github.io/posts/2022-10-27-01-shellsort-suzuki/</link><pubDate>Thu, 27 Oct 2022 14:27:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-27-01-shellsort-suzuki/</guid><description>シェルソート シェルソートは、挿入ソートの欠点を補う形で考案されたソートアルゴリズムです。 シェルソート シェル＝貝殻 というのは「がせ情報」で、じ</description></item><item><title>【アルゴリズム マージソート】ざっくりわかるシェルスクリプト１７</title><link>https://suzukiiichiro.github.io/posts/2022-10-19-01-mergesort-suzuki/</link><pubDate>Wed, 19 Oct 2022 15:49:34 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-19-01-mergesort-suzuki/</guid><description>マージソート マージソートは、これまで紹介した「バブルソート」「挿入ソート」「選択ソート」と比べると、少なくともスピードの点ではずっと高速で効</description></item><item><title>【アルゴリズム 連結リスト】ざっくりわかるシェルスクリプト１６</title><link>https://suzukiiichiro.github.io/posts/2022-10-18-01-list-suzuki/</link><pubDate>Tue, 18 Oct 2022 11:31:36 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-18-01-list-suzuki/</guid><description>配列とリスト これまで配列について説明してきました。 配列で再帰を組む方法を前回説明しました。 配列は 非順序配列は探索が遅い 順序配列は挿入が遅い い</description></item><item><title>【アルゴリズム 再帰】ざっくりわかるシェルスクリプト１５</title><link>https://suzukiiichiro.github.io/posts/2022-10-07-01-algorithm-recursion-suzuki/</link><pubDate>Fri, 07 Oct 2022 11:19:00 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-07-01-algorithm-recursion-suzuki/</guid><description>再帰 実行している関数自身の関数の処理内で、自分自身である関数を呼び出し実行することです。 再帰は必ず基底条件を明示する必要があります。 （基底条</description></item><item><title>【アルゴリズム キュー】ざっくりわかるシェルスクリプト１４</title><link>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-queue-suzuki/</link><pubDate>Thu, 06 Oct 2022 13:43:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-queue-suzuki/</guid><description>キュー キューはデータ構造の一つです。 キューは待ち行列とも呼ばれ、その名の通り行列に並ぶ事を考えるとイメージしやすいです。 行列においては、先に</description></item><item><title>【アルゴリズム スタック】ざっくりわかるシェルスクリプト１３</title><link>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-stack-suzuki/</link><pubDate>Thu, 06 Oct 2022 11:47:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-stack-suzuki/</guid><description>スタック スタックはデータ構造の一つです。 スタックの仕組みは、ものを縦に積み上げる事を考えるとイメージしやすいです。 積み上げられた山からものを</description></item><item><title>【アルゴリズム 挿入ソート】ざっくりわかるシェルスクリプト１２</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-insertionsort-suzuki/</link><pubDate>Wed, 05 Oct 2022 16:36:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-insertionsort-suzuki/</guid><description>挿入ソート 挿入ソートとは、未整列の要素を一つずつつまみ上げて、整列済みの列の適切な位置に挿入していくアルゴリズムです。 挿入ソートは、選択ソー</description></item><item><title>【アルゴリズム 選択ソート】ざっくりわかるシェルスクリプト１１</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-selectionsort-suzuki/</link><pubDate>Wed, 05 Oct 2022 14:49:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-selectionsort-suzuki/</guid><description>選択ソート 選択ソートは、未整列の配列要素の中から最小を選択し、配列先頭の整列済み列の末尾に追加していく並べ替えアルゴリズムです。 バブルソート</description></item><item><title>【アルゴリズム バブルソート】ざっくりわかるシェルスクリプト１０</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/</link><pubDate>Wed, 05 Oct 2022 11:06:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/</guid><description>バブルソート バブルソートは単純選択方法と同様、実現は簡単です。 しかし、比較回数と交換回数は最悪の場合、O(N^2)です。 ソート中に選ばれた最</description></item><item><title>【アルゴリズム ビッグオー】ざっくりわかるシェルスクリプト９</title><link>https://suzukiiichiro.github.io/posts/2022-10-04-01-algorithm-bigo-suzuki/</link><pubDate>Tue, 04 Oct 2022 13:47:09 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-04-01-algorithm-bigo-suzuki/</guid><description>Bash/シェルスクリプトで学ぶビッグオー ビッグオーとは？ オーダー記法です。 オーダー記法とは、「計算量の割合」です。 例）Aさんの年齢はｘ歳、</description></item><item><title>【アルゴリズム ２次元配列編】ざっくりわかるシェルスクリプト８</title><link>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-eval-array-suzuki/</link><pubDate>Mon, 03 Oct 2022 15:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-eval-array-suzuki/</guid><description>はじめに さて。 前回の章では、アルゴリズムを勉強していくためのもととなるテンプレートとして、配列に値を入れる仕組みと、配列の中身を表示する仕組</description></item><item><title>【アルゴリズム 配列準備編】ざっくりわかるシェルスクリプト７</title><link>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-array-suzuki/</link><pubDate>Mon, 03 Oct 2022 11:36:10 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-array-suzuki/</guid><description>Bashスクリプトで配列の準備 この章では、Bashスクリプトでいくつかのソートアルゴリズムを実行するための、元となるテンプレートを配列で作成</description></item><item><title>【アルゴリズム 配列編】ざっくりわかるシェルスクリプト６</title><link>https://suzukiiichiro.github.io/posts/2022-09-27-01-array-suzuki/</link><pubDate>Tue, 27 Sep 2022 10:31:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-27-01-array-suzuki/</guid><description>Bashスクリプト（シェルスクリプト） は５０年以上も前からUNIXプログラミングのエッセンスとして君臨し、現在もLinuxのコマンドの殆どを</description></item><item><title>【TIPS】ざっくりわかるシェルスクリプト</title><link>https://suzukiiichiro.github.io/posts/2022-09-26-01-tips-suzuki/</link><pubDate>Mon, 26 Sep 2022 14:19:38 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-26-01-tips-suzuki/</guid><description>ここではシェルスクリプトのBashについてのTIPSを紹介します。C言語やJavaといった高級言語にあってbashにはない部分について補完で</description></item><item><title>（２６）【tee】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-28-01-tee-suzuki/</link><pubDate>Thu, 28 Jul 2022 10:24:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-28-01-tee-suzuki/</guid><description>teeコマンド ファイルへのリダイレクトとパイプを同時に行う 出力するファイルは都度新規作成ではなく追記する teeコマンド概要 teeコマンドは、</description></item><item><title>（２５）【uniq】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-27-01-uniq-suzuki/</link><pubDate>Wed, 27 Jul 2022 15:06:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-27-01-uniq-suzuki/</guid><description>uniqコマンド 重複している行を削除する 大文字／小文字を区別しないで重複行を削除する 重複している行をカウントする uniqコマンド概要 uniq</description></item><item><title>（２５）【rev】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-rev-suzuki/</link><pubDate>Tue, 26 Jul 2022 11:11:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-rev-suzuki/</guid><description>revコマンド ファイルの各行を反転させる キーボードから入力した内容を反転させる revコマンド概要 reverseの語源を持つ「rev」は、ファ</description></item><item><title>（２４）【tac】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-tac-suzuki/</link><pubDate>Tue, 26 Jul 2022 11:10:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-tac-suzuki/</guid><description>tacコマンド ファイルを最終行から逆順に出力する tacコマンド概要 catコマンドを逆から読んだ「tac」はファイルの最終行から、行単位に逆順</description></item><item><title>（２３）【seq】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-seq-suzuki/</link><pubDate>Tue, 26 Jul 2022 10:40:19 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-seq-suzuki/</guid><description>seqコマンド 連続番号を出力する 開始の数と間隔を指定する 数字を逆順で出力する 書式を指定して出力する seqコマンド概要 sequenceの語源を</description></item><item><title>（２２）【jot】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-25-01-jot-suzuki/</link><pubDate>Mon, 25 Jul 2022 14:36:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-25-01-jot-suzuki/</guid><description>jotコマンド 連番を生成する 文字列と組み合わせた連番を作成する printf のフォーマットで出力する 連番の範囲を指定して出力する 乱数を出力する jotコマ</description></item><item><title>（２１）【sort】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-25-01-sort-suzuki/</link><pubDate>Mon, 25 Jul 2022 12:39:33 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-25-01-sort-suzuki/</guid><description>sortコマンド テキストファイルを並べ替える 数値の大小で並べ替える フィールドを指定して並べ替える CSVデータを並べ替える sortコマンド概要</description></item><item><title>（２０）【wc】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-20-01-wc-suzuki/</link><pubDate>Wed, 20 Jul 2022 11:46:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-20-01-wc-suzuki/</guid><description>wcコマンド 行数と単語数とバイト数を数える 文字数を数える 行数だけを表示する wcコマンド概要 「wc」はテキストファイルの行数や単語数（word</description></item><item><title>（１９）【tar】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-20-01-tar-suzuki/</link><pubDate>Wed, 20 Jul 2022 11:34:37 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-20-01-tar-suzuki/</guid><description>trコマンド アーカイブファイルを作成する アーカイブファイルを展開する trコマンド概要 「tar」は、複数のファイルを1つにまとめた“アーカイブ</description></item><item><title>（１８）【sed】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-sed-suzuki/</link><pubDate>Thu, 14 Jul 2022 15:00:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-sed-suzuki/</guid><description>sedコマンド概要 「sed」は「Stream EDitor」の略で、「sed スクリプトコマンド ファイル名」で、指定したファイルをコマンドに従っ</description></item><item><title>（１７）【expand】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-expand-suzuki/</link><pubDate>Thu, 14 Jul 2022 13:19:26 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-expand-suzuki/</guid><description>expandコマンド タブを空白に変換する（expandコマンド） タブの幅を指定する expandコマンド概要 「expand」はタブを空白に変換</description></item><item><title>（１６）【cut】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-cut-suzuki/</link><pubDate>Thu, 14 Jul 2022 11:19:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-cut-suzuki/</guid><description>cutコマンド 文字数を指定して切り出す フィールドを指定して切り出す 出力の区切り文字を変更する cutコマンド概要 「cut」は、ファイルを読み込</description></item><item><title>（１５）【du】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-13-01-du-suzuki/</link><pubDate>Wed, 13 Jul 2022 13:28:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-13-01-du-suzuki/</guid><description>duコマンド ディレクトリごとのディスク使用量を表示する ディスク使用量の合計だけを表示する カレントディレクトリ直下のファイル、ディレクトリごと</description></item><item><title>（１４）【df】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-13-01-df-suzuki/</link><pubDate>Wed, 13 Jul 2022 13:01:11 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-13-01-df-suzuki/</guid><description>dfコマンド ディスクの空き容量を調べる dfコマンド概要 「df」は、ディスクの空き領域（freeスペース）のサイズを集計して表示するコマンドで</description></item><item><title>（１３）【tr】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-08-01-tr-suzuki/</link><pubDate>Fri, 08 Jul 2022 11:17:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-08-01-tr-suzuki/</guid><description>trコマンド 文字を置換する 大文字／小文字を変換する 改行を除去する 固定長のデータをタブ区切りに変換する／カンマ区切りに変換する trコマンド概要</description></item><item><title>（１２）【nkf】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-08-01-nkf-suzuki/</link><pubDate>Fri, 08 Jul 2022 10:22:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-08-01-nkf-suzuki/</guid><description>nkfコマンド 文字コードと改行コードを変換する 文字コードを判定する 文字コードを変換してファイルを書き換える CentOS 7にnkfをインストールするには</description></item><item><title>（１１）【getopts】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-07-01-getopts-suzuki/</link><pubDate>Thu, 07 Jul 2022 11:27:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-07-01-getopts-suzuki/</guid><description>getoptsコマンド オプションを解析する エラーメッセージを表示しない 引数付きのオプションを使用する getoptsコマンド概要 「getopt</description></item><item><title>（１０）【chmod】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-06-01-chmod-suzuki/</link><pubDate>Wed, 06 Jul 2022 10:12:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-06-01-chmod-suzuki/</guid><description>chmodコマンド パーミッションを表すアルファベットと数値の意味 パーミッションを変更する パーミッションの変更内容を確認するには？ chmodコ</description></item><item><title>（９）【file】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-05-01-file-suzuki/</link><pubDate>Tue, 05 Jul 2022 10:22:08 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-05-01-file-suzuki/</guid><description>fileコマンド ファイルの形式を表示する ファイルのリストから調べる シンボリックリンクの参照先を調べる 圧縮されているファイルを調べる fileコ</description></item><item><title>（８）【grep】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-04-01-grep-suzuki/</link><pubDate>Mon, 04 Jul 2022 13:21:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-04-01-grep-suzuki/</guid><description>grepコマンド コマンドの実行結果から必要な箇所だけを抽出する 単語単位で検索する 前後の行も表示する 行番号付きで表示する 複数の文字列を指定して</description></item><item><title>（７）【kill】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/</link><pubDate>Mon, 14 Feb 2022 11:39:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/</guid><description>killコマンド killコマンドでプロセスIDを指定してプロセスを終了させる killallコマンドで名前を指定してプロセスを終了させる kil</description></item><item><title>（6）【less】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/</link><pubDate>Sun, 13 Feb 2022 16:35:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/</guid><description>lessコマンド テキストを1画面ずつ表示する キー操作のヘルプを表示する 長い行を折り返さずに表示する ファイルの末尾まで表示したらすぐに終了する</description></item><item><title>（5）【more】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/</link><pubDate>Sun, 13 Feb 2022 16:35:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/</guid><description>moreコマンド 長いメッセージやテキストファイルを1画面ずつ表示する テキストを1画面ずつ止めながら表示する 実行結果を止めながら表示したいとき</description></item><item><title>（４）【tail】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/</link><pubDate>Fri, 11 Feb 2022 14:31:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/</guid><description>tailコマンド tailコマンドでファイルの末尾部分だけを表示する ログファイルを監視する ファイルの特定の範囲の行を取り出す（headとtai</description></item><item><title>（３）【head】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/</link><pubDate>Thu, 10 Feb 2022 10:23:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/</guid><description>headコマンド headコマンドでファイルの先頭部分だけを表示する パイプを使って実行結果の最初の部分だけを確認する tailコマンドでファイル</description></item><item><title>（２）【cat】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/</link><pubDate>Wed, 09 Feb 2022 12:59:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/</guid><description>catコマンド ファイルの内容を表示する ファイルの内容を行番号付きで表示する 複数ファイルを連結して1つのファイルにする 概要 「cat」は、「co</description></item><item><title>（１）【echo】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/</link><pubDate>Wed, 09 Feb 2022 11:32:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/</guid><description>echoコマンド メッセージや環境変数を表示します。 概要 「echo」はメッセージなどを表示するコマンドです。 $echo メッセージ でメッセージを表示しま</description></item><item><title>【grep/sed/awkも】ざっくりわかるシェルスクリプト５」</title><link>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</link><pubDate>Wed, 02 Feb 2022 15:55:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</guid><description>この記事はシェルスクリプトを４５分でざっくりマスターできるチュートリアルです。bashスクリプト「Hello, World」から、ifステート</description></item><item><title>【grep特集】ざっくりわかるシェルスクリプト４</title><link>https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/</link><pubDate>Mon, 24 Jan 2022 10:53:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/</guid><description>はじめに grep（グレップ）コマンド。UNIX/Linuxにおいてこれほど歴史あり、強力なコマンドはありません。そして多くのユーザーがこのコ</description></item><item><title>【２０．スクリプトからの戻り値を渡す】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/</guid><description>関数からの戻り値の受け渡し 関数からの戻り値の受け渡し： Bash関数は、数値と文字列値の両方を渡すことができます。関数から文字列値を渡す方法を</description></item><item><title>【２１．ディレクトリを作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/</guid><description>ディレクトリを作成する ディレクトリを作成する： Bashは「mkdir」コマンドを使用して新しいディレクトリを作成します。&amp;lsquo;mak</description></item><item><title>【２２．存在を確認してディレクトリを作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/</guid><description>存在を確認してディレクトリを作成する 存在を確認してディレクトリを作成します。 &amp;lsquo;mkdir&amp;rsquo;コマンドを実行する前に、現</description></item><item><title>【２３．ファイルを読む】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/</guid><description>ファイルを読む ファイルを読む： whileループでreadコマンドを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。&amp;l</description></item><item><title>【２４．ファイルを削除する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/</guid><description>ファイルを削除する ファイルを削除します： &amp;lsquo;rm&amp;rsquo;コマンドは、ファイルまたはディレクトリを削除するためのコマンドです。</description></item><item><title>【２５．ファイルに追加】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/</guid><description>ファイルに追加 ファイルに追加： bashで「&amp;raquo;」演算子を使用すると、既存のファイルに新しいデータを追加できます。&amp;lsquo;ap</description></item><item><title>【２６．ファイルが存在するかどうかを確認】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/</guid><description>ファイルが存在するかどうかを確認 ファイルが存在するかどうかをテストします。 &amp;lsquo;-e&amp;rsquo;または&amp;rsquo;-f&amp;rsqu</description></item><item><title>【２７．mailコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/</guid><description>mailコマンド メールを送る： &amp;rsquo; mail &amp;lsquo;または &amp;rsquo; sendmail &amp;lsquo;コマンドを使用して電子メールを送信できます。これらのコマンドを使用す</description></item><item><title>【２８．dateコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/</guid><description>dateコマンド 現在の日付を解析する： dateコマンドを使用して、現在のシステムの日付と時刻の値を取得することができます。日付と時刻は、「Y</description></item><item><title>【２９．waitコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/</guid><description>waitコマンド waitコマンド： waitコマンドは、実行中のプロセスの完了を待機するLinuxの組み込みコマンドです。 waitコマンドは、</description></item><item><title>【３０．sleepコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/</guid><description>sleepコマンド sleepコマンド： コマンドの実行を特定の期間一時停止する場合は、sleepコマンドを使用できます。遅延量は、 秒（s）、分</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト３</title><link>https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>【１０．or 条件を if文で使う】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/</guid><description>or 条件を if文で使う orロジックでifステートメントを使用する： &amp;lsquo;||&amp;lsquo;は、ifステートメントでorロジックを定義す</description></item><item><title>【１１．else if と else】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/</guid><description>else if と else else ifステートメントの使用： else if条件の使用は、bashでは「elif」を定義します。&amp;rsquo;elseif_example.s</description></item><item><title>【１２．case 文】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/</guid><description>case 文 caseステートメントの使用： caseステートメントは、if-elseif-elseステートメントの代わりに使用されます。このステートメ</description></item><item><title>【１３．コマンドラインから引数を取得】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/</guid><description>コマンドラインから引数を取得 コマンドラインから引数を取得： Bashスクリプトは、他のプログラミング言語と同様に、コマンドライン引数から入力を</description></item><item><title>【１４．名前を使用してコマンドラインから引数を取得する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/</guid><description>名前を使用してコマンドラインから引数を取得する コマンドラインから名前付きの引数を取得： 名前付きのコマンドライン引数を読み取る方法を示します。</description></item><item><title>【１５．変数に2つの文字列を組み合わせる】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/</guid><description>変数に2つの文字列を組み合わせる 文字列変数を組み合わせる： 文字列変数はbashで簡単に組み合わせることができます。「string_combi</description></item><item><title>【１６．文字列の部分文字列を取得する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/</guid><description>文字列の部分文字列を取得する 文字列の部分文字列を取得します。 他のプログラミング言語と同様に、bashには文字列データから値を切り取る組み込み</description></item><item><title>【１７．変数に2つの数値を追加します】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/</guid><description>変数に2つの数値を追加します 2つの数字を追加します。 さまざまな方法でbashの算術演算を実行できます。次のスクリプトに、二重角かっこを使用し</description></item><item><title>【１８．関数を作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/</guid><description>関連記事 ざっくりわかるシェルスクリプト１」 ざっくりわかるシェルスクリプト２」 ざっくりわかるシェルスクリプト３」 関数を作成する 関数の作成： 簡単</description></item><item><title>【１９．関数パラメーターを使用する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/</guid><description>関数パラメーターを使用する パラメータを使用して関数を作成します。 Bashは、関数宣言時に関数パラメーターまたは引数を宣言できません。ただし、</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト２</title><link>https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>【１．Hello World】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/</guid><description>Hello World はじめてのbashコマンド「echo」 ターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, Worl</description></item><item><title>【２．echo コマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/</guid><description>echo コマンド echoコマンドの使用： さまざまなオプションでechoコマンドを使用できます。 次の例では、いくつかの便利なオプションについて説明し</description></item><item><title>【３．コメント】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/</guid><description>コメント コメントの使用 「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。 &amp;lsquo;comment_exampl</description></item><item><title>【４．マルチラインコメント】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/</guid><description>マルチラインコメント 複数行コメントの使用 bashではさまざまな方法で複数行コメントを使用できます。 次の例に簡単な方法を示します。 &amp;lsquo</description></item><item><title>【５．while ループ】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/</guid><description>while ループ whileループの使用 whileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成し</description></item><item><title>【６．for ループ】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/</guid><description>for ループ forループの使用 基本的なforループ宣言を示します。 &amp;lsquo;for_example.sh&amp;rsquo;という名前のファイルを</description></item><item><title>【７．対話型入力】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/</guid><description>対話型入力 ユーザー入力の取得 &amp;lsquo;read&amp;rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。 &amp;lsq</description></item><item><title>【８．If 文】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/</guid><description>if 文 if文を使う 単数、または複数の条件でif条件を使用できます。 このステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義さ</description></item><item><title>【９．and 条件を if 文で使う】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/</guid><description>and 条件を if 文で使う ANDロジックでifステートメントを使用する： 2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト１」</title><link>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし</title><link>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</link><pubDate>Thu, 06 Jan 2022 14:21:51 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</guid><description>はじめに ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようと</description></item><item><title>【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法</title><link>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</link><pubDate>Fri, 24 Dec 2021 11:55:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</guid><description>やりたいこと sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトして</description></item><item><title>【プログレスバー】Bashでプログレスバーを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</link><pubDate>Thu, 23 Dec 2021 16:10:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</guid><description>プログレスバー ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。 処理が進むにつれて、ジリジリとメーターが右に増えていくあ</description></item><item><title>【unComp】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</link><pubDate>Thu, 23 Dec 2021 13:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</guid><description>できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断</description></item><item><title>【unComp】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</link><pubDate>Thu, 23 Dec 2021 13:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</guid><description>できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断</description></item><item><title>【wLu】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</link><pubDate>Thu, 23 Dec 2021 10:27:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</guid><description>必要なもの ネットワーク漢字フィルター nkf ※macの場合、Homebrew が必要になります。 nkf インストールの手順 まず、nkfがインストールされて</description></item></channel></rss>