<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>アルゴリズムとデータ構造 on NLP</title><link>https://suzukiiichiro.github.io/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%A8%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0/</link><description>Recent content in アルゴリズムとデータ構造 on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 02 Nov 2022 10:37:46 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%A8%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>【アルゴリズム ソート比較】ざっくりわかるシェルスクリプト２０</title><link>https://suzukiiichiro.github.io/posts/2022-11-02-01-sortcomp-suzuki/</link><pubDate>Wed, 02 Nov 2022 10:37:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-02-01-sortcomp-suzuki/</guid><description>ソート これまで、バブルソート、選択ソート、挿入ソート、マージソート、シェルソート、クイックソートを学習してきました。 【バブルソート】 https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/ 【選択</description></item><item><title>【アルゴリズム クイックソート】ざっくりわかるシェルスクリプト１９</title><link>https://suzukiiichiro.github.io/posts/2022-11-01-01-quicksort-suzuki/</link><pubDate>Tue, 01 Nov 2022 11:35:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-01-01-quicksort-suzuki/</guid><description>クイックソート クイックソートは、誰もが人気ナンバーワンと認めるソートアルゴリズムです。 クイックソート 理由として、クイックソートは多くの場合に</description></item><item><title>【アルゴリズム シェルソート】ざっくりわかるシェルスクリプト１８</title><link>https://suzukiiichiro.github.io/posts/2022-10-27-01-shellsort-suzuki/</link><pubDate>Thu, 27 Oct 2022 14:27:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-27-01-shellsort-suzuki/</guid><description>シェルソート シェルソートは、挿入ソートの欠点を補う形で考案されたソートアルゴリズムです。 シェルソート シェル＝貝殻 というのは「がせ情報」で、じ</description></item><item><title>【アルゴリズム マージソート】ざっくりわかるシェルスクリプト１７</title><link>https://suzukiiichiro.github.io/posts/2022-10-19-01-mergesort-suzuki/</link><pubDate>Wed, 19 Oct 2022 15:49:34 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-19-01-mergesort-suzuki/</guid><description>マージソート マージソートは、これまで紹介した「バブルソート」「挿入ソート」「選択ソート」と比べると、少なくともスピードの点ではずっと高速で効</description></item><item><title>【アルゴリズム 連結リスト】ざっくりわかるシェルスクリプト１６</title><link>https://suzukiiichiro.github.io/posts/2022-10-18-01-list-suzuki/</link><pubDate>Tue, 18 Oct 2022 11:31:36 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-18-01-list-suzuki/</guid><description>配列とリスト これまで配列について説明してきました。 配列で再帰を組む方法を前回説明しました。 配列は 非順序配列は探索が遅い 順序配列は挿入が遅い い</description></item><item><title>【アルゴリズム 再帰】ざっくりわかるシェルスクリプト１５</title><link>https://suzukiiichiro.github.io/posts/2022-10-07-01-algorithm-recursion-suzuki/</link><pubDate>Fri, 07 Oct 2022 11:19:00 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-07-01-algorithm-recursion-suzuki/</guid><description>再帰 実行している関数自身の関数の処理内で、自分自身である関数を呼び出し実行することです。 再帰は必ず基底条件を明示する必要があります。 （基底条</description></item><item><title>【アルゴリズム キュー】ざっくりわかるシェルスクリプト１４</title><link>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-queue-suzuki/</link><pubDate>Thu, 06 Oct 2022 13:43:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-queue-suzuki/</guid><description>キュー キューはデータ構造の一つです。 キューは待ち行列とも呼ばれ、その名の通り行列に並ぶ事を考えるとイメージしやすいです。 行列においては、先に</description></item><item><title>【アルゴリズム スタック】ざっくりわかるシェルスクリプト１３</title><link>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-stack-suzuki/</link><pubDate>Thu, 06 Oct 2022 11:47:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-stack-suzuki/</guid><description>スタック スタックはデータ構造の一つです。 スタックの仕組みは、ものを縦に積み上げる事を考えるとイメージしやすいです。 積み上げられた山からものを</description></item><item><title>【アルゴリズム 挿入ソート】ざっくりわかるシェルスクリプト１２</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-insertionsort-suzuki/</link><pubDate>Wed, 05 Oct 2022 16:36:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-insertionsort-suzuki/</guid><description>挿入ソート 挿入ソートとは、未整列の要素を一つずつつまみ上げて、整列済みの列の適切な位置に挿入していくアルゴリズムです。 挿入ソートは、選択ソー</description></item><item><title>【アルゴリズム 選択ソート】ざっくりわかるシェルスクリプト１１</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-selectionsort-suzuki/</link><pubDate>Wed, 05 Oct 2022 14:49:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-selectionsort-suzuki/</guid><description>選択ソート 選択ソートは、未整列の配列要素の中から最小を選択し、配列先頭の整列済み列の末尾に追加していく並べ替えアルゴリズムです。 バブルソート</description></item><item><title>【アルゴリズム バブルソート】ざっくりわかるシェルスクリプト１０</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/</link><pubDate>Wed, 05 Oct 2022 11:06:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/</guid><description>バブルソート バブルソートは単純選択方法と同様、実現は簡単です。 しかし、比較回数と交換回数は最悪の場合、O(N^2)です。 ソート中に選ばれた最</description></item><item><title>【アルゴリズム ビッグオー】ざっくりわかるシェルスクリプト９</title><link>https://suzukiiichiro.github.io/posts/2022-10-04-01-algorithm-bigo-suzuki/</link><pubDate>Tue, 04 Oct 2022 13:47:09 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-04-01-algorithm-bigo-suzuki/</guid><description>Bash/シェルスクリプトで学ぶビッグオー ビッグオーとは？ オーダー記法です。 オーダー記法とは、「計算量の割合」です。 例）Aさんの年齢はｘ歳、</description></item><item><title>【アルゴリズム ２次元配列編】ざっくりわかるシェルスクリプト８</title><link>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-eval-array-suzuki/</link><pubDate>Mon, 03 Oct 2022 15:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-eval-array-suzuki/</guid><description>はじめに さて。 前回の章では、アルゴリズムを勉強していくためのもととなるテンプレートとして、配列に値を入れる仕組みと、配列の中身を表示する仕組</description></item><item><title>【アルゴリズム 配列準備編】ざっくりわかるシェルスクリプト７</title><link>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-array-suzuki/</link><pubDate>Mon, 03 Oct 2022 11:36:10 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-array-suzuki/</guid><description>Bashスクリプトで配列の準備 この章では、Bashスクリプトでいくつかのソートアルゴリズムを実行するための、元となるテンプレートを配列で作成</description></item><item><title>【アルゴリズム 配列編】ざっくりわかるシェルスクリプト６</title><link>https://suzukiiichiro.github.io/posts/2022-09-27-01-array-suzuki/</link><pubDate>Tue, 27 Sep 2022 10:31:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-27-01-array-suzuki/</guid><description>Bashスクリプト（シェルスクリプト） は５０年以上も前からUNIXプログラミングのエッセンスとして君臨し、現在もLinuxのコマンドの殆どを</description></item></channel></rss>