<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NLP</title><link>https://suzukiiichiro.github.io/</link><description>Recent content on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 07 Feb 2022 16:55:55 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>pythonでNQueen（エイトクイーン）バックトラック（１）</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/</link><pubDate>Mon, 07 Feb 2022 16:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/chess.jpg" alt="Featured image of post pythonでNQueen（エイトクイーン）バックトラック（１）" />&lt;h2 id="バックトラック">バックトラック&lt;/h2>
&lt;p>今回はバックトラックを説明していきたいと思います。 &lt;br>
今回のバックトラックのロジックは前回の配置フラグの拡張版です。&lt;br>
配置フラグは上下の利き筋までしかチェックしていませんでしたが今回のバックトラックは左右斜めの対角線上の利き筋もチェックします。&lt;br>
上下の配置フラグの他に右斜め、左斜めの配置フラグを作ってチェックします。&lt;br>
ブルートフォース、配置フラグでは解の候補を出すに止まりましたが、今回で左右、上下、対角線上とクイーンのすべての利き筋をチェックすることができるますので、プログラム独力で解を出せるようになります。&lt;br>
出力は解の数となっております。&lt;/p>
&lt;p>ブルートフォース、配置フラグ、バックトラックの関係は以下の通りです。&lt;br>
制約が1個、2個、3個と追加されていくような感じです。&lt;/p>
&lt;p>・ブルートフォース&lt;br>
制約1個目 1行に1個のクイーンを置く 左右の利き筋をみる&lt;br>
・配置フラグ&lt;br>
制約1個目 1行に1個のクイーンを置く 左右の利き筋をみる&lt;br>
制約2個目 配置フラグで同じ列にクイーンを置けないようにする 上下の利き筋をみる&lt;br>
・バックトラック&lt;br>
制約1個目 1行に1個のクイーンを置く 左右の利き筋をみる&lt;br>
制約2個目 配置フラグで同じ列にクイーンを置けないようにする 上下の利き筋をみる&lt;br>
制約3個目 配置フラグを拡張し左右斜めにクイーンを置けないようにする 対角線上の利き筋をみる&lt;/p>
&lt;p>プログラムソースは以下のURLにあります。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py&lt;/a>&lt;/p>
&lt;h2 id="グローバル変数">グローバル変数&lt;/h2>
&lt;p>432,433行目でTOTAL,UNIQUEというグローバル変数が追加されています。&lt;br>
ブルートフォース、配置フラグは解の候補を列挙するにとどまっていましたが、今回からはプログラム内で正解数を出力するようになります。&lt;br>
TOTALは正解数の総数です。&lt;br>
UNIQUEですが、NQueenの解は左右ミラー反転、90度、180度、270度と左右反転していくと同じ形のものが結構あります。左右反転して同じ形のものを同一解としてカウントした数がUNIQUEとなります。&lt;/p>
&lt;p>436,437行目にFB,FC配列が追加されています。&lt;br>
FBが左斜め、FCが右斜めの対角線の利き筋を配置フラグでチェックします。&lt;/p>
&lt;h2 id="対角線上の配置フラグ">対角線上の配置フラグ&lt;/h2>
&lt;p>対角線の利き筋ですが１次元配列でチェックすることができます。&lt;br>
図で見てみましょう。&lt;/p>
&lt;p>上下の利き筋について簡単です。&lt;br>
例えば、1行目の右から2列目にクイーンを置いた場合は2、3、4行目の2列目にクイーンを置けなくなります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 242px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d1.png" data-size="330x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d1.png"
width="330"
height="326"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>2、3、4行目の右から2列目にクイーンを置いた場合はその他の行の2列目にクイーンを置けなくなります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 242px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d2.png" data-size="326x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d2.png"
width="326"
height="322"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d3.png" data-size="330x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d3.png"
width="330"
height="330"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d4.png" data-size="322x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d4.png"
width="322"
height="324"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ですのでフラグはクイーンを置いた列番号に立てれば良いことになります。&lt;br>
2列目だったらFA[1]=1です。&lt;/p>
&lt;p>対角線の利き筋についても計算が必要ではあるのですが法則性があり1次元配列で表現することが可能です。&lt;/p>
&lt;p>FB 左斜め対角線の利き筋について見てみましょう&lt;/p>
&lt;p>左斜め対角線のフラグの位置の計算法則は&lt;br>
行数-クイーンを置いた列数+(サイズ-1)&lt;br>
row-i+(size-1)&lt;br>
で1次元配列で表現できます。&lt;/p>
&lt;p>図で見てみましょう。&lt;br>
1行目の1列目にクイーンを置いた場合&lt;br>
左斜め対角線の利き筋は以下の通りになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,0]
2行目2列目 [1,1]
3行目3列目 [2,2]
4行目4列目 [3,3]
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/l1.png" data-size="326x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/l1.png"
width="326"
height="326"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row-i+(size-1) で計算してみましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,0] 0-0+(4-1)=3
2行目2列目 [1,1] 1-1+(4-1)=3
3行目3列目 [2,2] 2-2+(4-1)=3
4行目4列目 [3,3] 3-3+(4-1)=3
&lt;/code>&lt;/pre>&lt;p>FB[4] にフラグをたてれば左対角線の利き筋をチェックすることができます。&lt;/p>
&lt;p>2行目3列目にクイーンを置いた場合はどうなるでしょう&lt;/p>
&lt;p>左斜め対角線の利き筋は以下の通りになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目2列目 [0,1]
2行目3列目 [1,2]
3行目4列目 [2,3]
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/l5.png" data-size="330x332">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/l5.png"
width="330"
height="332"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row-i+(size-1) で計算してみましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目2列目 [0,1] 0-1+(4-1)=2
2行目3列目 [1,2] 1-2+(4-1)=2
3行目4列目 [2,3] 2-3+(4-1)=2
&lt;/code>&lt;/pre>&lt;p>FB[3] にフラグをたてれば左対角線の利き筋をチェックすることができます。&lt;/p>
&lt;p>FC 右斜め対角線の利き筋について見てみましょう&lt;/p>
&lt;p>右斜め対角線のフラグの位置の計算法則は&lt;br>
行数+クイーンを置いた列数&lt;br>
row+i&lt;br>
で1次元配列で表現できます。&lt;/p>
&lt;p>図で見てみましょう。&lt;br>
1行目の4列目にクイーンを置いた場合&lt;br>
右斜め対角線の利き筋は以下の通りになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,3]
2行目2列目 [1,2]
3行目3列目 [2,1]
4行目4列目 [3,0]
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 102;
flex-basis: 245px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/r1.png" data-size="330x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/r1.png"
width="330"
height="322"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row+iで計算してみましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,3] 0+3=3
2行目2列目 [1,2] 1+2=3
3行目3列目 [2,1] 2+1=3
4行目4列目 [3,0] 3+0=3
&lt;/code>&lt;/pre>&lt;p>FC[4] にフラグをたてれば右対角線の利き筋をチェックすることができます。&lt;/p>
&lt;p>2行目の2列目にクイーンを置いた場合&lt;br>
右斜め対角線の利き筋は以下の通りになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,2]
2行目2列目 [1,1]
3行目3列目 [2,0]
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/r5.png" data-size="334x336">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/r5.png"
width="334"
height="336"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row+iで計算してみましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,2] 0+2=2
2行目2列目 [1,1] 1+1=2
3行目3列目 [2,0] 2+0=2
&lt;/code>&lt;/pre>&lt;p>FC[3] にフラグをたてれば右対角線の利き筋をチェックすることができます。&lt;/p>
&lt;p>長くなりましたので今回はグローバル変数の説明だけで終わります。&lt;br>
次回は、新しく追加されたmainメソッドからプログラムの概要を説明したいと思います。&lt;/p></description></item><item><title>SEO対策のためにGitとHugoで連携したXMLの更新日（lastmod）を正しく表示する方法</title><link>https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/</link><pubDate>Mon, 07 Feb 2022 11:28:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/catch.jpg" alt="Featured image of post SEO対策のためにGitとHugoで連携したXMLの更新日（lastmod）を正しく表示する方法" />&lt;p>Hugoを使って記事を作成しているのですが、サイトマップをみてみるとlastmodの値がすべて同じになってました。その原因と解決策を今回は探っていこうと思います。&lt;/p>
&lt;p>Hugoの導入や記事の投稿についての情報は&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-21-01/" target="_blank" rel="noopener"
>Hugoで記事の投稿の仕方&lt;/a>や&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/" target="_blank" rel="noopener"
>デザイナーでもできる初めてのHUGO #01&lt;/a>を確認してください。&lt;/p>
&lt;h2 id="gitから更新情報を取得するようにしている">Gitから更新情報を取得するようにしている&lt;/h2>
&lt;p>Hugoは非常に強力な機能をたくさん持っています。その一つがGitにある情報にアクセスできるという点です。&lt;br>
この機能を使えば、Gitに登録した人を投稿者としたり、push した日付を更新日とすることができます。&lt;br>
つまり、自分で投稿者や更新日を記述する必要がないということになります。&lt;/p>
&lt;p>このブログでもHugoとGitの連携を行っております。その連携自体は簡単です。&lt;br>
設定ファイルに&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">enableGitInfo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と記述するだけで、Gitの情報にアクセスできます。&lt;/p>
&lt;h2 id="frontmatterの記述">frontmatterの記述&lt;/h2>
&lt;p>Hugoには日付を制御できる設定があります。Hugoがコンテンツ・ページに日付を割り当てる方法を設定することができます。これは、config に frontmatter セクションを追加することで行うことが可能です。&lt;br>
私の環境では下記のようになっておりました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">frontmatter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lastmod&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">fileModTime&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>:fileModTime&lt;/code>はコンテンツファイルの最終更新タイムスタンプから日付を取得します。&lt;br>
&lt;code>:git&lt;/code>ではコンテンツファイルの最終リビジョンのGit作成日となります。&lt;br>
この設定を使うには、&lt;code>--enableGitInfo&lt;/code> が設定されているか、サイト構成で &lt;code>enableGitInfo = true &lt;/code>が設定されている必要があります。つまり、先程の設定ファイルに記述した設定となります。&lt;br>
そして、&lt;code>lastmod&lt;/code>です。&lt;/p>
&lt;p>この設定は上から順に評価されていきます。&lt;/p>
&lt;p>詳細は&lt;a class="link" href="https://gohugo.io/getting-started/configuration/#configure-front-matter" target="_blank" rel="noopener"
>Hugoのfrontmatter&lt;/a>を確認してください。&lt;/p>
&lt;h2 id="git-actioinsで設定したxmlの更新日がすべて同じになった">Git Actioinsで設定したXMLの更新日がすべて同じになった&lt;/h2>
&lt;p>今回は&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/" target="_blank" rel="noopener"
>XMLの作成&lt;/a>の際にGitのデータを使用するようにしていました。&lt;br>
ローカルで確認したところ、&lt;code>hugo server&lt;/code>での動作も、&lt;code>hugo&lt;/code>にて書き出したファイルも更新日である&lt;code>lastmod&lt;/code>が正常に表示されていたので問題ないと判断して、Gitにアップしました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 147;
flex-basis: 354px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/img01.png" data-size="980x663">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/img01.png"
width="980"
height="663"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>しかし、Gitではローカルと動作が異なっており、すべて同じ日付となってしまいました。&lt;br>
一体なぜでしょうか？&lt;/p>
&lt;h3 id="ランキングや最新記事の反映で日付が更新された可能性">ランキングや最新記事の反映で日付が更新された可能性&lt;/h3>
&lt;p>このサイトでは最新記事やランキングを掲載しております。それらは時間や投稿のタイミングで変化します。そういた変化を検知してしまって日付が変わってしまった可能性が考えられます。&lt;br>
しかし、そうだとしたら、ローカルでも同様の問題になるかと思うので、この可能性は低そうです。&lt;/p>
&lt;h3 id="github-pagesで別ブランチで管理している">GitHub Pagesで別ブランチで管理している&lt;/h3>
&lt;p>このサイトはGitHub Pagesを使って別ブランチで管理しています。つまり、公開ディレクトリにあたる public 部分は前の考察のランキングや最新記事によって全てのページが変更されています。&lt;br>
そして、別ブランチにアップする。つまり、すべてが書き換わるといったことが起こったのではないでしょうか。&lt;/p>
&lt;h2 id="解決策">解決策&lt;/h2>
&lt;p>解決策はすごくと簡単です。&lt;br>
Git と連携して lastmod の日付を自動で設定するために、&lt;code>enableGitInfo: true&lt;/code> としていました。そして、この設定と同時に、下記のような設定もHugoの設定ファイル（yaml形式）に記述していました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">frontmatter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lastmod&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">fileModTime&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここの frontmatter の記述をすべてコメントアウトにします。&lt;br>
それか、優先度のファイルのタイムスタンプから&lt;code>:git&lt;/code>に変更します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">frontmatter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lastmod&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">fileModTime&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでlastmodが正しく表示されるようになりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 169;
flex-basis: 406px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/img02.png" data-size="980x578">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/img02.png"
width="980"
height="578"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>lastmod はSEOとしてあまり必要とされていないといった声も聞かれますが、正しく表示しておくことでサイトとしての信頼性は格段に上がると思います。&lt;br>
HugoとGitの連携を行った際に、更新日など正しく反映されない箇所があった場合は設定などを見直してみましょう。&lt;br>
簡単なことで問題が解決するかもしれません。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/GitHub%e5%ae%9f%e8%b7%b5%e5%85%a5%e9%96%80-Pull-Request%e3%81%ab%e3%82%88%e3%82%8b%e9%96%8b%e7%99%ba%e3%81%ae%e5%a4%89%e9%9d%a9-PRESS-plus/dp/477416366X/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51PjpAUHZBL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> GitHub実践入門 ~Pull Requestによる開発の変革 (WEB&amp;#43;DB PRESS plus) &lt;/h2>
&lt;p> GitHubの実践的な使い方を、実際に手を動かす形で解説する書籍です。初学者の方にもわかりやすいよう、基本的なGitやGitHubの使い方から、「ソーシャルコーディング」の目玉機能であるPull Requestの送り方・受け方まで解説します。また、外部ツールとの連携、GitHub FlowやGit Flowなど、GitHubを中心とした開発手法についてもしっかり解説しているので、中・上級者の方にも参考になるはずです。 目次 第1章:GitHubの世界へようこそ 第2章:Gitの導入 第3章:GitHubを利用するための準備 第4章:Gitを操作しながら学ぶ 第5章:GitHubの機能を徹底解説 第6章:はじめてのPull Request 第7章:Pull Requestが送られてきたら 第8章:GitHubと連携するツールとサービス 第9章:GitHubを利用した開発フロー 第10章:会社でGitHubを使おう Appendix A:GitHubをサポートするGUIクライアント Appendix B:Gistで手軽にコードを共有 続きを読む 。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e6%94%b9%e8%a8%822%e7%89%88-%e3%82%8f%e3%81%8b%e3%81%b0%e3%81%a1%e3%82%83%e3%82%93%e3%81%a8%e5%ad%a6%e3%81%b6-Git%e4%bd%bf%e3%81%84%e6%96%b9%e5%85%a5%e9%96%80%e3%80%88GitHub%e3%80%81SourceTree%e3%80%81%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e6%93%8d%e4%bd%9c%e5%af%be%e5%bf%9c%e3%80%89-%e6%b9%8a%e5%b7%9d-%e3%81%82%e3%81%84/dp/4863543433/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51ITQMzMG2L.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 改訂2版 わかばちゃんと学ぶ Git使い方入門〈GitHub、SourceTree、コマンド操作対応〉 &lt;/h2>
&lt;p> マンガと実践で学ぶGitの入門書が最新情報に対応して改訂しました! Gitの概念はもちろん、GitHubについても丁寧に解説しています。これからGitを使い始める人にオススメの1冊です。 本書ではクリック操作でGitを使えるSourceTreeを中心に解説しているので、初心者でも安心です。 はじめにより抜粋 ■せっかく学ぶなら、やっぱり楽しい方がいい 「Gitって難しそう」 「勉強しようとは思っているけど、なかなか一歩が踏み出せない」 そんな方のために、楽しくGitを理解できる本を作りました。 ・個性的なキャラクターたちが登場するマンガ ・感覚的にわかる図解 ・丁寧な実践パート 上記3つの特長で、Gitを無理なく学べます。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>Googleにインデックスされないときの対応方法は？</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/</link><pubDate>Fri, 04 Feb 2022 12:03:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/catch.jpg" alt="Featured image of post Googleにインデックスされないときの対応方法は？" />&lt;p>近年、ブログやWEBサイトを作って公開している人が増えてきました。&lt;br>
そうした中で、Googleにインデックスされるというのは非常に重大なことです。せっかく書いた記事もGoogleにインデックスされないと検索結果に表示されません。&lt;/p>
&lt;p>Googleにインデックスされないとき、どうしたら良いのでしょうか？&lt;/p>
&lt;h2 id="ブログを公開">ブログを公開&lt;/h2>
&lt;p>まずはブログを公開する際に、GoogleアナリティクスやSearch Consoleの設定などを行いましょう。&lt;br>
これによって、どんな人が来ているのかなどを閲覧することができたり、実際にサーバを閲覧することなくGoogleクローラーの状況やインデックスの状況、SEO対策などの機能などが盛りだくさんです。&lt;/p>
&lt;p>そして、Googleだけでなく Bingの方も登録しておくことをオススメします。Bingのクローラーはかなり早く、以前のGoogleのようにインデックスをしてくれます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 164;
flex-basis: 395px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img02.png" data-size="980x594">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img02.png"
width="980"
height="594"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="サイトマップをつくる">サイトマップをつくる&lt;/h2>
&lt;p>サイトマップと呼ばれるXMLを作成しましょう。&lt;br>
小規模なサイトやページ同士がしっかりリンクしているサイトであれば不要かもしれませんが、サイトマップは作っているに限ります。&lt;br>
クローラーはそのサイトマップを見て、サイトの構造を把握していきます。&lt;br>
もちろん、ページ構成がしっかりしたサイトであればクローラーは内部リンクのみでサイトマップを構築することが可能です。&lt;br>
クローラーの手助けとなるために、内部リンクをしっかり作り、サイトマップも作っておけばクローラビリティが格段にアップするでしょう。&lt;/p>
&lt;h2 id="サイト公開から半月">サイト公開から半月&lt;/h2>
&lt;p>サイトを公開してから半月、クローラーが１回来て、サイトマップをのデータからクローラーを開始したようです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 203;
flex-basis: 488px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img01.png" data-size="980x481">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img01.png"
width="980"
height="481"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Googleで検索しても表示されるようになりました。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 115;
flex-basis: 276px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img04.png" data-size="980x850">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img04.png"
width="980"
height="850"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="サイト公開から１ヶ月">サイト公開から１ヶ月&lt;/h2>
&lt;p>クローラーはほぼ仕事をしなくなりました。&lt;br>
来ていないということはなく、来ても数ページクロールして去っていきます。&lt;br>
新しいページをクロールすることはありませんでした。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 114;
flex-basis: 274px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img05.png" data-size="980x857">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img05.png"
width="980"
height="857"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>以前の作成したサイトと比較してもクローラーの活動頻度が激減していることは確かです。&lt;br>
数年前に作成して更新していないサイトのサイトマップのクロール頻度は１週間程度でした。新しく作成したサイトでは1ヶ月過ぎてもサイトマップへのクローラーがきませでした。&lt;/p>
&lt;h2 id="対応策を試す">対応策を試す&lt;/h2>
&lt;h3 id="robotstxtを編集する">robots.txtを編集する&lt;/h3>
&lt;p>クロールの結果を見ると画像やcss、jsなどにアクセスしていたため、htmlへのクロールを促すために、これらをrobots.txtにて許可しない設定にしてみました。&lt;br>
理由としては、すべてクロールするようにしてますが、cssやjsなどのファイルもクロールされており、そこにリソースが使われてHTMLまでクロールされていないのではないかと考えたためです。&lt;/p>
&lt;pre tabindex="0">&lt;code>User-agent: Googlebot-Image
Allow: /*.jpg$
Allow: /*.png$
Allow: /*.gif$
User-agent: *
Disallow: /*.jpg$
Disallow: /*.png$
Disallow: /*.gif$
Disallow: /assets/
Disallow: /404.html
Disallow: /js/
Disallow: /ts/
Disallow: /images/
Disallow: /scss/
Disallow: /css/
Allow: /
&lt;/code>&lt;/pre>&lt;p>後でわかったのですが、これは完全にNGです。&lt;br>
&lt;a class="link" href="https://developers.google.com/search/blog/2014/10/updating-our-technical-webmaster" target="_blank" rel="noopener"
>Googleの記事&lt;/a>を呼んでいると、従来のテキストベースから実際のブラウザのように動作し、レンダリング速度なども考慮しているとのことでした。結果、現在は404のページ以外はフルオープンにしております。&lt;/p>
&lt;pre tabindex="0">&lt;code>User-agent: *
Disallow: /404.html
Allow: /
&lt;/code>&lt;/pre>&lt;h3 id="構造体データを追加">構造体データを追加&lt;/h3>
&lt;p>SEO効果があるということで、構造体データを追加してみました。構造化データの仕組みについては&lt;a class="link" href="https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data?hl=ja" target="_blank" rel="noopener"
>こちら&lt;/a>を確認してください。&lt;br>
効果があるかはまだわかりませんが、Search Consoleを見てみると、数ページは認識しているようです。&lt;br>
SEO効果があるかと言われると、重要ではないといった話もあるので余力のある方は実装といったことになるかと思います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;application/ld+json&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">[{&lt;/span>
&lt;span class="s2">&amp;#34;@context&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://schema.org&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;BlogPosting&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;headline&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;Googleにインデックスされないときの対応方法は？&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;mainEntityOfPage&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;WebPage&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;@id&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;[$URL]&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;datePublished&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;dateModified&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;publisher&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Organization&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;NLP - 最新技術やプログラム、デザインなど様々な情報を提供するサイト&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;logo&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ImageObject&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;[$URL]/images/logo.png&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;author&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Person&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;nlp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;[$URL]/authors/wyoshi/&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},{&lt;/span>
&lt;span class="s2">&amp;#34;@context&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://schema.org&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;BreadcrumbList&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;itemListElement&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ListItem&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;position&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;NLP - 最新技術やプログラム、デザインなど様々な情報を提供するサイト&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;item&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;[$URL]&amp;#34;&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 154;
flex-basis: 369px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img07.png" data-size="980x636">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img07.png"
width="980"
height="636"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="サイトマップを消す">サイトマップを消す&lt;/h3>
&lt;p>サイトマップ自体へのアクセスが頻繁に行われていないので、サイトマップを消してみました。&lt;br>
クロールされないかと思いましたが、Bingで新しい記事をクロールして取得されてました。&lt;br>
しかし、記事のタイトルを変えてもなかなか変わらないのでやはりサイトマップは必要かもしれません。&lt;/p>
&lt;h3 id="タイトルを変える">タイトルを変える&lt;/h3>
&lt;p>タイトルを変えて、ページに更新をかけてみましたが、クロールされませんでした。&lt;br>
Bingも同様にタイトルを変えただけではクロールされないようでした。&lt;/p>
&lt;h3 id="サイトマップのhtmlを作成する">サイトマップのHTMLを作成する&lt;/h3>
&lt;p>クローラーがクロールしやすいように&lt;a class="link" href="https://suzukiiichiro.github.io/sitemap/" >サイトマップのHTML&lt;/a>を作成しました。&lt;br>
これによって、クローラーが内部リンクを通じて各ページにアクセスできるかなと思いますが、まだ効果の程はわかりません。&lt;/p>
&lt;h3 id="ランキングを作成する">ランキングを作成する&lt;/h3>
&lt;p>&lt;a class="link" href="https://suzukiiichiro.github.io/ranking/" >ランキングページ&lt;/a>の作成も上記の「サイトマップのHTMLを作成する」のようにクローラビリティを上げるためになります。&lt;br>
あとは、自分たちでもどんな記事を読まれているのかといった指標をすぐ閲覧できるからです。&lt;/p>
&lt;h3 id="seo対策">SEO対策&lt;/h3>
&lt;h4 id="画像のサイズの最適化">画像のサイズの最適化&lt;/h4>
&lt;p>画像のサイズが最適化できていなかったので、画像のサイズの最適化を行いました。&lt;br>
これによってSEOのスコアを上げることができました。サイトの速度もインデックスされるためには重要な指標になってくるので、きれいな画像を使用したいときは各デバイスに最適化された画像を用意して、サイトの速度を落とさないようにしましょう。&lt;/p>
&lt;h4 id="asideのdiv化">asideのdiv化&lt;/h4>
&lt;p>ページに直接関係ない部分をasideタグで書いていたのですが、内部リンクをたどってないのではないかと考えて、asideをdivに変更しました。&lt;br>
これによって、効果があるかはわかりませんが……。&lt;/p>
&lt;h4 id="内部リンクを増やす">内部リンクを増やす&lt;/h4>
&lt;p>カテゴリーだけでなく、著者のページなどを作成して内部リンクするようにしました。&lt;br>
これは若干の効果があって、サイトマップ&lt;/p>
&lt;h4 id="h1タグの正規化">h1タグの正規化&lt;/h4>
&lt;p>以前はロゴに当たる部分が h1 となっていたので、各ページでタイトルになる部分に h1 が当たるように変更しました。&lt;br>
ロゴに h1 を当てる人が多いかと思いますが、各ページのタイトル部分に当てたほうが、ページのタイトルとh1との整合性が取れます。&lt;/p>
&lt;p>また、h1は1ページに1つとされていますが、あくまで原則で、何個出てきても大丈夫です。ただし、たくさん使うのはNGになるので注意してください。&lt;/p>
&lt;h4 id="パンくずを追加">パンくずを追加&lt;/h4>
&lt;p>孤立ページを出さないように、そして、ページごとの回遊率を上げるためにパンくずを設置しました。&lt;br>
パンくずはクローラーにとっても内部リンクをたどっていけるようになるのではないかと考えております。&lt;/p>
&lt;h2 id="url検査を行う">URL検査を行う&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 165;
flex-basis: 397px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img06.jpg" data-size="980x591">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img06.jpg"
width="980"
height="591"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;br>
クローラーが活動をしていないので、サイトマップへ自動的にアクセスして追加してくれるという望みを諦めて、「URL検査」を使って、手動でクローラーを呼び寄せます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 104;
flex-basis: 251px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img03.png" data-size="980x936">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img03.png"
width="980"
height="936"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>これによって、以前は除外が22件あったものが2月1日では4件まで減りました。&lt;/p>
&lt;p>そして、新しく作成したページも2件ほどGoogle検索に出るようになり、すでにインデックスされていたページは変更が検知され、タイトルの表記が変わりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 154;
flex-basis: 370px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img08.png" data-size="980x635">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img08.png"
width="980"
height="635"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>URL検査は非常に効果的&lt;/strong>です。&lt;/p>
&lt;p>しかし、記事ページへのアクセスはまだないので、これは再度原因を探る必要があります。&lt;br>
変更されたのは以前サイトマップに登録されていたページなので、クローラーがサイトマップでインデックスしたものを優先している可能性がありそうです。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Googleにインデックスされない問題はかなり多いようです。&lt;br>
Bingでの流入やSNSでの流入はもちろん大事ですが、Googleで検索している人が多い以上対応する必要があります。&lt;br>
まずは記事の品質を上げて、SEO対策し、そして「URL検査」を行う。そうして、Googleクローラーが来てインデックスされるのを待つほかいまのところありません。&lt;/p>
&lt;p>また何か動きがあれば掲載してきたいと思います。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e6%b2%88%e9%bb%99%e3%81%aeWeb%e3%83%9e%e3%83%bc%e3%82%b1%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0-%e2%94%80Web%e3%83%9e%e3%83%bc%e3%82%b1%e3%83%83%e3%82%bf%e3%83%bc-%e3%83%9c%e3%83%bc%e3%83%b3%e3%81%ae%e9%80%86%e8%a5%b2%e2%94%80-%e3%82%a2%e3%83%83%e3%83%97%e3%83%87%e3%83%bc%e3%83%88%e3%83%bb%e3%82%a8%e3%83%87%e3%82%a3%e3%82%b7%e3%83%a7%e3%83%b3-%e6%9d%be%e5%b0%be-ebook/dp/B08J7GGY6N/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51VoHDbz3qL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 沈黙のWebマーケティング ─Webマーケッター ボーンの逆襲─ アップデート・エディション &lt;/h2>
&lt;p> この商品は固定レイアウトで作成されており、タブレットなど大きいディスプレイを備えた端末で読むことに適しています。また、文字列のハイライトや検索、辞書の参照、引用などの機能が使用できません。 〈電子書籍版に関する注意事項〉 本書は固定レイアウト型の電子書籍です。リフロー型と異なりビューア機能が制限されるほか、端末によって見え方が異なりますので、ご購入前にお使いの端末にて「無料サンプル」をお試しください。 【Web集客で悩むすべての人へ！ 成果を上げる「極意」を伝える。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%81%84%e3%81%a1%e3%81%b0%e3%82%93%e3%82%84%e3%81%95%e3%81%97%e3%81%84%e6%96%b0%e3%81%97%e3%81%84SEO%e3%81%ae%e6%95%99%e6%9c%ac-%e7%ac%ac2%e7%89%88-%e4%ba%ba%e6%b0%97%e8%ac%9b%e5%b8%ab%e3%81%8c%e6%95%99%e3%81%88%e3%82%8b%e6%a4%9c%e7%b4%a2%e3%81%ab%e5%bc%b7%e3%81%84%e3%82%b5%e3%82%a4%e3%83%88%e3%81%ae%e4%bd%9c%e3%82%8a%e6%96%b9-MFI%e5%af%be%e5%bf%9c-%e3%80%8c%e3%81%84%e3%81%a1%e3%81%b0%e3%82%93%e3%82%84%e3%81%95%e3%81%97%e3%81%84%e6%95%99%e6%9c%ac%e3%80%8d%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba/dp/4295004081/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/519qHZi-znL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> いちばんやさしい新しいSEOの教本 第2版 人気講師が教える検索に強いサイトの作り方[MFI対応] (「いちばんやさしい教本」シリーズ) &lt;/h2>
&lt;p> SEO入門の定番書を最新環境に合わせてリニューアル! 「今まで何冊もSEOの本を読みましたが、正統派のSEOの思想が理解出来る一番良質な内容でした」 「セミナー形式で書かれているので、自社サイトに当てはめて作業することができました」 「こんなに洗いざらいノウハウを体系だてて載せていいのか! ?と心配するくらい満足のいく内容でした。」 「何か困った時にバイブル的に活用できる1冊です。」 (以上、前書のAmazonカスタマーレビューより抜粋) SEO(検索エンジン最適化)とは、 「検索結果の上位にサイトを表示すること」ではありません。 「訪問者の目的に応えるサイトを作ること」です。 そのために、対策すべきキーワードを選定し、 サイトの構造を整えることが大切なのです。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（２）</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/</link><pubDate>Fri, 04 Feb 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/chess.jpg" alt="Featured image of post pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（２）" />&lt;h2 id="配置フラグ制約テスト高速化">配置フラグ（制約テスト高速化）&lt;/h2>
&lt;p>今回も引き続き配置フラグ（制約テスト高速化）を説明していきたいと思います。 &lt;br>
前回はプログラムの概要を説明しましたが、今回はnqueenメソッドの再帰と配置フラグの動きについて図で示しながら説明していきたいとおもいます。&lt;/p>
&lt;p>プログラムソースは以下のURLにあります。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py02_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py02_nqueen.py&lt;/a>&lt;/p>
&lt;p>プログラムはエイトクイーン(N=8)ですが説明をしやすくするため4x4のN=4で説明します。実際に動かしてプログラムの動作を確認したい方は419,420行目のMAXとSIZEを4に変更してみてください。&lt;/p>
&lt;h2 id="おさらい">おさらい&lt;/h2>
&lt;p>ブルートフォースからのおさらいとして次の点を押さえておきましょう。&lt;br>
・442行目のABOARD[row]=i はクイーンを配置する動きです。&lt;br>
・445行目のnqueen(row+1)は再帰でnqueenメソッドを動かしていますがこれは次の行に進む動きです。&lt;br>
・438,439は最終行(4行目)までクイーンを置ききった後にCOUNT と各行にクイーンを置いた場所を出力します。&lt;br>
再帰でnqueenメソッドを呼び出したときは、当然のことなのですがメソッドの先頭435行目に移動します。&lt;br>
引数で渡されたrow以外のローカル変数はすべて初期化された状態になります。&lt;/p>
&lt;p>・再帰から抜ける部分は2箇所あります。&lt;br>
一つ目は、438,439行目で最終行(4行目)までクイーンを置ききった後にprintoutする時&lt;/p>
&lt;p>二つ目は、441行目のfor文がSIZE数の数(N=4だと3)だけ回りきったあとです。&lt;/p>
&lt;p>再帰から抜けたときは再帰を呼び出した445行目のすぐ後ろからスタートします。&lt;br>
ローカル変数の状態は再帰を呼び出す直前の状態になります。&lt;br>
1行前に戻るような動きとなります。&lt;/p>
&lt;p>ちなみに441行目のfor i in range(SIZE)は右端から左端に1個ずつクイーンを置こうとする動きです。&lt;br>
左端までクイーンを置ききったらfor文を抜けるイメージです。&lt;/p>
&lt;h2 id="nqueen-メソッドの動き">nqueen メソッドの動き&lt;/h2>
&lt;p>448行目のnqueen(0)からスタートします。&lt;br>
メソッドの先頭435行目に移動します。&lt;br>
row=0なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
442行目のABOARD[0]=0で1行目の右端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q1.png" data-size="324x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q1.png"
width="324"
height="330"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
1個目のクイーンなので当然配置フラグはどれもOの状態ですから443行目のif FA[0] == 0 の条件を満たしてif文の中に入ります。&lt;br>
右端にクイーンを置いたのですから444行目でFA[0]=1 で右端の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数1を渡して呼び出して2行目に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=1の状態でメソッドの先頭435行目に移動します。&lt;br>
row=1なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
442行目のABOARD[1]=0で2行目の右端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q2.png" data-size="322x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q2.png"
width="322"
height="324"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
1行目で既に右端にクイーンを設置していますのでFA[0]は1になりますので443行目のif FA[i]==0の条件を満たしません。&lt;br>
if文に入らずに次のfor文に進みます。&lt;/p>
&lt;p>この部分が今回追加された配置フラグの制御になります。&lt;br>
この処理のおかげで上下の利き筋に引っかかる場合は次の行に移動するのをやめ探索を効率化することができます。&lt;/p>
&lt;p>441行目で次のfor文に進みi=1となります。&lt;/p>
&lt;p>442行目のABOARD[1]=1で2行目の右から2列目にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q3.png" data-size="324x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q3.png"
width="324"
height="322"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>1行目で右端にクイーンを置いているのでFAの状態は以下のとおりです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==0
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>FA[1]は0なのでif FA[i]==0の条件を満たすのでif 文の中に入ります。&lt;/p>
&lt;p>右端から2列目にクイーンを置いたのですから444行目でFA[1]=1 で右端から2番目の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数2を渡して呼び出して3行目に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=2の状態でメソッドの先頭435行目に移動します。&lt;br>
row=2なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
442行目のABOARD[2]=0で3行目の右端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q4.png" data-size="324x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q4.png"
width="324"
height="322"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>1行目で右端に、2行目で右から2列目にクイーンを置いているのでFAの状態は以下のとおりです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>i=0 FA[0]=1なのでif FA[i]==0の条件を満たさずに次のfor文に進みます。&lt;/p>
&lt;p>441行目で次のfor文に進みi=1となります。&lt;br>
442行目のABOARD[2]=1で3行目の右から2列目にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q5.png" data-size="330x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q5.png"
width="330"
height="324"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>1行目で右端に、2行目で右から2列目にクイーンを置いているのでFAの状態は以下のとおりです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>i=1 FA[1]=1なのでif FA[i]==0の条件を満たさずに次のfor文に進みます。&lt;/p>
&lt;p>441行目で次のfor文に進みi=2となります。&lt;br>
442行目のABOARD[2]=2で3行目の右から3列目にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q6.png" data-size="328x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q6.png"
width="328"
height="326"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>i=2 FA[2]=0なのでif FA[i]==0の条件を満たすのでif文の中に入ります。&lt;br>
右端から3列目にクイーンを置いたのですから444行目でFA[2]=1 で右から3列目の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数3を渡して呼び出して4行目に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=3の状態でメソッドの先頭435行目に移動します。&lt;br>
row=3なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
for文の中で右端から左端へ順番にクイーンを置いていくことになりますが。&lt;br>
すでに、1行目で右端、2行目で右から2列目、3行目で右から3列目にクイーンを設置しています。&lt;br>
FAの状態を見てみると以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==1
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>そのためiが0,1,2の時は443行目の配置フラグの制約に引っかかりif文の中には入らず次のfor文に進みます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 102;
flex-basis: 246px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q7.png" data-size="324x316">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q7.png"
width="324"
height="316"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 242px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q8.png" data-size="328x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q8.png"
width="328"
height="324"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 104;
flex-basis: 250px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q9.png" data-size="332x318">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q9.png"
width="332"
height="318"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>i=3では&lt;br>
ABOARD[3]=3で4行目の左端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q10.png" data-size="324x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q10.png"
width="324"
height="330"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
やっとフラグの制約に引っかからず443行のif文の中にはいれます。&lt;/p>
&lt;p>FA[3]=1&lt;br>
444行目でFA[3]=1 で右から4番目の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数4を渡して呼び出して先に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=4の状態でメソッドの先頭435行目に移動します。&lt;br>
row=4なので438行目の if row == SIZE:の条件を満たします。&lt;br>
439でprintout()メソッドを呼び出してCOUNT と各行のクイーンの設置場所を出力します。&lt;/p>
&lt;p>そして、再帰を抜け4行目の処理（row=3）に戻ります。&lt;br>
戻る場所は445行目のすぐ下です。&lt;br>
ローカル変数は再帰を呼び出す直前の状態にもどっています。&lt;br>
row=3 i=3です。&lt;br>
446行目でFA[3]=0 でフラグを落としています。&lt;br>
グローバル変数は再帰からもどっても再帰を呼び出す直前の状態に自動的にはもどらないので明示的にフラグを落とす必要があります。&lt;/p>
&lt;p>446行目でフラグを落としたあと次のfor文に進むのですが、すでにi=3なのでfor文を抜けます。&lt;br>
for文を抜けると再帰を抜け3行目の処理(row=2)に戻ります。&lt;br>
ここではrow=4,row=3と立て続けに再帰をぬけrow=2に戻る形となります。&lt;/p>
&lt;p>戻る場所は445行目のすぐ下です。&lt;br>
ローカル変数は再帰を呼び出す直前の状態にもどっています。&lt;br>
3行目はforは0,1,2まで進んでいました。&lt;br>
row=2 i=2です。&lt;br>
446行目でFA[2]=0 でフラグを落としています。&lt;br>
そして次のfor文に進みます。&lt;br>
i=3で&lt;br>
ABOARD[2]=3で3行目の左端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 97;
flex-basis: 234px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q11.png" data-size="324x332">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q11.png"
width="324"
height="332"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
FAの状態を見てみると以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>FA[3]=0なのでif FA[i]==0:の条件を満たしてif 文の中に入ります。&lt;br>
右から4列目にクイーンを置いているので444行目でFA[3]=1 でフラグをたてます。&lt;br>
445行目でnqueenを引数3を渡して呼び出して先に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=3の状態でメソッドの先頭435行目に移動します。&lt;br>
row=3なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
for文の中で右端から左端へ順番にクイーンを置いていくことになりますが。&lt;br>
すでに、1行目で右端、2行目で右から2番目、3行目で右から4番目にクイーンを設置しています。&lt;br>
FAの状態を見てみると以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==1
&lt;/code>&lt;/pre>&lt;p>そのためiが0,1の時は443行目の配置フラグの制約に引っかかりif文の中には入らず次のfor文に進みます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q12.png" data-size="328x328">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q12.png"
width="328"
height="328"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q13.png" data-size="326x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q13.png"
width="326"
height="326"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>i=2では&lt;br>
ABOARD[3]=2で4行目の右から3列目にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q14.png" data-size="322x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q14.png"
width="322"
height="322"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
やっとフラグの制約に引っかからず443行のif文の中にはいれます。&lt;/p>
&lt;p>FA[2]=1&lt;br>
444行目でFA[2]=1 で右から3列目の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数4を渡して呼び出して先に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=4の状態でメソッドの先頭435行目に移動します。&lt;br>
row=4なので438行目の if row == SIZE:の条件を満たします。&lt;br>
439でprintout()メソッドを呼び出してCOUNT と各行のクイーンの設置場所を出力します。&lt;/p>
&lt;p>細く動作をみていくとこんな感じになります。&lt;br>
ブルートフォースの時は無条件に再帰的にnqueenメソッドを呼び出し次の行にいっていましたが制約フラグを使うことによって無駄に深い階層にもぐっていくことを大分防止できていることがわかると思います。&lt;/p></description></item><item><title>pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（１）</title><link>https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/</link><pubDate>Thu, 03 Feb 2022 15:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/chess.jpg" alt="Featured image of post pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（１）" />&lt;h2 id="配置フラグ制約テスト高速化">配置フラグ（制約テスト高速化）&lt;/h2>
&lt;p>前回は全くアルゴリズムを使わないで全パターン１行に１つずつクイーンを設置するブルートフォース　力任せ探索でした。&lt;br>
エイトクイーン(N=8)ですら凄く時間がかかることが体感できたかと思います。&lt;/p>
&lt;p>今回も解を出すまでには至りませんが、一つ進んで、配置フラグ（制約テスト高速化）を使いより効率よく解の候補を列挙する方法を説明したいと思います。&lt;/p>
&lt;p>エイトクイーン問題はクイーンの利き筋上下左右斜め８方向にクイーンを置けないという制約があるのですが、今回は「上下の制約」すなわち、同じ列にはクイーンを置けないという制約を配置フラグを使って追加してみます。&lt;/p>
&lt;p>例えば、&lt;br>
1行目で右端にクイーンを置くと以降の行では右端にクイーンを置けなくなります。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q2.png" data-size="322x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q2.png"
width="322"
height="324"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
上の図だと2行目で1行目ですでにクイーンを置いている右端にクイーンを置こうとしているのでNGです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q4.png" data-size="324x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q4.png"
width="324"
height="322"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
上の図は2行目は良いのですが3行目で1行目にすでにクイーンを置いている右端にクイーンを置こうとしているのでNGです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q10.png" data-size="324x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q10.png"
width="324"
height="330"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q14.png" data-size="322x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q14.png"
width="322"
height="322"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>上の２つの図のように同じ列にクイーンを置かないパターンを探索します。&lt;/p>
&lt;p>配置フラグ（制約テスト高速化）を使って私の端末でエイトクイーン(N=8)を実行すると、0m0.554sかかります。ブルートフォースが3m7.321sかかったので360倍くらい速いですね。&lt;/p>
&lt;h2 id="グローバル変数について">グローバル変数について&lt;/h2>
&lt;p>それではプログラムについて説明していきましょう。&lt;/p>
&lt;p>プログラムソースは以下のURLにあります。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py02_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py02_nqueen.py&lt;/a>&lt;/p>
&lt;p>プログラムの作りとしては前回のブルートフォースをベースにしてそこに配置フラグを追加したものとなりますので、ブルートフォースとの差異を説明していきたいと思います。&lt;/p>
&lt;p>まず、グローバル変数について説明します。&lt;br>
今回も動作をわかりやすくするため419,420行目のMAXとSIZEを4に変更してみてください。&lt;/p>
&lt;p>423行目 配列 FA がグローバル変数として新しく追加されています。&lt;br>
0 for i in range(SIZE) で0に初期化しています。&lt;br>
どの列にクイーンを置いたかをフラグで管理します。&lt;br>
FA[0]が右端,FA[1]が右端から2番目,FA[2]が右端から3番目,FA[3]が右端から4番目(左端)になります。&lt;br>
例えば2列目にクイーンを置くとFA[1]=1にしてフラグを立てます。&lt;/p>
&lt;h2 id="nqueenメソッドについて">nqueenメソッドについて&lt;/h2>
&lt;p>nqueenメソッドの作りも基本的に前回のブルートフォースと同じです。&lt;br>
443行目〜446行目に配置フラグFAの処理が追加されているところが違う部分となります。&lt;/p>
&lt;p>442行目 ABOARD[row]=i でクイーンを設置します。&lt;br>
前回のブルートフォースの場合は&lt;br>
無条件で次の行でnqueen(row+1)で再帰的にnqueenを呼び出していました。 &lt;br>
今回の配置フラグでは&lt;br>
443行目 if FA[i] == 0: の条件を満たした場合だけ再帰的にnqueenを呼び出しています。&lt;/p>
&lt;p>iは今回クイーンを置いた場所を意味します。&lt;/p>
&lt;p>444行目でクイーンを置いた列の配置フラグをあらかじめ1にしておきます。&lt;/p>
&lt;p>例えば以下の図の様な場合&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q14.png" data-size="322x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q14.png"
width="322"
height="322"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
1行目では右端にクイーンを置くので、&lt;br>
444行目の処理でFA[0]=1となります。&lt;br>
2行目は右端から2番目にクイーンを置くので、&lt;br>
FA[1]=1となります。&lt;br>
3行目は右端にクイーンを置いているのでiは0です。&lt;br>
443行目の if FA[i]== 0 : の判定で&lt;br>
FA[0]は1ですので443行目から446行目の処理には入らず次のfor文に移動することになります。&lt;/p>
&lt;p>この443,444,446行目の処理によってすでに同じ列にクイーンを置いている場合は下の行に行くのをやめるという動きを実現しています。&lt;/p>
&lt;p>446行目でFA[i]=0 という処理があります。&lt;br>
この処理は再帰の動きを理解する上で非常に重要な処理になります。&lt;br>
再帰から戻ってきた時は445行目の下からスタートすることになります。&lt;br>
再帰から戻ってきた時は変数の状態を再帰に入る直前の状態に戻す必要があります。&lt;br>
ローカル変数については特別にプログラムしないでも再帰前の状態に戻るのですが、グローバル変数は自分で設定しないと元に戻りません。&lt;br>
再帰から戻ってきた時はiにクイーンを置かなかったことになるのですから&lt;br>
FA[i]=0で明示的にフラグを落としてあげています。&lt;/p>
&lt;p>今回は配置フラグの全体的な流れを説明しました。次回は図で説明しながら実際の動きを追ってみましょう。&lt;/p></description></item><item><title>【grep/sed/awkも】ざっくりわかるシェルスクリプト５」</title><link>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</link><pubDate>Wed, 02 Feb 2022 15:55:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/shellscript.jpg" alt="Featured image of post 【grep/sed/awkも】ざっくりわかるシェルスクリプト５」" />&lt;p>この記事はシェルスクリプトを４５分でざっくりマスターできるチュートリアルです。bashスクリプト「Hello, World」から、ifステートメントなどの条件分岐、while, for, untilループをはじめ、シェルスクリプトの効率的なデバッグ手法の紹介など、シェルスクリプトを網羅的かつ短時間で学習することができます。&lt;br>
過去、bashの経験があり、久しぶりにbashを各必要に迫られた人、他の言語でプログラム経験があり、bash独自の書き方をざっくりと思い出したい人は、このトピックを長め読むだけで、充分 bashを思い出せるはずです。&lt;br>
このトピックをざっくり読み流すとおよそ４５分でbashの構文を網羅的に理解することができます。&lt;/p>
&lt;p>では次のトピックについて説明します。&lt;/p>
&lt;!--
はじめてのバッシュスクリプト
ファイルへの出力
コメント
条件文
ループ
スクリプトへの値渡し「実行パラメータ」
文字列処理
数値計算処理
declareコマンドで宣言する
配列
関数
ファイルとディレクトリ
curlコマンドでurlを扱う
プロフェッショナルメニュー
inotifyを使用してファイルシステムを待つ
grepコマンドの紹介
awkコマンドの紹介
sedコマンドの紹介
シェルスクリプトのデバッグ
-->
&lt;h2 id="はじめてのシェルスクリプト">はじめてのシェルスクリプト&lt;/h2>
&lt;p>このトピックでは、catコマンドでシェルの場所を確認後、スクリプトファイルの作成、echoコマンドを使用して「Hello,shellscript.」記述し、スクリプトファイルを実行可能にします。&lt;/p>
&lt;p>ではまず、ターミナルに次のコマンドを入力します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/shells
&lt;/code>&lt;/pre>&lt;p>実行するとおおよそ次の出力となります。&lt;/p>
&lt;p>$ cat /etc/shells&lt;br>
/bin/sh&lt;br>
/bin/bash&lt;br>
/sbin/nologin&lt;br>
/usr/bin/sh&lt;br>
/usr/bin/bash&lt;br>
/usr/sbin/nologin&lt;br>
$&lt;/p>
&lt;p>このコマンドは、システムで利用可能なすべてのシェルを表示し、それらのいずれかを使用できます。&lt;br>
このタスクでシステムにbashシェルがあるかどうかを確認できました。bashのパスを知るには、ターミナルで「$ which bash」を実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ which bash
/usr/bin/bash
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>このパスをシェバンといいます。シェルスクリプトを実行する「bash」のPATHは「/usr/bin/bash」であることがわかりました。このシェバンを、すべてのシェルスクリプトのページ先頭に書き込む必要があります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>シェバンをソースファイルの先頭行に書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:helloScript.sh" data-lang="bash:helloScript.sh">&lt;span class="cp">#!/usr/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ではさっそく「helloScript.sh」ファイルに「Hello,shellscript.」を記述しましょう。内容は以下の通りです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:helloScript.sh" data-lang="bash:helloScript.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript.&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイルを保存し、ターミナルに戻り、「ls」コマンドを実行してファイルの存在を確認します。「ls -la」を使用してファイルの詳細を取得することもできます。&lt;br>
その結果は、次のようになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls
helloScript.sh
$
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ ls -la
-rw-rw-r-- 1 suzuki suzuki 44 2月 2 18:30 helloScript.sh
$
&lt;/code>&lt;/pre>&lt;p>&amp;lsquo;rw-rw-r&amp;rsquo; は、ファイルの所有者が、ファイへの読み取り、および書き込み権限を持っていることを示します。&lt;/p>
&lt;p>読むことができる (Readable) r 4&lt;br>
書くことができる (Writable) w 2&lt;br>
実行することができる (eXecutable) x 1&lt;br>
なにもできない - 0&lt;/p>
&lt;p>３つのブロックにわかれているのは、グループを示しています。&lt;/p>
&lt;p>自分 グループ 他人&lt;br>
xrw xrw xrw&lt;/p>
&lt;p>現在のhelloScript.shは -rw ですから、読むことと、書くことはできるものの、実行する権限がないようです。&lt;br>
このスクリプトを実行可能にするには、ターミナルで次のコマンドを実行する必要があります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ chmod +x helloScript.sh
&lt;/code>&lt;/pre>&lt;p>次に、「ls -la」コマンドを使用して「helloScript.sh」ファイルのアクセス許可を確認し、次の出力が得られます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -la
-rwxrwxr-x 1 suzuki suzuki 44 2月 2 18:30 helloScript.sh
$
&lt;/code>&lt;/pre>&lt;p>実行権限が付きました。&lt;br>
次に、ターミナルのコマンド「$ bash /helloScript.sh」を使用してファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./helloScript.sh
Hello, shell script.
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ファイルの実行方法はざっくりと２種類あります。&lt;/dd>
&lt;dd>$ chmod +x &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>で、実行権限を与えたうえで、&lt;/dd>
&lt;dd>$ ./&amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>とする方法。&lt;/dd>
&lt;dd>
&lt;p>ファイルに実行権限を与えずに&lt;/p>
&lt;/dd>
&lt;dd>$ bash &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>と、する方法です。&lt;/dd>
&lt;dd>
&lt;p>セキュリティ的には後者が望ましいです。&lt;/p>
&lt;/dd>
&lt;dd>理由は、悪意を持つ第三者、または誤操作によってスクリプトファイルが簡単に実行できてしまう環境を作るべきではないからです。&lt;/dd>
&lt;dd>何のファイルかわかりもせずに　&lt;/dd>
&lt;dd>$ ./&amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>で実行できてしまうのは恐怖です。&lt;/dd>
&lt;dd>実行する場合、ソースの中身を確認するのはもちろんですが、実行権限を軽率に与えることは控えましょう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="ファイルへの出力">ファイルへの出力&lt;/h2>
&lt;p>このトピックでは、シェルスクリプトの実行結果を、別のファイルに出力する方法を紹介します。「helloScript.sh」の echo 行の末尾に少し追記するだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:helloScript.sh" data-lang="bash:helloScript.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello, shell script.&amp;#34;&lt;/span> &amp;gt; hello.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイルを保存し、「$ bash helloScript.sh」でスクリプトを実行します。&lt;br>
次の出力が表示されます。「ls -la」を押して、新しいファイルが存在することを確認してください。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -la
helloScript.sh hello.txt
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;gt;」をリダイレクトと言います。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>ファイルの出力は２種類あります。&lt;br>
リダイレクト出力は、新規に空のファイルを作成したうえで文字を出力します。&lt;br>
もう一つの出力方法は「アペンド &amp;raquo; 」です。&lt;br>
アペンドは、既に存在するファイルに追記します。&lt;br>
追記方法は簡単で、&amp;raquo; を使うだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:helloScript.sh" data-lang="bash:helloScript.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello, shell script.&amp;#34;&lt;/span> &amp;gt; hello.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;and bash.&amp;#34;&lt;/span> &amp;gt;&amp;gt; hello.txt&lt;span class="p">;&lt;/span> &lt;span class="c1"># ここで追記&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;raquo;」をアペンドと言います。&lt;/dd>
&lt;dd>アペンドするときの注意点は、アペンドする場合は、既にファイルが存在している必要があります。「touch」コマンドでファイルを生成したうえでアペンドするか、あらかじめ「&amp;gt; リダイレクト」でファイルを生成し、文字列を追記したうえで、「&amp;raquo; アペンド」します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="コメント">コメント&lt;/h2>
&lt;p>コメントはスクリプトの実行時に無視されます。スクリプトでは、コメントは何もしません。コメントには３つの種類があります。&lt;/p>
&lt;p>1行のコメント&lt;br>
複数行のコメント&lt;br>
HereDoc Delimeter&lt;/p>
&lt;p>1行のコメントの場合、コメントステートメントの前に「#」記号を半角で書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:lineComment.sh" data-lang="bash:lineComment.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># this is a 1st comment&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript.&amp;#34;&lt;/span> &amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>コメントを複数行にわたって書きたいことがあります。行頭に「# 」を書けばよいのですが、改行の度に行頭に「# 」を挿入する必要があり、とっても面倒です。&lt;br>
C 言語やJava、HTMLですらも複数行コメントがあるのに。。。&lt;br>
シェルスクリプトにもあります。あるんです。みんな知らないだけです。&lt;br>
最初のコメントの先頭の前に「:'」を置き、最後のコメントの後に「'」と書くことだけです。理解を深めるために、次のスクリプトを調べることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:multiComment.sh" data-lang="bash:multiComment.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
:&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">This is the segment of multi-line comments
&lt;/span>&lt;span class="s1">Through this script, you will learn
&lt;/span>&lt;span class="s1">How to do multi-line commenting
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="c1"># this is a 1st comment&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript.&amp;#34;&lt;/span> &amp;gt; file.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仰々しいマルチラインコメントもあります。&lt;br>
こちらのマルチラインコメントが使われない理由は、これから紹介するヒアドキュメントの記述方法に似ていてまぎらわしいからです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:multiComment.sh" data-lang="bash:multiComment.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 仰々しいマルチラインコメント&lt;/span>
&lt;span class="s">&amp;lt;&amp;lt;COMMENT
&lt;/span>&lt;span class="s"> your comment 1
&lt;/span>&lt;span class="s"> comment 2
&lt;/span>&lt;span class="s"> blah
&lt;/span>&lt;span class="s">COMMENT&lt;/span>
&lt;span class="c1"># シンプルなマルチラインコメント&lt;/span>
:&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">This is the segment of multi-line comments
&lt;/span>&lt;span class="s1">Through this script, you will learn
&lt;/span>&lt;span class="s1">How to do multi-line commenting
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="c1"># this is a 1st comment&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript.&amp;#34;&lt;/span> &amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ヒアドキュメントはとてもべんりな出力方法です。&lt;br>
コメントではありませんが、上記のマルチラインコメントと似ているので、ここでご紹介します。&lt;/p>
&lt;p>通常、複数の行出力は以下のように記述します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:hereDocuments.sh" data-lang="bash:hereDocuments.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
touch file.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript 1.&amp;#34;&lt;/span> &amp;gt;&amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript 2.&amp;#34;&lt;/span> &amp;gt;&amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript 3.&amp;#34;&lt;/span> &amp;gt;&amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>とっても面倒ですね。&lt;br>
そこでヒアドキュメントの出番となります。ヒアドキュメントでは以下のように書くことができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:hereDocuments.sh" data-lang="bash:hereDocuments.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
cat &lt;span class="s">&amp;lt;&amp;lt; EOS
&lt;/span>&lt;span class="s">Hello,shellscript 1.
&lt;/span>&lt;span class="s">Hello,shellscript 2.
&lt;/span>&lt;span class="s">Hello,shellscript 3.
&lt;/span>&lt;span class="s">EOS&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクリプトを実行すると、次の出力が表示されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash hereDocuments.sh
Hello,shellscript 1.
Hello,shellscript 2.
Hello,shellscript 3.
$
&lt;/code>&lt;/pre>&lt;p>cat の後ろに 「 - ハイフン」を置くと、インデントが有効になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:hereDocuments.sh" data-lang="bash:hereDocuments.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
cat &lt;span class="s">&amp;lt;&amp;lt;-EOS
&lt;/span>&lt;span class="s"> Hello,shellscript 1.
&lt;/span>&lt;span class="s"> Hello,shellscript 2.
&lt;/span>&lt;span class="s"> Hello,shellscript 3.
&lt;/span>&lt;span class="s">EOS&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクリプトを実行すると、次の出力が表示されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash hereDocuments.sh
Hello,shellscript 1.
Hello,shellscript 2.
Hello,shellscript 3.
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>cat &amp;laquo;-EOS&lt;/dd>
&lt;dd>(-)ハイフンを置くtipsを忘れずに。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="条件分岐">条件分岐&lt;/h2>
&lt;p>このトピックでは以下について説明します。&lt;/p>
&lt;p>ifステートメント&lt;br>
if-elseステートメント&lt;br>
if-else ifステートメント&lt;br>
AND演算子とOR演算子&lt;/p>
&lt;h3 id="ifステートメント">Ifステートメント&lt;/h3>
&lt;p>ifセグメントに条件を書き込むには、条件の前後に「[ ]」内に余分なものを与える必要があります。その後、条件コードを述べ、次の行に移動し、「その後」と書き、条件がtrueの場合に実行するコード行を述べます。最後に、ifステートメントを閉じるには「fi」を使用します。以下は、ifステートメントの構文を理解するスクリプトコードの例です。&lt;/p>
&lt;p>ifステートメントには「[ ]」内に条件を書きます。&lt;br>
「if」と 「[」の間には半角スペースが必要です。&lt;br>
また、「[」と条件文、条件文と「]」の間にも半角スペースが必要です。&lt;br>
ifの終わりには、「fi」で閉じる必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:if-statements.sh" data-lang="bash:if-statements.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このスクリプトは変数「カウント」に「10」の値を割り当てます。&lt;br>
「if」の条件「[ &amp;ldquo;$count&amp;rdquo; -eq 10 ]」は、count変数の値が10と「等しい」かどうかを確認する条件文です。&lt;br>
この条件がtrueで成立すると、処理は次のステートメントに移動します。&lt;br>
最後の「fi」は、このif-statementブロックの終了を示すキーワードです。&lt;/p>
&lt;p>条件が成立しない場合、このプログラムには「else」ブロックがないため、何もしません。&lt;/p>
&lt;p>次のプログラムは条件が成立しない場合の処理となります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:ifelse-statements.sh" data-lang="bash:ifelse-statements.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>11&lt;span class="p">;&lt;/span> &lt;span class="c1"># COUNT は 11とする&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is false. count: &lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このプログラムでは、「$count」変数は11の値で割り当てています。&lt;br>
この場合、ifブロックの条件が成立しないため、「if」セクション全体を無視して「else」ブロックに移動します。&lt;br>
端末は、条件がfalseであるというステートメントと$countを表示します。&lt;/p>
&lt;p>条件を書くための別の形式もあります。&lt;br>
「[ ]」を「(( ))」括弧に置き換え、それらの間に条件を書き込むだけです。&lt;br>
C言語、Javaに慣れている人は、この記述方法のほうが直観的かもしれません。&lt;br>
この形式の例を次に示します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:bracketIfelse-statements.sh" data-lang="bash:bracketIfelse-statements.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>11&lt;span class="p">;&lt;/span> &lt;span class="c1"># COUNT は 11とする&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="nv">count&lt;/span>&lt;span class="o">==&lt;/span>10&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is false count: &lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="if-else-ifステートメント">if-else ifステートメント&lt;/h3>
&lt;p>スクリプトでif-else ifをステートメントのブロックとして使用すると、プログラムは条件を再チェックします。同様に、以下のサンプルコードを「helloScript.sh」に記述すると、プログラムは最初に「if」条件をチェックすることがわかります。「カウント」変数には「10」の値が割り当てられます。最初の「if」条件では、プログラムは「カウント」が9より大きい値を持っていることを確認します。その後、「if」ブロックに書かれたステートメントが実行され、そこから出てきます。たとえば、「elif」で書かれた条件がtrueの場合、プログラムは「elif」ブロックで書かれたステートメントのみを実行し、ステートメントの「if」および「else」ブロックを無視します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:ifelseif-statements.sh" data-lang="bash:ifelseif-statements.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>8&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>count&amp;gt;9&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the first condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="o">((&lt;/span>count&amp;lt;&lt;span class="o">=&lt;/span>9&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;then second condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is false&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="and演算子">AND演算子&lt;/h3>
&lt;p>条件で「AND」演算子を使用するには、条件間で記号「&amp;amp;&amp;amp;」を使用します。&lt;br>
たとえば、「[ &amp;ldquo;$age&amp;rdquo; -gt 18 ] と [ &amp;ldquo;$age&amp;rdquo; -lt 40 ]をチェックし、年齢が18より大きく、年齢が40未満の場合、これはfalseであることがわかります。プログラムは「その後」の後に書かれたステートメントを無視し、端末に「年齢は正しくない」と印刷して「else」ブロックに向かって移動します&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:andOperator.sh" data-lang="bash:andOperator.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">18&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>条件を次の形式で書くこともできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:andOperator2.sh" data-lang="bash:andOperator2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">18&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]]&lt;/span>
&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>「&amp;amp;&amp;amp;」の代わりに「-a」を使用して、プログラムの条件でAND演算子を使用することもできます。それは同じように動作します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:andOperator3.sh" data-lang="bash:andOperator3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">18&lt;/span> -a &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>
&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードを「helloScript.sh」スクリプトに保存し、ターミナルから実行します&lt;/p>
&lt;h3 id="or演算子">OR演算子&lt;/h3>
&lt;p>2つの条件があり、それらのいずれかまたは両方がtrueの場合、前述のステートメントを実行する場合、OR演算子が使用されます。 「-o」はOR演算子を表すために使用されます。「||」記号を使用することもできます。&lt;br>
次のサンプルコードを「helloScript.sh」に書き、ターミナルから実行して動作を確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator.sh" data-lang="bash:orOperator.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">18&lt;/span> -o &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>OR演算子をよりよく理解するために、さまざまな条件を試すこともできます。以下に４つのサンプルを記します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator1.sh" data-lang="bash:orOperator1.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">18&lt;/span> -o &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator2.sh" data-lang="bash:orOperator2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">18&lt;/span> -o &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator3.sh" data-lang="bash:orOperator3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">18&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">40&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator4.sh" data-lang="bash:orOperator4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">18&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ループ">ループ&lt;/h2>
&lt;p>このトピックでは、以下の説明をします。&lt;/p>
&lt;p>whileループ&lt;br>
until ループ&lt;br>
for ループ&lt;br>
break と continue&lt;/p>
&lt;h3 id="whileループ">whileループ:&lt;/h3>
&lt;p>ループは条件がtrueの場合にコードブロック(do&amp;hellip;doneで囲まれています)を実行し、条件がfalseになるまでそれを実行し続けます。&lt;/p>
&lt;p>条件がfalseになると、whileループは終了します。&lt;br>
whileループは、キーワード「while」から始まり、そのうしろに条件文を書きます。&lt;br>
条件文を閉じたらキーワード「do」を使用し、プログラムの条件がtrueの場合に実行する処理ステートメントの束を書きます。&lt;br>
処理ステートメントの終了後、キーワード「done」を書いてwhileループを閉じます。&lt;/p>
&lt;p>以下、スクリプトを「helloScript.sh」として保存します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:whileLoop.sh" data-lang="bash:whileLoop.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$number&lt;/span> -lt &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span> number+1 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ターミナルで「$ ./whileLoop.sh」コマンドを使用してスクリプトを実行ます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash whileLoop.sh
1
2
3
4
5
6
7
8
9
$
&lt;/code>&lt;/pre>&lt;p>Whileループでは、まず、条件が真かどうかをチェックします。&lt;br>
条件がfalseの場合、ループから出てプログラムを終了します。&lt;/p>
&lt;p>条件が true の場合、実行シーケンスはキーワード &amp;lsquo;do&amp;rsquo; の後に書かれたステートメントに移動します。&lt;br>
上記サンプルのは、「echo」により１から９までが出力されます。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ループ自体をループさせるincrementステートメントについて&lt;/dd>
&lt;dd>$(( )) は、括弧内で計算された値が引き出されます。&lt;/dd>
&lt;dd>(( )) 内は、変数の冒頭に $ は必要ありません。&lt;/dd>
&lt;dd>(( )) 内は、四則演算が可能です。スペースを空ける必要もありません。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h3 id="until-ループ">until ループ:&lt;/h3>
&lt;p>loopが条件がfalseのときにコードブロック(do&amp;hellip;doneで囲まれている)を実行し、条件がtrueになるまで実行し続けるまでループし続け、条件が true になると、until ループは終了します。&lt;br>
untilループの構文はwhileループの構文と同じで、「while」の代わりに「until」という言葉を使用します。&lt;/p>
&lt;p>ターミナルで「$ ./untilLoop.sh」コマンドを使用してスクリプトを実行ます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:untilLoop.sh" data-lang="bash:untilLoop.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>
&lt;span class="k">until&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$number&lt;/span> -ge &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span> number+1 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のコードを「untilLoop.sh」ファイルに保存します。コマンドを使って実行する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash untilLoop.sh
1
2
3
4
5
6
7
8
9
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>whileループは、条件が true の時に( do &amp;hellip;done) ブロックを実行し、条件が false になるとループを終了します。&lt;/dd>
&lt;dd>untilループは、条件が false の時に( do &amp;hellip;done) ブロックを実行し、条件が true になるとループを終了します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h3 id="for-ループ">for ループ:&lt;/h3>
&lt;p>forループは、繰り返し実行される条件を指定するループのタイプです。&lt;br>
forループには、いくつかの記述方法があります。&lt;br>
最初の方法として、反復用の数字を書きます。&lt;br>
以下に示すコードでは、反復用の数字反復を制御する変数 &amp;lsquo;i&amp;rsquo; にさせます。&lt;br>
以下のfor ループは 5 回実行されます。&lt;br>
スクリプトファイル「helloScript.sh」にコードを保存します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:forLoop.sh" data-lang="bash:forLoop.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> i in &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ターミナルで次のコマンドを入力して、「forLoop.sh」ファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash forLoop.sh
1
2
3
4
5
$
&lt;/code>&lt;/pre>&lt;p>この方法はシンプルに見えますが、1000回実行したい場合は、実行したい数値を列挙する必要があるため大変です。&lt;br>
実は、1から1000までの反復回数を書く必要はなく、ループに他の書き方を使用します。&lt;br>
以下のサンプルコード「for i in {0..10}」のように、反復の開始点と終了点を宣言します。&lt;br>
この書き方によってforループは10回実行されます。 &amp;lsquo;0&amp;rsquo; は開始点として定義され、&amp;lsquo;10&amp;rsquo; は反復の終了点として定義されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:forLoop2.sh" data-lang="bash:forLoop2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>0..10&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイル「forLoop2.sh」にコードを保存します。ファイルを実行すると、次の出力が表示されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash forLoop2.sh
0
1
2
3
4
5
6
7
8
9
10
$
&lt;/code>&lt;/pre>&lt;p>ループを制御する変数の増分値を定義することもできます。&lt;br>
たとえば、「for i in {0..10..2}」では、&amp;lsquo;0&amp;rsquo; をループの開始点、&amp;lsquo;10&amp;rsquo; は終点、&amp;lsquo;2&amp;rsquo; はループは &amp;lsquo;i&amp;rsquo; 2の増分で、echo $i ステートメントを実行します。&lt;br>
したがって、以下に示す例では、プログラムはループの最初の実行で0を出力し、その後、「i」の値を２つずつインクリメントします。&lt;br>
このコードは、「i」の値を0,2,4,6,8,10として出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>0..10..2&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash forLoop3.sh
0
2
4
6
8
10
$
&lt;/code>&lt;/pre>&lt;p>多くのプログラミング言語でおなじみ「for loop」書式の記述も可能です。&lt;br>
以下のサンプルコードは、このメソッドを使用して「forループ」を書いています。&lt;br>
&amp;lsquo;for (( i=0; i&amp;lt;5; i++ ))’ では、&amp;lsquo;i’ はループ全体を制御する変数です。&lt;br>
まず、値 &amp;lsquo;i&amp;rsquo; は 値 &amp;lsquo;0&amp;rsquo; で初期化され、次にループ &amp;lsquo;i&amp;lt;5&amp;rsquo; の制御ステートメント、&amp;lsquo;i++&amp;rsquo; はループのたびに１つずつインクリメントする事をあわらします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:increments.sh" data-lang="bash:increments.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;5&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;lsquo;i&amp;rsquo;は0で初期化され、&amp;lsquo;i&amp;rsquo;の値が5未満の条件をチェックします。&lt;br>
最初条件の結果は &amp;lsquo;true&amp;rsquo; です。&lt;br>
処理ステートメントに進み、、echo コマンドにより端末に「i」の値を「0」として出力します。&lt;br>
処理が進むにつれ、値「i」が一つずつ増加します。&lt;br>
プログラムは処理の中で、「i」の値が5未満であるかどうかを再度確認し、再び「i」の値(&amp;lsquo;1」を出力します。&lt;br>
この実行フローは、「i」の値が「5」の値に達するまで続き、「５」に達した段階ではforループをぬけてプログラムは終了します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash increments.sh
0
1
2
3
4
$
&lt;/code>&lt;/pre>&lt;h3 id="breakとcontinue">breakとcontinue&lt;/h3>
&lt;p>breakステートメントは、指定された条件でループを終了するために使用されます。&lt;br>
以下に示すコードでは、for loopは if ステートメントの条件により、「i」の値が &amp;lsquo;5&amp;rsquo; になるまで通常の実行を行い、「i」が &amp;lsquo;5以上&amp;rsquo; ループを停止します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:break.sh" data-lang="bash:break.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$i&lt;/span> -gt &lt;span class="m">5&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
break&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクリプトを保存し、ファイルを実行します。次の出力が得られます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash break.sh
0
1
2
3
4
5
$
&lt;/code>&lt;/pre>&lt;p>Continueステートメントは、breakステートメントとは対照的に機能します。&lt;br>
条件が真である場合は反復をスキップ( continue )し、次の反復に向かって処理を進めます。&lt;br>
以下のループは、&amp;lsquo;3&amp;rsquo; と &amp;lsquo;7&amp;rsquo; を除いて、&amp;lsquo;0&amp;rsquo; から &amp;lsquo;20&amp;rsquo; までの端末に &amp;lsquo;i&amp;rsquo; 変数の値を出力します。&lt;br>
ifステートメント &amp;lsquo;if [ $i -eq 3 ] || [ $i -eq 7 ]&amp;rsquo; は、&amp;lsquo;i&amp;rsquo; の値が 3 または 7 に等しいときは反復をスキップし、echoせずにforループの処理を進めます。&lt;/p>
&lt;p>この概念をよりよく理解するために、次のコードを実行します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:continue.sh" data-lang="bash:continue.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$i&lt;/span> -eq &lt;span class="m">3&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$i&lt;/span> -eq &lt;span class="m">7&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash continue.sh
0
1
2
4
5
6
8
9
10
$
&lt;/code>&lt;/pre>&lt;p>以下のように書くこともできます。こちらの記述のほうがすっきりしていて、Ｃ言語やＪａｖａに慣れ親しんでいる人は、直感的に理解できるかもしれません。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="m">7&lt;/span> &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>(( )) で囲む記述で書いていく方が良いかもしれません。&lt;/dd>
&lt;dd>他の言語で慣れ親しんでいる書き方を踏襲することで、bash独特の書き方に振り回される事がないからです。&lt;/dd>
&lt;dd>なにより、(( )) 内は、変数の冒頭に &amp;lsquo;$&amp;rsquo; が不要になるだけでも、コードが見やすくなります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="スクリプトへの値渡し実行パラメータ">スクリプトへの値渡し「実行パラメータ」&lt;/h2>
&lt;p>このトピックの最初の例は、スクリプトを実行する際に、スクリプトへの入力として値を与えるための説明をします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:input.sh" data-lang="bash:input.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$1&lt;/span> &lt;span class="nv">$2&lt;/span> &lt;span class="nv">$3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードは、端末に3つの値を出力します。&lt;br>
上記のコードをスクリプト「input.sh」に保存します。実行時に実行ファイル名に続き、三つの値を指定して、スクリプトに値を渡します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash input.sh BMW MERCEDES TOYOTA
$ BMW MERCEDES TOYOTA
$
&lt;/code>&lt;/pre>&lt;p>スクリプト実行時に渡した３つの値はそれぞれコードの中で、「BMW」は「$1」、「MERCEDES」は「$2」、「TOYOTA」は「$3」に値は入力されます。&lt;/p>
&lt;p>echoステートメントに「$0」を指定すると、スクリプト名も出力されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:input2.sh" data-lang="bash:input2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$0&lt;/span> &lt;span class="nv">$1&lt;/span> &lt;span class="nv">$2&lt;/span> &lt;span class="nv">$3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash input2.sh BMW MERCEDES TOYOTA
$ input2.sh BMW MERCEDES TOYOTA
$
&lt;/code>&lt;/pre>&lt;p>この目的のために配列を使用することもできます。&lt;br>
配列を宣言するには、コード &amp;lsquo;args=(&amp;quot;$@&amp;quot;)&amp;rsquo; を使用します。&lt;br>
このコード &amp;lsquo;args&amp;rsquo; は配列の名前であり、'@&amp;rsquo; は無限の数の値を持つ可能性があることを表します。&lt;br>
このタイプの配列宣言は、入力のサイズがわからない場合に便利です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:args.sh" data-lang="bash:args.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">args&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">args&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">args&lt;/span>&lt;span class="p">[1]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">args&lt;/span>&lt;span class="p">[2]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>BMW&amp;rsquo;は${args[0]}、「MERCEDES」は${args[1]}、「HONDA」は${args[2]}を表します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash args.sh BMW MERCEDES TOYOTA
$ BMW MERCEDES TOYOTA
$
&lt;/code>&lt;/pre>&lt;p>以下に示すコードは、無限の数の値を持つ配列の値を出力できます。&lt;br>
前の例では、使用されるコマンド &amp;lsquo;echo ${args[0]} ${args[1]} ${args[2]}は配列の最初の3つの値のみを出力しますが、今回のコードは、出力を指定することなく、渡された値の全てを出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:args2.sh" data-lang="bash:args2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">args&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$@&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash args2.sh BMW MERCEDES TOYOTA
BMW MERCEDES TOYOTA
$ bash args2.sh BMW MERCEDES TOYOTA HONDA
BMW MERCEDES TOYOTA HONDA
$
&lt;/code>&lt;/pre>&lt;p>&amp;lsquo;echo $#&amp;rsquo; と書いて配列サイズを出力することもできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:args3.sh" data-lang="bash:args3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">args&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$@&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$#&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash args3.sh BMW MERCEDES TOYOTA
BMW MERCEDES TOYOTA
3
$ bash args3.sh BMW MERCEDES TOYOTA HONDA
BMW MERCEDES TOYOTA HONDA
4
$
&lt;/code>&lt;/pre>&lt;h2 id="文字列処理">文字列処理&lt;/h2>
&lt;h3 id="文字列の比較">文字列の比較&lt;/h3>
&lt;p>このトピックでは、文字列の比較を紹介します。&lt;br>
プログラムは、ユーザーから2つの文字列入力を受け取ります。&lt;br>
プログラムはそれぞれの値を読みこみ、２つの異なる変数 &amp;lsquo;st1&amp;rsquo; &amp;lsquo;st2&amp;rsquo; に格納します。&lt;br>
両方の変数の値を比較するには、「if」ステートメントを使用し、条件文に「==」演算子で、二つの文字列が等価であるかを判定します。&lt;br>
「else」ステートメントは、「文字列が一致しない」場合の処理を記述し、&amp;lsquo;if&amp;rsquo; ステートメントを閉じます。&lt;/p>
&lt;p>以下は、この手順全体のスクリプトコードです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:string.sh" data-lang="bash:string.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter Ist string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> st1&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter 2nd string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> st2&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$st1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$st2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;strings match&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;strings don&amp;#39;t match&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクリプトを「string.sh」に保存します。ターミナルからファイルを実行し、比較のために2つの文字列を与えます。異なる入力を使用してコードをテストすることもできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash string.sh
enter Ist string
BMW
enter 2nd string
BMW
strings match
$
$ bash string.sh
enter Ist string
BMW
enter 2nd string
HONDA
strings don't match
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>文字列の比較は == です。&lt;/dd>
&lt;dd>数値の比較は -eq -gt -lt -ge です。&lt;/dd>
&lt;dd>-eq は[ == ] equals&lt;/dd>
&lt;dd>-gt は[ &amp;gt; ]greater than&lt;/dd>
&lt;dd>-lt は[ &amp;lt; ] less than&lt;/dd>
&lt;dd>-ge は[ &amp;gt;= ] greater equals です。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h3 id="連結">連結&lt;/h3>
&lt;p>2つの文字列を連結することもできます。&lt;br>
プルグラムはユーザーへ入力を促し、２つの変数を &amp;lsquo;st1&amp;rsquo; &amp;lsquo;st2&amp;rsquo; 変数に格納します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:connect.sh" data-lang="bash:connect.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter 1st string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> st1&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter 2nd string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> st2&lt;span class="p">;&lt;/span>
&lt;span class="nv">st3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$st1&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$st2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$st3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードを「connect.sh」に保存し、端末を使用してファイルを実行し、結果を確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash connect.sh
enter 1st string
BMW
enter 2nd string
HONDA
BMW HONDA
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>文字列の結合時にそれぞれの変数の間に空白を起きたい場合は、以下のように二つの変数を「&amp;quot; &amp;ldquo;」ダブるクォーテーションで囲みます。&lt;/dd>
&lt;dd>st3=&amp;quot;$st1 $st2&amp;rdquo;;&lt;/dd>
&lt;dd>
&lt;p>文字列を扱う場合、日頃から変数はダブルクォーテーションで囲む癖をつけておくべきです。&lt;/p>
&lt;/dd>
&lt;dd>変数への代入が「空（くうはく）」だった場合に、プログラムがバグにより停止します。&lt;/dd>
&lt;dd>
&lt;p>これは、文字列を扱う変数に限らず、次章で紹介する数値を格納する変数でも同じです。&lt;/p>
&lt;/dd>
&lt;dd>変数はつねに &amp;quot; &amp;quot; ダブルクオーテーションで囲みましょう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="数値計算処理">数値計算処理&lt;/h2>
&lt;p>このトピックでは、スクリプトを使用してさまざまな数値演算を実行する方法を学習します。&lt;br>
最初の方法では、２つの変数を値で定義し、echoステートメントと「+」演算子を使用してこれらの変数の合計を出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:numberCalc.sh" data-lang="bash:numberCalc.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n1&lt;/span>&lt;span class="o">=&lt;/span>4&lt;span class="p">;&lt;/span>
&lt;span class="nv">n2&lt;/span>&lt;span class="o">=&lt;/span>20&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">+&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash numberCalc.sh
24
$
&lt;/code>&lt;/pre>&lt;h3 id="四則演算">四則演算&lt;/h3>
&lt;p>加算、減算、乗算、除算などの複数の操作を実行するための単一のスクリプトを書くこともできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:numberCalc2.sh" data-lang="bash:numberCalc2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n1&lt;/span>&lt;span class="o">=&lt;/span>20&lt;span class="p">;&lt;/span>
&lt;span class="nv">n2&lt;/span>&lt;span class="o">=&lt;/span>4&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">+&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">-&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">*&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">/&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">%&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash numberCalc2.sh
24
16
80
5
0
$
&lt;/code>&lt;/pre>&lt;h3 id="算術演算-exprコマンド">算術演算 exprコマンド&lt;/h3>
&lt;p>算術演算を実行する他の方法は、「expr」コマンドを使用することです。&lt;br>
この「expr」は、これらのn1とn2を他の変数とみなし、操作を実行することです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:numberCalc3.sh" data-lang="bash:numberCalc3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n1&lt;/span>&lt;span class="o">=&lt;/span>20&lt;span class="p">;&lt;/span>
&lt;span class="nv">n2&lt;/span>&lt;span class="o">=&lt;/span>4&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> + &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash numberCalc3.sh
24
$
&lt;/code>&lt;/pre>&lt;p>「expr」を使用して四則演算を処理してみます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:numberCalc4.sh" data-lang="bash:numberCalc4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n1&lt;/span>&lt;span class="o">=&lt;/span>20&lt;span class="p">;&lt;/span>
&lt;span class="nv">n2&lt;/span>&lt;span class="o">=&lt;/span>4&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> + &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> - &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> &lt;span class="se">\*&lt;/span> &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> / &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> % &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash numberCalc4.sh
24
16
80
5
0
$
&lt;/code>&lt;/pre>&lt;h3 id="小数点の扱い-bcコマンド">小数点の扱い bcコマンド&lt;/h3>
&lt;p>exprコマンドなどは小数演算できません。&lt;br>
echoコマンドで数式を作成し、それをbcコマンドに渡して計算します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bc:bc.sh" data-lang="bc:bc.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=5; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RESULT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bc.sh
3.33333
$
&lt;/code>&lt;/pre>&lt;h2 id="bcコマンドでの小数点以下の指定桁数出力">bcコマンドでの小数点以下の指定桁数出力&lt;/h2>
&lt;p>演算の精度を保つため、上記のように計算は小数点以下5桁で行うけれど、表示は小数点以下2桁とかにしたい場合（桁数を指定したい場合）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:bc_f.sh" data-lang="bash:bc_f.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=5; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>
&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%.2f&amp;#34;&lt;/span> &lt;span class="nv">$RESULT&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bc_f.sh
3.33
$
&lt;/code>&lt;/pre>&lt;p>printf で桁数を指定します。&lt;br>
実は、bcコマンドでも桁数を指定できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:bc_f.sh" data-lang="bash:bc_f.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 先に紹介した方法&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=5; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RESULT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># printfコマンドで２桁にする&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=5; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%.2f\n&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RESULT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># bcコマンドで２桁にする&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=2; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RESULT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bc_f.sh
3.33333
3.33
3.33
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>bcコマンドで小数点以下の桁数を指定するためには、scale= で指定します。&lt;/dd>
&lt;dd>&amp;lsquo;;&amp;lsquo;セミコロンを忘れずに。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="declareコマンド">declareコマンド&lt;/h2>
&lt;p>bashには変数の型(int char stringなど）がないため、bashで変数の型を制限することはできません。&lt;br>
ただし、型のような動作を許可することができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>declare [オプション] [変数名]=[値]
&lt;/code>&lt;/pre>&lt;h3 id="グローバル変数とローカル変数">グローバル変数とローカル変数&lt;/h3>
&lt;p>関数内で declare コマンドを使用すると、オプションがなければローカル変数として定義されます。-g オプションを使用すればスクリプト内のグローバルに変数を定義されます。スコープを明示しないと狭いスコープとなります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:declare.sh" data-lang="bash:declare.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> set_my_value&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">declare&lt;/span> -x &lt;span class="nv">my_env_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ENV&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">declare&lt;/span> -g &lt;span class="nv">my_global_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GLOBAL&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">declare&lt;/span> &lt;span class="nv">my_local_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;LOCAL&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">my_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;XXX&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
set_my_value&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$my_env_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$my_global_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$my_local_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$my_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果は以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash declare.sh
GLOBAL
XXX
$
&lt;/code>&lt;/pre>&lt;h3 id="整数として変数定義する">整数として変数定義する&lt;/h3>
&lt;p>-i を付ければ整数として変数を定義できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:declare_i.sh" data-lang="bash:declare_i.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># -i で整数として変数を定義&lt;/span>
$ &lt;span class="nb">declare&lt;/span> -i &lt;span class="nv">num&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">001&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$num&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash declare_i.sh
1
$
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:declare_no_i.sh" data-lang="bash:declare_no_i.sh">&lt;span class="c1"># -i がないと文字列となるのでそのまま&lt;/span>
$ &lt;span class="nb">declare&lt;/span> &lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">001&lt;/span>
$ decho &lt;span class="nv">$str&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$str&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash declare_no_i.sh
001
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>オプションまとめ&lt;/dt>
&lt;dd>delcare -a: 配列を定義&lt;/dd>
&lt;dd>delcare -i: 整数として定義&lt;/dd>
&lt;dd>delcare -r: 読み取り専用変数として定義&lt;/dd>
&lt;dd>delcare -g: 関数内で使用時、グローバル変数として定義&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="配列">配列&lt;/h2>
&lt;p>配列を宣言し、その中に値を格納する方法を学びます。&lt;br>
好きなだけ値を保存できます。&lt;br>
配列の名前を書き、その値を「( )」括弧で定義します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array.sh" data-lang="bash:array.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array.sh
BMW TOYOTA HONDA
$
&lt;/code>&lt;/pre>&lt;p>「BMW」が「0」番目のインデックスに格納され、「TOYOTA」が「1」番目のインデックスに格納され、「HONDA」が「2」番目のインデックスに格納されます。&lt;br>
「BMW」を出力する場合は、${car[0]}と書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array2.sh" data-lang="bash:array2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#printing value by using index&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing value using index&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[1]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[2]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array2.sh
BMW TOYOTA HONDA
printing value using index
BMW
TOYOTA
HONDA
$
&lt;/code>&lt;/pre>&lt;p>配列のインデックスを印刷することもできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array3.sh" data-lang="bash:array3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing the indexes&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!car[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array3.sh
BMW TOYOTA HONDA
printing the indexes
0 1 2
$
&lt;/code>&lt;/pre>&lt;p>配列内の値の合計数を印刷する場合は、ここに「${#car[@]}」と書くだけで、要素の総数を表します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array4.sh" data-lang="bash:array4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;ROVER&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing the indexes&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!car[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing number of values&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${#&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array4.sh
BMW TOYOTA HONDA ROVER
printing the indexes
0 1 2 3
printing number of values
4
$
&lt;/code>&lt;/pre>&lt;p>配列内にある任意の要素を削除したいとします。&lt;br>
要素を削除するには、配列名と削除する要素のインデックスを含む「unset」コマンドを使用します。&lt;br>
「car」配列の2番目のインデックスに格納されている値を削除する場合は、スクリプトに「unset car[2]」と書くだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array4.sh" data-lang="bash:array4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;ROVER&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nb">unset&lt;/span> car&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing the indexes&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!car[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing number of values&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${#&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>次のコードを「helloScript.sh」に保存します。「./helloScript.sh」を使用してファイルを実行します。&lt;/p>
&lt;p>配列要素を削除することはわかりました。&lt;br>
では「MERCEDES」などの他の値をインデックス2に格納する場合はどうしましょう。&lt;br>
unsetコマンドを使用した後、次の行に「car[2]=&amp;lsquo;MERCEDES」と書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array5.sh" data-lang="bash:array5.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;ROVER&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1"># 2のHONDAを削除&lt;/span>
&lt;span class="nb">unset&lt;/span> car&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>
&lt;span class="c1"># 2に値をセット&lt;/span>
car&lt;span class="o">[&lt;/span>2&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;MERCEDES&amp;#39;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing the indexes&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!car[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing number of values&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${#&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array5.sh
BMW TOYOTA MERCEDES ROVER
printing the indexes
0 1 2 3
printing number of values
4
$
&lt;/code>&lt;/pre>&lt;h2 id="関数">関数&lt;/h2>
&lt;p>関数は基本的に再利用可能なコード行です。何度も呼び出すことができます。&lt;br>
特定の操作を何度も実行する場合、または特定の処理を何度も実行する場合、関数は、何度も何度も同じコードを書くための時間と労力を軽減します。&lt;/p>
&lt;p>以下は関数の構文を示す例です。&lt;br>
覚えておくべき最も重要なことの1つは、関数を呼び出す前にコーディングのどこかで最初に関数を定義または宣言する必要があることです。&lt;/p>
&lt;p>コードで関数を定義するには、３つのステップが必要です。&lt;br>
ステップ1は、指定する関数名の前に「function」コマンドを書き関数名を宣言し、後ろに「()」を書きます。&lt;br>
ステップ2は、処理ブロックは「{」ではじまり、「 }」で閉じられた内側ににコードを書くことです。&lt;br>
ステップ3は、function 関数名() で宣言した下の行で実行したい関数名を使用して関数を呼び出すことです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:method.sh" data-lang="bash:method.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 関数の宣言&lt;/span>
&lt;span class="k">function&lt;/span> funcName&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;this is new function&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1"># 関数呼び出し&lt;/span>
funcName&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash method.sh
this is new function
$
&lt;/code>&lt;/pre>&lt;p>関数にパラメータを与えることもできます。&lt;br>
たとえば、関数呼び出し時に与えられる任意の単語を引数として指定します。&lt;br>
関数呼び出しの関数名の後ろに、文字列を指定して関数に渡します。&lt;br>
渡された関数は、一つ目のパラメータを $1 として処理を続ける事ができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:method2.sh" data-lang="bash:method2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> funcPrint&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
funcPrint &lt;span class="s2">&amp;#34;BashScript&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash method2.sh
BashScript
$
&lt;/code>&lt;/pre>&lt;p>複数のパラメータを扱う場合、$1, $2などの変数名は区別がつきにくく、コードが混乱する場合が多いので、変数に代入すると、扱いやすくなります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:method2.sh" data-lang="bash:method2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> funcPrint&lt;span class="o">(){&lt;/span>
&lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2"> is &lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2"> years old.&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
funcPrint &lt;span class="s2">&amp;#34;BashScript&amp;#34;&lt;/span> &lt;span class="m">24&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash method2.sh
BashScript is 24 years old.
$
関数内で宣言される変数はローカル変数です。
というのは一般的なプログラム言語ですが、シェルスクリプトBashはグローバル変数しかありません。関数の中で宣言しても、関数の外で宣言しても、いずれもグローバル変数です。
先に紹介した declare -g を使うことにより、グローバル変数とローカル変数を明確に区別することができます。
例えば、以下のソースでは、関数実行前に「I love Mac」を変数に格納し、出力します。
その後、関数を呼び出し、同変数に「I love Linux」を変数に代入すると、Ｃ言語やＪａｖａなどは、ローカル変数に格納した値は、グローバル変数に影響しない訳ですが、シェルスクリプトBashは、もろに影響します。理由は全てグローバル扱いだからです。
``` bash:global_local.sh
#!/bin/bash
function funcCheck(){
returningValue=&amp;quot;I love Linux&amp;quot;;
}
returningValue=&amp;quot;I love MAC&amp;quot;;
echo $returningValue;
#&amp;gt; I love Mac
funcCheck;
echo $returningValue;
#&amp;gt; I love Linux
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ bash global_local.sh
I love MAC
I love Linux
$
&lt;/code>&lt;/pre>&lt;h2 id="ファイルとディレクトリ">ファイルとディレクトリ&lt;/h2>
&lt;p>このトピックでは、&lt;br>
１．ファイルとディレクトリを作成する方法、&lt;br>
２．スクリプトを使用してこれらのファイルとディレクトリの存在を確認する方法、&lt;br>
３．ファイルからテキストを1行ずつ読み取る方法、&lt;br>
４．ファイルにテキストを追加する方法、&lt;br>
５．ファイルを削除する方法、&lt;/p>
&lt;p>を紹介します。&lt;/p>
&lt;h3 id="ディレクトリ操作">ディレクトリ操作&lt;/h3>
&lt;p>最初のスクリプトは、「Directory2」という名前のディレクトリを作成します。&lt;br>
&amp;lsquo;mkdir&amp;rsquo; コマンドでディレクトリを作成します。&lt;br>
すでに同じディレクトリに「Directory2」フォルダーがある場合はエラーとなります。&lt;br>
エラーに対処するためには、'-p&amp;rsquo; オプションを使います。&lt;br>
&amp;lsquo;-p&amp;rsquo; オプションは、作成しようとするその場所に、作成したいディレクトリ名が既に存在している場合は、なにもしません。ディレクトリが存在しない場合のみ、新しいディレクトリを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir.sh" data-lang="bash:mkdir.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
mkdir -p Directory2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>現在の場所にディレクトリが存在するかどうかをif文で確認することもできます。&lt;br>
「if」ステートメントでディレクトリが存在するかどうかをチェックするためにはif文の条件式で「-d」フラグを使用します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir-p.sh" data-lang="bash:mkdir-p.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter directory name to check&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> direct&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -d &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$direct&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$direct&lt;/span>&lt;span class="s2"> exists&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$direct&lt;/span>&lt;span class="s2"> doesn&amp;#39;t exist&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ファイル操作">ファイル操作&lt;/h3>
&lt;p>ファイルの作成には「touch」コマンドを使います。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ディレクトリの作成には &amp;lsquo;mkdir&amp;rsquo; コマンド、&lt;/dd>
&lt;dd>ファイルの作成には &amp;lsquo;touch&amp;rsquo; コマンドを使います。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:touch.sh" data-lang="bash:touch.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter file name to create&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
touch &lt;span class="nv">$fileName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>touchコマンドはmkdirコマンド同様、ファイルを作成しようとするその場所に、既に作成しようとするファイル明度同名のファイルが存在した場合、何もしません。&lt;/p>
&lt;p>mkdir は、ディレクトリを作成する。同名のディレクトリがあればエラーとなります。&lt;/p>
&lt;pre tabindex="0">&lt;code>ls
directory2/
$ mkdir directory2
mkdir: directory2: File exists
$
&lt;/code>&lt;/pre>&lt;p>そこで、mkdir -p コマンドは、同名のディレクトリが既にあればエラーを返さず何もしない。なければディレクトリを作成。&lt;br>
touchコマンドも同様で、同名のファイルが既にあればエラーを返さず何もせず、なければファイルを作成します。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>touchコマンドは既に同名のファイルがあれば、エラーを返さない代わりに何もしませんが、「:&amp;gt;」コマンドでファイルを作成した場合、既に作成しようとするその場所に同名のファイルがあった場合、空の新規ファイルで上書きします。（ですので、ファイルは強制的に作成されますが、データ内容は消滅します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>if文で -d フラグでディレクトリの存在を確認する事ができました。&lt;br>
ファイルも同様に -f フラグでファイルの存在を確認する事ができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:checkFile.sh" data-lang="bash:checkFile.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter file name to check&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> exists&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> doesn&amp;#39;t exist&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="テキストへのファイル出力">テキストへのファイル出力&lt;/h3>
&lt;p>ファイルにテキストを追加するには、「&amp;gt;」リダイレクト、または「&amp;raquo;」アペンドを使います。&lt;br>
「&amp;gt;」リダイレクトは、ファイルを新規に作成し直してから出力します。&lt;br>
「&amp;raquo;」アペンドは、既にファイルが存在しているときに限定して出力します。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;gt;」リダイレクトは、既にファイルが存在している場合も、ファイルを新規作成します。ですので、元々あったファイルの内容は空になります。からになってもらっては困ると言う場合は、「touch」コマンドを使います。&lt;/dd>
&lt;dd>
&lt;p>また、「&amp;raquo;」アペンドは、追記する場合に、ファイルがない場合はエラーとなります。こうした事にならないように、次の例文で、ファイルの存在を確認して処理を進めます。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:appendFile.sh" data-lang="bash:appendFile.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;入力ファイル名を指定して下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルに追記したい文字列を入力して下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileText&lt;span class="p">;&lt;/span>
&lt;span class="c1"># ファイルがあれば&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="c1"># アペンド&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;アペンドします&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileText&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; &lt;span class="nv">$fileName&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="c1"># リダイレクト&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;リダイレクトします&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileText&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt; &lt;span class="nv">$fileName&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ファイルの読み込み">ファイルの読み込み&lt;/h3>
&lt;p>スクリプトを使用して任意のファイルを読み取ることもできます。上記の方法に従ってファイルを見つけます。その後、while条件を使用して「read -r line」を使用してファイルを読み取る。ファイルを読み取るので、このシンボル「&amp;lt;」を使用します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:whileRead.sh" data-lang="bash:whileRead.sh">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;読み込みたいファイル名を指定して下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
&lt;span class="c1"># ファイルがあれば&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="c1"># 読み込む&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>&amp;lt;&lt;span class="nv">$fileName&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> は存在しません&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイルを削除するには、まずファイルが存在するかどうかを調べることです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:rm.sh" data-lang="bash:rm.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter file name from which you want to delete&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
rm &lt;span class="nv">$fileName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> doesn&amp;#39;t exist&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>rmコマンドは非常に危険なコマンドです。&lt;/dd>
&lt;dd>ファイルの削除の都度確認を促す -i オプションをつけるなどをするとよいでしょう。&lt;/dd>
&lt;dd>rmコマンドは、ファイルだけではなくディレクトリも削除できます。&lt;/dd>
&lt;dd>再帰的に行いたい場合は、-r オプションをつけると良いです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="curlコマンド">curlコマンド&lt;/h2>
&lt;p>カールは、URL構文を持つデータファイルを取得、または送信するためのコマンドです。&lt;br>
まず最初にしなければならないことはcurlをインストールすることです。&lt;/p>
&lt;pre tabindex="0">&lt;code># 確認
which curl
/usr/bin/curl
$
&lt;/code>&lt;/pre>&lt;p>ない場合、&lt;/p>
&lt;pre tabindex="0">&lt;code># macの場合
$ sudo brew install curl
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># linuxの場合
$ yum install curl
&lt;/code>&lt;/pre>&lt;p>curlをインストールした後、URLを使ってファイルをダウンロードするためのコードを記述します。&lt;br>
curlを使用してデータファイルをダウンロードするには２つのステップが必要です。&lt;/p>
&lt;p>１つ目は、そのファイルの完全なリンクアドレスを持つことです。&lt;br>
２つ目は、そのアドレスをスクリプトの「url」変数に保存し、そのURLでcurlコマンドを使用してダウンロードすることです。ここで「-O」は、ダウンロードするファイル名は、実在のファイル名を継承すると言う意味となります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:curl.sh" data-lang="bash:curl.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://www.ovh.net/files/1Mb.dat&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
curl &lt;span class="si">${&lt;/span>&lt;span class="nv">url&lt;/span>&lt;span class="si">}&lt;/span> -O&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ダウンロードしたファイルに新しい名前を与えるには、「-o」オプションでファイル名を指定します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:curl2.sh" data-lang="bash:curl2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://www.ovh.net/files/1Mb.dat&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
curl &lt;span class="si">${&lt;/span>&lt;span class="nv">url&lt;/span>&lt;span class="si">}&lt;/span> -o NewFileDownload&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>数百ギガバイトのサイズのファイルをダウンロードしたい場合はどうでしょう。&lt;br>
適切なファイルをダウンロードしているかどうかを確認するためにヘッダーファイルをダウンロードすることができます。&lt;br>
ファイルのURLの前に「-I」と書くだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:curl3.sh" data-lang="bash:curl3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://www.ovh.net/files/1Mb.dat&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
curl -I &lt;span class="si">${&lt;/span>&lt;span class="nv">url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="selectコマンド">selectコマンド&lt;/h2>
&lt;p>selectコマンドは、列挙したリストを表示させ、ユーザーに入力を促します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:select.sh" data-lang="bash:select.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">select&lt;/span> car in BMW MERCEDES TESLA ROVER TOYOTA&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;you have selected &lt;/span>&lt;span class="nv">$car&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash select.sh
1) BMW 3) TESLA 5) TOYOTA
2) MERCEDES 4) ROVER
#? 3
you have selected TESLA
#? 4
you have selected ROVER
#?
&lt;/code>&lt;/pre>&lt;p>この場合、選択した車のオプションが表示されますが、オプション以外の番号を入力すると何もしません。&lt;br>
以下の例では、swich-caseを使用して、ユーザーが他の車のオプションを入力した場合、「1から5の間で選択してください」というエラーメッセージが表示されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:select.sh" data-lang="bash:select.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">select&lt;/span> car in BMW MERCEDES TESLA ROVER TOYOTA&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nv">$car&lt;/span> in
BMW&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;BMW SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
MERCEDES&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;MERCEDES SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
TESLA&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;TESLA SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
ROVER&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ROVER SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
TOYOTA&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;TOYOTA SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ERROR! Please select between 1 to 5&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロのメニューでは、プログラムはユーザーの入力を待つ必要があります。&lt;br>
このスクリプトでは、ユーザーに「続行するには任意のキーを押して」ように依頼し、「read -t 3 -n 1」コマンドを使用して3秒ごとにユーザーに「キーSirを押すのを待っています」というリマインダーを送信します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:select.sh" data-lang="bash:select.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;press any key to continue&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nb">true&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="c1"># ３秒ごとに入力を促す&lt;/span>
&lt;span class="nb">read&lt;/span> -t &lt;span class="m">3&lt;/span> -n 1&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$?&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;you have terminated the script&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
exit&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;waiting for you to press the key Sir&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="inotifyコマンド-ファイルの変更を監視する">inotifyコマンド ファイルの変更を監視する&lt;/h2>
&lt;p>inotifyを使用してファイルを変更を監視するする方法を説明します。&lt;br>
inotifyの正式名称は「inode notify」です。&lt;br>
inotifyは、ファイルシステムの変更を監視し、、変更をアプリケーションに報告するLinuxカーネルサブシステムです。inotifyを操作するには、まずターミナルからinotifyをインストールする必要があります。&lt;/p>
&lt;p>Linuxの場合&lt;/p>
&lt;pre tabindex="0">&lt;code>$ yum install inotify-tools
&lt;/code>&lt;/pre>&lt;p>inotifyがどのように反応するかを確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:inotify.sh" data-lang="bash:inotify.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
mkdir -p iNotifyTest
inotifywait -m iNotifyTest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>では、ターミナルの出力を確認します。&lt;br>
ターミナルをもう一つ起動して上記スクリプトを実行しているターミナルと並べて開きます。&lt;/p>
&lt;p>モニターとしてのinotify.shの動作を見ながら別のターミナルウィンドウを開き、「$ touch file1.txt」でファイルを作成すると、inotifyが反応し、ファイルシステムで現在起こっているすべてのアクションを監視していることがわかります。&lt;/p>
&lt;p>次に「file1.txt」に何かを書き、inotifyで動作するターミナルウィンドウからの応答を確認してください。&lt;/p>
&lt;h2 id="grepコマンド">grepコマンド&lt;/h2>
&lt;p>grepコマンドについてはここで詳しく書きました。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/" target="_blank" rel="noopener"
>【 grep 特集】「ざっくりわかるシェルスクリプト４」&lt;/a>&lt;/p>
&lt;p>それはそれとして、ここではざっくりと説明します。&lt;/p>
&lt;p>grepは ‘global regular expression print’ の略です。&lt;br>
このコマンドは、テキストを1行ずつ処理してファイル内のパターンを検索するために使用されます。&lt;br>
まず、touchコマンドを使用してfilegrep.txtという名前のファイルを作成します。ターミナルに次のコードを入力します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ touch filegrep.txt
$ vim filegrep.txt
&lt;/code>&lt;/pre>&lt;p>filegrep.txtを開き、ファイルに次のコンテンツを書き込みます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grepfile.txt" data-lang="bash:grepfile.txt">This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grep.sh" data-lang="bash:grep.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したいファイル名を指定して下さい。&amp;#34;&lt;/span>
&lt;span class="c1"># 入力を grepfile.txt&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したい語句を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> grepvar&lt;span class="p">;&lt;/span>
grep &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$grepvar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash test
検索したいファイル名を指定して下さい。
grepfile.txt
検索したい語句を入力して下さい。
linux
$
&lt;/code>&lt;/pre>&lt;p>入力は「linux」（小文字のエル）ですが、ファイル内のテキストは「Linux」（大文字のエル）で書かれているため、検索結果には何も表示されません。ここでは、grepコマンドに「-i」のフラグを追加するだけで、この大文字と小文字を区別する問題に対処する必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grep2.sh" data-lang="bash:grep2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したいファイル名を指定して下さい。&amp;#34;&lt;/span>
&lt;span class="c1"># 入力を grepfile.txt&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したい語句を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> grepvar&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 大文字小文字の区別をしないオプション -i&lt;/span>
grep -i &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$grepvar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash grep2.sh
検索したいファイル名を指定して下さい。
grepfile.txt
検索したい語句を入力して下さい。
linux
This is Linux
This is Linux
This is Linux
This is Linux
$
&lt;/code>&lt;/pre>&lt;p>出力で行番号を抽出することもできます。このためには、grepコマンドに「-n」の別のフラグを追加するだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grep3.sh" data-lang="bash:grep3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したいファイル名を指定して下さい。&amp;#34;&lt;/span>
&lt;span class="c1"># 入力を grepfile.txt&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したい語句を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> grepvar&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 大文字小文字の区別をしないオプション -i&lt;/span>
grep -in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$grepvar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash grep3.sh
検索したいファイル名を指定して下さい。
grepfile.txt
検索したい語句を入力して下さい。
linux
1:This is Linux
4:This is Linux
7:This is Linux
10:This is Linux
$
&lt;/code>&lt;/pre>&lt;p>ドキュメント内の特定の単語の発生回数を取得することもできます。grepコマンド「grep -i -c $grepvar $fileName」に「-c」フラグを追加し、スクリプトを保存し、端末を使用して実行します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grep4.sh" data-lang="bash:grep4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したいファイル名を指定して下さい。&amp;#34;&lt;/span>
&lt;span class="c1"># 入力を grepfile.txt&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したい語句を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> grepvar&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 大文字小文字の区別をしないオプション -i&lt;/span>
grep -inc &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$grepvar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash test
検索したいファイル名を指定して下さい。
grepfile.txt
検索したい語句を入力して下さい。
linux
4
$
&lt;/code>&lt;/pre>&lt;h2 id="awkコマンド">awkコマンド&lt;/h2>
&lt;p>awkは、データの操作やレポートの作成に使用されるスクリプト言語です。&lt;br>
コンパイルを必要とせず、変数、数値関数、文字列関数、論理演算子が使用できます。&lt;br>
何より処理が高速です。bashよりも高速である場合が多いです。&lt;br>
このトピックでは、シェルスクリプトで多く多用されるawkコマンドの一例を紹介します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | awk '{ print; }';
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
$
&lt;/code>&lt;/pre>&lt;p>「awk」を使用して特定のパターンを検索することもできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | awk '/Linux/ { print; }';
This is Linux
This is Linux
This is Linux
This is Linux
$
&lt;/code>&lt;/pre>&lt;p>次の例では、プログラムがターゲットワードを見つけた行からコンテンツを抽出する方法を見ていきます。 「$1」はその行の最初の単語を表し、同様に「$2」は2番目を表し、「$3」は3番目の単語を表し、「$4」はこの場合最後の単語を表します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | awk '/Linux/ { print $3; }';
Linux
Linux
Linux
Linux
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>awkはとても優れたプログラミング言語で、シェル薬婦とを学ぶことと同じほどのボリュームのある言語です。ただ、シェルスクリプトで使われる多くのbashコマンドを使いこなすことで、awkでないとできないことは限られます。まずはこのトピックで使われるawkコマンドの利用例を身につければオッケーです。すこしずつ覚えていくことを増やしていけばよいのです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="sedコマンド">sedコマンド&lt;/h2>
&lt;p>sedコマンドはストリームエディタの略で、標準入力またはファイルからのテキストの編集操作を実行します。&lt;br>
このトピックでは「i」を「I」に置き換えます。&lt;br>
そのためには、次の sed コマンド &amp;lsquo;cat grepfile.txt | sed -e &amp;rsquo;s/i/I/&amp;rsquo; と書くだけで、cat コマンドを使用してファイルの内容を取得し、パイプ &amp;lsquo;|&amp;rsquo; 記号の後に、&amp;lsquo;sed&amp;rsquo; キーワードを使用して、このケースを置き換える操作を指定します。&lt;br>
「s」はスラッシュと置き換えると言う意味です。&lt;br>
「-e」はsed コマンドを連続してフィルタリングすることを可能とするオプションです。&lt;br>
/置き換え前/置き換え後/&lt;br>
となります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | sed -e &amp;quot;s/i/I/&amp;quot;
ThIs is Linux
ThIs is Windows
ThIs is MAC
ThIs is Linux
ThIs is Windows
ThIs is MAC
ThIs is Linux
ThIs is Windows
ThIs is MAC
ThIs is Linux
ThIs is Windows
ThIs is MAC
$
&lt;/code>&lt;/pre>&lt;p>最初に出てくる &amp;lsquo;This is Linux&amp;rsquo; が &amp;lsquo;ThIs is Linux&amp;rsquo; となったことが解ります。&lt;br>
-g オプションを末尾につけることで、複数回の処理で置き換えます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | sed -e &amp;quot;s/i/I/g&amp;quot;
ThIs Is LInux
ThIs Is WIndows
ThIs Is MAC
ThIs Is LInux
ThIs Is WIndows
ThIs Is MAC
ThIs Is LInux
ThIs Is WIndows
ThIs Is MAC
ThIs Is LInux
ThIs Is WIndows
ThIs Is MAC
$
&lt;/code>&lt;/pre>&lt;p>以下のコマンドで、処理結果を簡単にファイルに出力して、エディターなどで開いて確認する事ができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>cat filegrep.txt | sed -e 's/i/I/g' &amp;gt; newfile.txt
&lt;/code>&lt;/pre>&lt;p>単語全体を別の単語に置き換えることもできます。たとえば、以下に示すスクリプトでは、「Linux」のすべてのインスタンスが端末に表示中に「Unix」に置き換えられます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | sed -e &amp;quot;s/Linux/Unix/g&amp;quot;
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
$
&lt;/code>&lt;/pre>&lt;h2 id="スクリプトのデバッグ">スクリプトのデバッグ&lt;/h2>
&lt;p>Bashは広範なデバッグ機能を提供しています。&lt;/p>
&lt;p>デバッグの方法は３種類あります&lt;/p>
&lt;p>１．ターミナルの実行時に -x オプションを付与する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash -x helloScript.sh
&lt;/code>&lt;/pre>&lt;p>２．ソースコードの冒頭のシェバンに -x オプションを付与する&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:debug.sh" data-lang="bash:debug.sh">&lt;span class="cp">#!/bin/bash -x
&lt;/span>&lt;span class="cp">&lt;/span>:
:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>３．デバッグの開始点と終了点を決めてデバッグ&lt;br>
デバッグの開始点にコマンド &amp;lsquo;set -x&amp;rsquo;終了点には &amp;lsquo;set +x&amp;rsquo; と書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:debug2.sh" data-lang="bash:debug2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">set&lt;/span> -x
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;置き換えたいファイル名を入寮して下さい。&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="nb">set&lt;/span> +x
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
sed -e &lt;span class="s2">&amp;#34;s/Linux/Unix/g&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash test
+ echo 置き換えたいファイル名を入寮して下さい。
置き換えたいファイル名を入寮して下さい。
+ read fileName
grepfile.txt
+ set +x
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
$
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:debug3.sh" data-lang="bash:debug3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># デバッグ開始&lt;/span>
&lt;span class="nb">set&lt;/span> -x
&lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%M&lt;span class="sb">`&lt;/span>
&lt;span class="c1"># デバッグ終了&lt;/span>
&lt;span class="nb">set&lt;/span> +x
&lt;span class="nv">var2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>ls -1 &lt;span class="p">|&lt;/span> wc -l&lt;span class="sb">`&lt;/span>
&lt;span class="nv">var3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;DEBUG TEST&amp;#34;&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash debug3.sh
++ date +%M
+ var1=56
+ set +x
$
&lt;/code>&lt;/pre>&lt;h1 id="関連記事">関連記事&lt;/h1>
&lt;p>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/" target="_blank" rel="noopener"
>【はじめから】「ざっくりわかるシェルスクリプト１」&lt;/a>&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/" target="_blank" rel="noopener"
>【はじめから】「ざっくりわかるシェルスクリプト２」&lt;/a>&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/" target="_blank" rel="noopener"
>【はじめから】「ざっくりわかるシェルスクリプト３」&lt;/a>&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/" target="_blank" rel="noopener"
>【 grep 特集】「ざっくりわかるシェルスクリプト４」&lt;/a>&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/" target="_blank" rel="noopener"
>【grep/sed/awkも】「ざっくりわかるシェルスクリプト５」&lt;/a>&lt;/p>
&lt;h1 id="書籍の紹介">書籍の紹介&lt;/h1>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4774186945&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/B00QJINS1A/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B00QJINS1A&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=36dff1cf8fa7d4852b5a4a3cf874304b" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B00QJINS1A&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;!-- EOL --></description></item><item><title>pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（２）</title><link>https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/</link><pubDate>Tue, 01 Feb 2022 15:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/chess.jpg" alt="Featured image of post pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（２）" />&lt;h2 id="グローバル変数">グローバル変数&lt;/h2>
&lt;p>今回は、前回からの引き続きでブルートフォース力任せ探索のプログラムの詳細部分を説明します。&lt;/p>
&lt;p>プログラムのソースは以下のURLをご覧ください。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py01_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py01_nqueen.py&lt;/a>&lt;/p>
&lt;p>まず、グローバル変数を見ていきましょう。&lt;/p>
&lt;p>417~420行目で設定しています。&lt;/p>
&lt;p>417行目 MAX、418行目 SIZEでNの数を指定します。&lt;br>
プログラムは8ですが、動作を説明するために4に変更してみてください。&lt;/p>
&lt;pre tabindex="0">&lt;code>MAX = 4
SIZE = 4
&lt;/code>&lt;/pre>&lt;p>以降はN=4の問題として説明します。&lt;/p>
&lt;p>419行目 ABOARDという配列を宣言しクイーンを置いていきます。&lt;br>
ABOARD = [0 for i in range(MAX)]で4個の要素を0で初期化しています。&lt;br>
ABOARD = [0,0,0,0] と同じです。&lt;/p>
&lt;p>ABOARD[0]は1行目のクイーンを置く位置です0から3までの数字が入ります。&lt;br>
ABOARD[0]が3だと右から4番目にクイーンを置く感じになります。&lt;/p>
&lt;p>420行目 COUNT=0 でCOUNTを初期化しています。&lt;/p>
&lt;h2 id="nqueenメソッド">nqueenメソッド&lt;/h2>
&lt;p>グローバル変数の宣言が終わったら441行目でnqueenメソッドが呼び出されます。&lt;/p>
&lt;p>439行目でnqueenメソッドを再帰的に呼び出しているのが最も特徴的です。&lt;/p>
&lt;p>全体の動作については次の「再帰について」で図を交えて説明しますが前提として各行が何をしているか押さえましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code> global ABOARD
&lt;/code>&lt;/pre>&lt;p>433行目で global ABOARDとして変数宣言しています。&lt;br>
関数内でグローバル変数に値を代入したい場合は、変数宣言時にglobalをつける必要があります。&lt;br>
globalをつけないとローカル変数として扱われます。&lt;br>
ちなみに、私は試しに433行目を削除して実行してみたのですがエラーになりました。&lt;/p>
&lt;pre tabindex="0">&lt;code> if row is SIZE:
printout()
&lt;/code>&lt;/pre>&lt;p>434行目 if row is SIZE: はrowイコールSIZEという意味です。&lt;br>
if row == SIZE: としても今回は同じ動きになります。&lt;/p>
&lt;p>434-435行でやっていることは434行目のif文で最終行までクイーンを置き終わっているかどうかを判定し置き終わっていたらprintoutメソッドを呼び出してCOUNT数と各行のクイーンの設置場所を出力します。&lt;/p>
&lt;pre tabindex="0">&lt;code> for i in range(SIZE)
&lt;/code>&lt;/pre>&lt;p>437行目 for i in range(SIZE) は0からスタートしてSIZEの回数分0,1,2,3と1ずつインクリメントしながらfor文を回します。&lt;br>
やっていることは各行にクイーンを設置する場所を右から左に1個ずつずらしています。1番左端までいったらfor文を抜けます。&lt;/p>
&lt;pre tabindex="0">&lt;code> ABOARD[row] = i
&lt;/code>&lt;/pre>&lt;p>438行目のABOARD[row]=iでクイーンを設置しています。&lt;br>
rowは行を意味します。0からスタートして0,1,2,3まであります。&lt;br>
例えば、0だと1行目、3だと4行目となります。&lt;/p>
&lt;p>iはクイーンを設置する列になります。&lt;br>
0からスタートして0,1,2,3まであります。&lt;br>
例えば、0だと右から1列目、3だと右から4列目となります。&lt;/p>
&lt;p>例えばABOARD[2]=3 の場合は&lt;br>
3行目は右から4列目にクイーンを置くことになります。&lt;/p>
&lt;pre tabindex="0">&lt;code> nqueen(row+1)
&lt;/code>&lt;/pre>&lt;p>439行目のnqueen(row+1)で再帰的にnqueenメソッドを呼び出しています。&lt;br>
やっていることは次の行への移動です。&lt;/p>
&lt;h2 id="再帰の動きについて">再帰の動きについて&lt;/h2>
&lt;p>再帰の基本的な動作で押さえたいのは以下の2つです。&lt;br>
・再帰を呼び出した時の動作&lt;br>
通常のメソッド呼び出しと同じです。メソッドの先頭に移動します。引数に渡された値が反映されます。&lt;br>
・再帰から抜ける時の動作&lt;br>
再帰から抜けると1階層前に戻り再帰を呼び出した場所の次の行に移動します。&lt;br>
変数の状態は再帰を呼び出す直前の状態に戻ります。&lt;/p>
&lt;p>再帰の呼び出しが実際にどういう動きになっているかは頭で考えても難しいので図を見ながら説明します。&lt;/p>
&lt;p>444行目でnqueenを0を渡して呼び出します(1階層目)。&lt;br>
432行目からスタートして&lt;br>
row=0なので436行目のelse:に行きそのまま437行目のfor文に入ります&lt;br>
最初のfor文なのでi=0です。&lt;br>
row=0なので&lt;br>
ABOARD[0]=0&lt;br>
で&lt;br>
1行目の右端にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q1.png" data-size="322x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q1.png"
width="322"
height="324"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを呼び出します。&lt;br>
row=0 row+1=1なので&lt;br>
nqueenを引数1を渡して呼び出します(2階層目)&lt;br>
432行目からスタートして&lt;br>
row=1なので436行目のelse:に行きそのまま437行目のfor文に入ります&lt;br>
最初のfor文なのでi=0です。&lt;br>
さっきもfor文が出てきましたが再帰は階層ごとにローカル変数を別に考える必要があります。&lt;br>
row=1なので&lt;br>
ABOARD[1]=0&lt;br>
で&lt;br>
2行目の右端にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 103;
flex-basis: 249px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q2.png" data-size="328x316">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q2.png"
width="328"
height="316"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数2を渡して呼び出します(3階層目)。&lt;br>
同様にfor文に入り、i=0 row=2なので&lt;br>
ABOARD[2]=0&lt;br>
で&lt;br>
3行目の右端にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q3.png" data-size="330x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q3.png"
width="330"
height="330"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数3を渡して呼び出します(4階層目)。&lt;/p>
&lt;p>同様にfor文に入り、i=0 row=3なので&lt;br>
ABOARD[3]=0&lt;br>
で&lt;br>
4行目の右端にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 237px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q4.png" data-size="324x328">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q4.png"
width="324"
height="328"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;/p>
&lt;p>row=4なのでif row is SIZE:でprintout()メソッドを呼び出してCOUNTと各行のクイーンの位置を出力します。&lt;br>
printout()後再帰から抜けて4階層目の439行目の後ろに移動します。&lt;br>
変数は再帰を呼び出す直前のものに戻るのでrowは3 iは0になります。&lt;/p>
&lt;p>for文の中にあるのでiを1インクリメントしてiは1になり次のfor文に移動します。&lt;br>
_&lt;br>
ABOARD[3]=1&lt;br>
で&lt;br>
4行目の右から2番目にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q5.png" data-size="322x320">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q5.png"
width="322"
height="320"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;br>
row=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。&lt;/p>
&lt;p>for文の中にあるのでiを1インクリメントしてiは2になり次のfor文に移動します。&lt;br>
_&lt;br>
ABOARD[3]=2&lt;br>
で&lt;br>
4行目の右から3番目にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q6.png" data-size="326x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q6.png"
width="326"
height="324"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;br>
row=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。&lt;/p>
&lt;p>for文の中にあるのでiを1インクリメントしてiは3になり次のfor文に移動します。&lt;br>
_&lt;br>
ABOARD[3]=3&lt;br>
で&lt;br>
4行目の右から4番目にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q7.png" data-size="332x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q7.png"
width="332"
height="330"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;br>
row=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。&lt;br>
for文でiを1インクリメントすると4ですがrange(4)だと0,1,2,3までなのでここでfor文を抜けます。&lt;/p>
&lt;p>for文を抜けると439行目には移動しないので再帰から抜けて3階層目の439行目に移動します。&lt;/p>
&lt;p>3階層目ではrow=2 iは0です。&lt;br>
for文の中にあるのでiを1インクリメントしてiは1になり次のfor文に移動します。&lt;/p>
&lt;p>ABOARD[2]=1&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q8.png" data-size="326x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q8.png"
width="326"
height="326"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数3を渡して呼び出します(4階層目)。&lt;/p>
&lt;p>row=3なので436行目のelse:に行きそのまま437行目のfor文に入ります&lt;br>
最初のfor文なのでi=0です。&lt;/p>
&lt;p>ABOARD[3]=0&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q9.png" data-size="326x320">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q9.png"
width="326"
height="320"
loading="lazy"
alt="図">
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;br>
row=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。&lt;br>
という感じで下の階層からfor文でぐるぐる回転しながらうごいてゆきます。&lt;/p></description></item><item><title>Javascriptで画面ロックが発生する場合は、Workerを使ってみよう。</title><link>https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/</link><pubDate>Tue, 01 Feb 2022 14:19:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/catch.jpg" alt="Featured image of post Javascriptで画面ロックが発生する場合は、Workerを使ってみよう。" />&lt;p>Javascript で重い処理を書く際や for や while などのループを記述する際に気をつけないといけないのがUIロックです。&lt;/p>
&lt;p>特に重い処理を行うと、js の処理に力を使ってしまって画面が固まってUIなどの操作性が格段に落ちてしまい、ブラウザなどからは応答に時間がかかっておりますといったアラートが表示される原因になります。&lt;/p>
&lt;p>そういったときは &lt;strong>Worker&lt;/strong> を使って重い処理を別タスクとして実行することで、画面上の処理と、重い処理を分けることができ、その結果画面をロックすることなく表示させることが可能になります。&lt;/p>
&lt;p>今回はその方法を説明していきます。&lt;/p>
&lt;h2 id="uiをロックしてしまうループ処理">UIをロックしてしまうループ処理&lt;/h2>
&lt;p>まずは画面をロックしてしまうような記述です。&lt;br>
下記のような HTML があったとしましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html:index.html" data-lang="html:index.html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ja&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">#&lt;/span>&lt;span class="nn">animation&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">before&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">keyframes&lt;/span> &lt;span class="nt">rotation&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);}&lt;/span>
&lt;span class="nt">100&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">360&lt;/span>&lt;span class="kt">deg&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">run&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">animation&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">before&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">animation&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">s&lt;/span> &lt;span class="kc">linear&lt;/span> &lt;span class="kc">infinite&lt;/span> &lt;span class="k">rotation&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">run&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">red&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;animation&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span> &lt;span class="na">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;run()&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Run&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;counter&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この HTML は counter 部分 に文字を出力できるようにしてあります。&lt;br>
そして、実行時間を time 部分に出力できるようにしてあります。&lt;/p>
&lt;p>それでは、ここに for 文を使って、文字を追加していってみます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:for01.js" data-lang="javascript:for01.js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#counter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">elem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#time&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上のようなfor文で記述したスクリプトを作ってみました。&lt;br>
iの値をcounterに反映していくだけのものです。&lt;br>
まずはiの最大値を 100000 くらいで実行してみましょう。&lt;/p>
&lt;p>実行したところ、999999 と表示され、time部分の処理は 569 ミリ秒ということになります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 290px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/img01.gif" data-size="980x809">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/img01.gif"
width="980"
height="809"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ここで注目してほしいのが、counter の文字を変化させているにも関わらず、その文字が反映されていないという点です。&lt;br>
Chrome の Developper tool で確認しても、変化しているようではありますが、画面上では反映されていません。&lt;/p>
&lt;p>重い処理を行う場合をフロントで行うと、 UX の低下につながってしまいます。&lt;br>
そこで使うのが、 Worker 処理ということになります。&lt;/p>
&lt;h2 id="workerとは">Workerとは&lt;/h2>
&lt;p>Worker とはバックグランド、つまり、裏の方で処理を行ってその結果をフロントに返却するということができる仕組みになります。&lt;/p>
&lt;p>フロントで処理を行わないので、画面ロックを発生させることなく重い処理を実行できます。&lt;br>
Worker を使用するには実行したいファイル名を指定して呼びします。&lt;/p>
&lt;p>そして、対象のワーカーに値などを &lt;strong>postMessage&lt;/strong> で値を渡します。&lt;br>
postMessage 部分は配列や連想配列のデータでも構いません。&lt;/p>
&lt;p>そして、対象のWorker側でpostされたデータを受信するように設定します。&lt;br>
受信の際はフロントであれば &lt;code>worker.addEventListener('message', (e) =&amp;gt; {})&lt;/code> を、Workerであれば &lt;code>self.addEventListener('message', (e) =&amp;gt; {})&lt;/code> を使用します。&lt;br>
処理内容を返却する際は、先ほどと同じように postMessage を使います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:main.js" data-lang="javascript:main.js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">worker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:worker.js" data-lang="javascript:worker.js">&lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//処理内容
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//処理結果を送信
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uiをロックしないで行えるループ">UIをロックしないで行えるループ&lt;/h2>
&lt;p>それでは、先ほどロックしてしまったjsをworkerにしてみましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:worker_main.js" data-lang="javascript:worker_main.js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">worker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;worker.js&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#counter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mode&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#time&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#counter&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>続いて、Worker部分の処理になります。&lt;br>
worker部分ではフロントの worker_main.js から実行されたタイミングで動作を開始して、ループの値をフロントに戻すようにしてあります。&lt;br>
ループが終了すると、mode: end と終わったことを通知するようにしました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:worker.js" data-lang="javascript:worker.js">&lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//処理内容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">mode&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="c1">//処理結果を送信
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>それでは実行してみましょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 290px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/img02.gif" data-size="980x809">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/img02.gif"
width="980"
height="809"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>実行すると、先ほどと全く違うUIになっているかと思います。&lt;br>
実はRunを押したタイミングで、ボタンを赤くして、上の四角が回転するようにしてありました。&lt;br>
Workerなしの処理ではJavascriptの処理が詰まってしまい、その部分の処理が正しく表示されていなかったということになります。&lt;/p>
&lt;h2 id="settimeoutでもできるけどおすすめはしない">setTimeoutでもできるけど、おすすめはしない&lt;/h2>
&lt;p>UIのロックを防ぐ方法として、setTimeoutを使う方法もあります。&lt;br>
この方法はworkerを使っていないのですが、setTimeoutを使用することで別タスクとして処理させることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:timer.js" data-lang="javascript:timer.js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#counter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()=&amp;gt;{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">elem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#time&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>数字部分は変化しますが、先程のようにアニメーションは行われません。&lt;br>
forの処理が先に終了してしまうため、cssのアニメーションが一瞬で終了してしまうのです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 290px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/img03.gif" data-size="980x809">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/img03.gif"
width="980"
height="809"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Javascriptを使っていると思い処理も当然行う場合があります。そうしたときに、フロントで処理をしてしまうとローディングなどのアニメーションが正しく行われなかったりする原因になってしまいます。&lt;br>
Worker を使って、処理を別タスクとしてやることで正しくローディングなどを表示させることが可能です。&lt;/p>
&lt;p>重い処理を行う際は、Workerを使って別タスクで行ってユーザーにストレスを与えないサイトを作っていきましょう。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%82%b2%e3%83%bc%e3%83%a0%e3%81%a7%e5%ad%a6%e3%81%b6JavaScript%e5%85%a5%e9%96%80-HTML5-CSS%e3%82%82%e8%ba%ab%e3%81%ab%e4%bb%98%e3%81%8f-%e7%94%b0%e4%b8%ad-%e8%b3%a2%e4%b8%80%e9%83%8e/dp/4844339788/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51SCEJnrZGL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> ゲームで学ぶJavaScript入門 HTML5&amp;amp;CSSも身に付く! &lt;/h2>
&lt;p> 「JavaScriptでココまでできる!」 中学生、高校生のための、ゲームプログラミング入門書の決定版! JavaScriptを使用したWebブラウザゲームの製作ノウハウを解説する入門書です。 Webページをまったく作ったことはないが、現在主流となっているブラウザゲームに興味があり、 「自分でもゲームプログラミングに挑戦してみたい!」と考えている初心者、とくに中・高校生に最適です。 本書では「より面白く」「見栄え良く」をモットーに、13本のサンプルゲームを紹介しています。 ゲームを作りながら、JavaScriptだけでなくHTML5やCSSといったWeb技術の基本もしっかり学習できます。 最後までラクに読めて、感覚的に仕組みを理解できるように、 「楽しさ」が感じられて「飽きさせない」ことを重視した構成になっています。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e7%a2%ba%e3%81%8b%e3%81%aa%e5%8a%9b%e3%81%8c%e8%ba%ab%e3%81%ab%e3%81%a4%e3%81%8fJavaScript%e3%80%8c%e8%b6%85%e3%80%8d%e5%85%a5%e9%96%80-%e7%ac%ac2%e7%89%88-%e7%8b%a9%e9%87%8e-%e7%a5%90%e6%9d%b1/dp/4815601577/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51RXlVPRVuL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 確かな力が身につくJavaScript「超」入門 第2版 &lt;/h2>
&lt;p> ◎ 3万部突破のベストセラーが充実のアップデート! JavaScriptをこれから始める人にも、前に挫折したことのある人にも。 手を動かしてサンプルをひとつずつ作っていくことで、知識だけでなく、 現場で活きる、応用・実践につながる基礎力が「この一冊で」身につきます。 ポイント1「サンプルが楽しい。」 よくある“勉強のためのサンプル&amp;#34;を可能な限り排除し、「こういうの見たことある! 」「こういうのが作ってみたかった! 」というような、実際に仕事に使えそうなサンプルを集めました。なので、最初の「やるぞ! 」というモチベーションを維持したまま、最後のページまで読み進めることができます。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>パソコンは不要。iPhoneやiPadなどのスマホ、タブレットでできるブログ投稿</title><link>https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/</link><pubDate>Fri, 28 Jan 2022 15:35:18 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img11.jpg" alt="Featured image of post パソコンは不要。iPhoneやiPadなどのスマホ、タブレットでできるブログ投稿" />&lt;p>iPhoneやiPadなどのスマホ、タブレットは持ち運びに非常に便利です。パソコンよりも軽く、パソコンと同等の機能を備えてます。&lt;br>
そうした端末を使って記事が投稿できたら、スタバやドトールなどのカフェでコーヒーを飲みながら記事を書くことができてしまいます。&lt;/p>
&lt;p>今回は、AmazonのEC2上にあるHugoのブログをiPadを使って更新して見たいと思います。&lt;/p>
&lt;h2 id="iphoneやipadでターミナルを使う">iPhoneやiPadでターミナルを使う&lt;/h2>
&lt;p>iPhoneやiPadにも数多くの素晴らしいターミナルアプリがあります。&lt;br>
その中でも私が使っているのは&lt;a class="link" href="https://apps.apple.com/jp/app/termius-ssh-client/id549039908" target="_blank" rel="noopener"
>Termius: Terminal &amp;amp; SSH client&lt;/a>というアプリです。&lt;/p>
&lt;p>このアプリはターミナルの機能を持っており、SSHでのサーバ接続も可能です。もちろんログインの際にpemファイルなどを使用することも可能です。&lt;/p>
&lt;p>基本的な機能は無料で使用できるので、まずはインストールをしてみましょう。&lt;/p>
&lt;h2 id="初期設定">初期設定&lt;/h2>
&lt;p>起動すると、アカウントの登録が必要かと思いますが、必要ありません。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img01.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img01.jpg"
width="980"
height="644"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>下にある「Learn more」を押して、「Continue without account」にてログイン無しで使えます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img02.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img02.jpg"
width="980"
height="644"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>課金すると様々な機能を使えるようになるので、そういった機能でより便利に使いたい人は是非、課金してください。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img03.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img03.jpg"
width="980"
height="644"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>インストールが終わったら「New Hosts」をタプして、ログインしたいサーバを追加するか、「Hosts」メニューの右上にある「＋」ボタンを押してサーバを追加します。&lt;/p>
&lt;p>Alias には自分がわかりやすい名前をつけます。&lt;br>
Hostname にはサーバのドメイン名やIPアドレスを入力します。&lt;br>
Port はSSHを使うときのポートです。&lt;br>
そして、ユーザー名とパスワードを使っている人はパスワードを入力します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img04.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img04.jpg"
width="980"
height="644"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>pemファイルを使っている人は、pemの内容をコピーして貼り付けるか、パソコンからpemを送信します。&lt;br>
送信はパソコンでiPadなどを接続して、ファイルタブから贈りたいpemファイルをドラッグ・アンド・ドロップします。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img05.jpg" data-size="980x543">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img05.jpg"
width="980"
height="543"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>pemファイルをiPadに送り終わったら、Keyを押して、左上の「+」「Import Key」にて先程送ったファイルを選択します。&lt;br>
これでキーが設定されました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img06.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img06.jpg"
width="980"
height="644"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ここまで設定できたら、左上の「Save」にて保存しましょう。&lt;br>
以上でサーバに接続する準備ができました。&lt;/p>
&lt;h2 id="サーバに接続">サーバに接続&lt;/h2>
&lt;p>Alias に設定した名前でアイコンが作成されているかと思います。&lt;br>
そのアイコンを押すと、know hostsに登録するかどうか聞かれるので、「Continue」を押して追加します。&lt;br>
うまく設定できていたらサーバに接続できると思います。&lt;br>
できない場合は、アイコンを長押しして、「Edit」にて情報を正しいものに修正しましょう。&lt;/p>
&lt;h2 id="tabはどうするの">Tabはどうするの？&lt;/h2>
&lt;p>SSHではtabコマンドで入力の補完を設定しているケースがあるともいます。&lt;br>
iPadにはタブというキーがありません。さて……どうしたものでしょうか。Termius はそこもよく考えられていて、通常であれば画面をタブルタップすると「Tab」と一瞬表示されてタブキーを押したときと同様のことが行なえます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img07.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img07.jpg"
width="980"
height="644"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>その他にも、キーボードの上にある「…」マークを押して、「ギアーアイコン」を押すと初期のキーボード上部のボタンを変更することが可能です。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img08.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img08.jpg"
width="980"
height="644"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Tabキーやコントロールキーが使えるとiPadでも十分使えますね。&lt;/p>
&lt;h2 id="hugoで記事を書いて確認する">hugoで記事を書いて確認する&lt;/h2>
&lt;p>hugoで記事を書くやり方は&lt;a class="link" href="http://localhost:1313/posts/2021-12-22-hugo-01-ywat/" target="_blank" rel="noopener"
>デザイナーでもできる初めてのHUGO #01&lt;/a>を参照してください。&lt;/p>
&lt;p>EC2で記事を書いて、確認しようとするとある疑問を持ってしまいます。それは確認用のサーバはどうしたら良いのかということです。&lt;br>
通常であれば「localhost:1313」などのURLで確認できます。しかし、EC2ではlocalhostとしてもEC2本体のアドレスではないので、確認できません。&lt;/p>
&lt;p>hugoにはIPを指定してサーバを起動する機能があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">hugo server --baseURL&lt;span class="o">=[&lt;/span>URL&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のコマンドでアクセスできるかというと、まだ駄目です。&lt;/p>
&lt;p>最終的なコマンドは&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート]
&lt;/code>&lt;/pre>&lt;p>となります。&lt;/p>
&lt;p>ここで重要なのが&lt;code>--bind=0.0.0.0&lt;/code>になります。&lt;/p>
&lt;p>ここまできたら、ほぼほぼ確認できるようになっています。&lt;/p>
&lt;h3 id="ec2でファイヤーウォールを設定している場合">EC2でファイヤーウォールを設定している場合&lt;/h3>
&lt;p>EC2を使用している場合、ALBやELBを設定していることが多いと思います。&lt;br>
先程指定したポートが空いているか確認して、空いていない場合は、EC2の設定で開けましょう。&lt;/p>
&lt;p>EC2のインバウンドルールに開けたいポートを追加します。&lt;br>
セキュリティーグループを使用している場合は、「インバウンドのルールを編集」をクリックして追加します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 164;
flex-basis: 395px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img09.png" data-size="980x594">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img09.png"
width="980"
height="594"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>下にある「ルールを追加」を押して、「カスタムTCP」にします。&lt;br>
次に、ポート範囲に開けたいポートを入力して、CIDR ブロックにインターネットゲートウェイを指すすべての IPv4 トラフィック (0.0.0.0/0) のルートを追加します。&lt;br>
IPv6の場合も追加したいので、もう一度「ルールを追加」を押して、ポートを入力し、IPv6 トラフィック (::/0) のルートを入力します。&lt;br>
設定が終わったら、保存しましょう。&lt;br>
これでポートの設定が完了しました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 411;
flex-basis: 988px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img10.png" data-size="980x238">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img10.png"
width="980"
height="238"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="ipadで確認しながら更新をする">iPadで確認しながら更新をする&lt;/h2>
&lt;p>サーバにログインして、先程の&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート]
&lt;/code>&lt;/pre>&lt;p>でサーバを立ち上げます。&lt;br>
このとき、下書きの記事を表示したいときは&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート] -D
&lt;/code>&lt;/pre>&lt;p>として下書きも表示するようにしましょう。&lt;/p>
&lt;p>また、サーバのアドレスがわからない場合は&lt;/p>
&lt;pre tabindex="0">&lt;code>$ curl -s ifconfig.me
&lt;/code>&lt;/pre>&lt;p>とすればIPアドレスがわかります。&lt;/p>
&lt;p>iPadにはSplitビューがついているので、片方でブログを書きながら、　もう片方でSafariなどを立ち上げて立ち上げて記事を確認しながら記述することが可能です。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img11.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img11.jpg"
width="980"
height="644"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>構築が終わったら&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/" target="_blank" rel="noopener"
>iPadに開発環境を構築してみるテスト&lt;/a>を参考にして、EC2内での詳細な設定をしてみましょう。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>iPadを使うとどこでも、重いパソコンを持たなくても簡単にブログを更新することができるようになります。是非オススメなので、みなさんも試してみてください。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/iPad%e5%ae%8c%e5%85%a8%e3%83%9e%e3%83%8b%e3%83%a5%e3%82%a2%e3%83%ab2022-%e5%85%a8%e6%a9%9f%e7%a8%ae%e5%af%be%e5%bf%9c-%e5%9f%ba%e6%9c%ac%e6%93%8d%e4%bd%9c%e3%81%8b%e3%82%89%e6%b4%bb%e7%94%a8%e6%8a%80%e3%81%be%e3%81%a7%e8%a9%b3%e7%b4%b0%e8%a7%a3%e8%aa%ac-standards/dp/4866365285/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51Vmx-LPwGL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> iPad完全マニュアル2022(全機種対応/基本操作から活用技まで詳細解説) &lt;/h2>
&lt;p> iPadをしっかり使いこなすための決定版ガイドブック。 iPadOS 15に対応した最新版です。 2021年発売の最新モデルはもちろん、すべてのiPad Pro、iPad Air、iPad、iPad miniの全モデル ホームボタン搭載/非搭載含めすべての機種に対応します。 &lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/AWS%e3%81%a7%e3%81%af%e3%81%98%e3%82%81%e3%82%8b%e3%82%a4%e3%83%b3%e3%83%95%e3%83%a9%e6%a7%8b%e7%af%89%e5%85%a5%e9%96%80-%e5%ae%89%e5%85%a8%e3%81%a7%e5%a0%85%e7%89%a2%e3%81%aa%e6%9c%ac%e7%95%aa%e7%92%b0%e5%a2%83%e3%81%ae%e3%81%a4%e3%81%8f%e3%82%8a%e6%96%b9-%e4%b8%ad%e5%9e%a3-%e5%81%a5%e5%bf%97/dp/4798163430/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/511vlSp5gZL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> AWSではじめるインフラ構築入門 安全で堅牢な本番環境のつくり方 &lt;/h2>
&lt;p> AWSのネイティブ機能を組み合わせて 安全かつ堅牢なインフラを構築・運用 本書は、AWS(Amazon Web Services)を利用して、 インフラを構築/運用する方法を解説する入門書です。 クラウドでネットワーク&amp;amp;サーバー構築を行うために必要な基礎知識や、 AWSのネイティブ機能を組み合わせて安全かつ堅牢なインフラを構築/運用 するための設定方法やノウハウを解説します。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>iPadに開発環境を構築してみるテスト</title><link>https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/</link><pubDate>Fri, 28 Jan 2022 14:02:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/linux.jpg" alt="Featured image of post iPadに開発環境を構築してみるテスト" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;ul>
&lt;li>まずはこちらをやりましょう。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/" target="_blank" rel="noopener"
>パソコンは不要。iPhoneやiPadなどのスマホ、タブレットでできるブログ投稿&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="必要なもの">必要なもの&lt;/h2>
&lt;ul>
&lt;li>iPad&lt;/li>
&lt;li>Termiusというアプリ&lt;br>
&lt;a class="link" href="https://apps.apple.com/jp/app/termius-ssh-client/id549039908" target="_blank" rel="noopener"
>Termius: Terminal &amp;amp; SSH client&lt;/a>&lt;/li>
&lt;li>AWSのサーバーインスタンス&lt;br>
&lt;a class="link" href="https://qiita.com/kanegoon/items/4bcdf5184cf1752eb44f" target="_blank" rel="noopener"
>AWS EC2 インスタンスの作成&lt;/a>&lt;/li>
&lt;li>AWSインスタンスにログインするために必要なpemファイル（キーチェイン）&lt;br>
&lt;a class="link" href="https://qiita.com/takuma-jpn/items/b2c04b7a271a4472a900" target="_blank" rel="noopener"
>AWS EC2にSSHでアクセスする方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="awsインスタンスへの接続">AWSインスタンスへの接続&lt;/h2>
&lt;p>pemファイルをスマホに送る&lt;br>
インスタンスを作るときにpemファイルをダウンロードしたと思います&lt;br>
（してなかったら、pemファイルは一回しかダウンロードさせてくれないのでインスタンスを作り直しましょう）&lt;br>
このpemファイルをＰＣのエディターで開き、内容をテキストファイルにペーストします。&lt;br>
このファイルをＬＩＮＥなりメールなりGoogleドライブなりでスマホに送ります。&lt;/p>
&lt;p>pemファイルをTermiusで読み込みます&lt;/p>
&lt;ul>
&lt;li>ＰＣ上で鍵ファイル(.pem)をテキスト化してiPadで内容をコピーして貼り付けられるようにしておくことが重要です。&lt;br>
&lt;a class="link" href="https://tomikyblog.com/termius%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f" target="_blank" rel="noopener"
>iPad Proでsshクライアント「Termius」を使ってみた&lt;br>
&lt;/a>&lt;br>
&lt;a class="link" href="https://pkunallnet.com/pcinfo/apple/ipad-aws-linuxconnection/" target="_blank" rel="noopener"
>iPadからAWSのEC2インスタンス(LINUX)にSSH接続する方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="アカウントの作成">アカウントの作成&lt;/h2>
&lt;p>rootでの作業でも良いのですが、一般論としてここではアカウントの作成から説明します。&lt;/p>
&lt;p>まずは、サーバーに接続します。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$
&lt;/code>&lt;/pre>&lt;p>いわゆるrootでログインした訳です。&lt;br>
ここでユーザー名 suzuki を追加します。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$ useradd suzuki
&lt;/code>&lt;/pre>&lt;p>さらに suzuki のパスワードも設定します。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$ passwd suzuki
&lt;/code>&lt;/pre>&lt;p>パスワードは２回同じ入力を求められます&lt;br>
では rootからsuzukiにアカウントを切り換えます。&lt;br>
ユーザーの切り替えは su コマンドを使います。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$ su suzuki
パスワード：
suzuki$
&lt;/code>&lt;/pre>&lt;p>suzukiに切り替わりました。&lt;br>
自分自身がどこにいるのかを確認します。&lt;br>
カレントディレクトリの確認は pwd コマンドを使います。&lt;br>
ディレクトリの移動は cd コマンド&lt;br>
ホームディレクトリは ~ で表します。&lt;br>
ホームディレクトリへの移動は cd ~ となります。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$ pwd
/home/centos
$ cd ~
$ pwd
$ /home/suzuki
$
&lt;/code>&lt;/pre>&lt;h2 id="bashrc-の修正">~/.bashrc の修正&lt;/h2>
&lt;p>ここでは ~/.basrcファイルを修正します。&lt;br>
まず、~/.basrc ファイルのバックアップをとります。&lt;br>
ここではファイル名先頭のピリオドを落として ls コマンドで見えるようにしておきます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cp ~/.bashrc ~/bashrc.bak
&lt;/code>&lt;/pre>&lt;p>では、~/.bashrc を vimで開いて編集します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vim ~/.bashrc
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:~/.bashrc" data-lang="bash:~/.bashrc">&lt;span class="c1"># .bashrc&lt;/span>
&lt;span class="c1"># Source global definitions&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f /etc/bashrc &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
. /etc/bashrc
&lt;span class="k">fi&lt;/span>
&lt;span class="c1"># ターミナルの表示&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PS1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bash-\v&lt;/span>$&lt;span class="s2"> &amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># 基本言語フォーマットをUTF-8へ&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">LANG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ja_JP.UTF-8&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># User specific environment and startup programs&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">rm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;rm -i&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">cp&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;cp -i&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">mv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;mv -i&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># grepとls のカラー表示&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">grep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;grep --color=auto&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">ls&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ls --color=auto&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># screen&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">s&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;screen -RR&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># Github ディレクトリへ移動&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">g&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;cd ~/GitHub&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>編集が終わったら ~/.bashrc を再読込します。&lt;br>
Linux での再読込は . です&lt;/p>
&lt;pre tabindex="0">&lt;code>$ . ~/.bashrc
$
&lt;/code>&lt;/pre>&lt;p>では GitHub にある様々なディレクトリを格納する Githubディレクトリを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir GitHub
$
&lt;/code>&lt;/pre>&lt;p>以降の github プロジェクトは今作成した GitHub ディレクトリ以下に作成します。&lt;/p>
&lt;h2 id="ターミナルの入力で大文字と小文字を区別せずに補完する">ターミナルの入力で大文字と小文字を区別せずに補完する&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash:~/.inputrc" data-lang="bash:~/.inputrc">
# 大文字小文字を区別しない
set completion-ignore-case on
# 以下日本語入力の必要がある場合に必要(なくてもよい）
set input-meta on
set output-meta on
set convert-meta off
set meta-flag on
&lt;/code>&lt;/pre>&lt;p>編集が終わったら ~/.inputrc を再読込します。&lt;br>
Linux での再読込は . です&lt;/p>
&lt;pre tabindex="0">&lt;code>$ . ~/.inputrc
$ cd ~
$ pwd
/home/suzuki
$ g
$ pwd
/home/suzuki/GitHub
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>~/.inputrc を root ユーザーになって /etc/inputrc に追記するとすべてのユーザーが大文字小文字を区別することなくターミナルで補完することができます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="screen-のインストール">screen のインストール&lt;/h2>
&lt;p>screen はターミナル内で複数の仮想ターミナルを起動して使うことができる画面管理ソフトです。&lt;br>
メリットは、&lt;/p>
&lt;ul>
&lt;li>ターミナルウインドウのタブを複数作成し、ここのタブでサーバーにログインする必要がないので、不要なセッションを作らなくてすむ。&lt;/li>
&lt;li>開いていた端末の状態を保持しておける。&lt;/li>
&lt;li>回線が切れる、スタンバイなどのセッション切れでもレジュームされる。&lt;/li>
&lt;li>一つの画面をさらに分割できるので、複数端末でログ監視したいときなどに超便利。&lt;/li>
&lt;/ul>
&lt;p>まずはscreen がインストールされているのかの確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ screen -v
Screen version 4.08.00 (GNU) 05-Feb-20
$
&lt;/code>&lt;/pre>&lt;p>インストールされていれば以下の作業はする必要がありません。&lt;br>
インストールされていなければ、yum コマンドでインストールして下さい。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo ＜sudo で rootになります＞
# ＜rootになると # になります&amp;gt;
# yum -y install screen
読み込んだプラグイン:fastestmirror
base | 3.6 kB 00:00:00
extras | 3.4 kB 00:00:00
updates | 3.4 kB 00:00:00
(1/2): extras/7/x86_64/primary_db | 115 kB 00:00:00
(2/2): updates/7/x86_64/primary_db | 2.2 MB 00:00:00
Loading mirror speeds from cached hostfile
* base: ftp.iij.ad.jp
* extras: ftp.iij.ad.jp
* updates: www.ftp.ne.jp
依存性の解決をしています
--&amp;gt; トランザクションの確認を実行しています。
---&amp;gt; パッケージ screen.x86_64 0:4.1.0-0.23.20120314git3c2946.el7_2 を インストール
--&amp;gt; 依存性解決を終了しました。
依存性を解決しました
======================================================================================================================================================
Package アーキテクチャー バージョン リポジトリー 容量
======================================================================================================================================================
インストール中:
screen x86_64 4.1.0-0.23.20120314git3c2946.el7_2 base 552 k
トランザクションの要約
======================================================================================================================================================
インストール 1 パッケージ
総ダウンロード容量: 552 k
インストール容量: 914 k
Downloading packages:
screen-4.1.0-0.23.20120314git3c2946.el7_2.x86_64.rpm | 552 kB 00:00:00
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
インストール中 : screen-4.1.0-0.23.20120314git3c2946.el7_2.x86_64 1/1
検証中 : screen-4.1.0-0.23.20120314git3c2946.el7_2.x86_64 1/1
インストール:
screen.x86_64 0:4.1.0-0.23.20120314git3c2946.el7_2
完了しました!
$
# rootからsuzukiにアカウントを切り換えます
$ su suzuki
# screenコマンドがどこにインストールされているのかを確認します。
$ which screen
/usr/bin/screen
$
&lt;/code>&lt;/pre>&lt;h2 id="screenrc-の修正">screenrc の修正&lt;/h2>
&lt;p>screenコマンドをさらに便利にするために screenrc ファイルを修正します。&lt;/p>
&lt;pre tabindex="0">&lt;code># ユーザーをroot から suzuki に変えます。
$ su suzuki
$
&lt;/code>&lt;/pre>&lt;p>以下を ~/.screenrc として作成して保存します。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:~/.screenrc" data-lang="bash:~/.screenrc">
# Ctrl + z で screenの操作モードへの切り換え
escape ^Zz
# スクロールバッファを大きくする
defscrollback 10000
# ステータスバーをカスタマイズ
hardstatus on
hardstatus alwayslastline '%{= kw}%02c:%s %{= .y}%H %L=%{= .b}%-w%46&amp;gt;%{= .r}%n %t*%{= .b}%+w%-16=%{= .y}[%l]'
# スタートメッセージを表示させない
startup_message off
# ビープを鳴らさない
vbell off
#termの設定
term ansi
bind r
bind ^r
#
&lt;/code>&lt;/pre>&lt;p>上記 ~/.bashrc の修正で、screenコマンドの呼び出しを s にしています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:~/.bashrc" data-lang="bash:~/.bashrc">
&lt;span class="c1"># screen&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">s&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;screen -RR&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ですので、ターミナルからは s だけで screen -RR コマンドを実行したことと同じになります。&lt;/p>
&lt;pre tabindex="0">&lt;code># screenの起動
$ screen
# screenの終了
$ exit
$
# screenの起動
$ s
# screenの終了
$ exit
&lt;/code>&lt;/pre>&lt;p>~/.bashrc にエイリアスを作成していなければ screen で起動しますし、~/.bashrcにエイリアスを作成していれば（ここでは「s」） $ s で一発起動します。screenを抜けるときは「exit」です。&lt;/p>
&lt;h2 id="screen-を使ってみます">screen を使ってみます&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>screen の起動(screen)&lt;br>
まず screen を起動しなくては始まりません。 ログインしたターミナルで「screen」と打てば screen が起動します。 screen から抜けるには普通にログアウトするように 「exit」 や [Ctrl+d]で抜けられます。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新しいウィンドウを開始する([Ctrl+c])&lt;br>
「[Ctrl+c]」で新しいウィンドウを開始できます。 幾つでも作れます。 不要になったウィンドウは 「exit」 や [Ctrl+d] で消せます。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>次のウィンドウに移動する([Ctrl+n])&lt;br>
開いている隣のウインドウに移動します。カスタマイズした~/.screenrcを使っている人はステータスバーで確認できて便利です。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>詳しくはこちら&lt;br>
&lt;a class="link" href="https://qiita.com/hnishi/items/3190f2901f88e2594a5f" target="_blank" rel="noopener"
>Linux screenコマンド使い方&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>screen は王者のコマンドです。プログラマーの多くはローカルのターミナルでタブを作成します。screen はサーバー上で仮想端末を作成します。screenはvim同様、プログラマーを選びます。Linuxを語るなら vim と screen そして bash の習熟が必須なのです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="sudoユーザーを追加する方法">sudoユーザーを追加する方法&lt;/h2>
&lt;p>sudoユーザーに追加していないユーザーでsudoコマンドを実行すると、&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo less /etc/passwd
[sudo] password for suzuki:
suzuki is not in the sudoers file. This incident will be reported.
&lt;/code>&lt;/pre>&lt;p>こんな事を言われます。&lt;br>
ということで、ここでは特定のユーザー（ここでは「suzuki」）がsudoコマンドを実行できるようにします。&lt;/p>
&lt;p>/etc/sudoers ファイルにユーザーを追加します。&lt;/p>
&lt;p>まずはrootユーザーになります。&lt;/p>
&lt;p>ユーザーsuzuki をぬけてrootになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ exit
&lt;/code>&lt;/pre>&lt;p>現在のグループを確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code># sudo vim /etc/sudoers
&lt;/code>&lt;/pre>&lt;p>以下の記述があれば wheelグループに suzukiを追加すればよいです。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:/etc/sudoersの抜粋" data-lang="bash:/etc/sudoersの抜粋">
## Allow members of group sudo to execute any command
%wheel ALL=(ALL:ALL) ALL
&lt;/code>&lt;/pre>&lt;p>ではまず現状を確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code># cat /etc/group | grep suzuki
&lt;/code>&lt;/pre>&lt;p>sudoのグループ（centosなら wheel) に suzuki を追加します。&lt;/p>
&lt;pre tabindex="0">&lt;code># sudo usermod -G wheel suzuki
&lt;/code>&lt;/pre>&lt;p>確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code># cat /etc/group | grep suzuki
wheel:x:10:suzuki
suzuki:x:1001:
#
&lt;/code>&lt;/pre>&lt;p>これで、ローカルアカウント suzuki で、必要に応じて sudoコマンドをつかって安全に作業することができるようになりました。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>当たり前の話ではありますが、root で作業するのはやめましょう。必要に応じて $ su すればよいのです。Linux/Unixとはそういうものなのです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/iPad%e5%ae%8c%e5%85%a8%e3%83%9e%e3%83%8b%e3%83%a5%e3%82%a2%e3%83%ab2022-%e5%85%a8%e6%a9%9f%e7%a8%ae%e5%af%be%e5%bf%9c-%e5%9f%ba%e6%9c%ac%e6%93%8d%e4%bd%9c%e3%81%8b%e3%82%89%e6%b4%bb%e7%94%a8%e6%8a%80%e3%81%be%e3%81%a7%e8%a9%b3%e7%b4%b0%e8%a7%a3%e8%aa%ac-standards/dp/4866365285/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51Vmx-LPwGL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> iPad完全マニュアル2022(全機種対応/基本操作から活用技まで詳細解説) &lt;/h2>
&lt;p> iPadをしっかり使いこなすための決定版ガイドブック。 iPadOS 15に対応した最新版です。 2021年発売の最新モデルはもちろん、すべてのiPad Pro、iPad Air、iPad、iPad miniの全モデル ホームボタン搭載/非搭載含めすべての機種に対応します。 &lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/AWS%e3%81%a7%e3%81%af%e3%81%98%e3%82%81%e3%82%8b%e3%82%a4%e3%83%b3%e3%83%95%e3%83%a9%e6%a7%8b%e7%af%89%e5%85%a5%e9%96%80-%e5%ae%89%e5%85%a8%e3%81%a7%e5%a0%85%e7%89%a2%e3%81%aa%e6%9c%ac%e7%95%aa%e7%92%b0%e5%a2%83%e3%81%ae%e3%81%a4%e3%81%8f%e3%82%8a%e6%96%b9-%e4%b8%ad%e5%9e%a3-%e5%81%a5%e5%bf%97/dp/4798163430/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/511vlSp5gZL.jpg">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> AWSではじめるインフラ構築入門 安全で堅牢な本番環境のつくり方 &lt;/h2>
&lt;p> AWSのネイティブ機能を組み合わせて 安全かつ堅牢なインフラを構築・運用 本書は、AWS(Amazon Web Services)を利用して、 インフラを構築/運用する方法を解説する入門書です。 クラウドでネットワーク&amp;amp;サーバー構築を行うために必要な基礎知識や、 AWSのネイティブ機能を組み合わせて安全かつ堅牢なインフラを構築/運用 するための設定方法やノウハウを解説します。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;!-- EOL --></description></item></channel></rss>