<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NLP</title><link>https://suzukiiichiro.github.io/</link><description>Recent content on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 07 Jan 2022 11:54:15 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>GASとアナリティクスを使って、Hugoに人気記事を表示させる - 簡単にできるHugoで人気の記事を表示する方法 #2</title><link>https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/</link><pubDate>Fri, 07 Jan 2022 11:54:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/analytics.jpg" alt="Featured image of post GASとアナリティクスを使って、Hugoに人気記事を表示させる - 簡単にできるHugoで人気の記事を表示する方法 #2" />&lt;p>簡単にできるHugoで人気の記事を表示する方法の2回目になります。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-06-wyoshi/" >前回（簡単にできるHugoで人気の記事を表示する方法 #01）&lt;/a>ではGAS（Google App Scripts）を使ってアナリティクスのデータをスプレッドシートに反映するところまで説明しました。&lt;br>
今回は前回作成したスプレッドシートからデータを取得して、Hugoと連携するところまでやっていきましょう。&lt;/p>
&lt;h2 id="スプレッドシートのデータをjsonで取得">スプレッドシートのデータをJSONで取得&lt;/h2>
&lt;p>Hugoやjsなどとの連携を簡単にするために、スプレッドシートのデータをjsonで取得できるようにします。&lt;/p>
&lt;p>前回作成したプログラムを開きます。&lt;br>
開き方は前回の「&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-06-wyoshi/" >簡単にできるHugoで人気の記事を表示する方法 #01&lt;/a>」にある「スプレッドシートの設定」を確認してください。&lt;/p>
&lt;p>スプレッドシートのデータをjsonで取得するためには、APIを使用するケースもありますが、今回はAPIを使用しないで取得します。&lt;/p>
&lt;p>プログラムの内容は下記になります。&lt;/p>
&lt;p>スプレッドシートのIDはスプレッドシートのURL部分の&lt;br>
docs.google.com/spreadsheets/d/ &lt;code>スプレッドシートのID&lt;/code> /edit#gid=0&lt;br>
といったように docs.google.com/spreadsheets/d/ と edit に囲まれた部分になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheetName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;スプレッドシートのID&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheetName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDataRange&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getValues&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">splice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">doGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parameter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sheetname&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ContentService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createTextOutput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">setMimeType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ContentService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MimeType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="プログラムの説明">プログラムの説明&lt;/h3>
&lt;h4 id="dogetってなに">doGetってなに？&lt;/h4>
&lt;p>&lt;code>doGet(e)&lt;/code> はこのプログラムをURLから実行できるようにした際にパラメータの値を取得して処理を行う関数です。&lt;br>
ここでは &lt;code>getData()&lt;/code>という関数に、クエリパラメータ&lt;code>sheetname&lt;/code>を渡しております。&lt;br>
URLにすると、https://〜/exec?sheetname=パラメータ&lt;br>
となります。&lt;/p>
&lt;p>このパラメータ部分にスプレッドシートのシート名を渡すことで、該当するスプレッドシートのデータを表示できるようになるというわけです。&lt;/p>
&lt;h4 id="getdataでやってること">getDataでやってること&lt;/h4>
&lt;p>&lt;code>getData(sheetName)&lt;/code> では先程のクエリパラメータ&lt;code>sheetname&lt;/code>の値を使って、シートから情報を取得してjsonに格納している部分です。&lt;/p>
&lt;p>指定したシートIDの値がある範囲からから値を取得するのが下記のプログラムです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDataRange&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getValues&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>その取得した値からタイトル、jsonのキーとなる部分を keys として格納します。&lt;br>
そしたら先程取得した rows の値をループで取得しながらjson形式のデータに加工します。&lt;/p>
&lt;p>すると、&lt;/p>
&lt;pre tabindex="0">&lt;code>[
[リンク, pv数, session数, users数],
[リンク, pv数, session数, users数]
]
&lt;/code>&lt;/pre>&lt;p>というデータが&lt;/p>
&lt;pre tabindex="0">&lt;code>[
{link: リンク, pv: pv数, session: session数, users: users数},
{link: リンク, pv: pv数, session: session数, users: users数}
]
&lt;/code>&lt;/pre>&lt;p>というjson形式に加工することができました。&lt;br>
ここまでを保存しておきます。&lt;/p>
&lt;p>このプログラムを公開してURLでアクセスできるようにしましょう。&lt;/p>
&lt;h2 id="gasのプログラムをデプロイして公開">GASのプログラムをデプロイして公開&lt;/h2>
&lt;p>それではここまでのファイルをデプロイして、Webでアクセスできるようにしましょう。&lt;br>
右上にある「デプロイ」を押して、新しいデプロイをクリックします。&lt;/p>
&lt;p>すると、「新しいデプロイ」となるので、歯車のマーク「デプロイを有効にする」をおして、「ウェブアプリ」を選択します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 335px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01.png" data-size="980x701">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01.png"
width="980"
height="701"
srcset="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01_huf487cfc84c7ed2df1e406ad2c4a31349_126397_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01_huf487cfc84c7ed2df1e406ad2c4a31349_126397_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>設定の画面になるので、説明などを入力します。&lt;br>
「次のユーザーとして実行」は自身のアドレスでかまいません。&lt;br>
「アクセスできるよユーザー」部分は「 &lt;strong>全員&lt;/strong> 」とします。&lt;br>
これによって、Hugoから呼び出した際に実行できるようになります。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 333px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02.png" data-size="980x705">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02.png"
width="980"
height="705"
srcset="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02_hu414af87a6b14ddf9b13521c5e57550de_158141_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02_hu414af87a6b14ddf9b13521c5e57550de_158141_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ここまで設定できたら「デプロイ」を押して、プログラムを公開します。&lt;br>
表示されたウェブアプリのURLが表示されるので、コピーしておきます。&lt;/p>
&lt;p>先程コピーしたURLの末尾に&lt;code>?sheetname=month&lt;/code>を追加してアクセスしてみましょう。&lt;br>
&lt;a class="link" href="https://script.google.com/macros/s/" target="_blank" rel="noopener"
>https://script.google.com/macros/s/&lt;/a>〜/exec?sheetname=month&lt;br>
URLはこのような形になります。&lt;/p>
&lt;p>正常にアクセスできていれば&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 470px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03.png" data-size="980x500">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03.png"
width="980"
height="500"
srcset="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03_hu7ef5c4f1b961fa096d8c5e7c75bf7c67_49092_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03_hu7ef5c4f1b961fa096d8c5e7c75bf7c67_49092_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;br>
とjson形式のデータが表示されるはずです。&lt;/p>
&lt;h3 id="エラーが出た場合">エラーが出た場合&lt;/h3>
&lt;pre tabindex="0">&lt;code>TypeError: Cannot read property 'getDataRange' of null（行 3、ファイル「コード」）
&lt;/code>&lt;/pre>&lt;p>というエラーが出た場合はパラメータが記述されていないだけなので、パラメータを記述することで正常に取得できます。&lt;br>
それ以外の場合は、「デバッグ」を使ってエラーを特定していく必要があります。&lt;br>
デバッグでは&lt;code>doGet&lt;/code>はクエリ取得できないので、&lt;code>e.parameter.sheetname&lt;/code>部分を&lt;code>&amp;quot;month&amp;quot;&lt;/code>と直書きしてデバッグを実行します。&lt;/p>
&lt;h4 id="デプロイには注意">デプロイには注意&lt;/h4>
&lt;p>デプロイで「新しいデプロイ」を選択するとURLが変わる点に注意です。&lt;br>
GASでウェブアプリのURLを固定するための方法は、「デプロイを管理」から更新をするようにします。&lt;/p>
&lt;ul>
&lt;li>「デプロイ」の「デプロイを管理」を押します。&lt;/li>
&lt;li>そして、右にある鉛筆マークの「編集」を押します。&lt;br>
すると、編集画面になり、バージョンや説明を修正することができます。&lt;/li>
&lt;li>バージョン部分を「新しいバージョン」として、説明に「最新版」とでも打っておきましょう。&lt;/li>
&lt;li>この状態で「デプロイ」をクリックします。&lt;/li>
&lt;/ul>
&lt;p>上記の作業で、URLを固定したままウェブアプリを公開することができます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 138;
flex-basis: 333px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04.png" data-size="980x706">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04.png"
width="980"
height="706"
srcset="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04_hu88d49d2022eb88c51862fef2af5ceb89_152311_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04_hu88d49d2022eb88c51862fef2af5ceb89_152311_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="hugoと連携して人気の記事を表示する">Hugoと連携して人気の記事を表示する&lt;/h2>
&lt;p>アナリティクスとスプレッドシートを使って人気の記事をjsonで取得する事ができるようになったので、Hugoと連携します。&lt;br>
Hugoにはjsonを取得する機能がついているので、その機能を使ってデータを取得します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html:popularArticlesMonth.html" data-lang="html:popularArticlesMonth.html">{{ $json := getJSON &amp;#34;https://script.google.com/macros/s/〜/exec?sheetname=month&amp;#34; }}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">aside&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;widget archives sidearticle-contents--wrapper&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popular-articles--month&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;contents-area&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>人気の記事（1ヶ月以内）&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sidearticle-contents&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;flex article-list--tile&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ $page := .Site.Pages }}
{{ range first .Site.Params.widgets.populerArticles.limit $json }}
{{ $article := index (where $page &amp;#34;.RelPermalink&amp;#34; &amp;#34;eq&amp;#34; .link ) 0 }}
{{ if $article }}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h3&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;article-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ $article.RelPermalink }}&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{- $article.Title -}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ end }}
{{ end }}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">aside&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>getJSON&lt;/code> のURLは先ほど作成したGASのウェブアプリURLになります。&lt;br>
今回は月間の人気記事を取得したいので、&lt;code>?sheetname=month&lt;/code>としてあります。&lt;br>
年の場合は&lt;code>year&lt;/code>日の場合は&lt;code>day&lt;/code>などとすることで必要な情報を取得できます。&lt;/p>
&lt;p>使用しているテンプレートにも夜と思いますが、layouts/partials/widget/popularArticlesMonth.html として保存しておきましょう。&lt;/p>
&lt;p>このファイルをHugoで読み込むことで人気の記事を表示する事ができるようになります。&lt;/p>
&lt;p>取得する人気の記事件数は&lt;code>config.yaml&lt;/code>などのhugoの設定ファイル内のwidhetsに&lt;code>populerArticles&lt;/code>を追加して記述しておきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml:config.yaml" data-lang="yaml:config.yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">widgets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">popular-articles&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">populerArticles&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">limit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="人気の記事を表示するプログラムの解説">人気の記事を表示するプログラムの解説&lt;/h3>
&lt;p>まずはサイト全体の記事を取得しておきます。&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ $page := .Site.Pages }}
&lt;/code>&lt;/pre>&lt;p>次に、取得したjsonのデータを設定で指定した範囲で取得します。&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ range first .Site.Params.widgets.populerArticles.limit $json }}
...
{{ end }}
&lt;/code>&lt;/pre>&lt;p>取得したデータからリンクに一致する記事を探します。&lt;br>
配列のデータで検索されているので、&lt;code>index&lt;/code>を使って0番目の記事を取得しています。&lt;br>
あとは通常の記事と同じように扱えます。&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ $article := index (where $page &amp;quot;.RelPermalink&amp;quot; &amp;quot;eq&amp;quot; .link ) 0 }}
&lt;/code>&lt;/pre>&lt;p>今回は画像無しでタイトルのみの表示となりますが、データ自体は他の記事と同じなので画像やカテゴリ、本文などにもアクセス可能です。&lt;/p>
&lt;h2 id="自動更新の設定">自動更新の設定&lt;/h2>
&lt;p>サイトに人気の記事を表示させることができました。&lt;br>
今の設定だと人気の記事が更新されないので、GASの「トリガー」を使って定期的にアナリティクスのデータをjsonに反映するようにしておきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">setMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setDay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;year&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">setDay&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setMonth&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setYear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>月だけでなく、日、年のデータも取得する夜にしておきます。&lt;br>
そして、それらをすべて実行する関数「all」も追加しておきましょう。ここで保存しておきます。&lt;br>
これで準備ができました。&lt;/p>
&lt;p>左袖にあるストップウォッチアイコンを押して、「トリガー」を追加します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 145;
flex-basis: 348px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05.png" data-size="980x674">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05.png"
width="980"
height="674"
srcset="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05_hu43858237469efa145840e90a2658042d_100055_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05_hu43858237469efa145840e90a2658042d_100055_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>「トリガーを追加」を押して、「実行する関数」で実行したい関数を選びます。今回は月間のデータを取得したいので「setMonth」を選択します。&lt;/li>
&lt;li>「実行するデプロイを選択」は「Head」のままで構いません。&lt;/li>
&lt;li>「イベントのソースを選択」は「時間主導型」に変更して、時間で実行するようにしておきます。&lt;/li>
&lt;li>「時間ベースのトリガーのタイプを選択」を更新したい頻度で選択します。月間のデータなので1日おきくらいに更新でもいいかもしれません。「日付ベースのタイマー」を選択します。&lt;br>
一日おきではなく、毎時で更新したい場合は「時間ベースのタイマー」など各自にあったタイマーを選択してください。&lt;/li>
&lt;li>「時刻を選択」で更新したい時間を選びます。とりあえず「午前4時〜5時」くらいに更新するようにしておきます。&lt;/li>
&lt;li>「エラー通知設定」は各自で好きなタイミングで受信するようにしてください。私はいっぱい来ると嫌なので、「1週間おきに通知を受け取る」にしてあります。&lt;br>
以上で設定が終わりました。下にある「保存」を押して保存します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 334px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06.png" data-size="980x703">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06.png"
width="980"
height="703"
srcset="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06_hu4dbb253495b0c0987384377169fcf501_125784_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06_hu4dbb253495b0c0987384377169fcf501_125784_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/li>
&lt;/ul>
&lt;p>これで定期的にアナリティクスのデータがスプレッドシートに反映されるようになりました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Hugoで人気の記事を表示するには&lt;/p>
&lt;ul>
&lt;li>Googleアナリティクスの連携&lt;/li>
&lt;li>スプレッドシートを使ってjsonを作成&lt;/li>
&lt;/ul>
&lt;p>上記の2つを使うことで簡単に導入可能です。&lt;/p>
&lt;p>Hugoを使って人気の記事を作成するにはサイトや投稿を公開した際になりますが、GitHub Actionsなどを使えばcron処理で定期的に再構築をかけることが可能なので、数十分おきに人気の記事を更新したり、スプレッドシートとgasのレン系の際にjsonを作成したので、javascriptでjsonを読み取って表示するといったことも可能です。&lt;/p>
&lt;h2 id="ソース">ソース&lt;/h2>
&lt;p>前回と今回で作成したソースになります。&lt;/p>
&lt;h4 id="gasとスプレッドシートを使ってhugoに人気の記事を表示する">GASとスプレッドシートを使ってHugoに人気の記事を表示する&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheetName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;シートID&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheetName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDataRange&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getValues&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">splice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">doGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parameter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sheetname&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ContentService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createTextOutput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">setMimeType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ContentService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MimeType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;month&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">dayjs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dayjs&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">locale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ja&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ga:ビューID&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">AnalyticsReporting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Reports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">batchGet&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">reportRequests&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">viewId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">dateRanges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="nx">startDate&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">endDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">}],&lt;/span>
&lt;span class="nx">samplingLevel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;LARGE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:sessions&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:users&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">dimensions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pagePath&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">orderBys&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">fieldName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">sortOrder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;DESCENDING&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">posts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metrics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">values&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getActive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unshift&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;link&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;session&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">setValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setDay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;year&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">setDay&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setMonth&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setYear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="hugoで人気の記事を表示する">Hugoで人気の記事を表示する&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">aside&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;widget archives sidearticle-contents--wrapper&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popular-articles--month&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;contents-area&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>人気の記事（1ヶ月以内）&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sidearticle-contents&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;flex article-list--tile&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ $page := .Site.Pages }}
{{ range first .Site.Params.widgets.populerArticles.limit $json }}
{{ $article := index (where $page &amp;#34;.RelPermalink&amp;#34; &amp;#34;eq&amp;#34; .link ) 0 }}
{{ if $article }}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h3&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;article-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ .context.RelPermalink }}&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{- .context.Title -}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ end }}
{{ end }}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">aside&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Google%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB-%EF%BD%9E%E5%88%86%E6%9E%90%E3%83%BB%E6%96%BD%E7%AD%96%E3%81%AE%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2%E3%82%92%E7%94%9F%E3%82%80%E6%9C%80%E5%BC%B7%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9-%E5%B1%B1%E6%B5%A6-%E7%9B%B4%E5%AE%8F/dp/4297112612?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;crid=JWVEKDNY44QV&amp;amp;keywords=google&amp;#43;%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9&amp;amp;qid=1641514280&amp;amp;s=books&amp;amp;sprefix=google&amp;#43;%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9%2Cstripbooks%2C197&amp;amp;sr=1-17-spons&amp;amp;psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFEVkxWVEZDSTdSQzQmZW5jcnlwdGVkSWQ9QTA1MDMwNDYyUTRGU1dQUEFQOTdTJmVuY3J5cHRlZEFkSWQ9QTNDR0ZTNUlLTUJHNUsmd2lkZ2V0TmFtZT1zcF9idGYmYWN0aW9uPWNsaWNrUmVkaXJlY3QmZG9Ob3RMb2dDbGljaz10cnVl&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=5dfbf1278031207773d96916ecce46dd&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4297112612&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">Googleアナリティクス プロフェッショナル　～分析・施策のアイデアを生む最強リファレンス &lt;/h2>
&lt;p>ウェブ制作者から、マーケター、ウェブアナリストまで必携の1冊
「Googleアナリティクスはどこへ向かうのか?進化し続けるツールのポテンシャルを最大限に引き出したときに、新しい分析や施策のアイディアが生まれる」&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Google-Apps-Script%E7%9B%AE%E7%9A%84%E5%88%A5%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9-%E5%AE%9F%E8%B7%B5%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E4%BB%98%E3%81%8D-%E6%B8%85%E6%B0%B4/dp/4798062405?pd_rd_w=BsqYY&amp;amp;pf_rd_p=d8f6e0ab-48ef-4eca-99d5-60d97e927468&amp;amp;pf_rd_r=ADPJ0069C04W5M44N6YQ&amp;amp;pd_rd_r=16303d6e-b3f9-4aa6-9f06-d3e66775e8f4&amp;amp;pd_rd_wg=joLm1&amp;amp;pd_rd_i=4798062405&amp;amp;psc=1&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f78c47c375494f0b51c423506367a868&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4798062405&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">Google Apps Script目的別リファレンス 実践サンプルコード付き&lt;/h2>
&lt;p>Excelのマクロに似た「スクリプト」を書けば、Gmailや「スプレッドシート」などのGoogleサービスを更に効率的に、思うように使えます。そのスクリプトを書いて実行するプログラミング環境が、Google Apps Script(GAS)。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>ざっくりわかる「シェルスクリプト【１】」</title><link>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post ざっくりわかる「シェルスクリプト【１】」" />&lt;h1 id="はじめに">はじめに&lt;/h1>
&lt;p>Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。&lt;/p>
&lt;p>この記事では、bashプログラミングの次のトピックについて説明します。&lt;/p>
&lt;h2 id="１hello-world">１．Hello World&lt;/h2>
&lt;h3 id="はじめてのbashコマンドecho">はじめてのbashコマンド「echo」&lt;/h3>
&lt;p>ターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, World」になります。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-:はじめてのecho" data-lang=":はじめてのecho">$ echo &amp;quot;Hello, World&amp;quot;
Hello, World
$
&lt;/code>&lt;/pre>&lt;h3 id="はじめてのbashスクリプトvim">はじめてのbashスクリプト「vim」&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash:はじめてのbashスクリプト" data-lang="bash:はじめてのbashスクリプト">$ vim HelloWorld.sh
＜空のvim HelloWorld.sh が開きます＞
&lt;/code>&lt;/pre>&lt;p>vimで開いたHelloWorld.shを編集します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:HelloWorld.sh" data-lang="bash:HelloWorld.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
exit&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="はじめての実行権限chmod">はじめての実行権限「chmod」&lt;/h3>
&lt;p>bashファイルは2つの方法で実行できます。&lt;br>
１．bashコマンドを使用する方法、&lt;br>
２．bashファイルに実行権限を設定し、ファイルを実行する方法&lt;/p>
&lt;p>一つ目の方法「bashコマンドを使用する」&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash HelloWorld.sh
&lt;/code>&lt;/pre>&lt;p>もう一つの方法「chmodで実行権限を付与する」&lt;/p>
&lt;pre tabindex="0">&lt;code># +x で実行権限を付与
$ chmod +x HelloWorld.sh
# ドット　スラッシュをつけて実行
$ ./HelloWorld.sh
&lt;/code>&lt;/pre>&lt;p>考え方ですが、bashコマンドで実行する場合のメリットは、ファイルに闇雲に実行権限を与える必要がないことです。実行権限を与える方法は、一般的ではありますが注意も必要です。&lt;/p>
&lt;p>chmod の実行権限には +x で実行権限を付与する方法の他、0755 などの数字で付与する場合もあります。&lt;br>
これらを&lt;font color=red>パーミッション&lt;/font>と言います。&lt;/p>
&lt;h3 id="パーミッションの確認">パーミッションの確認&lt;/h3>
&lt;p>ターミナルのコマンドでカレントディレクトリ内のファイルやディレクトリの情報を確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ls -l
&lt;/code>&lt;/pre>&lt;p>上記のコマンドを実行すると、以下のような一覧が表示されるかと思います。&lt;/p>
&lt;pre tabindex="0">&lt;code>-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt
drwxr-xr-x 6 user group 20480 1月 1 00:00 ダウンロード
&lt;/code>&lt;/pre>&lt;h3 id="パーミッションの読み方">パーミッションの読み方&lt;/h3>
&lt;p>「-rw-r&amp;ndash;r&amp;ndash;」や「drwxr-xr-x」の先頭の謎の10文字についてですが、&lt;br>
最初の１文字目はファイル種別を表しています。&lt;br>
-rw-r&amp;ndash;r&amp;ndash;&lt;/p>
&lt;table>
&lt;tr>&lt;th>種別&lt;/th>&lt;th>意味&lt;/th>&lt;/tr>
&lt;tr>&lt;td>-&lt;/td>&lt;td>ファイル&lt;/td>&lt;/tr>
&lt;tr>&lt;td>d&lt;/td>&lt;td>ディレクトリ&lt;/td>&lt;/tr>
&lt;tr>&lt;td>l&lt;/td>&lt;td>シンボリックリンク&lt;/td>&lt;/tr>
&lt;/table>
&lt;p>2文字目から4文字目はファイルの所有者に対する権限を表し、&lt;br>
5文字目から7文字目はファイルの所有グループに対する権限を表し、&lt;br>
8文字目から10文字目はその他に対する権限を表しています&lt;/p>
&lt;p>上記から-rw-r&amp;ndash;r&amp;ndash;は、&lt;br>
「ファイル種別」が「ファイル」であり、&lt;br>
「所有者」に「読み取り」と「書き込み」の権限があり、&lt;br>
「所有グループ」に「読み取り」の権限があり、&lt;br>
「その他」に「読み取り」の権限があることを示しています。&lt;/p>
&lt;p>drwxr-xr-xは、&lt;br>
「ファイル種別」が「ディレクトリ」であり、&lt;br>
「所有者」に「読み取り」と「書き込み」と「実行」の権限があり、&lt;br>
「所有グループ」に「読み取り」と「実行」の権限があり、&lt;br>
「その他」に「読み取り」と「実行」の権限があることを示しています。&lt;/p>
&lt;h3 id="アクセス権限の変更">アクセス権限の変更&lt;/h3>
&lt;p>アクセス権限を変更する方法について記載します。&lt;/p>
&lt;p>パーミッションの変更には&lt;font color=red>&lt;b> chmodコマンド&lt;/b>&lt;/font>を使用します。&lt;/p>
&lt;p>数値で指定する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l　
-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt
$ chmod 764 hoge.txt
$ ls -l
-rwxrw-r-- 1 user group 9 1月 1 00:00 hoge.txt
&lt;/code>&lt;/pre>&lt;p>上記のコマンドはhoge.txtに対してパーミッションの確認→変更→確認を行っています。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ chmod 764 hoge.txt
&lt;/code>&lt;/pre>&lt;p>に関して説明していきます。&lt;br>
ファイルのパーミッションの変更は以下の通りコマンドを実行すれば可能です。&lt;/p>
&lt;pre tabindex="0">&lt;code>chmod モード 対象ファイル名
&lt;/code>&lt;/pre>&lt;h3 id="モードの数字について">モードの数字について&lt;/h3>
&lt;table>
&lt;tr>&lt;th>モード(数字)&lt;/th>&lt;th>モード(アルファベット)&lt;/th>&lt;th>権限&lt;/th>&lt;/tr>
&lt;tr>&lt;td>4&lt;/td>&lt;td>r&lt;/td>&lt;td>読み取り&lt;/td>&lt;/tr>
&lt;tr>&lt;td>2&lt;/td>&lt;td>w&lt;/td>&lt;td>書き込み&lt;/td>&lt;/tr>
&lt;tr>&lt;td>1&lt;/td>&lt;td>x&lt;/td>&lt;td>実行&lt;/td>&lt;/tr>
&lt;/table>
上記の合計値を「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます。
要するに上記の「764」は
「所有者」に対して「読み取り」「書き込み」「実行」を、
「所有グループ」に対して「読み取り」「書き込み」を、
「その他」に「読み取り」を付与しています。
&lt;p>詳しくはこちら&lt;br>
&lt;a class="link" href="https://qiita.com/shisama/items/5f4c4fa768642aad9e06" target="_blank" rel="noopener"
>https://qiita.com/shisama/items/5f4c4fa768642aad9e06&lt;/a>&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4774186945&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/B00QJINS1A/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B00QJINS1A&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=36dff1cf8fa7d4852b5a4a3cf874304b" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B00QJINS1A&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;!--
## ２．Echo コマンド
###
## ３．コメント
###
## ４．マルチラインコメント
###
## ５．While ループ
###
## ６．For ループ
###
## ７．Get User Input
###
## ８．If 文
###
## ９．And 条件を if 文で使う
###
## １０．Or 条件を if文で使う
###
## １１．Else if と else
###
## １２．Case 文
###
## １３．コマンドラインから引数を取得
###
## １４．名前を使用してコマンドラインから引数を取得する
###
## １５．変数に2つの文字列を組み合わせる
###
## １６．文字列の部分文字列を取得する
###
## １７．変数に2つの数値を追加します
###
## １８．関数を作成する
###
## １９．関数パラメーターを使用する
###
## ２０．スクリプトからの戻り値を渡す
###
## ２１．ディレクトリを作成する
###
## ２２．存在を確認してディレクトリを作成する
###
## ２３．ファイルを読む
###
## ２４．ファイルを削除する
###
## ２５．ファイルに追加
###
## ２６．ファイルが存在するかどうかを確認
###
## ２７．mailコマンド
###
## ２８．dateコマンド
###
## ２９．waitコマンド
###
## ３０．sleepコマンド
--></description></item><item><title>簡単にできるHugoで人気の記事を表示する方法 #1</title><link>https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/</link><pubDate>Thu, 06 Jan 2022 16:50:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/analytics.jpg" alt="Featured image of post 簡単にできるHugoで人気の記事を表示する方法 #1" />&lt;p>Hugoには様々な機能があり、ブログを作るにはもってこいの静的サイトジェネレータです。&lt;br>
関連記事も取得できて、検索機能もある「至れり尽くせり」なジェネレータだと思います。&lt;/p>
&lt;p>しかし、1点だけどうしても重要な機能がありません。&lt;br>
それは人気記事の表示です。&lt;br>
人気記事を表示させるとなると、データベースを用意したりサーバのアクセスカウントを行う必要があります。&lt;br>
そんな面倒なことはしたくありませんよね？&lt;/p>
&lt;p>今回はHugoでも簡単に人気の記事を表示する方法を紹介いたします。&lt;/p>
&lt;h2 id="必要なもの">必要なもの&lt;/h2>
&lt;p>Hugoで人気記事を出すために必要なものは、&lt;/p>
&lt;ul>
&lt;li>Googleスプレッドシート&lt;/li>
&lt;li>Googleアナリティクス&lt;/li>
&lt;/ul>
&lt;p>以上です。&lt;br>
それでは実際の設定やプログラムを行っていきましょう。&lt;/p>
&lt;h2 id="googleアナリティクスの設定">Googleアナリティクスの設定&lt;/h2>
&lt;p>Googleアナリティクスをサイトに設定します。&lt;br>
設定の際にはv4ではなく、v2が必要です。(2022年1月6日現在)&lt;br>
v4を設定している場合は、同時にv2も設定する必要があります。&lt;/p>
&lt;p>「アカウントを作成」「アカウントの設定」をした後に、「 &lt;strong>プロパティの設定&lt;/strong> 」で「ユニバーサル アナリティクス プロパティの作成」をONにするとv4とv2の両方でアナリティクスを設定することができます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 163;
flex-basis: 391px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting.png" data-size="980x601">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting.png"
width="980"
height="601"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting_hu1de37cbb321319f7b20f9e0b0bc31b91_205070_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting_hu1de37cbb321319f7b20f9e0b0bc31b91_205070_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ユニバーサル アナリティクス プロパティの作成">
&lt;/a>
&lt;figcaption>ユニバーサル アナリティクス プロパティの作成&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>あとはv4とv2のコードをサイトに貼り付けるだけです。&lt;br>
貼り付け方法はGoogleに書いてある通りです。&lt;/p>
&lt;h2 id="スプレッドシートの設定">スプレッドシートの設定&lt;/h2>
&lt;p>次にスプレッドシートを設定します。&lt;br>
Googleドライブで「新規」「Googleスプレッドシート」でシートを作成します。&lt;br>
作成したシートに適当な名前をつけます。&lt;/p>
&lt;p>その後に、「拡張機能」の「App Script」を押して、GoogleAppScript（GAS）に移動します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas.png" data-size="980x542">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas.png"
width="980"
height="542"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas_hua5e979262c3621ae25b1ecd1b3f95ba4_106503_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas_hua5e979262c3621ae25b1ecd1b3f95ba4_106503_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ユニバーサル アナリティクス プロパティの作成">
&lt;/a>
&lt;figcaption>ユニバーサル アナリティクス プロパティの作成&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="gasのプログラム">GASのプログラム&lt;/h2>
&lt;h3 id="日付の取得">日付の取得&lt;/h3>
&lt;p>日付を計算するために、「daysjs」というライブラリを追加します。&lt;br>
ライブラリの＋をクリックして、以下を検索します。&lt;/p>
&lt;pre tabindex="0">&lt;code>1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB
&lt;/code>&lt;/pre>&lt;p>検索して、days.jsが表示されたら追加をします。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 321px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs.png" data-size="980x732">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs.png"
width="980"
height="732"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs_huc72d901922502ee5755367cabcfc143d_172673_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs_huc72d901922502ee5755367cabcfc143d_172673_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="day.jsライブラリの追加">
&lt;/a>
&lt;figcaption>day.jsライブラリの追加&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>これで日付の検索が可能になります。&lt;br>
以下が日付のプログラムです。&lt;/p>
&lt;p>今日から1日、1月、1年前なのかという切り替えが可能です。&lt;/p>
&lt;ul>
&lt;li>year: 今日から1年間の範囲&lt;/li>
&lt;li>month: 今日から1ヶ月の範囲&lt;/li>
&lt;li>day: 今日から1日の範囲&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;month&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">dayjs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dayjs&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">locale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ja&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここまでをテスト実行してみましょう。&lt;br>
デバッグの隣りにあるセレクトを「test」にして、「実行」を押してみます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 138;
flex-basis: 333px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1.png" data-size="980x706">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1.png"
width="980"
height="706"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1_hu88d49d2022eb88c51862fef2af5ceb89_155241_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1_hu88d49d2022eb88c51862fef2af5ceb89_155241_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;br>
正常に終了されれば実行ログに結果と実行完了が表示されるはずです。&lt;/p>
&lt;h3 id="gasとgoogleアナリティクスの連携">GASとGoogleアナリティクスの連携&lt;/h3>
&lt;p>GASとアナリティクスの連携にはビューIDが必要です。&lt;br>
ビューIDはv2で取得できるので、v4とv2を設定したのはこのビューIDを取得するためになります。&lt;/p>
&lt;p>GASのプログラムにGoogleアナリティクスの「アカウント」「プロパティ」「ビュー」「ビューの設定」にあるビューIDを設定します。&lt;br>
設定する際は「ga:ビューID」と &lt;code>ga:&lt;/code> を付ける必要があります。&lt;/p>
&lt;p>先程のプログラムの下に、下記のプログラムを記述します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ga:[GAビューID]&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">AnalyticsReporting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Reports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">batchGet&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">reportRequests&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">viewId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">dateRanges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="nx">startDate&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">endDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">}],&lt;/span>
&lt;span class="nx">samplingLevel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;LARGE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:sessions&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:users&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">dimensions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pagePath&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">orderBys&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">fieldName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">sortOrder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;DESCENDING&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">posts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metrics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">values&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getActive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unshift&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;link&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;session&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">setValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここでは、ページのパスをキーとしてページビューとセッション、ユーザー数を集計するようにしています。&lt;br>
並び順はpageviewsの数の降順です。&lt;/p>
&lt;p>必要なデータがあれば各自で編集することをおすすめいたします。&lt;/p>
&lt;p>そして、各項目のラベルを出力するために、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unshift&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;link&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;session&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>として、先頭行のデータにラベル行を追加しています。&lt;br>
この部分も各自のデータに合うようにしてください。&lt;/p>
&lt;p>アナリティクスから取得したデータはスプレッドシートのシート名に紐付けるので、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>の場合は、「month」というシートにデータを反映するということになります。&lt;/p>
&lt;h4 id="サービスの読み込み">サービスの読み込み&lt;/h4>
&lt;p>GASとアナリティクスを連携させるために、サービスを読み込みます。&lt;br>
サービスのプラスマークをクリックして、「Analytics Reporting API」を選択、追加します。&lt;br>
以上でサービスの読み込みは終わりです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 91;
flex-basis: 218px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service.png" data-size="980x1074">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service.png"
width="980"
height="1074"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service_hu7ab2f10bac6fb2f3280c3db360bbe4e5_248749_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service_hu7ab2f10bac6fb2f3280c3db360bbe4e5_248749_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>それでは、実行してみましょう。&lt;/p>
&lt;h4 id="実行">実行&lt;/h4>
&lt;p>まずははスプレッドシートに「month」という名前のシートを作ります。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 628;
flex-basis: 1507px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet.png" data-size="980x156">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet.png"
width="980"
height="156"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet_hu098d5f6469a907b1d8d02d13736689c1_32063_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet_hu098d5f6469a907b1d8d02d13736689c1_32063_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;br>
シートができたら、再度コードエディターに戻ります。&lt;/p>
&lt;p>先程のデバッグの隣りにあるセレクト「test」を「setMonth」にして、実行を押します。&lt;br>
承認を求められるので、「権限を確認」を押します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 382px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1.png" data-size="980x615">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1.png"
width="980"
height="615"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1_hu351b98adf0dfa0bfaa7f9f567f66552b_121313_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1_hu351b98adf0dfa0bfaa7f9f567f66552b_121313_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;br>
使用するアカウントをクリクで選んで、「詳細」をクリックして、「〜（安全ではないページ）に移動」をクリックします。&lt;br>
すると、アクセスの許可を求められるので、「許可」を押します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 140;
flex-basis: 336px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2.png" data-size="980x699">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2.png"
width="980"
height="699"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2_hub35238c03fb887b06d8047fbcaec43b4_246816_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2_hub35238c03fb887b06d8047fbcaec43b4_246816_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>実行ログに結果と実行完了が表示されるはずです。&lt;br>
スプレッドシートを確認すると、アナリティクスのデータが反映されているはずです&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 70;
flex-basis: 170px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2.png" data-size="980x1382">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2.png"
width="980"
height="1382"
srcset="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2_hu76389b174b068c261adeed39fea2a17c_292266_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2_hu76389b174b068c261adeed39fea2a17c_292266_1024x0_resize_box_3.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>これで月間の人気記事の取得ができました。&lt;br>
同じように日、年も設定しておきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">setDay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;year&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>まずがGASとアナリティクスの連携ができました。&lt;br>
次回はこのデータを使ってHugoとアナリティクスを連携して、人気記事を表示できるようにしたいと思います。&lt;/p>
&lt;p>ここまでの全プログラムは下記になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;month&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">dayjs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dayjs&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">locale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ja&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ga:[GAビューID]&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">AnalyticsReporting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Reports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">batchGet&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">reportRequests&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">viewId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">dateRanges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="nx">startDate&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">endDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">}],&lt;/span>
&lt;span class="nx">samplingLevel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;LARGE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:sessions&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:users&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">dimensions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pagePath&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">orderBys&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">fieldName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">sortOrder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;DESCENDING&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">posts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metrics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">values&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getActive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unshift&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;link&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;session&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">setValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setDay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;year&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/1%E9%80%B1%E9%96%93%E3%81%A7Google%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B94%E3%81%AE%E5%9F%BA%E7%A4%8E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E6%9C%AC-1%E9%80%B1%E9%96%93%E3%81%A7%E5%9F%BA%E7%A4%8E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E7%AA%AA%E7%94%B0-%E6%9C%9B/dp/429501172X?_encoding=UTF8&amp;amp;qid=1641513597&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=1ee510fa1a17d9dbf251af13ddde94c3&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_il" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B09HGQH66R&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">1週間でGoogleアナリティクス4の基礎が学べる本 (1週間で基礎が学べるシリーズ)&lt;/h2>
&lt;p>大幅に改訂されたWebマーケティングツール「Googleアナリティクス4」の基礎と活用法を最前線のWebマーケッターたちがやさしく解説!
本書は、WebマーケターのためにGoogleアナリティクス4（GA4・ジーエーフォー）の基礎知識を解説した入門書です。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Google-Apps-Script%E5%AE%8C%E5%85%A8%E5%85%A5%E9%96%80-Google%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8Google-Workspace%E3%81%AE%E6%9C%80%E6%96%B0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%AC%E3%82%A4%E3%83%89/dp/4798063339?_encoding=UTF8&amp;amp;qid=1641513615&amp;amp;sr=8-8&amp;amp;linkCode=li3&amp;amp;tag=nlpqueens-22&amp;amp;linkId=e2278a36e1a2780b57906fc14ef78eb4&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_il" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4798063339&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解! Google Apps Script完全入門[第2版] ~GoogleアプリケーションとGoogle Workspaceの最新プログラミングガイド&lt;/h2>
&lt;p>今や私たちの仕事や生活に無くてはならない存在になったGoogleサービス。これらGoogleサービスの自動化や連携を行うことで、大幅な効率化が図れます。そして、それを可能にするのがGoogle Apps Script(GAS)です。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし</title><link>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</link><pubDate>Thu, 06 Jan 2022 14:21:51 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようというものです。&lt;/p>
&lt;p>hugo コマンドでgithub.ioディレクトリに記事を投稿する場合、以下のコマンドをたたくと思います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜ディレクトリ＞/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>または&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜今日の日付＞.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>面倒なんですよね。。。&lt;/p>
&lt;h2 id="ディレクトリの指定">ディレクトリの指定&lt;/h2>
&lt;p>通常、記事毎にディレクトリを分けて、アクセスされるファイルをindex.mdにした場合は、以下の通りになりますよね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜今日の日付のディレクトリ＞/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ナンバリングの効用">ナンバリングの効用&lt;/h2>
&lt;p>ただ、同日に気分が乗ってきて、もう一つ記事を投稿しようとする場合は、日付の後ろに「-02」とか工夫する必要も出てきたりします。たとえば以下のように&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜今日の日付のディレクトリ＞-＜ナンバリング02＞/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="複数メンバーの投稿を区別する">複数メンバーの投稿を区別する&lt;/h2>
&lt;p>複数のコラボレーターで投稿するgithub.ioの場合は、投稿者も区別したくなります。例えば&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜今日の日付のディレクトリ＞-＜作成者＞-＜ナンバリング02＞/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ようするに、シェルスクリプトを使って、以下のコマンドを実行したい訳です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/2022-01-06-01-suzuki/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="起動パラメータ">起動パラメータ&lt;/h2>
&lt;p>と、なると、パラメータは以下の三つとなりますね。&lt;br>
$today 今日の日付&lt;br>
$number 記事のナンバリング&lt;br>
$author 作成者&lt;/p>
&lt;h2 id="実行イメージ">実行イメージ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 作成者 suzuki の 01 番目の投稿記事&lt;/span>
$ bash mkArticle.sh suzuki &lt;span class="m">01&lt;/span>
$ hugo new posts/&lt;span class="nv">$today&lt;/span>-&lt;span class="nv">$number&lt;/span>-&lt;span class="nv">$author&lt;/span>/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="気をつけるところは">気をつけるところは&lt;/h2>
&lt;h3 id="パラメータを省略したときの挙動">パラメータを省略したときの挙動&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ bash mkArticle.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行した場合に、「作成者が指定されていないからやりなおしてね」というのもちょっと寂しいものがあります。指定していなければ、都度、聞いてきて欲しいものです。そこで readコマンドで作成者を尋ねてくる感じにします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ユーザー名を半角で入力&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> author&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="同日ファイルの存在を確認">同日ファイルの存在を確認&lt;/h3>
&lt;p>２．すでに同日に一つ目の記事を投稿してある。要するに生成しようとしているファイルがすでに存在する場合の挙動です。こちらは、ファイルが存在していれば、１を応用して、別のナンバリングを指定するように尋ねてくれると良さそうです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> &lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nb">true&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;content/posts/&lt;/span>&lt;span class="nv">$today&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">/index.md&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2"> ファイルが既に存在します。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;別のナンバリングを指定して下さい 02とか03とか&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> number&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
break&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ですので、ナンバリングの初期値は「01」としておいて、そのファイルが既に存在する場合は、あらためてユーザーにナンバリングを尋ねてくるという手法としました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;01&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="実行方法">実行方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ bash mkArticle.sh suzuki 01&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">前述のとおり作成者、ナンバリングは省略可能です。
$ bash mkArticle.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ソース全文">ソース全文&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkArticle.sh" data-lang="bash:mkArticle.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
: &lt;span class="s1">&amp;#39;使い方
&lt;/span>&lt;span class="s1">一つ目のパラメーターに作成者を指定します
&lt;/span>&lt;span class="s1">二つ目のパラメータにナンバリングを指定します
&lt;/span>&lt;span class="s1">一つ目 01(未指定の場合は01）
&lt;/span>&lt;span class="s1">二つ目 02
&lt;/span>&lt;span class="s1">
&lt;/span>&lt;span class="s1">（例)
&lt;/span>&lt;span class="s1">$ bash mkArticle.sh suzuki 01;
&lt;/span>&lt;span class="s1">
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1">#作成者 無指定であれば入力を促す&lt;/span>
&lt;span class="nv">author&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#今日の日付&lt;/span>
&lt;span class="nv">today&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>date &lt;span class="s2">&amp;#34;+%Y-%m-%d%n&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#今日のインデクス 一つ目の投稿であれば01 二つ目の投稿であれば02&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">function&lt;/span> getParam&lt;span class="o">(){&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;01&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ユーザー名を半角で入力&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> author&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nb">true&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;content/posts/&lt;/span>&lt;span class="nv">$today&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">/index.md&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2"> ファイルが既に存在します。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;別のナンバリングを指定して下さい 02とか03とか&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> number&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
break&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">function&lt;/span> execHugo&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hugoコマンドを実行します&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hugo new posts/&lt;/span>&lt;span class="nv">$today&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">/index.md&amp;#34;&lt;/span>
hugo new posts/&lt;span class="nv">$today&lt;/span>-&lt;span class="nv">$number&lt;/span>-&lt;span class="nv">$author&lt;/span>/index.md
&lt;span class="c1"># 処理終了&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルの編集は以下の通りです。&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;vim content/posts/&lt;/span>&lt;span class="nv">$today&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">/index.md;&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># パラメータの取得&lt;/span>
getParam&lt;span class="p">;&lt;/span>
&lt;span class="c1"># hugoコマンドの実行&lt;/span>
execHugo&lt;span class="p">;&lt;/span>
exit&lt;span class="p">;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>日頃、手間を掛けてコマンドを入力している場合は、シェルスクリプトを使って簡便にできる事に加え、さらにカスタマイズを加え、便利に記事投稿ができるとブログも気分もがぜん盛り上がりますね。&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4774186945&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/B07LBSWJNP/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B07LBSWJNP&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=fd3f2918d16f32f53feccf492263133a" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B07LBSWJNP&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">いちばんやさしいGit&amp;amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ&lt;/h2>
&lt;p>実際のワークフローをイメージしながら
実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。
前半は、手元のパソコンでファイルを実際にバージョン管理しながら、
Gitの基本的な使い方を解説。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>GitHub Pagesを使って無料でSSL付きのサイトを公開</title><link>https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/</link><pubDate>Tue, 28 Dec 2021 12:07:19 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg" alt="Featured image of post GitHub Pagesを使って無料でSSL付きのサイトを公開" />&lt;p>デザイナーでもできる初めてのHugoの2回目になります。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-21/" >前回（デザイナーでもできる初めてのHugo #01）&lt;/a>はHugoのインストールから公開の方法までを説明しました。&lt;br>
今回は前回作成したページをGitHub Pagesを使って公開してみたいと思います。&lt;/p>
&lt;h2 id="github-pages用の設定ファイルを作成">GitHub Pages用の設定ファイルを作成&lt;/h2>
&lt;p>GitHub PagesはGitHubにあるコンテンツを静的ページを公開する機能です。&lt;br>
SSLまでついているので、非常に便利です。&lt;/p>
&lt;p>公開用のファイルは&lt;code>.github/workflows/gh-pages.yml&lt;/code>というYAML形式のファイルになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml:.github/workflows/gh-pages.yml" data-lang="yaml:.github/workflows/gh-pages.yml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># schedule:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># - cron: &amp;#39;*/10 * * * *&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gh-pages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persist-credentials&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># https://github.com/marketplace/actions/github-pages-action&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;latest&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">extended&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">github_token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_branch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gh-pages&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>name&lt;/strong>はGitHubでのActionsに表示される名前になります。&lt;br>
今回は公開用として&lt;strong>gh-pages&lt;/strong>というブランチにわけています。ここおらへんはお好みで設定して下さい。&lt;br>
hugoでテーマを使っている場合は&lt;strong>submodules: true&lt;/strong>とする必要があります。&lt;br>
また、Hugoで更新日をGitの日付と合わせたい場合は&lt;strong>fetch-depth: 0&lt;/strong>として、Gitの履歴を取得するようにしましょう。&lt;/p>
&lt;h2 id="github-pagesの設定">GitHub Pagesの設定&lt;/h2>
&lt;p>GitHub PagesのURLは&lt;code>https://ユーザまたは組織名.github.io/リポジトリ名&lt;/code>となります。&lt;br>
GitHubでリポジトリを作成する際に「ユーザまたは組織名.github.io」とすると「https://ユーザまたは組織名.github.io」とすることができます。&lt;/p>
&lt;p>まずは先程のファイルを含めてサイト全体をGitにアップして、gh-pagesというブランチが作られるのを待ちましょう。&lt;br>
その後に、setings &amp;gt; Pages にでGitHub Pagesの設定を行います。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 162;
flex-basis: 390px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg" data-size="980x603">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg"
width="980"
height="603"
srcset="https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings_hub5e89b620d2afe5c10cf3894738f1203_124480_480x0_resize_q75_box.jpg 480w, https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings_hub5e89b620d2afe5c10cf3894738f1203_124480_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="GitHub Pagesの設定">
&lt;/a>
&lt;figcaption>GitHub Pagesの設定&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Your GitHub Pages site is currently being built from the gh-pages branch&lt;br>
にあるBranchをgh-pagesに変更します。&lt;br>
設定は以上です。&lt;/p>
&lt;p>Hugoの初期設定であれば&lt;code>publishDir: public&lt;/code>となっているので、GitHub Pagesではpublicがルートディレクトリとして公開されます。&lt;br>
.gitignoreに「public」を除外するようにしておきましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-:.gitignore" data-lang=":.gitignore">/public
/resources
&lt;/code>&lt;/pre>&lt;p>最後に設定したURLにアクセスするとサイトが確認できるはずです。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>GitHub Pagesを使えば、難しいサーバの設定などをすることなく、無料でSSL付きのサイトを公開することが可能です。&lt;br>
いくつかの制限はありますが、すごく便利な機能なのでみなさんもぜひ使ってみてはいかがでしょうか。&lt;/p>
&lt;p>公開する際はパスワードなどの情報も一緒にアップしないようにしてください。&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/B07LBSWJNP/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B07LBSWJNP&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=fd3f2918d16f32f53feccf492263133a" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B07LBSWJNP&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">いちばんやさしいGit&amp;amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ&lt;/h2>
&lt;p>実際のワークフローをイメージしながら
実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。
前半は、手元のパソコンでファイルを実際にバージョン管理しながら、
Gitの基本的な使い方を解説。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Web%E5%88%B6%E4%BD%9C%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AEGitHub%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8-%E3%83%81%E3%83%BC%E3%83%A0%E3%81%AE%E5%8A%B9%E7%8E%87%E3%82%92%E6%9C%80%E5%A4%A7%E5%8C%96%E3%81%99%E3%82%8B%E5%85%B1%E5%90%8C%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB-%E5%A1%A9%E8%B0%B7-%E5%95%93/dp/4844337009?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;crid=3C1ZNYZB4N0C3&amp;amp;keywords=github&amp;amp;qid=1640665205&amp;amp;sprefix=github%2Caps%2C284&amp;amp;sr=8-8&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=65876fc9d77e695d11f02ec867bc8c4a&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4844337009&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">Web制作者のためのGitHubの教科書 チームの効率を最大化する共同開発ツール&lt;/h2>
&lt;p>そろそろ「プルリ」しませんか?しくみを理解して使えば怖くない。リポジトリの作成から複数デザインの提示、「Pull Request」を使った分担作業まで、Webサイト制作を例に実践的なワークフローを身に付ける。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？</title><link>https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/</link><pubDate>Sun, 26 Dec 2021 21:54:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/anal.jpg" alt="Featured image of post e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？" />&lt;p>私のe-Statでのデータマイニングの現在の目的は以下の通りです&lt;br>
大量の政府公開データの中から&lt;br>
①面白そうなデータをピックアップする&lt;br>
②データをわかりやすくサマライズする&lt;br>
　・列情報などを必要な項目に絞り込む&lt;br>
　・前年度比５倍とか急激な変化があった場合をピックアップできるようにする&lt;br>
最終的にはこれらを自動でできるようにしたいです。&lt;/p>
&lt;p>今回は、まず①面白そうなデータをピックアップすることを目的にe-Statを見てみましょう。&lt;/p>
&lt;h2 id="ランキングページを見てみよう">ランキングページを見てみよう&lt;/h2>
&lt;p>e-Statのトップページ（https://www.e-stat.go.jp/）の画面の下の方にランキングという欄があります。&lt;br>
そのランキングの現在(2021/12/26)３位が「アイスクリーム」なんです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 358px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking.png" data-size="1434x960">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking.png"
width="1434"
height="960"
srcset="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking_hu5dadec452d8bd9bb4d7577d888e43b5e_127374_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking_hu5dadec452d8bd9bb4d7577d888e43b5e_127374_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ランキング">
&lt;/a>
&lt;figcaption>ランキング&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="アイスクリームが含まれるのはどんなデータか">アイスクリームが含まれるのはどんなデータか&lt;/h2>
&lt;p>「アイスクリーム」は柔らかめのキーワードなので面白いデータの予感がします。&lt;br>
「アイスクリーム」が含まれるデータはどんなデータなんでしょうか？&lt;br>
ちょっと見てみましょう。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/stat-search?page=1&amp;amp;query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0&amp;amp;layout=dataset" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/stat-search?page=1&amp;query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0&amp;layout=dataset&lt;/a>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 143;
flex-basis: 343px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist.png" data-size="2144x1498">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist.png"
width="2144"
height="1498"
srcset="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist_hue7cc00b95248977b49d9c465262cbdcd_468131_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist_hue7cc00b95248977b49d9c465262cbdcd_468131_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="アイスクリーム">
&lt;/a>
&lt;figcaption>アイスクリーム&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>「アイスクリーム」が含まれるデータは7640件あるみたいです。&lt;br>
ちょっと多いですね。。。&lt;br>
検索条件なのですが、提供分類、表題を検索　データベース、ファイル内を検索にチェックがついています。&lt;br>
「検索のしかた」をみてみるとキーワードのOR検索やAND検索もできそうです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 134;
flex-basis: 323px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod.png" data-size="2110x1566">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod.png"
width="2110"
height="1566"
srcset="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod_hu93293dc2bfe7d1c29535017dd6b31a46_524310_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod_hu93293dc2bfe7d1c29535017dd6b31a46_524310_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="検索のしかた">
&lt;/a>
&lt;figcaption>検索のしかた&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ちなみに検索キーワードでの絞り込みはAPI(統計表情報取得)でももちろんできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?appId=xxxxxxxxxx&amp;amp;searchWord=アイスクリーム&amp;quot;
&lt;/code>&lt;/pre>&lt;p>アイスクリームだと数が多すぎるので試しに「ガリガリ君」で検索してみましたが、0件でした。「ハーゲンダッツ」で検索したところ22件引っかかってきました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 168;
flex-basis: 405px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist.png" data-size="2048x1212">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist.png"
width="2048"
height="1212"
srcset="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist_hu2fc48b6ec53a6bb1ca177d6aca1d85a9_370194_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist_hu2fc48b6ec53a6bb1ca177d6aca1d85a9_370194_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ハーゲンダッツ">
&lt;/a>
&lt;figcaption>ハーゲンダッツ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>「ハーゲンダッツ」どこに出てくるのかなと思ってAPIを一通り叩いてみたのですがAPIの実行結果からは「ハーゲンダッツ」は見つけられませんでした。&lt;br>
エクセル表示を見てみたところ、「銘柄」という項目に「バニラアイスクリーム，カップ入り（110mL入り），「ハーゲンダッツ バニラ」」とありました。&lt;br>
どうも全国のアイスクリームの価格を「ハーゲンダッツ　バニラ」を基準に算出しているみたいです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 188;
flex-basis: 453px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel.png" data-size="1360x720">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel.png"
width="1360"
height="720"
srcset="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel_hue69ec4e6af4f57f83b84afa986f8b0bc_139125_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel_hue69ec4e6af4f57f83b84afa986f8b0bc_139125_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="excel">
&lt;/a>
&lt;figcaption>excel&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ちなみに、2020年だと１番安いのが長野市の221円で１番高いのが那覇市の300円でした。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 199;
flex-basis: 478px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst.png" data-size="1990x998">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst.png"
width="1990"
height="998"
srcset="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst_hue322c7afb8a1654734b465c6222623d4_212046_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst_hue322c7afb8a1654734b465c6222623d4_212046_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="統計表">
&lt;/a>
&lt;figcaption>統計表&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>単にハーゲンダッツの価格ってだけだと少しパンチ力弱いかもしれませんね。。。&lt;/p>
&lt;p>個人的には明治のスーパーカップが１位でジャンボモナカが２位でとかアイスクリーム売れ筋ランキングとかの方が楽しいのですが、政府はそこまで調べてくれないですよね。&lt;/p>
&lt;h2 id="小売統計調査とは">小売統計調査とは&lt;/h2>
&lt;p>小売物価統計調査はお米の価格から葬儀代まで約８００の小売価格を調査したデータ&lt;br>
調査結果は、年金等の給付見直しの際の基礎資料や、公共料金の上限値を決める際の資料として、幅広く利用されているそうです。&lt;br>
アイスクリームは約８００ある中の項目の一つです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 429px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column.png" data-size="2064x1154">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column.png"
width="2064"
height="1154"
srcset="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column_hud83e50fd9037a6518d3a30b034ab02f7_1950832_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column_hud83e50fd9037a6518d3a30b034ab02f7_1950832_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="銘柄">
&lt;/a>
&lt;figcaption>銘柄&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>小売物価統計調査をピックアップするとしたら、ここ数年で値段が大きく変化しているものや地域間の差が特に大きいものとかですかね。&lt;/p>
&lt;p>「小売物価統計」でgoogle検索して面白そうな記事を見てみると&lt;br>
「今年のX’マスケーキは小さくなるか」という記事がありました。&lt;/p>
&lt;p>ケーキにもよく使われる小麦や油量種子はとりわけ高騰が目立つ&lt;br>
→&lt;br>
小売物価統計調査によると、東京都区部の小売価格で、今年11月の1kgあたりの小麦価格は1年前より約20円上昇した。食用油に至っては1kgあたり約60円と大幅な値上がりで、価格が比較的安定している食品の代名詞ともなってきた鶏卵でさえ、1パックあたり約12円上昇した。&lt;br>
→&lt;br>
クリスマスイブにケーキを買って帰る人も多いだろうが、今年は例年と比べて値段がほとんど同じなのにサイズが小さくなっていても不思議ではない。&lt;/p>
&lt;p>こんな感じのものは自動的にピックアップできると理想的なんですけどね。&lt;/p>
&lt;h2 id="今日のところのまとめ">今日のところのまとめ&lt;/h2>
&lt;p>自動的にピックアップするとしたら&lt;br>
・柔らかめのキーワード&lt;br>
・ここ数年間で値が急激に変化してるもの&lt;br>
・地域間の格差が大きいもの&lt;br>
ですかね。データを見ていって判定項目を増やしていきたいと思います。&lt;/p>
&lt;p>その他、アイスクリームでの検索結果には「家計調査」というのもありました。&lt;br>
家計の４半期での支出額の平均を出したものなのですが、アイスクリームの支出は当然夏が冬の倍くらい多い感じになってます。&lt;/p>
&lt;p>アイスクリームは当たり前ですが、その他季節によって大きく支出が違うものって何なのかは少し興味がありますね。&lt;br>
毎月や四半期ごとに値があるものについては、期間によって差が大きいものはピックアップしても良いかもしれませんね。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 116;
flex-basis: 279px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei.png" data-size="1586x1360">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei.png"
width="1586"
height="1360"
srcset="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei_hu134f38bd5ad256f8c70391b3da64abab_312038_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei_hu134f38bd5ad256f8c70391b3da64abab_312038_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="家計調査">
&lt;/a>
&lt;figcaption>家計調査&lt;/figcaption>
&lt;/figure>&lt;/p></description></item><item><title>e-Statのデータの見方</title><link>https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/</link><pubDate>Sat, 25 Dec 2021 21:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/anal.jpg" alt="Featured image of post e-Statのデータの見方" />&lt;p>今回は前回登場したデータの内容を調べてみましょう。&lt;br>
「統計表情報取得」（リスト取得）APIで取得したデータをもとにe-Statのサイト（https://www.e-stat.go.jp/）からデータを見つけてみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;LIST_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
&amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
&amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
&amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
&amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
&amp;lt;CYCLE&amp;gt;四半期&amp;lt;/CYCLE&amp;gt;
&amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
&amp;lt;OPEN_DATE&amp;gt;2020-04-01&amp;lt;/OPEN_DATE&amp;gt;
&amp;lt;SMALL_AREA&amp;gt;0&amp;lt;/SMALL_AREA&amp;gt;
&amp;lt;/LIST_INF&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="データを検索してみよう">データを検索してみよう&lt;/h2>
&lt;p>IDで検索できるのが一番良いのですが、キーワード検索のテキストフィールドに入力して検索してもダメでした。&lt;/p>
&lt;p>しょうが無いので、TITLE全文「形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）」で検索しましたがでダメでした。&lt;/p>
&lt;p>少し削って、「形態別国内家計最終消費支出 年度デフレータ—　前年度比」 だと４０５件。&lt;br>
多すぎるので、SURVEY_DATE、OPEN_DATEを使って調査年、調査月、公開年月で絞り込むと２件に絞り込めました。&lt;br>
あとはSTATISTICS_NAMEで特定できました。&lt;/p>
&lt;h2 id="詳細ページに行ってみましょう">詳細ページに行ってみましょう&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/stat-search/database?page=1&amp;amp;query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20&amp;amp;layout=dataset&amp;amp;year=20100&amp;amp;month=23070900&amp;amp;open_date=202004&amp;amp;statdisp_id=0003384123&amp;amp;metadata=1&amp;amp;data=1" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/stat-search/database?page=1&amp;query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20&amp;layout=dataset&amp;year=20100&amp;month=23070900&amp;open_date=202004&amp;statdisp_id=0003384123&amp;metadata=1&amp;data=1&lt;/a>&lt;/p>
&lt;p>上段が「統計表情報取得」の内容&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 147;
flex-basis: 355px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list.png" data-size="1986x1342">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list.png"
width="1986"
height="1342"
srcset="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list_hu5d314213e6b3192530f77b816005c824_381643_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list_hu5d314213e6b3192530f77b816005c824_381643_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="統計表情報">
&lt;/a>
&lt;figcaption>統計表情報&lt;/figcaption>
&lt;/figure>&lt;br>
下段が「メタ情報取得」の内容見たいです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 155;
flex-basis: 373px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta.png" data-size="1988x1278">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta.png"
width="1988"
height="1278"
srcset="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta_hu31ce838285791fd60ddd4f121b3decf8_248311_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta_hu31ce838285791fd60ddd4f121b3decf8_248311_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="メタ情報取得">
&lt;/a>
&lt;figcaption>メタ情報取得&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>DBをクリックするとグラフが表示されました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 240;
flex-basis: 576px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png" data-size="1892x788">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png"
width="1892"
height="788"
srcset="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei_hu124fe87f1847cfac0453afe0f1b0ea67_189919_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei_hu124fe87f1847cfac0453afe0f1b0ea67_189919_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="グラフ">
&lt;/a>
&lt;figcaption>グラフ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>行情報が「1981年度、1982年度、1983年度。。。」&lt;br>
列情報が「家計最終消費支出（再掲）、家計最終消費支出（再掲）_居住者家計の海外での直接購入、。。。」&lt;/p>
&lt;p>なんと、APIクリックすると丁寧にクエリを表示してくれました(API仕様書とか見る必要ないですね)。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 164;
flex-basis: 393px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api.png" data-size="1962x1196">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api.png"
width="1962"
height="1196"
srcset="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api_hu76bd22dd2d5fa36b989bf3e0c65e8f8d_349632_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api_hu76bd22dd2d5fa36b989bf3e0c65e8f8d_349632_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="API">
&lt;/a>
&lt;figcaption>API&lt;/figcaption>
&lt;/figure>&lt;br>
フォーマットもXML,JSON,CSVが選べますね。&lt;br>
私はCSVの方が扱いやすいのでこれからはCSVでダウンロードすることにします。&lt;/p>
&lt;p>appIdがカラに空になっているので追加してcurlで叩くだけでいいですね。至れり尽くりです。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;amp;metaGetFlg=Y&amp;amp;cntGetFlg=N&amp;amp;explanationGetFlg=Y&amp;amp;annotationGetFlg=Y&amp;amp;sectionHeaderFlg=1&amp;amp;replaceSpChars=0&amp;quot;
&amp;quot;tab_code&amp;quot;,&amp;quot;表章項目&amp;quot;,&amp;quot;cat01_code&amp;quot;,&amp;quot;形態別国内家計最終消費支出&amp;quot;,&amp;quot;time_code&amp;quot;,&amp;quot;時間軸（年度）&amp;quot;,&amp;quot;unit&amp;quot;,&amp;quot;value&amp;quot;,&amp;quot;annotation&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;3.8&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1982100000&amp;quot;,&amp;quot;1982年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;2.3&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1983100000&amp;quot;,&amp;quot;1983年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;&amp;quot;
.
.
.
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;17.6&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1982100000&amp;quot;,&amp;quot;1982年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;15.6&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1983100000&amp;quot;,&amp;quot;1983年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;-1.8&amp;quot;,&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="データの見方は">データの見方は？&lt;/h2>
&lt;p>DBで表示させた「統計表表示」と見比べてみると&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 240;
flex-basis: 576px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png" data-size="1892x788">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png"
width="1892"
height="788"
srcset="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei_hu124fe87f1847cfac0453afe0f1b0ea67_189919_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei_hu124fe87f1847cfac0453afe0f1b0ea67_189919_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="グラフ">
&lt;/a>
&lt;figcaption>グラフ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;3.8&amp;quot;,&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>&lt;p>が１行目「1981年度」の１列目「家計最終消費支出（再掲）」に該当するみたいですね。&lt;br>
１セル、１行のデータ構造みたいですね。&lt;br>
１列目の情報がしばらく続いて、全行終わると次は２列目の情報みたいな構成だということがわかりました。&lt;/p>
&lt;h2 id="国民経済計算って何">国民経済計算って何&lt;/h2>
&lt;p>このデータは国民経済計算を算出したものということですが、国民経済計算ってなんでしょう？&lt;/p>
&lt;p>内閣府のサイトによると&lt;br>
国民経済計算は「四半期別ＧＤＰ速報」と「国民経済計算年次推計」の２つからなっている。「四半期別ＧＤＰ速報」は速報性を重視し、ＧＤＰをはじめとする支出側系列等を、年に８回四半期別に作成・公表している。「国民経済計算年次推計」は、生産・分配・支出・資本蓄積といったフロー面や、資産・負債といったストック面も含めて、年に１回作成・公表している。&lt;/p>
&lt;p>GDPを算出するための何かみたいですね。&lt;/p>
&lt;p>googleの検索結果を見てみると、国や地方自治体のサイトや経済学の解説サイトがメインで、たまに今年のGDPはどうだったという記事でちょっと書かれてたりしました。&lt;/p>
&lt;p>記事の中でちょっと気になったのは、&lt;br>
日本では新型コロナウイルスの影響で個人消費が落ち込んでおり、貯蓄が増加傾向にあります。内閣府の国民経済計算によると、2020年に消費されずに貯蓄に回ったお金は、一律10万円の特別定額給付金の影響もあり、35.8兆円に達しました。この額は前年の5倍の水準です。&lt;br>
所得に対する貯蓄の割合を示す家計貯蓄率は13.1%と19年度（3.7%）から大きく上昇した。&lt;/p>
&lt;p>前年度から比較して急激に大きくなったという部分(5倍も！)。こういうのは是非ピックアップしたいと思いました。&lt;/p>
&lt;h2 id="e-statでのマイニングの目的は">e-Statでのマイニングの目的は&lt;/h2>
&lt;p>とわ言え「国民経済計算」全般的に堅い感じですね。。。。&lt;/p>
&lt;p>私のe-Statマイニングの目的は大量の政府公開データに埋もれている中から人の興味を引きそうな面白そうなコンテンツをピックアップしてわかりやすくサマリーを表示することなのです。&lt;/p>
&lt;p>キーワードランキングを見てみると「アイスクリーム」「身長・体重の平均値」みたいな面白そうな柔らかめのコンテンツもあるんです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 358px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking.png" data-size="1434x960">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking.png"
width="1434"
height="960"
srcset="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking_hu5dadec452d8bd9bb4d7577d888e43b5e_127374_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking_hu5dadec452d8bd9bb4d7577d888e43b5e_127374_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ランキング">
&lt;/a>
&lt;figcaption>ランキング&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>次回から、&lt;br>
・e-Statの森の中から面白いコンテンツを見つけよう&lt;br>
・うまくサマライズして表示しよう&lt;br>
　　興味深い列情報に絞りたい&lt;br>
　　前年度から５倍とか急激に変化した部分をピックアップして伝えたい&lt;br>
という視点からe-Statを調査していきたいと思います。&lt;/p></description></item><item><title>「UNIXという考え方―その設計思想と哲学」　メモ</title><link>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</link><pubDate>Sat, 25 Dec 2021 09:25:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 「UNIXという考え方―その設計思想と哲学」　メモ" />&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4274064069/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4274064069&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=d045d50d407b75e179a1c786ee85e152" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4274064069&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXという考え方―その設計思想と哲学&lt;/h2>
&lt;p>UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;h2 id="あらすじ">あらすじ&lt;/h2>
&lt;p>UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。&lt;/p>
&lt;p>そもそもUNIXはMulticsという巨大なOSの開発から生まれたものだ。あまりに巨大なMulticsはその複雑さゆえに開発は遅々として進まず、その反省からケン・トンプソンが作ったのがUNIXの初めとされる。その後デニス・リッチーら多数の開発者が携わり、UNIXは発展した。本書はこのUNIXに込められた「思想と哲学」を抽出し、数々のエピソードとともにUNIXの特徴を浮き彫りにしていく。&lt;/p>
&lt;p>たとえば本書で述べられているUNIXの発想のひとつとして「過度の対話式インタフェースを避ける」というものがある。UNIXのシステムは初心者には「不親切」なつくり、つまり親切な対話式のインタフェースはほとんどなく、ユーザーがコマンドを実行しようとするときはオプションをつける形をとっている。この形式はオプションをいちいち覚えねばならず、初心者に決してやさしくない。しかしこれはプログラムを小さく単純なものにし、他のプログラムとの結合性を高くする。そして結果としてUNIXのスケーラビリティと移植性の高さを支えることになっているのだ。このような形式で本書では9つの定理と10の小定理を掲げ、UNIXが何を重視し、何を犠牲にしてきたのかを明快に解説している。&lt;/p>
&lt;h2 id="このページはなんだ">このページはなんだ？&lt;/h2>
&lt;p>　という前置きはよいとして、心に余裕があれば、ぜひ本書を読んでいただきたい。全てのLinux初心者必携の書だ。そして、このページは何かというと、この本のエッセンスを抜粋した「メモ」という位置づけとしてとらえて欲しい。&lt;/p>
&lt;p>　一度、本を読んで頂ければ、このメモを見ればいつでもほんの情景がフィードバックされるはずだ。とうぜん、本を読まずしてこのメモを見てもいまいちちんぷんかんぷんかとは思う。&lt;/p>
&lt;p>　ただ、エッセンスからでも読み取れることも多い。&lt;/p>
&lt;p>　解決方法は皆さんにお任せする。&lt;/p>
&lt;h2 id="１小さいものは美しい">■１．小さいものは美しい&lt;/h2>
&lt;h3 id="抜粋">抜粋&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">　　小さなプログラムはわかりやすい
　　小さなプログラムは保守しやすい
　　小さなプログラムはシステムリソースに易しい
　　小さなプログラムは他のツールと組み合わせやすい
　　「伝統的なプログラマは、巨大なアメリカンプログラムによって、
　　　　世界中の全ての問題を一つのプログラムで解決しようとする。」
　　「プログラムの９０％はクズである。
　　　　ただしあらゆるものの９０％はクズである。」
　　パラメータが一行に収まらない
　　メソッドが画面に収まらない
　　コメントを読まないと何をやっているのか思い出せない
　　lsでモジュール名が多すぎて画面の端から消えていってしまう
　　まだ開発中なのにエラーメッセージの意味を思い出せない
　　整理するためにソースコードを印刷している自分に気がついた
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="エッセンス">エッセンス&lt;/h3>
&lt;pre tabindex="0">&lt;code>　「スモールイズビューティフル」
　　「伝統的なプログラマは、巨大なアメリカンプログラムによって、
　　　　世界中の全ての問題を一つのプログラムで解決しようとする。」
　　「プログラムの９０％はクズである。
　　　　ただしあらゆるものの９０％はクズである。」
&lt;/code>&lt;/pre>&lt;h2 id="２一つのプログラムには一つの事をうまくやらせる">■２．一つのプログラムには一つの事をうまくやらせる&lt;/h2>
&lt;h3 id="抜粋-1">抜粋&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-　　a)ユーザーとの対話が必要か。パラメータではだめか" data-lang="　　a)ユーザーとの対話が必要か。パラメータではだめか">　　b)入力データは特殊フォーマットが必要か。フォーマット変換プログラムがすでにシステム上にないか。
　　c)出力データは特殊フォーマットが必要か。通常のASCIIファイルではだめか。
　　d)新しいプログラムを書かずとも似たような機能を持つ他のプログラムがあるのではないか。
　　「一つの事をうまくやるようにプログラムを作れないのであれば、
　　　　おそらく問題をまだ完全に理解していない。」
　　「しのびよる多機能主義。
　　　　プログラマはいつだってプログラムを遅くする方法を見つける。」
　　一つの事をうまくやるようにアプリケーションを書けば、それは必然的に小さなプログラムになる。
　　小さなプログラムは単一機能になる傾向があり、単一機能のプログラムは小さくなる傾向がある。
&lt;/code>&lt;/pre>&lt;h3 id="エッセンス-1">エッセンス&lt;/h3>
&lt;pre tabindex="0">&lt;code>　「わかることは分けること」
　　「UNIXユーザーは、自分が何をしているのかをわかっている。
　　　　何をしているのかわからないのなら、ここにいるべきではない」
　　「一つの事をうまくやるようにプログラムを作れないのであれば、
　　　　おそらく問題をまだ完全に理解していない。」
&lt;/code>&lt;/pre>&lt;h2 id="３出来るだけ早く試作する">■３．出来るだけ早く試作する&lt;/h2>
&lt;h3 id="抜粋-2">抜粋&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　「試作によって学ぶ。早い試作はリスクを減らす。
　　　「正しく」やっている時間などない」
　　「なにができるか」
　　　　むしろ重要な事は、「なにができないか」を知る事だ。」
　　三つのシステム
　　１．第一のシステム
　　　第一のシステムは正しくやっている時間などない。
　　　第一のシステムは追い詰められた人間が作る。
　　　第一のシステムのコンセプトは人々の想像力を刺激する。
　　　第一のシステムは一人かせいぜい数人からなる小さなグループで作られる。
　　　第一のシステムは高い情熱によって推進され開発は急速に進む。
　　　第一のシステムは実に性能がよい。
　　２．第二のシステム
　　　第二のシステムは第一のシステムで証明されたアイデアを継承する。
　　　第二のシステムは委員会が設計する。
　　　第二のシステムは委員会によりものごとを全て公開の場で自分自身の正当化のために議論を進める。
　　　第二のシステムは第一のシステムの成功に便乗し分け前にあずかろうとする自称専門家で作られる。
　　　第二のシステムは自称専門家によりリポジトリ、進捗管理ツールが導入され計画は遅延する。
　　　第二のシステムは自称専門家のプログラムにおきかえられ贅肉がつき像のようにゆっくり動く。
　　　第二のシステムは「最初の設計のひどい欠点を見違えるように改善」され多機能となり無知が使う。
　　　第二のシステムは三つのシステムの中で最悪のシステムである。
　　３．第三のシステム
　　　第三のシステムはこれまでのシステムへの反抗から生まれる。
　　　第三のシステムの名前が変わり、オリジナルのアイデアはもはや常識となる。
　　　第三のシステムは第一と第二のシステムの最良の特徴を組み合わせる。
　　　第三のシステムは設計者にとってようやく「正しく」やる事が出来る。
　　　第三のシステムはユーザーが実際に使用する機能しか含まれない。
　　　第三のシステムはディスク、メモリ、CPUサイクルなど最適なバランスが実現されている。
　　　第三のシステムは提供される性能レベルも良くバランスがとれている。
　　第一のシステムとして「試作」を１ナノ秒でも早く作り、
　　　第一のシステムと第二のシステムのサイクルを反復と協調し、
　　　　第三のシステムに向かって協力しながら進んでいく。
&lt;/code>&lt;/pre>&lt;h3 id="エッセンス-2">エッセンス&lt;/h3>
&lt;pre tabindex="0">&lt;code>　「反復と協調」
　　「試作によって学ぶ。早い試作はリスクを減らす。
　　　「正しく」やっている時間などない」
　　「なにができるか」
　　　　むしろ重要な事は、「なにができないか」を知る事だ。」
&lt;/code>&lt;/pre>&lt;h2 id="４効率より移植性">■４．効率より移植性&lt;/h2>
&lt;h3 id="抜粋-3">抜粋&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　UNIXにおいてそれはシェルスクリプトしかない。
　　次のハードウェアはもっと速く走る。だからプログラムを速くするという誘惑に負けない。
　　わずかな速度を求めてCで書き直さない。それは時間の無駄だ。
　　シェルスクリプトをあれこれいじる余裕が一瞬でも生じればほとんどのプログラマは
a) 新しい機能をいくつか付け加えようとする
　　　b) スクリプトそのものを洗練し、実行速度を高めようとする
　　　c) その一部、または大部分をCで書き直してパフォーマンスの向上を図ろうとする。
　　「最も効率の良い方法は、
　　　　ほとんどの場合「移植性」に欠ける。」
　　「移植か死か。優れたソフトウェアは移植され成長し、
　　　　それ以外は取り残され捨てられる。」
　　DQ1カートリッジ(64kb)用のコード
　　　自分のプログラマ人生で最も効率の良い、そして移植の難しいコード」を書いた。
　　　命令をデータとして扱い、データを命令として扱った。
　　　走査線が画面の右端から左端に引き返すまでの間を狙って命令を実行した。
　　　メモリ節約のためありとあらゆる技を駆使した。
　　　こうしてできあがったコードは芸術品と言えるほど見事なものだった。
　　　フォルクスワーゲンのビートルに２０人ほど詰め込むようなものだった。
　　　そして保守担当者にとっては究極の悪夢でもあった。
&lt;/code>&lt;/pre>&lt;h3 id="エッセンス-3">エッセンス&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">　bashとawkとsed
　　「最も効率の良い方法は、
　　　　ほとんどの場合「移植性」に欠ける。」
　　「移植か死か。優れたソフトウェアは移植され成長し、
　　　　それ以外は取り残され捨てられる。」
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="５出力結果はasciiフラットファイルに保存する">■５．出力結果はASCIIフラットファイルに保存する&lt;/h2>
&lt;h3 id="抜粋-4">抜粋&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　「動かせないデータは死んだデータだ。」
　　出力結果はASCIIフラットファイルに保存する。
　　RDBを使わない。
　　中間ファイルをはき出さない。
&lt;/code>&lt;/pre>&lt;h3 id="エッセンス-4">エッセンス&lt;/h3>
&lt;pre tabindex="0">&lt;code>　中間ファイルは作らない　RDBは使わない
　　「動かせないデータは死んだデータだ。」
&lt;/code>&lt;/pre>&lt;h2 id="６ソフトウェアを梃子として使う">■６．ソフトウェアを梃子として使う　&lt;/h2>
&lt;h3 id="抜粋-5">抜粋&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　梃子の支点をいかに自分のほうに近づける事が出来るか
　　独自技術症候群を避け、すでにあるものにクリエイティブな付加価値をつける
　　独自技術症候群は創造性を伸ばさない。
　　「良いプログラマはよいコードを書く。
　　　　偉大なプログラマは良いコードを借りてくる。」
&lt;/code>&lt;/pre>&lt;h3 id="エッセンス-5">エッセンス&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　「良いプログラマはよいコードを書く。
　　　　偉大なプログラマは良いコードを借りてくる。」
&lt;/code>&lt;/pre>&lt;h2 id="７シェルスクリプトによって梃子の効果と移植性を高めるパイプ">■７．シェルスクリプトによって梃子の効果と移植性を高める　パイプ&lt;/h2>
&lt;h3 id="抜粋-6">抜粋&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　シェルスクリプトには恐ろしいほどの梃子の効果がある
　　シェルスクリプトは梃子の降下で時間も節約する
　　シェルスクリプトはCより移植性が高い
　　「熟練プログラマはシェルスクリプトを熱心に使う。
　　　　あなたもまたそうするべきだ。」
　　「UNIXの源流は高水準の抽象化モデル「シェルスクリプト」であり、
　　　　それは今も普遍である。」
　　「私は人生で二度しか奇跡を見た事がない。
　　　　一つは核融合、もう一つは複利だ
　　　少量のものを繰り返し掛け合わせていく事で、
　　　　やがて奇跡的な規模に達する。」アインシュタイン
　　シェルスクリプト一行はおよそ１万倍の複利を生む
```bash
　　echo who | awk '{ print $1 ; }' | sort | uniq | sed -e &amp;quot;s/ /, /g&amp;quot; ;
　　echo 177
　　who 755
　　awk 3411
　　sort 2614
　　uniq 302
　　sed 2093
-------------------------
　　　　 9.353
　　処理をパイプでつなぎ処理全体を一行で完結させる。
　　「ひとつのことをうまくやる」の良い事例だ。
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">　　&lt;span class="k">function&lt;/span> sh_func_getTitle&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
　　 &lt;span class="nv">TITLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">URLGETOPT&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>　　 &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line &lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
　　 &lt;span class="k">if&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> grep -i &lt;span class="s2">&amp;#34;title=&amp;#34;&lt;/span> &amp;gt; /dev/null&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
　　 &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>　　 sed -e &lt;span class="s2">&amp;#34;s/^.*title=\x27//g&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>　　 -e &lt;span class="s2">&amp;#34;s/\x27.*&lt;/span>$&lt;span class="s2">//g&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>　　 -e &lt;span class="s2">&amp;#34;s/\r//g&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>　　 -e &lt;span class="s2">&amp;#34;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>　　 -e &lt;span class="s2">&amp;#34;s/^[●○■□△▽]//g&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
　　 &lt;span class="k">fi&lt;/span>
　　 &lt;span class="k">done)&lt;/span>&lt;span class="p">;&lt;/span>
　　&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="エッセンス-6">エッセンス&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　「私は人生で二度しか奇跡を見た事がない。
　　　　一つは核融合、もう一つは複利だ
　　　　　少量のものを繰り返し掛け合わせていく事で、
　　　　　　やがて奇跡的な規模に達する。」
&lt;/code>&lt;/pre>&lt;h2 id="８全てのプログラムをフィルタとして設計する">■８．全てのプログラムをフィルタとして設計する&lt;/h2>
&lt;h3 id="抜粋-7">抜粋&lt;/h3>
&lt;p>　　メソッド間の入力をstdin、出力はstdoutを使用する&lt;br>
　　オンメモリでコマンドフィルタとして稼働する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">　&lt;span class="k">function&lt;/span> trim&lt;span class="o">(){&lt;/span>
　　&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -p /dev/stdin &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
　 cat - &lt;span class="p">;&lt;/span>
　　&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> -n &lt;span class="p">;&lt;/span>
　　&lt;span class="k">fi&lt;/span> &lt;span class="p">|&lt;/span> sed -e &lt;span class="s1">&amp;#39;s/^ *//g&amp;#39;&lt;/span> -e &lt;span class="s1">&amp;#39;s/ *$//g&amp;#39;&lt;/span>
　&lt;span class="o">}&lt;/span>
　　実行結果
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; ほげ &amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> trim &lt;span class="p">;&lt;/span>
ほげ
&lt;/code>&lt;/pre>&lt;/div>&lt;p>　　以下でも良い。　　&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">　&lt;span class="k">function&lt;/span> trim&lt;span class="o">(){&lt;/span>
　　awk &lt;span class="s1">&amp;#39;{ print $1; }&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sed -e &lt;span class="s1">&amp;#39;s/^ *//g&amp;#39;&lt;/span> -e &lt;span class="s1">&amp;#39;s/ *$//g&amp;#39;&lt;/span> &amp;lt;/dev/stdin
　&lt;span class="o">}&lt;/span>
　　実行結果
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; ほげ &amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> trim &lt;span class="p">;&lt;/span>
ほげ
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="エッセンス-7">エッセンス&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">　　　メソッド間の入力をstdin、出力はstdoutを使用する
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="９並行して考える">■９．並行して考える&lt;/h2>
&lt;h3 id="抜粋-8">抜粋&lt;/h3>
&lt;p>　　並列処理が可能なメソッドを積極的に書く&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> 　　 メソッドの並列処理
　　 &lt;span class="m">1&lt;/span> &lt;span class="c1">#!/bin/bash&lt;/span>
　　 &lt;span class="m">2&lt;/span> cmd&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
　　 &lt;span class="m">3&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello, &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
　　 &lt;span class="m">4&lt;/span> &lt;span class="o">}&lt;/span>
　　 &lt;span class="m">5&lt;/span> &lt;span class="k">function&lt;/span> sh_xargs&lt;span class="o">(){&lt;/span>
　　 &lt;span class="m">6&lt;/span> 　&lt;span class="nb">export&lt;/span> -f cmd
　　 &lt;span class="m">7&lt;/span> 　yes &lt;span class="p">|&lt;/span> head -1000 &lt;span class="p">|&lt;/span> xargs -n1 -P4 -I % bash -c &lt;span class="s2">&amp;#34;cmd %&amp;#34;&lt;/span>
　　 &lt;span class="m">8&lt;/span> &lt;span class="o">}&lt;/span>
　　 &lt;span class="m">9&lt;/span> sh_xargs &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="エッセンス-8">エッセンス&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　　並列処理が可能なメソッドを積極的に書く
&lt;/code>&lt;/pre>&lt;h2 id="１０木を守る">■１０．木を守る&lt;/h2>
&lt;h3 id="抜粋-9">抜粋&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　UNIXユーザーは紙のドキュメントを忌み嫌う。不要なドキュメントを印刷して整理する事はしない。
　　ソースコードが実体であり、高水準のドキュメントとなるようプログラムする。
&lt;/code>&lt;/pre>&lt;h3 id="エッセンス-9">エッセンス&lt;/h3>
&lt;pre tabindex="0">&lt;code>　　　UNIXはドキュメントを忌み嫌う
&lt;/code>&lt;/pre></description></item><item><title>知識ゼロからのe-Statマイニング</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/</link><pubDate>Fri, 24 Dec 2021 18:12:54 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/anal.jpg" alt="Featured image of post 知識ゼロからのe-Statマイニング" />&lt;p>知識ゼロからのe-Statマイニング&lt;br>
日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-Statという日本の統計が閲覧できる政府統計ポータルサイトを発見しました。&lt;br>
アイスの売り上げから子供の平均身長まで大量の統計資料が公開されており、しかもAPIまであるすごいサイトです。 このe-Statをマイニングしてみようと思います。&lt;br>
まずはAPIを叩くところまでやってみます。&lt;/p>
&lt;h2 id="まずはアプリケーションidを取得しよう">まずはアプリケーションIDを取得しよう&lt;/h2>
&lt;p>APIを叩くにはアプリケーションIDが必要です。&lt;br>
まずはアプリケーションIDを取得しましょう。&lt;br>
アプリケーションIDを取得するにはユーザー登録が必要です。以下のURLから手順に従ってユーザー登録してください。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/mypage/user/preregister" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/mypage/user/preregister&lt;/a>&lt;/p>
&lt;p>アプリケーションIDはログイン後マイページ内のAPI機能(アプリケーションID発行)で取得できます。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/mypage/view/api" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/mypage/view/api&lt;/a>&lt;/p>
&lt;p>入力項目は名称、URL、概要の３つです。&lt;br>
名称、概要は適当で大丈夫です。&lt;br>
URLは、http://localhostだと私はダメだったのでこのサイトのURLを設定しました。&lt;/p>
&lt;p>発行ボタンを押すとappIdにアプリケーションIDが払い出されます。&lt;/p>
&lt;h2 id="apiを叩いてみよう">APIを叩いてみよう&lt;/h2>
&lt;p>APIの仕様は以下のURLに記載されています。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0&lt;/a>&lt;/p>
&lt;p>難しいです。&lt;br>
なんとなく、「統計表情報取得」でリストを取得して、「メタ情報取得」「統計データ取得」で個別のデータを取得する感じでしょうか？&lt;br>
まずは叩いてみます。&lt;/p>
&lt;h2 id="統計表情報取得">統計表情報取得&lt;/h2>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=xxxxxxxxx&amp;amp;lang=J&amp;amp;searchKind=&amp;amp;searchWord=&amp;quot;
&amp;lt;LIST_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
&amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
&amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
&amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
&amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
&amp;lt;CYCLE&amp;gt;四半期&amp;lt;/CYCLE&amp;gt;
&amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
&amp;lt;OPEN_DATE&amp;gt;2020-04-01&amp;lt;/OPEN_DATE&amp;gt;
&amp;lt;SMALL_AREA&amp;gt;0&amp;lt;/SMALL_AREA&amp;gt;
&amp;lt;/LIST_INF&amp;gt;
&lt;/code>&lt;/pre>&lt;p>LIST_INF idの「0003384123」」が個別データのidみたいです。これを使ってメタ情報取得、統計情報取得を呼び出します。&lt;/p>
&lt;p>##メタ情報取得&lt;/p>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=xxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;quot;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;GET_META_INFO xsi:noNamespaceSchemaLocation=&amp;quot;https://api.e-stat.go.jp/rest/1.0/schema/GetMetaInfo.xsd&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
&amp;lt;RESULT&amp;gt;
&amp;lt;STATUS&amp;gt;0&amp;lt;/STATUS&amp;gt;
&amp;lt;ERROR_MSG&amp;gt;正常に終了しました。&amp;lt;/ERROR_MSG&amp;gt;
&amp;lt;DATE&amp;gt;2021-12-24T18:35:07.926+09:00&amp;lt;/DATE&amp;gt;
&amp;lt;/RESULT&amp;gt;
&amp;lt;PARAMETER&amp;gt;
&amp;lt;LANG&amp;gt;J&amp;lt;/LANG&amp;gt;
&amp;lt;STATS_DATA_ID&amp;gt;0003384123&amp;lt;/STATS_DATA_ID&amp;gt;
&amp;lt;/PARAMETER&amp;gt;
&amp;lt;METADATA_INF&amp;gt;
&amp;lt;TABLE_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
&amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
&amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
&amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
&amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
&amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
&amp;lt;/TABLE_INF&amp;gt;
&amp;lt;CLASS_INF&amp;gt;
&amp;lt;CLASS_OBJ id=&amp;quot;tab&amp;quot; name=&amp;quot;表章項目&amp;quot; description=&amp;quot;Excelの書式設定で統計表の数値を&amp;amp;quot;-0.0&amp;amp;quot;としている場合、データベース上&amp;amp;quot;0.0&amp;amp;quot;として収録されているため、Excel統計表の数値とは必ずしも一致しない。&amp;quot;&amp;gt;
&amp;lt;CLASS code=&amp;quot;17&amp;quot; name=&amp;quot;前年度比&amp;quot; level=&amp;quot;&amp;quot; unit=&amp;quot;％&amp;quot;/&amp;gt;
&amp;lt;/CLASS_OBJ&amp;gt;
&amp;lt;CLASS_OBJ id=&amp;quot;cat01&amp;quot; name=&amp;quot;形態別国内家計最終消費支出&amp;quot;&amp;gt;
&amp;lt;CLASS code=&amp;quot;11&amp;quot; name=&amp;quot;家計最終消費支出（再掲）&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;12&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;13&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_（控除）非居住者家計の国内での直接購入&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;14&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;15&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;16&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_半耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;17&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_非耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;18&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_サービス&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
&amp;lt;/CLASS_OBJ&amp;gt;
&amp;lt;CLASS_OBJ id=&amp;quot;time&amp;quot; name=&amp;quot;時間軸（年度）&amp;quot;&amp;gt;
&amp;lt;CLASS code=&amp;quot;1981100000&amp;quot; name=&amp;quot;1981年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1982100000&amp;quot; name=&amp;quot;1982年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1983100000&amp;quot; name=&amp;quot;1983年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1984100000&amp;quot; name=&amp;quot;1984年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1985100000&amp;quot; name=&amp;quot;1985年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1986100000&amp;quot; name=&amp;quot;1986年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1987100000&amp;quot; name=&amp;quot;1987年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1988100000&amp;quot; name=&amp;quot;1988年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1989100000&amp;quot; name=&amp;quot;1989年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code>&lt;/pre>&lt;p>上の方がデータ内容の説明なのか？よくわかりません。&lt;/p>
&lt;h2 id="統計情報取得">統計情報取得&lt;/h2>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000&amp;amp;appId=xxxxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;amp;metaGetFlg=N&amp;amp;cntGetFlg=N&amp;quot;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;GET_STATS_DATA xsi:noNamespaceSchemaLocation=&amp;quot;https://api.e-stat.go.jp/rest/1.0/schema/GetStatsData.xsd&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
&amp;lt;RESULT&amp;gt;
&amp;lt;STATUS&amp;gt;0&amp;lt;/STATUS&amp;gt;
&amp;lt;ERROR_MSG&amp;gt;正常に終了しました。&amp;lt;/ERROR_MSG&amp;gt;
&amp;lt;DATE&amp;gt;2021-12-24T18:37:22.156+09:00&amp;lt;/DATE&amp;gt;
&amp;lt;/RESULT&amp;gt;
&amp;lt;PARAMETER&amp;gt;
&amp;lt;LANG&amp;gt;J&amp;lt;/LANG&amp;gt;
&amp;lt;STATS_DATA_ID&amp;gt;0003384123&amp;lt;/STATS_DATA_ID&amp;gt;
&amp;lt;DATA_FORMAT&amp;gt;X&amp;lt;/DATA_FORMAT&amp;gt;
&amp;lt;START_POSITION&amp;gt;1&amp;lt;/START_POSITION&amp;gt;
&amp;lt;LIMIT&amp;gt;10000&amp;lt;/LIMIT&amp;gt;
&amp;lt;METAGET_FLG&amp;gt;N&amp;lt;/METAGET_FLG&amp;gt;
&amp;lt;CNT_GET_FLG&amp;gt;N&amp;lt;/CNT_GET_FLG&amp;gt;
&amp;lt;/PARAMETER&amp;gt;
&amp;lt;STATISTICAL_DATA&amp;gt;
&amp;lt;TABLE_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
&amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
&amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
&amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
&amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
&amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
&amp;lt;TOTAL_NUMBER&amp;gt;232&amp;lt;/TOTAL_NUMBER&amp;gt;
&amp;lt;FROM_NUMBER&amp;gt;1&amp;lt;/FROM_NUMBER&amp;gt;
&amp;lt;TO_NUMBER&amp;gt;232&amp;lt;/TO_NUMBER&amp;gt;
&amp;lt;/TABLE_INF&amp;gt;
&amp;lt;DATA_INF&amp;gt;
&amp;lt;NOTE char=&amp;quot;***&amp;quot;&amp;gt;数字が得られないもの&amp;lt;/NOTE&amp;gt;
&amp;lt;NOTE char=&amp;quot;-&amp;quot;&amp;gt;数字が得られないもの&amp;lt;/NOTE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1981100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;3.8&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1982100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.3&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1983100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1984100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.2&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1985100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;1.2&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1986100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.1&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1987100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.5&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1988100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.5&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1989100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.5&amp;lt;/VALUE&amp;gt;
&lt;/code>&lt;/pre>&lt;p>VALUEが値みたいですがどういう列情報になっているのでしょうか？&lt;br>
とりあえずAPIはお手軽に叩けることがわかりました。&lt;br>
次回以降はデータの内容を理解していこうと思います。&lt;/p></description></item><item><title>【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法</title><link>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</link><pubDate>Fri, 24 Dec 2021 11:55:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法" />&lt;h2 id="関連記事">関連記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" target="_blank" rel="noopener"
>【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/" target="_blank" rel="noopener"
>【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/" target="_blank" rel="noopener"
>【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-21-01-suzuki/" target="_blank" rel="noopener"
>【ssh/bash】ssh/Bashでサーバーへログイン・実行・ログアウトの一連自動化処理を作ってみようって話&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="やりたいこと">やりたいこと&lt;/h2>
&lt;p>sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトしてローカルに何事もなかったかのようにもどってくる最も簡単な方法ってなにかないでしょうか。&lt;/p>
&lt;h2 id="イメージ">イメージ&lt;/h2>
&lt;p>従来の方法&lt;/p>
&lt;pre tabindex="0">&lt;code>ローカルＰＣのターミナル
↓ Linuxサーバーにログイン
$df $uptime などを実行
↓ Linuxサーバーをログアウト
ローカルＰＣにもどる
&lt;/code>&lt;/pre>&lt;p>これからつくるBash/ssh&lt;/p>
&lt;pre tabindex="0">&lt;code>ローカルＰＣのターミナル
↓
Linuxサーバーにログイン
$df $uptime などを実行
Linuxサーバーをログアウト
↓
ローカルＰＣのターミナルにもどる
&lt;/code>&lt;/pre>&lt;p>わかりにくいですか？&lt;br>
まず、メリットとしてサーバーでコマンドからログアウトする必要がありません。&lt;br>
これができれば、一台一台サーバーのヘルスチェックをせずとも、数十台のサーバーを&lt;br>
順番に訪ね歩きファイルに出力する事も可能です。&lt;/p>
&lt;p>以下、ソースです。&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/usr/bin/bash
##############################################
# sshでサーバーにログインして、なんらかのコマンドを
# 実行しターミナルに表示、ミッション終了後、ターミ
# ナルを自動的にログアウトしてローカルに何事もなか
# ったかのようにもどってくる最も簡単シェルスクリプト
##############################################
#
# サーバーのＩＰアドレスとか
SERVER=&amp;quot;centos@xx.xx.xx.xxx&amp;quot;
# 実行したいコマンドを &amp;amp;&amp;amp; でつなぐ
COMMAND=&amp;quot;uptime &amp;amp;&amp;amp; df -h&amp;quot;;
echo &amp;quot;centosサーバーログイン&amp;quot;;
# ポイントは -t です。
ssh $SERVER -t $COMMAND;
echo &amp;quot;centosサーバーログアウト&amp;quot;;
exit;
&lt;/code>&lt;/pre>&lt;p>たったこれだけですが、この工夫により多くのサーバーを&lt;br>
スクリプトで一括回遊することができます。 お試しあれ。&lt;/p></description></item><item><title>SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない</title><link>https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/</link><pubDate>Fri, 24 Dec 2021 09:43:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/af7ef3c0-44c1-4f2f-aad8-1a0664724558.jpg" alt="Featured image of post SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない" />&lt;p>hugoでscssやsassを含んだファイルををGitHubに公開、Git Actionで自動ビルドしようとした際に、見慣れないエラーが表示された&lt;/p>
&lt;pre tabindex="0">&lt;code>Run hugo --minify
Error: Error building site: TOCSS:
failed to transform &amp;quot;scss/style.scss&amp;quot; (text/x-scss).
Check your Hugo installation;
you need the extended version to build SCSS/SASS.
: this feature is not available in your current Hugo version,
see https://goo.gl/YMrWcn for more information
...
Total in 148 ms
Error: Process completed with exit code 255.
&lt;/code>&lt;/pre>&lt;p>はて？なにか悪いことでもしたのだろうか。&lt;br>
それとも変な記述をしてしまったのだろうか。&lt;/p>
&lt;h2 id="エラーの内容">エラーの内容&lt;/h2>
&lt;p>こういうときは、落ち着いてエラーを見てみよう。&lt;br>
大抵のことはちゃんと教えてくれているはずだ。&lt;/p>
&lt;pre tabindex="0">&lt;code>Check your Hugo installation; you need the extended version
&lt;/code>&lt;/pre>&lt;p>なるほど、extended を使えと行っている。&lt;br>
extended とはなんだろう。&lt;/p>
&lt;h2 id="エラーの対応">エラーの対応&lt;/h2>
&lt;p>さらに落ち着いて設定ファイルを確認することをおすすめする。&lt;br>
.github/workflow/gh-pages.yml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;0.87.0&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#extended: true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>設定の extended が思いっきりコメントアウトされていました&lt;/p>
&lt;p>コメントを外して、再度Gitにpushしたところ、正常にビルドされて公開できました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>scssやsassを含んだファイルをhugoをgitに公開しようとした際に、ビルドできない場合は設定を確認することをおすすめする。&lt;/p></description></item><item><title>【プログレスバー】Bashでプログレスバーを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</link><pubDate>Thu, 23 Dec 2021 16:10:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【プログレスバー】Bashでプログレスバーを作ってみようって話" />&lt;h2 id="関連記事">関連記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" target="_blank" rel="noopener"
>【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/" target="_blank" rel="noopener"
>【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/" target="_blank" rel="noopener"
>【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="プログレスバー">プログレスバー&lt;/h2>
&lt;p>ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。&lt;br>
処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。&lt;br>
シェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい&lt;/p>
&lt;h2 id="使い方">使い方&lt;/h2>
&lt;p>処理のループ中に以下の1行を追記します。&lt;/p>
&lt;pre tabindex="0">&lt;code>progress &amp;quot;$#&amp;quot; &amp;quot;$MAX&amp;quot;; set - &amp;quot;$@&amp;quot; count ;
&lt;/code>&lt;/pre>&lt;h2 id="実行手順">実行手順&lt;/h2>
&lt;p>以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ :&amp;gt; Progress.sh
$ vim Progress.sh
# vimで以下のソースコードを貼り付けて保存
# ソースコードのファイルエンコードをUTF-8に変更します。
$ nkf -wLu Progress.sh &amp;gt; Progress.sh.utf8
# ファイルエンコードを変更したファイルを元のファイル名にリネームします。
$ mv Progress.sh.utf8 Progress.sh
# 実行権限を付与します
$ chmod +x Progress.sh
# 実行
$ ./Progress.sh
&lt;/code>&lt;/pre>&lt;h2 id="ソースコード">ソースコード&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1">#######################################&lt;/span>
&lt;span class="c1"># 進捗を表示するプログレスバー&lt;/span>
&lt;span class="c1"># &lt;/span>
&lt;span class="c1">#######################################&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># percent $1 &lt;/span>
&lt;span class="c1"># GT $2&lt;/span>
progress&lt;span class="o">(){&lt;/span>
&lt;span class="nv">percent&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">GT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">column&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="m">71&lt;/span> &lt;span class="se">\*&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$percent&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> / &lt;span class="nv">$GT&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">nspace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="m">71&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$column&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;\r[&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#位置パラメータの数($#)を１にリセット（カウンタとして流用）&lt;/span>
&lt;span class="nb">set&lt;/span> dummy &lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -le &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$column&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># barに=を追加&lt;/span>
&lt;span class="nb">set&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> dummy&lt;span class="p">;&lt;/span> &lt;span class="c1"># $#をインクリメント&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">#barの先端に&amp;gt;を追加&lt;/span>
&lt;span class="c1">#位置パラメータの数($#)を１にリセット（カウンタとして流用）&lt;/span>
&lt;span class="nb">set&lt;/span> dummy &lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -le &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$nspace&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">set&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> dummy&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="nv">$percent&lt;/span>/&lt;span class="nv">$GT&lt;/span>&lt;span class="s1">&amp;#39;\c&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># barに]と１行分のプログレスバーを表示&lt;/span>
&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#######################################&lt;/span>
&lt;span class="c1"># メイン処理&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="nb">set&lt;/span> count &lt;span class="p">;&lt;/span>
&lt;span class="nv">MAX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="c1">#最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;&lt;span class="nv">$MAX&lt;/span>&lt;span class="p">;&lt;/span> i++&lt;span class="o">)){&lt;/span>
&lt;span class="c1"># ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。&lt;/span>
progress &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$MAX&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">set&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> count &lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1">#終了&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使い方-1">使い方&lt;/h2>
&lt;p>シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。&lt;/p>
&lt;p>自作ソースの中のループ処理の関数の頭に以下を追記します。&lt;br>
MAX=100; は、処理の最大値を指定します。&lt;br>
処理のループ最大数が150回であれば、以下の通りに修正します。&lt;/p>
&lt;pre tabindex="0">&lt;code>set count;
MAX=150;
&lt;/code>&lt;/pre>&lt;p>forやwhileループ処理の中に以下を埋め込みます。&lt;/p>
&lt;pre tabindex="0">&lt;code>progress &amp;quot;$#&amp;quot; &amp;quot;$MAX&amp;quot;; set - &amp;quot;$@&amp;quot; count ;
&lt;/code>&lt;/pre>&lt;p>最後にforまたはwhileループを抜けた後に&lt;/p>
&lt;pre tabindex="0">&lt;code>echo &amp;quot;&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>を追加します。これだけです。&lt;/p>
&lt;h2 id="実行結果">実行結果&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress.gif" data-size="640x400">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress.gif"
width="640"
height="400"
srcset="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress_hu82b3c24b65bc35ce8f36dc9d39d1cc0e_130983_480x0_resize_box.gif 480w, https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress_hu82b3c24b65bc35ce8f36dc9d39d1cc0e_130983_1024x0_resize_box.gif 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p></description></item><item><title>【unComp】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</link><pubDate>Thu, 23 Dec 2021 13:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【unComp】Bashで便利なコマンドを作ってみようって話" />&lt;h2 id="関連記事">関連記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" target="_blank" rel="noopener"
>【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/" target="_blank" rel="noopener"
>【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/" target="_blank" rel="noopener"
>【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="できること">できること&lt;/h2>
&lt;p>圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。&lt;/p>
&lt;h2 id="圧縮ファイルと実行コマンドパラメータ一覧">圧縮ファイルと実行コマンド、パラメータ一覧&lt;/h2>
&lt;pre tabindex="0">&lt;code> 拡張子 パラメータ
tgz | tar.gz tar zxvf
tar.Z gunzip
tar.bz2 tar xvfj
tar tar xvfz
gz gunzip
Z gunzip
bz2 bunzip2
zip unzip
&lt;/code>&lt;/pre>&lt;p>こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。&lt;/p>
&lt;h2 id="実行例">実行例&lt;/h2>
&lt;pre tabindex="0">&lt;code># 圧縮ファイルを解凍する便利な unCompコマンド
$ unComp comp.tar.gz2
&lt;/code>&lt;/pre>&lt;h2 id="作成">作成&lt;/h2>
&lt;p>まずファイルを作ります。ファイル名は unComp とします&lt;/p>
&lt;pre tabindex="0">&lt;code># unComp というファイルを作成
$ :&amp;gt; unComp
# vim で unComp を開く
$ vim unComp
&lt;/code>&lt;/pre>&lt;p>unCompファイルに以下の内容を貼り付ける&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
#
#圧縮されているファイルを解凍する
# unComp を /usr/local/bin/にコピーすると
# 通常のコマンドとして本実行ファイルを利用する事が出来ます。
#
# cp unComp /usr/local/bin/unComp
#
# 実行例
# $ unComp filename(圧縮ファイル)
#
if [ $# -ne 1 ]; then
echo &amp;quot;&amp;quot;
exit ;
fi
#
case $1 in
*.tgz | *.tar.gz) tar zxvf $1 ;;
*.tar.Z) gunzip $1
tar xvf $( echo &amp;quot;$1&amp;quot; | sed 's/\.Z$//')
;;
*.tar.bz2) tar xvfj $1;;
*.tar) tar xvfz $1;;
*.gz) gunzip $1;;
*.Z) gunzip $1;;
*.bz2) bunzip2 $1;;
*.zip) unzip $1;;
*) echo &amp;quot;ファイルの拡張子が対応していません:$1&amp;quot;
esac
exit ;
&lt;/code>&lt;/pre>&lt;p>作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" title="wLu"
target="_blank" rel="noopener"
>wLu&lt;/a>をつかってUTF-8に変換するとさらに便利です。&lt;/p>
&lt;pre tabindex="0">&lt;code># unComp ファイルをnkf -wLu でUTF-8に変換
$ nkf -wLu unComp &amp;gt; unComp.txt
# unComp.txtをunCompにリネームします
$ mv unComp.txt unComp
# 作成したunCompコマンドファイルを/usr/local/bin にコピーします
$ sudo unComp /usr/local/bin/
# コマンドが配置されたかを確認
$ which unComp
$ /usr/local/bin/unComp
&lt;/code>&lt;/pre>&lt;h3 id="使い方">使い方&lt;/h3>
&lt;pre tabindex="0">&lt;code># 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する
# 実行
$ unComp sample.zip
&lt;/code>&lt;/pre>&lt;p>圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。&lt;br>
便利ですね。&lt;/p></description></item><item><title>【wLu】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</link><pubDate>Thu, 23 Dec 2021 10:27:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【wLu】Bashで便利なコマンドを作ってみようって話" />&lt;h2 id="関連記事">関連記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" target="_blank" rel="noopener"
>【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/" target="_blank" rel="noopener"
>【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/" target="_blank" rel="noopener"
>【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="必要なもの">必要なもの&lt;/h2>
&lt;p>ネットワーク漢字フィルター nkf&lt;br>
※macの場合、&lt;a class="link" href="https://brew.sh/index_ja" title="Homebrew"
target="_blank" rel="noopener"
>Homebrew&lt;/a> が必要になります。&lt;/p>
&lt;h2 id="nkf-インストールの手順">nkf インストールの手順&lt;/h2>
&lt;p>まず、nkfがインストールされているかを確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ which nkf
/usr/local/bin/nkf
&lt;/code>&lt;/pre>&lt;p>インストールされていない場合、macの場合はbrewでインストールします。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ brew install nkf
&lt;/code>&lt;/pre>&lt;p>インストールしようとすると以下のエラーが出ることがあります&lt;/p>
&lt;pre tabindex="0">&lt;code>Error: The `brew link` step did not complete successfully
The formula built, but is not symlinked into /usr/local
Could not symlink share/man/ja/man1/nkf.1
/usr/local/share/man/ja/man1 is not writable.
&lt;/code>&lt;/pre>&lt;p>権限周りを下記のコマンドを打って変更します。&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo chmod 775 /usr/local/share/man/ja/man1
sudo chown &amp;lt;ユーザ名&amp;gt;:admin /usr/local/share/man/ja/man1
&lt;/code>&lt;/pre>&lt;p>下記のページを参考にさせていただきました&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.kozakana.net%2F2018%2F09%2Fhomebrew_link_error%2F" title="Homebrewでインストール時にlinkが出来ないエラー | Simple is Beautiful." class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;/p>
&lt;p>コマンドを確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nkf -v
Network Kanji Filter Version 2.1.5 (2018-12-15)
Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa).
Copyright (C) 1996-2018, The nkf Project.
&lt;/code>&lt;/pre>&lt;h2 id="使い方">使い方&lt;/h2>
&lt;p>nkfコマンドとは？&lt;br>
「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。&lt;/p>
&lt;p>nkfコマンドの書式&lt;br>
nkf オプション ファイル名&lt;/p>
&lt;p>UTF-8に変換する場合は、オプションに wLu をつけて変換します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nkf -wLu isofile.txt &amp;gt; utf8.txt
&lt;/code>&lt;/pre>&lt;h3 id="変換の流れ手動編">変換の流れ（手動編）&lt;/h3>
&lt;p>元ファイル moto.txt (UTF-8以外のファイルエンコード、改行コード）&lt;br>
↓&lt;br>
変換後のファイル ato.txt(UTF-8に変換したファイル）&lt;br>
↓&lt;br>
変換後のファイルをリネームする&lt;/p>
&lt;pre tabindex="0">&lt;code># UTF-8に変換
$ nkf -wLu moto.txt &amp;gt; ato.txt
# 変換後のファイルを元のファイル名にリネームする
$ mv ato.txt moto.txt
# vimiでファイルエンコードを確認する
$ vim moto.txt
&lt;/code>&lt;/pre>&lt;p>面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。&lt;/p>
&lt;h3 id="変換の流れ自動編">変換の流れ（自動編）&lt;/h3>
&lt;pre tabindex="0">&lt;code># UTF-8に変換 wLu コマンドをこれから自作します
$ wLu moto.txt
$ vim moto.txt ← UTF-8 に変換されている！
&lt;/code>&lt;/pre>&lt;h3 id="コマンドの内容">コマンドの内容&lt;/h3>
&lt;p>まずファイルを作ります。ファイル名は wLu とします&lt;/p>
&lt;pre tabindex="0">&lt;code># wLu というファイルを作成
$ :&amp;gt; wLu
# vim で wLu を開く
$ vim wLu
&lt;/code>&lt;/pre>&lt;p>以下の内容をファイルに貼り付ける&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
#################################################
# パラメータで渡されたファイル名をutf8に変換する
#
# 使い方
# wLu UTF-8に変換したいファイル名
# wLu を /usr/local/bin/にコピーすると
# 通常のコマンドとして本実行ファイルを利用する事が出来ます。
#
#################################################
#
filename=&amp;quot;$1&amp;quot; ;
#
function wLu(){
if [ -f &amp;quot;$filename&amp;quot; ]; then
cat &amp;quot;$filename&amp;quot; | nkf -wLu &amp;gt; &amp;quot;$filename&amp;quot;.u ;
mv &amp;quot;$filename&amp;quot;.u &amp;quot;$filename&amp;quot; ;
fi
}
#
if ! which nkf &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then
echo &amp;quot;nkf がありません&amp;quot; ;
echo &amp;quot;nkf をインストールして下さい&amp;quot; ;
exit ;
fi
#
if [ -z &amp;quot;$filename&amp;quot; ] ; then
echo &amp;quot;第一引数にファイル名を指定して下さい&amp;quot;
echo &amp;quot;実行例： wLu filename&amp;quot; ;
exit ;
fi
# 実行
wLu ;
# 終了
exit ;
&lt;/code>&lt;/pre>&lt;p>作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。&lt;/p>
&lt;pre tabindex="0">&lt;code># wLu ファイルをnkf -wLu でUTF-8に変換
$ nkf -wLu wLu &amp;gt; wLu.txt
# wLu.txtをwLuにリネームします
$ mv wLu.txt wLu
# 作成したwLuコマンドファイルを/usr/local/bin にコピーします
$ sudo wLu /usr/local/bin/
# コマンドが配置されたかを確認
$ which wLu
$ /usr/local/bin/wLu
&lt;/code>&lt;/pre>&lt;h3 id="使い方-1">使い方&lt;/h3>
&lt;pre tabindex="0">&lt;code># UTF-8以外のファイルエンコードファイル
$ cat moto.txt
$ wLu moto.txt
&lt;/code>&lt;/pre>&lt;p>変換結果を一時ファイルにし、リネームする手間が省けます。&lt;br>
便利ですね。&lt;/p></description></item><item><title>hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-03/</link><pubDate>Wed, 22 Dec 2021 21:22:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-03/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-03/error.jpg" alt="Featured image of post hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー" />&lt;h2 id="エラーの内容">エラーの内容&lt;/h2>
&lt;p>記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について&lt;br>
hugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。&lt;/p>
&lt;p>Start building sites …&lt;br>
Total in 10 ms&lt;br>
Error: Error building site: &amp;ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1&amp;rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;p>このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。&lt;br>
vim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？&lt;/p>
&lt;h2 id="対応">対応&lt;/h2>
&lt;p>この場合ファイルの文字コードをUTF8に変更してみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>nkf -wLu ファイル名 &amp;gt;一時保存ファイル名;
mv 一時保存ファイル名 ファイル名
&lt;/code>&lt;/pre>&lt;p>一時保存した後にmvで戻したり面倒ですよね。&lt;br>
面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。&lt;br>
&lt;a class="link" href="https://github.com/suzukiiichiro/linuxConfig/blob/master/wLu" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/linuxConfig/blob/master/wLu&lt;/a>&lt;/p>
&lt;p>hugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。&lt;/p></description></item><item><title>プライバシーポリシーページを設置する</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-02/</link><pubDate>Wed, 22 Dec 2021 17:40:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-02/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-02/privacy.jpg" alt="Featured image of post プライバシーポリシーページを設置する" />&lt;p>github pagesでもgoogle adsenseの審査に通過したい！&lt;/p>
&lt;p>ということで色々先人の方達のサイトをみさせていただいたところ&lt;/p>
&lt;p>google adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。&lt;/p>
&lt;h2 id="内容はとりあえずコピペで行こう">内容はとりあえずコピペで行こう&lt;/h2>
&lt;p>まずはコピペOKの親切な方のサイトを探します。&lt;/p>
&lt;p>内容については以下のサイトを参考にさせていただきました。&lt;br>
&lt;a class="link" href="http://liberty-life-blog.com/wordpress/privacy-policy/" target="_blank" rel="noopener"
>http://liberty-life-blog.com/wordpress/privacy-policy/&lt;/a>&lt;/p>
&lt;h2 id="設定">設定&lt;/h2>
&lt;p>以下のコマンドでhugoでページを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new page/privacy.md
&lt;/code>&lt;/pre>&lt;p>コンテンツの構成を以下のように管理しているのでpage以下に保存しました。&lt;br>
content/posts &amp;ndash; 記事&lt;br>
/page &amp;ndash; about usページなど&lt;br>
/assetes &amp;ndash; 画像など&lt;/p>
&lt;pre tabindex="0">&lt;code>vim content/page/privacy.md
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;Privacy&amp;quot;
date: 2021-12-22T17:16:15+09:00
draft: false
---
&lt;/code>&lt;/pre>&lt;p>ページの内容を２個目の&amp;mdash;以下に貼り付けます&lt;br>
draft: true に変更します&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>ビルドします&lt;/p>
&lt;h2 id="フッターにリンクを置こう">フッターにリンクを置こう&lt;/h2>
&lt;p>フッターの内容を修正してプライバシーポリシーのリンクを設置します。&lt;br>
themes以下にあるファイルを直接書き換えるのではなく&lt;br>
layoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。&lt;/p>
&lt;p>layouts/partial/footer/footer.html&amp;lt;&amp;ndash;優先順位高い&lt;br>
themes/テーマ名/layouts/partial/footer/footer.html&lt;/p>
&lt;p>layouts/partial/footer/footer.html を新規に作成して&lt;br>
以下の内容を入力&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;footer class=&amp;quot;site-footer&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}privacy/&amp;quot;&amp;gt;プライバシーポリシー&amp;lt;/a&amp;gt;
&amp;lt;section class=&amp;quot;copyright&amp;quot;&amp;gt;
&amp;amp;copy;
{{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format &amp;quot;2006&amp;quot;))) }}
{{ .Site.Params.footer.since }} -
{{ end }}
{{ now.Format &amp;quot;2006&amp;quot; }} {{ .Site.Title }}
&amp;lt;/section&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code>&lt;/pre>&lt;p>リンクの書き方が&lt;br>
{{ .Site.BaseURL }}privacy/&lt;br>
のは注意&lt;/p></description></item><item><title>デザイナーでもできる初めてのHugo #01</title><link>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/</link><pubDate>Wed, 22 Dec 2021 13:07:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/2021-12-22-hugo-01.jpg" alt="Featured image of post デザイナーでもできる初めてのHugo #01" />&lt;p>CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。&lt;br>
Wordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。&lt;br>
色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。&lt;br>
無料で、httpsも設定できるので非常に便利です。&lt;/p>
&lt;h2 id="hugoのインストール">Hugoのインストール&lt;/h2>
&lt;p>Hugoを使うためにはhugoをインストールする必要があります。&lt;br>
インストールは簡単です。&lt;/p>
&lt;p>&lt;small>※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。&lt;/small>&lt;/p>
&lt;p>&lt;a class="link" href="https://brew.sh/index_ja" title="Homebrew"
target="_blank" rel="noopener"
>Homebrew&lt;/a> が必要になります。&lt;/p>
&lt;pre tabindex="0">&lt;code>brew install hugo
&lt;/code>&lt;/pre>&lt;h2 id="設定">設定&lt;/h2>
&lt;p>hugoのインストールが終わったら、サイトを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new site ＜作成するディレクトリ＞
&lt;/code>&lt;/pre>&lt;p>色々表示されているかと思いますが、気にしないで大丈夫です。&lt;/p>
&lt;h3 id="設定ファイル">設定ファイル&lt;/h3>
&lt;p>hugoの設定はTOMLという形式で記述します。&lt;br>
TOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。&lt;br>
その場合はconfig.tomlを削除して下さい。&lt;/p>
&lt;pre tabindex="0">&lt;code>baseURL = &amp;quot;http://example.org/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>baseURL: サイトの公開URL&lt;/li>
&lt;li>languageCode: HTMLのlang部分&lt;/li>
&lt;li>title: サイトの名前&lt;/li>
&lt;/ul>
&lt;h2 id="記事の投稿">記事の投稿&lt;/h2>
&lt;p>記事を作成するにはコマンドを打つ必要があります&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new posts/helloworld.md
&lt;/code>&lt;/pre>&lt;p>このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます&lt;br>
テーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。&lt;/p>
&lt;h2 id="下書きから公開へ">下書きから公開へ&lt;/h2>
&lt;p>作成されたファイルはmarkdown形式で記述されています。&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;helloworld&amp;quot;
date: 2021-12-22T11:23:09Z
draft: true
---
&lt;/code>&lt;/pre>&lt;p>draft の部分が下書き状態を表しています。&lt;br>
trueにすることで公開となり表示されます。&lt;/p>
&lt;h2 id="確認">確認&lt;/h2>
&lt;p>サイトの確認を行うには&lt;br>
hugoをインストールしたディレクトリで&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server
&lt;/code>&lt;/pre>&lt;p>を実行します。&lt;br>
この場合は公開されている記事のみを表示した状態のサーバが立ち上がります。&lt;br>
未公開も含めたい場合は&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server -D
&lt;/code>&lt;/pre>&lt;p>とすることで表示できます。&lt;/p>
&lt;h2 id="公開">公開&lt;/h2>
&lt;p>公開をするにはサイト全体を構築し直す必要があります。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>このコマンドでサイト全体が自動的に生成されます。&lt;br>
作成されたサイトは初期状態ではpublicディレクトリに展開されます。&lt;br>
configの&lt;em>publicDir&lt;/em>に任意のディレクトリを設定することも可能です&lt;/p>
&lt;pre tabindex="0">&lt;code>publicDir = 'docs'
&lt;/code>&lt;/pre>&lt;p>この場合はdocsディレクトリに公開ファイルが展開されます。&lt;/p>
&lt;h2 id="終わりに">終わりに&lt;/h2>
&lt;p>駆け足でしたが、hugoの簡単な使い方になります。&lt;br>
大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。&lt;br>
みなさんもぜひ、hugoを試してみて下さい。&lt;/p></description></item><item><title>Hugoでテーマが反映されない（画面が真っ白のまま）</title><link>https://suzukiiichiro.github.io/posts/2021-12-21/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21/2021-12-21.jpg" alt="Featured image of post Hugoでテーマが反映されない（画面が真っ白のまま）" />&lt;p>Hugoでテーマが反映されない（画面が真っ白のまま）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ git submodule update --init --recursive
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hugoで記事の投稿の仕方</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-01/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-01/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-01/2021-12-21-1.jpg" alt="Featured image of post Hugoで記事の投稿の仕方" />&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ hugo new posts/&lt;span class="o">[&lt;/span>ファイル名&lt;span class="o">]&lt;/span>.md
$ vim content/posts/2021-12-21.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>draft: false&lt;/code> にする事でドラフトを公開にすることができる&lt;/p>
&lt;p>ビルドする&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ hugo
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>