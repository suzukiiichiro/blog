<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NLP</title><link>https://suzukiiichiro.github.io/</link><description>Recent content on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 23 Dec 2021 16:10:20 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>【プログレスバー】Bashでプログレスバーを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</link><pubDate>Thu, 23 Dec 2021 16:10:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-23-bash.jpg" alt="Featured image of post 【プログレスバー】Bashでプログレスバーを作ってみようって話" />&lt;h2 id="関連記事">関連記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" target="_blank" rel="noopener"
>【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/" target="_blank" rel="noopener"
>【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/" target="_blank" rel="noopener"
>【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="プログレスバー">プログレスバー&lt;/h2>
&lt;p>ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。
処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。
シェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい&lt;/p>
&lt;h2 id="使い方">使い方&lt;/h2>
&lt;p>処理のループ中に以下の1行を追記します。&lt;/p>
&lt;pre tabindex="0">&lt;code>progress &amp;quot;$#&amp;quot; &amp;quot;$MAX&amp;quot;; set - &amp;quot;$@&amp;quot; count ;
&lt;/code>&lt;/pre>&lt;h2 id="実行手順">実行手順&lt;/h2>
&lt;p>以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ :&amp;gt; Progress.sh
$ vim Progress.sh
# vimで以下のソースコードを貼り付けて保存
# ソースコードのファイルエンコードをUTF-8に変更します。
$ nkf -wLu Progress.sh &amp;gt; Progress.sh.utf8
# ファイルエンコードを変更したファイルを元のファイル名にリネームします。
$ mv Progress.sh.utf8 Progress.sh
# 実行権限を付与します
$ chmod +x Progress.sh
# 実行
$ ./Progress.sh
&lt;/code>&lt;/pre>&lt;h2 id="ソースコード">ソースコード&lt;/h2>
&lt;pre tabindex="0">&lt;code>#! /bin/bash
#######################################
# 進捗を表示するプログレスバー
#
#######################################
#
#
# percent $1
# GT $2
progress(){
percent=$1;
GT=$2;
column=`expr 71 \* &amp;quot;$percent&amp;quot; / $GT`;
nspace=`expr 71 - &amp;quot;$column&amp;quot;`;
#プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入
bar='\r[';
#位置パラメータの数($#)を１にリセット（カウンタとして流用）
set dummy ;
while [ $# -le &amp;quot;$column&amp;quot; ];do
bar=$bar'='; # barに=を追加
set - &amp;quot;$@&amp;quot; dummy; # $#をインクリメント
done
bar=$bar'&amp;gt;'; #barの先端に&amp;gt;を追加
#位置パラメータの数($#)を１にリセット（カウンタとして流用）
set dummy ;
while [ $# -le &amp;quot;$nspace&amp;quot; ]; do
bar=$bar' ';
set - &amp;quot;$@&amp;quot; dummy;
done
bar=$bar']'$percent/$GT'\c'; # barに]と１行分のプログレスバーを表示
echo -e &amp;quot;$bar&amp;quot;;
}
#######################################
# メイン処理
#
set count ;
MAX=100 ; #最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。
#
for (( i=0; i&amp;lt;$MAX; i++)){
# ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。
progress &amp;quot;$#&amp;quot; &amp;quot;$MAX&amp;quot;; set - &amp;quot;$@&amp;quot; count ;
}
echo &amp;quot;&amp;quot;;
#
#終了
exit ;
&lt;/code>&lt;/pre>&lt;h2 id="使い方-1">使い方&lt;/h2>
&lt;p>シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。&lt;/p>
&lt;p>自作ソースの中のループ処理の関数の頭に以下を追記します。
MAX=100; は、処理の最大値を指定します。
処理のループ最大数が150階であれば、以下の通りに修正します。&lt;/p>
&lt;pre tabindex="0">&lt;code>set count;
MAX=150;
&lt;/code>&lt;/pre>&lt;p>forやwhileループ処理の中に以下を埋め込みます。&lt;/p>
&lt;pre tabindex="0">&lt;code>progress &amp;quot;$#&amp;quot; &amp;quot;$MAX&amp;quot;; set - &amp;quot;$@&amp;quot; count ;
&lt;/code>&lt;/pre>&lt;p>最後にforまたはwhileループを抜けた後に&lt;/p>
&lt;pre tabindex="0">&lt;code>echo &amp;quot;&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>を追加します。これだけです。&lt;/p>
&lt;h2 id="実行結果">実行結果&lt;/h2>
&lt;p>&lt;figure
>
&lt;a href="https://suzukiiichiro.github.io/assets/images/progress.gif" >
&lt;img src="https://suzukiiichiro.github.io/assets/images/progress.gif"
loading="lazy"
alt="Progress.sh">
&lt;/a>
&lt;figcaption>Progress.sh&lt;/figcaption>
&lt;/figure>&lt;/p></description></item><item><title>【unComp】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</link><pubDate>Thu, 23 Dec 2021 13:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-23-bash.jpg" alt="Featured image of post 【unComp】Bashで便利なコマンドを作ってみようって話" />&lt;h2 id="関連記事">関連記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" target="_blank" rel="noopener"
>【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/" target="_blank" rel="noopener"
>【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/" target="_blank" rel="noopener"
>【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="できること">できること&lt;/h2>
&lt;p>圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。&lt;/p>
&lt;h2 id="圧縮ファイルと実行コマンドパラメータ一覧">圧縮ファイルと実行コマンド、パラメータ一覧&lt;/h2>
&lt;pre tabindex="0">&lt;code> 拡張子 パラメータ
tgz | tar.gz tar zxvf
tar.Z gunzip
tar.bz2 tar xvfj
tar tar xvfz
gz gunzip
Z gunzip
bz2 bunzip2
zip unzip
&lt;/code>&lt;/pre>&lt;p>こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。&lt;/p>
&lt;h2 id="実行例">実行例&lt;/h2>
&lt;pre tabindex="0">&lt;code># 圧縮ファイルを解凍する便利な unCompコマンド
$ unComp comp.tar.gz2
&lt;/code>&lt;/pre>&lt;h2 id="作成">作成&lt;/h2>
&lt;p>まずファイルを作ります。ファイル名は unComp とします&lt;/p>
&lt;pre tabindex="0">&lt;code># unComp というファイルを作成
$ :&amp;gt; unComp
# vim で unComp を開く
$ vim unComp
&lt;/code>&lt;/pre>&lt;p>unCompファイルに以下の内容を貼り付ける&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
#
#圧縮されているファイルを解凍する
# unComp を /usr/local/bin/にコピーすると
# 通常のコマンドとして本実行ファイルを利用する事が出来ます。
#
# cp unComp /usr/local/bin/unComp
#
# 実行例
# $ unComp filename(圧縮ファイル)
#
if [ $# -ne 1 ]; then
echo &amp;quot;&amp;quot;
exit ;
fi
#
case $1 in
*.tgz | *.tar.gz) tar zxvf $1 ;;
*.tar.Z) gunzip $1
tar xvf $( echo &amp;quot;$1&amp;quot; | sed 's/\.Z$//')
;;
*.tar.bz2) tar xvfj $1;;
*.tar) tar xvfz $1;;
*.gz) gunzip $1;;
*.Z) gunzip $1;;
*.bz2) bunzip2 $1;;
*.zip) unzip $1;;
*) echo &amp;quot;ファイルの拡張子が対応していません:$1&amp;quot;
esac
exit ;
&lt;/code>&lt;/pre>&lt;p>作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" title="wLu"
target="_blank" rel="noopener"
>wLu&lt;/a>をつかってUTF-8に変換するとさらに便利です。&lt;/p>
&lt;pre tabindex="0">&lt;code># unComp ファイルをnkf -wLu でUTF-8に変換
$ nkf -wLu unComp &amp;gt; unComp.txt
# unComp.txtをunCompにリネームします
$ mv unComp.txt unComp
# 作成したunCompコマンドファイルを/usr/local/bin にコピーします
$ sudo unComp /usr/local/bin/
# コマンドが配置されたかを確認
$ which unComp
$ /usr/local/bin/unComp
&lt;/code>&lt;/pre>&lt;h3 id="使い方">使い方&lt;/h3>
&lt;pre tabindex="0">&lt;code># 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する
# 実行
$ unComp sample.zip
&lt;/code>&lt;/pre>&lt;p>圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。
便利ですね。&lt;/p></description></item><item><title>【wLu】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</link><pubDate>Thu, 23 Dec 2021 10:27:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-23-bash.jpg" alt="Featured image of post 【wLu】Bashで便利なコマンドを作ってみようって話" />&lt;h2 id="関連記事">関連記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" target="_blank" rel="noopener"
>【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/" target="_blank" rel="noopener"
>【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/" target="_blank" rel="noopener"
>【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="必要なもの">必要なもの&lt;/h2>
&lt;p>ネットワーク漢字フィルター nkf
※macの場合、&lt;a class="link" href="https://brew.sh/index_ja" title="Homebrew"
target="_blank" rel="noopener"
>Homebrew&lt;/a> が必要になります。&lt;/p>
&lt;h2 id="nkf-インストールの手順">nkf インストールの手順&lt;/h2>
&lt;p>まず、nkfがインストールされているかを確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ which nkf
/usr/local/bin/nkf
&lt;/code>&lt;/pre>&lt;p>インストールされていない場合、macの場合はbrewでインストールします。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ brew install nkf
&lt;/code>&lt;/pre>&lt;p>インストールしようとすると以下のエラーが出ることがあります&lt;/p>
&lt;pre tabindex="0">&lt;code>Error: The `brew link` step did not complete successfully
The formula built, but is not symlinked into /usr/local
Could not symlink share/man/ja/man1/nkf.1
/usr/local/share/man/ja/man1 is not writable.
&lt;/code>&lt;/pre>&lt;p>権限周りを下記のコマンドを打って変更します。&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo chmod 775 /usr/local/share/man/ja/man1
sudo chown &amp;lt;ユーザ名&amp;gt;:admin /usr/local/share/man/ja/man1
&lt;/code>&lt;/pre>&lt;p>下記のページを参考にさせていただきました&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>コマンドを確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nkf -v
Network Kanji Filter Version 2.1.5 (2018-12-15)
Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa).
Copyright (C) 1996-2018, The nkf Project.
&lt;/code>&lt;/pre>&lt;h2 id="使い方">使い方&lt;/h2>
&lt;p>nkfコマンドとは？
「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。&lt;/p>
&lt;p>nkfコマンドの書式
nkf オプション ファイル名&lt;/p>
&lt;p>UTF-8に変換する場合は、オプションに wLu をつけて変換します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nkf -wLu isofile.txt &amp;gt; utf8.txt
&lt;/code>&lt;/pre>&lt;h3 id="変換の流れ手動編">変換の流れ（手動編）&lt;/h3>
&lt;p>元ファイル moto.txt (UTF-8以外のファイルエンコード、改行コード）
↓
変換後のファイル ato.txt(UTF-8に変換したファイル）
↓
変換後のファイルをリネームする&lt;/p>
&lt;pre tabindex="0">&lt;code># UTF-8に変換
$ nkf -wLu moto.txt &amp;gt; ato.txt
# 変換後のファイルを元のファイル名にリネームする
$ mv ato.txt moto.txt
# vimiでファイルエンコードを確認する
$ vim moto.txt
&lt;/code>&lt;/pre>&lt;p>面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。&lt;/p>
&lt;h3 id="変換の流れ自動編">変換の流れ（自動編）&lt;/h3>
&lt;pre tabindex="0">&lt;code># UTF-8に変換 wLu コマンドをこれから自作します
$ wLu moto.txt
$ vim moto.txt ← UTF-8 に変換されている！
&lt;/code>&lt;/pre>&lt;h3 id="コマンドの内容">コマンドの内容&lt;/h3>
&lt;p>まずファイルを作ります。ファイル名は wLu とします&lt;/p>
&lt;pre tabindex="0">&lt;code># wLu というファイルを作成
$ :&amp;gt; wLu
# vim で wLu を開く
$ vim wLu
&lt;/code>&lt;/pre>&lt;p>以下の内容をファイルに貼り付ける&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
#################################################
# パラメータで渡されたファイル名をutf8に変換する
#
# 使い方
# wLu UTF-8に変換したいファイル名
# wLu を /usr/local/bin/にコピーすると
# 通常のコマンドとして本実行ファイルを利用する事が出来ます。
#
#################################################
#
filename=&amp;quot;$1&amp;quot; ;
#
function wLu(){
if [ -f &amp;quot;$filename&amp;quot; ]; then
cat &amp;quot;$filename&amp;quot; | nkf -wLu &amp;gt; &amp;quot;$filename&amp;quot;.u ;
mv &amp;quot;$filename&amp;quot;.u &amp;quot;$filename&amp;quot; ;
fi
}
#
if ! which nkf &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then
echo &amp;quot;nkf がありません&amp;quot; ;
echo &amp;quot;nkf をインストールして下さい&amp;quot; ;
exit ;
fi
#
if [ -z &amp;quot;$filename&amp;quot; ] ; then
echo &amp;quot;第一引数にファイル名を指定して下さい&amp;quot;
echo &amp;quot;実行例： wLu filename&amp;quot; ;
exit ;
fi
# 実行
wLu ;
# 終了
exit ;
&lt;/code>&lt;/pre>&lt;p>作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。&lt;/p>
&lt;pre tabindex="0">&lt;code># wLu ファイルをnkf -wLu でUTF-8に変換
$ nkf -wLu wLu &amp;gt; wLu.txt
# wLu.txtをwLuにリネームします
$ mv wLu.txt wLu
# 作成したwLuコマンドファイルを/usr/local/bin にコピーします
$ sudo wLu /usr/local/bin/
# コマンドが配置されたかを確認
$ which wLu
$ /usr/local/bin/wLu
&lt;/code>&lt;/pre>&lt;h3 id="使い方-1">使い方&lt;/h3>
&lt;pre tabindex="0">&lt;code># UTF-8以外のファイルエンコードファイル
$ cat moto.txt
$ wLu moto.txt
&lt;/code>&lt;/pre>&lt;p>変換結果を一時ファイルにし、リネームする手間が省けます。
便利ですね。&lt;/p></description></item><item><title>hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-03/</link><pubDate>Wed, 22 Dec 2021 21:22:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-03/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/error.jpg" alt="Featured image of post hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー" />&lt;h2 id="エラーの内容">エラーの内容&lt;/h2>
&lt;p>記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について&lt;br>
hugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。&lt;/p>
&lt;p>Start building sites …
Total in 10 ms
Error: Error building site: &amp;ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1&amp;rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;p>このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。&lt;br>
vim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？&lt;/p>
&lt;h2 id="対応">対応&lt;/h2>
&lt;p>この場合ファイルの文字コードをUTF8に変更してみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>nkf -wLu ファイル名 &amp;gt;一時保存ファイル名;
mv 一時保存ファイル名 ファイル名
&lt;/code>&lt;/pre>&lt;p>一時保存した後にmvで戻したり面倒ですよね。
面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。&lt;br>
&lt;a class="link" href="https://github.com/suzukiiichiro/linuxConfig/blob/master/wLu" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/linuxConfig/blob/master/wLu&lt;/a>&lt;/p>
&lt;p>hugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。&lt;/p></description></item><item><title>プライバシーポリシーページを設置する</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-02/</link><pubDate>Wed, 22 Dec 2021 17:40:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-02/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/privacy.jpg" alt="Featured image of post プライバシーポリシーページを設置する" />&lt;p>github pagesでもgoogle adsenseの審査に通過したい！&lt;/p>
&lt;p>ということで色々先人の方達のサイトをみさせていただいたところ&lt;/p>
&lt;p>google adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。&lt;/p>
&lt;h2 id="内容はとりあえずコピペで行こう">内容はとりあえずコピペで行こう&lt;/h2>
&lt;p>まずはコピペOKの親切な方のサイトを探します。&lt;/p>
&lt;p>内容については以下のサイトを参考にさせていただきました。&lt;br>
&lt;a class="link" href="http://liberty-life-blog.com/wordpress/privacy-policy/" target="_blank" rel="noopener"
>http://liberty-life-blog.com/wordpress/privacy-policy/&lt;/a>&lt;/p>
&lt;h2 id="設定">設定&lt;/h2>
&lt;p>以下のコマンドでhugoでページを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new page/privacy.md
&lt;/code>&lt;/pre>&lt;p>コンテンツの構成を以下のように管理しているのでpage以下に保存しました。
content/posts &amp;ndash; 記事
/page &amp;ndash; about usページなど
/assetes &amp;ndash; 画像など&lt;/p>
&lt;pre tabindex="0">&lt;code>vim content/page/privacy.md
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;Privacy&amp;quot;
date: 2021-12-22T17:16:15+09:00
draft: false
---
&lt;/code>&lt;/pre>&lt;p>ページの内容を２個目の&amp;mdash;以下に貼り付けます
draft: true に変更します&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>ビルドします&lt;/p>
&lt;h2 id="フッターにリンクを置こう">フッターにリンクを置こう&lt;/h2>
&lt;p>フッターの内容を修正してプライバシーポリシーのリンクを設置します。
themes以下にあるファイルを直接書き換えるのではなく&lt;br>
layoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。&lt;/p>
&lt;p>layouts/partial/footer/footer.html&amp;lt;&amp;ndash;優先順位高い&lt;br>
themes/テーマ名/layouts/partial/footer/footer.html&lt;/p>
&lt;p>layouts/partial/footer/footer.html を新規に作成して
以下の内容を入力&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;footer class=&amp;quot;site-footer&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}privacy/&amp;quot;&amp;gt;プライバシーポリシー&amp;lt;/a&amp;gt;
&amp;lt;section class=&amp;quot;copyright&amp;quot;&amp;gt;
&amp;amp;copy;
{{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format &amp;quot;2006&amp;quot;))) }}
{{ .Site.Params.footer.since }} -
{{ end }}
{{ now.Format &amp;quot;2006&amp;quot; }} {{ .Site.Title }}
&amp;lt;/section&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>デザイナーでもできる初めてのHugo #01</title><link>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01/</link><pubDate>Wed, 22 Dec 2021 13:07:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-22-hugo-01.jpg" alt="Featured image of post デザイナーでもできる初めてのHugo #01" />&lt;p>CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。
Wordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。
色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。
無料で、httpsも設定できるので非常に便利です。&lt;/p>
&lt;h2 id="hugoのインストール">Hugoのインストール&lt;/h2>
&lt;p>Hugoを使うためにはhugoをインストールする必要があります。
インストールは簡単です。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a class="link" href="https://brew.sh/index_ja" title="Homebrew"
target="_blank" rel="noopener"
>Homebrew&lt;/a> が必要になります。&lt;/p>
&lt;pre tabindex="0">&lt;code>brew install hugo
&lt;/code>&lt;/pre>&lt;h2 id="設定">設定&lt;/h2>
&lt;p>hugoのインストールが終わったら、サイトを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new site ＜作成するディレクトリ＞
&lt;/code>&lt;/pre>&lt;p>色々表示されているかと思いますが、気にしないで大丈夫です。&lt;/p>
&lt;h3 id="設定ファイル">設定ファイル&lt;/h3>
&lt;p>hugoの設定はTOMLという形式で記述します。
TOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。
その場合はconfig.tomlを削除して下さい。&lt;/p>
&lt;pre tabindex="0">&lt;code>baseURL = &amp;quot;http://example.org/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>baseURL: サイトの公開URL&lt;/li>
&lt;li>languageCode: HTMLのlang部分&lt;/li>
&lt;li>title: サイトの名前&lt;/li>
&lt;/ul>
&lt;h2 id="記事の投稿">記事の投稿&lt;/h2>
&lt;p>記事を作成するにはコマンドを打つ必要があります&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new posts/helloworld.md
&lt;/code>&lt;/pre>&lt;p>このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます
テーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。&lt;/p>
&lt;h2 id="下書きから公開へ">下書きから公開へ&lt;/h2>
&lt;p>作成されたファイルはmarkdown形式で記述されています。&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;helloworld&amp;quot;
date: 2021-12-22T11:23:09Z
draft: true
---
&lt;/code>&lt;/pre>&lt;p>draft の部分が下書き状態を表しています。
trueにすることで公開となり表示されます。&lt;/p>
&lt;h2 id="確認">確認&lt;/h2>
&lt;p>サイトの確認を行うには
hugoをインストールしたディレクトリで&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server
&lt;/code>&lt;/pre>&lt;p>を実行します。
この場合は公開されている記事のみを表示した状態のサーバが立ち上がります。
未公開も含めたい場合は&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server -D
&lt;/code>&lt;/pre>&lt;p>とすることで表示できます。&lt;/p>
&lt;h2 id="公開">公開&lt;/h2>
&lt;p>公開をするにはサイト全体を構築し直す必要があります。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>このコマンドでサイト全体が自動的に生成されます。
作成されたサイトは初期状態ではpublicディレクトリに展開されます。
configの&lt;em>publicDir&lt;/em>に任意のディレクトリを設定することも可能です&lt;/p>
&lt;pre tabindex="0">&lt;code>publicDir = 'docs'
&lt;/code>&lt;/pre>&lt;p>この場合はdocsディレクトリに公開ファイルが展開されます。&lt;/p>
&lt;h2 id="終わりに">終わりに&lt;/h2>
&lt;p>駆け足でしたが、hugoの簡単な使い方になります。
大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。
みなさんもぜひ、hugoを試してみて下さい。&lt;/p></description></item><item><title>テーマが反映されない（画面が真っ白のまま）</title><link>https://suzukiiichiro.github.io/posts/2021-12-21/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-21.jpg" alt="Featured image of post テーマが反映されない（画面が真っ白のまま）" />&lt;p>テーマが反映されない（画面が真っ白のまま）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git submodule update --init --recursive
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>記事の投稿の仕方</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-01/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-01/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-21-1.jpg" alt="Featured image of post 記事の投稿の仕方" />&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ hugo new posts/&lt;span style="color:#f92672">[&lt;/span>ファイル名&lt;span style="color:#f92672">]&lt;/span>.md
$ vim content/posts/2021-12-21.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>draft: false&lt;/code> にする事でドラフトを公開にすることができる&lt;/p>
&lt;p>ビルドする&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ hugo
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>