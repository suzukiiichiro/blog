<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NLP</title><link>https://suzukiiichiro.github.io/</link><description>Recent content on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 22 Dec 2021 21:22:23 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-03/</link><pubDate>Wed, 22 Dec 2021 21:22:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-03/</guid><description>&lt;p>##エラーの内容&lt;br>
記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について&lt;br>
hugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。&lt;/p>
&lt;p>Start building sites …
Total in 10 ms
Error: Error building site: &amp;ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1&amp;rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed&lt;/p>
&lt;p>##原因&lt;br>
このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。&lt;br>
vim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？&lt;/p>
&lt;p>#対応&lt;br>
この場合ファイルの文字コードをUTF8に変更してみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>nkf -wLu ファイル名 &amp;gt;一時保存ファイル名;
mv 一時保存ファイル名 ファイル名
&lt;/code>&lt;/pre>&lt;p>一時保存した後にmvで戻したり面倒ですよね。
面倒を回避できるコマンドがgithubに上がっていますのでこちらもご利用ください。&lt;br>
&lt;a class="link" href="https://github.com/suzukiiichiro/linuxConfig/blob/master/wLu" target="_blank" rel="noopener"
>https://github.com/suzukiiichiro/linuxConfig/blob/master/wLu&lt;/a>&lt;/p>
&lt;p>hugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。&lt;/p></description></item><item><title>プライバシーポリシーページを設置する</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-02/</link><pubDate>Wed, 22 Dec 2021 17:40:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-02/</guid><description>&lt;p>github pagesでもgoogle adsenseの審査に通過したい！&lt;/p>
&lt;p>ということで色々先人の方達のサイトをみさせていただいたところ&lt;/p>
&lt;p>google adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。&lt;/p>
&lt;h2 id="内容はとりあえずコピペで行こう">内容はとりあえずコピペで行こう&lt;/h2>
&lt;p>まずはコピペOKの親切な方のサイトを探します。&lt;/p>
&lt;p>内容については以下のサイトを参考にさせていただきました。&lt;br>
&lt;a class="link" href="http://liberty-life-blog.com/wordpress/privacy-policy/" target="_blank" rel="noopener"
>http://liberty-life-blog.com/wordpress/privacy-policy/&lt;/a>&lt;/p>
&lt;h2 id="設定">設定&lt;/h2>
&lt;p>以下のコマンドでhugoでページを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new page/privacy.md
&lt;/code>&lt;/pre>&lt;p>コンテンツの構成を以下のように管理しているのでpage以下に保存しました。
content/posts &amp;ndash; 記事
/page &amp;ndash; about usページなど
/assetes &amp;ndash; 画像など&lt;/p>
&lt;pre tabindex="0">&lt;code>vim content/page/privacy.md
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;Privacy&amp;quot;
date: 2021-12-22T17:16:15+09:00
draft: false
---
&lt;/code>&lt;/pre>&lt;p>ページの内容を２個目の&amp;mdash;以下に貼り付けます
draft: true に変更します&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>ビルドします&lt;/p>
&lt;p>プライバシーページのリンクはフッターかなと思うのですがフッターの修正方法がまだわからないので明日やります。&lt;/p></description></item><item><title>デザイナーでもできる初めてのHugo #01</title><link>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01/</link><pubDate>Wed, 22 Dec 2021 13:07:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-22-hugo-01.jpg" alt="Featured image of post デザイナーでもできる初めてのHugo #01" />&lt;p>CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。
Wordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。
色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。
無料で、httpsも設定できるので非常に便利です。&lt;/p>
&lt;h2 id="hugoのインストール">Hugoのインストール&lt;/h2>
&lt;p>Hugoを使うためにはhugoをインストールする必要があります。
インストールは簡単です。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a class="link" href="https://brew.sh/index_ja" title="Homebrew"
target="_blank" rel="noopener"
>Homebrew&lt;/a> が必要になります。&lt;/p>
&lt;pre tabindex="0">&lt;code>brew install hugo
&lt;/code>&lt;/pre>&lt;h2 id="設定">設定&lt;/h2>
&lt;p>hugoのインストールが終わったら、サイトを作成します。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new site ＜作成するディレクトリ＞
&lt;/code>&lt;/pre>&lt;p>色々表示されているかと思いますが、気にしないで大丈夫です。&lt;/p>
&lt;h3 id="設定ファイル">設定ファイル&lt;/h3>
&lt;p>hugoの設定はTOMLという形式で記述します。
TOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。
その場合はconfig.tomlを削除して下さい。&lt;/p>
&lt;pre tabindex="0">&lt;code>baseURL = &amp;quot;http://example.org/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>baseURL: サイトの公開URL&lt;/li>
&lt;li>languageCode: HTMLのlang部分&lt;/li>
&lt;li>title: サイトの名前&lt;/li>
&lt;/ul>
&lt;h2 id="記事の投稿">記事の投稿&lt;/h2>
&lt;p>記事を作成するにはコマンドを打つ必要があります&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new posts/helloworld.md
&lt;/code>&lt;/pre>&lt;p>このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます
テーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。&lt;/p>
&lt;h2 id="下書きから公開へ">下書きから公開へ&lt;/h2>
&lt;p>作成されたファイルはmarkdown形式で記述されています。&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;helloworld&amp;quot;
date: 2021-12-22T11:23:09Z
draft: true
---
&lt;/code>&lt;/pre>&lt;p>draft の部分が下書き状態を表しています。
trueにすることで公開となり表示されます。&lt;/p>
&lt;h2 id="確認">確認&lt;/h2>
&lt;p>サイトの確認を行うには
hugoをインストールしたディレクトリで&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server
&lt;/code>&lt;/pre>&lt;p>を実行します。
この場合は公開されている記事のみを表示した状態のサーバが立ち上がります。
未公開も含めたい場合は&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo server -D
&lt;/code>&lt;/pre>&lt;p>とすることで表示できます。&lt;/p>
&lt;h2 id="公開">公開&lt;/h2>
&lt;p>公開をするにはサイト全体を構築し直す必要があります。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>このコマンドでサイト全体が自動的に生成されます。
作成されたサイトは初期状態ではpublicディレクトリに展開されます。
configの&lt;em>publicDir&lt;/em>に任意のディレクトリを設定することも可能です&lt;/p>
&lt;pre tabindex="0">&lt;code>publicDir = 'docs'
&lt;/code>&lt;/pre>&lt;p>この場合はdocsディレクトリに公開ファイルが展開されます。&lt;/p>
&lt;h2 id="終わりに">終わりに&lt;/h2>
&lt;p>駆け足でしたが、hugoの簡単な使い方になります。
大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。
みなさんもぜひ、hugoを試してみて下さい。&lt;/p></description></item><item><title>テーマが反映されない（画面が真っ白のまま）</title><link>https://suzukiiichiro.github.io/posts/2021-12-21/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-21.jpg" alt="Featured image of post テーマが反映されない（画面が真っ白のまま）" />&lt;p>テーマが反映されない（画面が真っ白のまま）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ git submodule update --init --recursive
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>記事の投稿の仕方</title><link>https://suzukiiichiro.github.io/posts/2021-12-21-01/</link><pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-21-01/</guid><description>&lt;img src="https://suzukiiichiro.github.io/assets/images/2021-12-21-1.jpg" alt="Featured image of post 記事の投稿の仕方" />&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ hugo new posts/&lt;span style="color:#f92672">[&lt;/span>ファイル名&lt;span style="color:#f92672">]&lt;/span>.md
$ vim content/posts/2021-12-21.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>draft: false&lt;/code> にする事でドラフトを公開にすることができる&lt;/p>
&lt;p>ビルドする&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ hugo
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>