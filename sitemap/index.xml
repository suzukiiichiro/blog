<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>NLP</title>
        <link>https://suzukiiichiro.github.io/</link>
        <description>Recent content on NLP</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <lastBuildDate>Fri, 07 Jan 2022 11:54:15 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GASとアナリティクスを使って、Hugoに人気記事を表示させる - 簡単にできるHugoで人気の記事を表示する方法 #2</title>
        <link>https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/</link>
        <pubDate>Fri, 07 Jan 2022 11:54:15 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/analytics.jpg" alt="Featured image of post GASとアナリティクスを使って、Hugoに人気記事を表示させる - 簡単にできるHugoで人気の記事を表示する方法 #2" /&gt;&lt;p&gt;簡単にできるHugoで人気の記事を表示する方法の2回目になります。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-wyoshi/&#34; &gt;前回（簡単にできるHugoで人気の記事を表示する方法 #01）&lt;/a&gt;ではGAS（Google App Scripts）を使ってアナリティクスのデータをスプレッドシートに反映するところまで説明しました。&lt;br&gt;
今回は前回作成したスプレッドシートからデータを取得して、Hugoと連携するところまでやっていきましょう。&lt;/p&gt;
&lt;h2 id=&#34;スプレッドシートのデータをjsonで取得&#34;&gt;スプレッドシートのデータをJSONで取得&lt;/h2&gt;
&lt;p&gt;Hugoやjsなどとの連携を簡単にするために、スプレッドシートのデータをjsonで取得できるようにします。&lt;/p&gt;
&lt;p&gt;前回作成したプログラムを開きます。&lt;br&gt;
開き方は前回の「&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-wyoshi/&#34; &gt;簡単にできるHugoで人気の記事を表示する方法 #01&lt;/a&gt;」にある「スプレッドシートの設定」を確認してください。&lt;/p&gt;
&lt;p&gt;スプレッドシートのデータをjsonで取得するためには、APIを使用するケースもありますが、今回はAPIを使用しないで取得します。&lt;/p&gt;
&lt;p&gt;プログラムの内容は下記になります。&lt;/p&gt;
&lt;p&gt;スプレッドシートのIDはスプレッドシートのURL部分の&lt;br&gt;
docs.google.com/spreadsheets/d/ &lt;code&gt;スプレッドシートのID&lt;/code&gt; /edit#gid=0&lt;br&gt;
といったように docs.google.com/spreadsheets/d/ と edit に囲まれた部分になります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sheetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SpreadsheetApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;openById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;スプレッドシートのID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSheetByName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sheetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getDataRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sheetname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ContentService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createTextOutput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setMimeType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ContentService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MimeType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;プログラムの説明&#34;&gt;プログラムの説明&lt;/h3&gt;
&lt;h4 id=&#34;dogetってなに&#34;&gt;doGetってなに？&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;doGet(e)&lt;/code&gt; はこのプログラムをURLから実行できるようにした際にパラメータの値を取得して処理を行う関数です。&lt;br&gt;
ここでは &lt;code&gt;getData()&lt;/code&gt;という関数に、クエリパラメータ&lt;code&gt;sheetname&lt;/code&gt;を渡しております。&lt;br&gt;
URLにすると、https://〜/exec?sheetname=パラメータ&lt;br&gt;
となります。&lt;/p&gt;
&lt;p&gt;このパラメータ部分にスプレッドシートのシート名を渡すことで、該当するスプレッドシートのデータを表示できるようになるというわけです。&lt;/p&gt;
&lt;h4 id=&#34;getdataでやってること&#34;&gt;getDataでやってること&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;getData(sheetName)&lt;/code&gt; では先程のクエリパラメータ&lt;code&gt;sheetname&lt;/code&gt;の値を使って、シートから情報を取得してjsonに格納している部分です。&lt;/p&gt;
&lt;p&gt;指定したシートIDの値がある範囲からから値を取得するのが下記のプログラムです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getDataRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;その取得した値からタイトル、jsonのキーとなる部分を keys として格納します。&lt;br&gt;
そしたら先程取得した rows の値をループで取得しながらjson形式のデータに加工します。&lt;/p&gt;
&lt;p&gt;すると、&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[
  [リンク, pv数, session数, users数],
  [リンク, pv数, session数, users数]
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;というデータが&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[
  {link: リンク, pv: pv数, session: session数, users: users数},
  {link: リンク, pv: pv数, session: session数, users: users数}
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;というjson形式に加工することができました。&lt;br&gt;
ここまでを保存しておきます。&lt;/p&gt;
&lt;p&gt;このプログラムを公開してURLでアクセスできるようにしましょう。&lt;/p&gt;
&lt;h2 id=&#34;gasのプログラムをデプロイして公開&#34;&gt;GASのプログラムをデプロイして公開&lt;/h2&gt;
&lt;p&gt;それではここまでのファイルをデプロイして、Webでアクセスできるようにしましょう。&lt;br&gt;
右上にある「デプロイ」を押して、新しいデプロイをクリックします。&lt;/p&gt;
&lt;p&gt;すると、「新しいデプロイ」となるので、歯車のマーク「デプロイを有効にする」をおして、「ウェブアプリ」を選択します。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 139; 
			flex-basis: 335px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01.png&#34; data-size=&#34;980x701&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01.png&#34;
			width=&#34;980&#34;
			height=&#34;701&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01_huf487cfc84c7ed2df1e406ad2c4a31349_126397_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img01_huf487cfc84c7ed2df1e406ad2c4a31349_126397_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;設定の画面になるので、説明などを入力します。&lt;br&gt;
「次のユーザーとして実行」は自身のアドレスでかまいません。&lt;br&gt;
「アクセスできるよユーザー」部分は「 &lt;strong&gt;全員&lt;/strong&gt; 」とします。&lt;br&gt;
これによって、Hugoから呼び出した際に実行できるようになります。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 139; 
			flex-basis: 333px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02.png&#34; data-size=&#34;980x705&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02.png&#34;
			width=&#34;980&#34;
			height=&#34;705&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02_hu414af87a6b14ddf9b13521c5e57550de_158141_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img02_hu414af87a6b14ddf9b13521c5e57550de_158141_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ここまで設定できたら「デプロイ」を押して、プログラムを公開します。&lt;br&gt;
表示されたウェブアプリのURLが表示されるので、コピーしておきます。&lt;/p&gt;
&lt;p&gt;先程コピーしたURLの末尾に&lt;code&gt;?sheetname=month&lt;/code&gt;を追加してアクセスしてみましょう。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://script.google.com/macros/s/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://script.google.com/macros/s/&lt;/a&gt;〜/exec?sheetname=month&lt;br&gt;
URLはこのような形になります。&lt;/p&gt;
&lt;p&gt;正常にアクセスできていれば&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 196; 
			flex-basis: 470px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03.png&#34; data-size=&#34;980x500&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03.png&#34;
			width=&#34;980&#34;
			height=&#34;500&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03_hu7ef5c4f1b961fa096d8c5e7c75bf7c67_49092_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img03_hu7ef5c4f1b961fa096d8c5e7c75bf7c67_49092_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;br&gt;
とjson形式のデータが表示されるはずです。&lt;/p&gt;
&lt;h3 id=&#34;エラーが出た場合&#34;&gt;エラーが出た場合&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TypeError: Cannot read property &#39;getDataRange&#39; of null（行 3、ファイル「コード」）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;というエラーが出た場合はパラメータが記述されていないだけなので、パラメータを記述することで正常に取得できます。&lt;br&gt;
それ以外の場合は、「デバッグ」を使ってエラーを特定していく必要があります。&lt;br&gt;
デバッグでは&lt;code&gt;doGet&lt;/code&gt;はクエリ取得できないので、&lt;code&gt;e.parameter.sheetname&lt;/code&gt;部分を&lt;code&gt;&amp;quot;month&amp;quot;&lt;/code&gt;と直書きしてデバッグを実行します。&lt;/p&gt;
&lt;h4 id=&#34;デプロイには注意&#34;&gt;デプロイには注意&lt;/h4&gt;
&lt;p&gt;デプロイで「新しいデプロイ」を選択するとURLが変わる点に注意です。&lt;br&gt;
GASでウェブアプリのURLを固定するための方法は、「デプロイを管理」から更新をするようにします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「デプロイ」の「デプロイを管理」を押します。&lt;/li&gt;
&lt;li&gt;そして、右にある鉛筆マークの「編集」を押します。&lt;br&gt;
すると、編集画面になり、バージョンや説明を修正することができます。&lt;/li&gt;
&lt;li&gt;バージョン部分を「新しいバージョン」として、説明に「最新版」とでも打っておきましょう。&lt;/li&gt;
&lt;li&gt;この状態で「デプロイ」をクリックします。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の作業で、URLを固定したままウェブアプリを公開することができます。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 138; 
			flex-basis: 333px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04.png&#34; data-size=&#34;980x706&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04.png&#34;
			width=&#34;980&#34;
			height=&#34;706&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04_hu88d49d2022eb88c51862fef2af5ceb89_152311_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img04_hu88d49d2022eb88c51862fef2af5ceb89_152311_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugoと連携して人気の記事を表示する&#34;&gt;Hugoと連携して人気の記事を表示する&lt;/h2&gt;
&lt;p&gt;アナリティクスとスプレッドシートを使って人気の記事をjsonで取得する事ができるようになったので、Hugoと連携します。&lt;br&gt;
Hugoにはjsonを取得する機能がついているので、その機能を使ってデータを取得します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html:popularArticlesMonth.html&#34; data-lang=&#34;html:popularArticlesMonth.html&#34;&gt;{{ $json := getJSON &amp;#34;https://script.google.com/macros/s/〜/exec?sheetname=month&amp;#34; }}

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;widget archives sidearticle-contents--wrapper&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;popular-articles--month&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contents-area&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;section-title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;人気の記事（1ヶ月以内）&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sidearticle-contents&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;flex article-list--tile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        {{ $page := .Site.Pages }}
        {{ range first .Site.Params.widgets.populerArticles.limit $json }}
          {{ $article := index (where $page &amp;#34;.RelPermalink&amp;#34; &amp;#34;eq&amp;#34; .link ) 0  }}
          {{ if $article }}
            &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;article-title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ $article.RelPermalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{- $article.Title -}}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
          {{ end }}
        {{ end }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;getJSON&lt;/code&gt; のURLは先ほど作成したGASのウェブアプリURLになります。&lt;br&gt;
今回は月間の人気記事を取得したいので、&lt;code&gt;?sheetname=month&lt;/code&gt;としてあります。&lt;br&gt;
年の場合は&lt;code&gt;year&lt;/code&gt;日の場合は&lt;code&gt;day&lt;/code&gt;などとすることで必要な情報を取得できます。&lt;/p&gt;
&lt;p&gt;使用しているテンプレートにも夜と思いますが、layouts/partials/widget/popularArticlesMonth.html として保存しておきましょう。&lt;/p&gt;
&lt;p&gt;このファイルをHugoで読み込むことで人気の記事を表示する事ができるようになります。&lt;/p&gt;
&lt;p&gt;取得する人気の記事件数は&lt;code&gt;config.yaml&lt;/code&gt;などのhugoの設定ファイル内のwidhetsに&lt;code&gt;populerArticles&lt;/code&gt;を追加して記述しておきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml:config.yaml&#34; data-lang=&#34;yaml:config.yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;widgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;popular-articles&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;populerArticles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;人気の記事を表示するプログラムの解説&#34;&gt;人気の記事を表示するプログラムの解説&lt;/h3&gt;
&lt;p&gt;まずはサイト全体の記事を取得しておきます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ $page := .Site.Pages }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次に、取得したjsonのデータを設定で指定した範囲で取得します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ range first .Site.Params.widgets.populerArticles.limit $json }}
...
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取得したデータからリンクに一致する記事を探します。&lt;br&gt;
配列のデータで検索されているので、&lt;code&gt;index&lt;/code&gt;を使って0番目の記事を取得しています。&lt;br&gt;
あとは通常の記事と同じように扱えます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ $article := index (where $page &amp;quot;.RelPermalink&amp;quot; &amp;quot;eq&amp;quot; .link ) 0  }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;今回は画像無しでタイトルのみの表示となりますが、データ自体は他の記事と同じなので画像やカテゴリ、本文などにもアクセス可能です。&lt;/p&gt;
&lt;h2 id=&#34;自動更新の設定&#34;&gt;自動更新の設定&lt;/h2&gt;
&lt;p&gt;サイトに人気の記事を表示させることができました。&lt;br&gt;
今の設定だと人気の記事が更新されないので、GASの「トリガー」を使って定期的にアナリティクスのデータをjsonに反映するようにしておきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setMonth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setDay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setYear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;setDay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;setMonth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;setYear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;月だけでなく、日、年のデータも取得する夜にしておきます。&lt;br&gt;
そして、それらをすべて実行する関数「all」も追加しておきましょう。ここで保存しておきます。&lt;br&gt;
これで準備ができました。&lt;/p&gt;
&lt;p&gt;左袖にあるストップウォッチアイコンを押して、「トリガー」を追加します。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 145; 
			flex-basis: 348px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05.png&#34; data-size=&#34;980x674&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05.png&#34;
			width=&#34;980&#34;
			height=&#34;674&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05_hu43858237469efa145840e90a2658042d_100055_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img05_hu43858237469efa145840e90a2658042d_100055_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「トリガーを追加」を押して、「実行する関数」で実行したい関数を選びます。今回は月間のデータを取得したいので「setMonth」を選択します。&lt;/li&gt;
&lt;li&gt;「実行するデプロイを選択」は「Head」のままで構いません。&lt;/li&gt;
&lt;li&gt;「イベントのソースを選択」は「時間主導型」に変更して、時間で実行するようにしておきます。&lt;/li&gt;
&lt;li&gt;「時間ベースのトリガーのタイプを選択」を更新したい頻度で選択します。月間のデータなので1日おきくらいに更新でもいいかもしれません。「日付ベースのタイマー」を選択します。&lt;br&gt;
一日おきではなく、毎時で更新したい場合は「時間ベースのタイマー」など各自にあったタイマーを選択してください。&lt;/li&gt;
&lt;li&gt;「時刻を選択」で更新したい時間を選びます。とりあえず「午前4時〜5時」くらいに更新するようにしておきます。&lt;/li&gt;
&lt;li&gt;「エラー通知設定」は各自で好きなタイミングで受信するようにしてください。私はいっぱい来ると嫌なので、「1週間おきに通知を受け取る」にしてあります。&lt;br&gt;
以上で設定が終わりました。下にある「保存」を押して保存します。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 139; 
			flex-basis: 334px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06.png&#34; data-size=&#34;980x703&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06.png&#34;
			width=&#34;980&#34;
			height=&#34;703&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06_hu4dbb253495b0c0987384377169fcf501_125784_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/img06_hu4dbb253495b0c0987384377169fcf501_125784_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これで定期的にアナリティクスのデータがスプレッドシートに反映されるようになりました。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Hugoで人気の記事を表示するには&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Googleアナリティクスの連携&lt;/li&gt;
&lt;li&gt;スプレッドシートを使ってjsonを作成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の2つを使うことで簡単に導入可能です。&lt;/p&gt;
&lt;p&gt;Hugoを使って人気の記事を作成するにはサイトや投稿を公開した際になりますが、GitHub Actionsなどを使えばcron処理で定期的に再構築をかけることが可能なので、数十分おきに人気の記事を更新したり、スプレッドシートとgasのレン系の際にjsonを作成したので、javascriptでjsonを読み取って表示するといったことも可能です。&lt;/p&gt;
&lt;h2 id=&#34;ソース&#34;&gt;ソース&lt;/h2&gt;
&lt;p&gt;前回と今回で作成したソースになります。&lt;/p&gt;
&lt;h4 id=&#34;gasとスプレッドシートを使ってhugoに人気の記事を表示する&#34;&gt;GASとスプレッドシートを使ってHugoに人気の記事を表示する&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sheetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SpreadsheetApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;openById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;シートID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSheetByName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sheetName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getDataRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sheetname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ContentService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createTextOutput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setMimeType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ContentService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MimeType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dayjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dayjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ja&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subtract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ga:ビューID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AnalyticsReporting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;batchGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;reportRequests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;viewId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;dateRanges&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;startDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;endDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;samplingLevel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;LARGE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pageviews&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:sessions&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:users&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pagePath&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; 
      &lt;span class=&#34;nx&#34;&gt;orderBys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fieldName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pageviews&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;sortOrder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DESCENDING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;posts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SpreadsheetApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getActive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSheetByName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unshift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setMonth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setDay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setYear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;setDay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;setMonth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;setYear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;hugoで人気の記事を表示する&#34;&gt;Hugoで人気の記事を表示する&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;widget archives sidearticle-contents--wrapper&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;popular-articles--month&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contents-area&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;section-title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;人気の記事（1ヶ月以内）&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sidearticle-contents&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;flex article-list--tile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        {{ $page := .Site.Pages }}
        {{ range first .Site.Params.widgets.populerArticles.limit $json }}
          {{ $article := index (where $page &amp;#34;.RelPermalink&amp;#34; &amp;#34;eq&amp;#34; .link ) 0  }}
          {{ if $article }}
            &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;article-title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .context.RelPermalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{- .context.Title -}}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
          {{ end }}
        {{ end }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aside&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;書籍の紹介&#34;&gt;書籍の紹介&lt;/h2&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/Google%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB-%EF%BD%9E%E5%88%86%E6%9E%90%E3%83%BB%E6%96%BD%E7%AD%96%E3%81%AE%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2%E3%82%92%E7%94%9F%E3%82%80%E6%9C%80%E5%BC%B7%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9-%E5%B1%B1%E6%B5%A6-%E7%9B%B4%E5%AE%8F/dp/4297112612?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;crid=JWVEKDNY44QV&amp;amp;keywords=google&amp;#43;%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9&amp;amp;qid=1641514280&amp;amp;s=books&amp;amp;sprefix=google&amp;#43;%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9%2Cstripbooks%2C197&amp;amp;sr=1-17-spons&amp;amp;psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFEVkxWVEZDSTdSQzQmZW5jcnlwdGVkSWQ9QTA1MDMwNDYyUTRGU1dQUEFQOTdTJmVuY3J5cHRlZEFkSWQ9QTNDR0ZTNUlLTUJHNUsmd2lkZ2V0TmFtZT1zcF9idGYmYWN0aW9uPWNsaWNrUmVkaXJlY3QmZG9Ob3RMb2dDbGljaz10cnVl&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=5dfbf1278031207773d96916ecce46dd&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4297112612&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;Googleアナリティクス プロフェッショナル　～分析・施策のアイデアを生む最強リファレンス &lt;/h2&gt;
      &lt;p&gt;ウェブ制作者から、マーケター、ウェブアナリストまで必携の1冊
「Googleアナリティクスはどこへ向かうのか?進化し続けるツールのポテンシャルを最大限に引き出したときに、新しい分析や施策のアイディアが生まれる」&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/Google-Apps-Script%E7%9B%AE%E7%9A%84%E5%88%A5%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9-%E5%AE%9F%E8%B7%B5%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E4%BB%98%E3%81%8D-%E6%B8%85%E6%B0%B4/dp/4798062405?pd_rd_w=BsqYY&amp;amp;pf_rd_p=d8f6e0ab-48ef-4eca-99d5-60d97e927468&amp;amp;pf_rd_r=ADPJ0069C04W5M44N6YQ&amp;amp;pd_rd_r=16303d6e-b3f9-4aa6-9f06-d3e66775e8f4&amp;amp;pd_rd_wg=joLm1&amp;amp;pd_rd_i=4798062405&amp;amp;psc=1&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=f78c47c375494f0b51c423506367a868&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4798062405&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;Google Apps Script目的別リファレンス 実践サンプルコード付き&lt;/h2&gt;
      &lt;p&gt;Excelのマクロに似た「スクリプト」を書けば、Gmailや「スプレッドシート」などのGoogleサービスを更に効率的に、思うように使えます。そのスクリプトを書いて実行するプログラミング環境が、Google Apps Script(GAS)。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;</description>
        </item>
        <item>
        <title>ざっくりわかる「シェルスクリプト」</title>
        <link>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</link>
        <pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post ざっくりわかる「シェルスクリプト」" /&gt;&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。&lt;/p&gt;
&lt;p&gt;この記事では、bashプログラミングの次のトピックについて説明します。&lt;/p&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;はじめてのbashコマンド「echo」&lt;br&gt;
ターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, World」になります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-:はじめてのecho&#34; data-lang=&#34;:はじめてのecho&#34;&gt;$ echo &amp;quot;Hello, World&amp;quot;
Hello, World
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;はじめてのbashスクリプト「vim」&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash:はじめてのbashスクリプト&#34; data-lang=&#34;bash:はじめてのbashスクリプト&#34;&gt;$ vim HelloWorld.sh
＜空のvim HelloWorld.sh が開きます＞
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vimで開いたHelloWorld.shを編集します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:HelloWorld.sh&#34; data-lang=&#34;bash:HelloWorld.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;はじめての実行権限「chmod」&lt;br&gt;
bashファイルは2つの方法で実行できます。&lt;br&gt;
１．bashコマンドを使用する方法、&lt;br&gt;
２．bashファイルに実行権限を設定し、ファイルを実行する方法&lt;/p&gt;
&lt;p&gt;一つ目の方法「bashコマンドを使用する」&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash HelloWorld.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;もう一つの方法「chmodで実行権限を付与する」&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# +x で実行権限を付与
$ chmod +x HelloWorld.sh
# ドット　スラッシュをつけて実行
$ ./HelloWorld.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;考え方ですが、bashコマンドで実行する場合のメリットは、ファイルに闇雲に実行権限を与える必要がないことです。実行権限を与える方法は、一般的ではありますが注意も必要です。&lt;/p&gt;
&lt;p&gt;chmod の実行権限には +x で実行権限を付与する方法の他、0755 などの数字で付与する場合もあります。&lt;br&gt;
これらを&lt;font color=red&gt;パーミッション&lt;/font&gt;と言います。&lt;/p&gt;
&lt;p&gt;パーミッションの確認&lt;br&gt;
ターミナルのコマンドでカレントディレクトリ内のファイルやディレクトリの情報を確認します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ls -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記のコマンドを実行すると、以下のような一覧が表示されるかと思います。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-rw-r--r--  1 user group      9  1月 1 00:00 hoge.txt
drwxr-xr-x  6 user group  20480  1月 1 00:00 ダウンロード
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;パーミッションの読み方&lt;br&gt;
「-rw-r&amp;ndash;r&amp;ndash;」や「drwxr-xr-x」の先頭の謎の10文字についてですが、&lt;br&gt;
最初の１文字目はファイル種別を表しています。&lt;br&gt;
-rw-r&amp;ndash;r&amp;ndash;&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;種別&lt;/th&gt;&lt;th&gt;意味&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;ファイル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;d&lt;/td&gt;&lt;td&gt;ディレクトリ&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;l&lt;/td&gt;&lt;td&gt;シンボリックリンク&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;2文字目から4文字目はファイルの所有者に対する権限を表し、&lt;br&gt;
5文字目から7文字目はファイルの所有グループに対する権限を表し、&lt;br&gt;
8文字目から10文字目はその他に対する権限を表しています&lt;/p&gt;
&lt;p&gt;上記から-rw-r&amp;ndash;r&amp;ndash;は、&lt;br&gt;
「ファイル種別」が「ファイル」であり、&lt;br&gt;
「所有者」に「読み取り」と「書き込み」の権限があり、&lt;br&gt;
「所有グループ」に「読み取り」の権限があり、&lt;br&gt;
「その他」に「読み取り」の権限があることを示しています。&lt;/p&gt;
&lt;p&gt;drwxr-xr-xは、&lt;br&gt;
「ファイル種別」が「ディレクトリ」であり、&lt;br&gt;
「所有者」に「読み取り」と「書き込み」と「実行」の権限があり、&lt;br&gt;
「所有グループ」に「読み取り」と「実行」の権限があり、&lt;br&gt;
「その他」に「読み取り」と「実行」の権限があることを示しています。&lt;/p&gt;
&lt;p&gt;アクセス権限の変更&lt;br&gt;
アクセス権限を変更する方法について記載します。&lt;/p&gt;
&lt;p&gt;パーミッションの変更には&lt;font color=red&gt;&lt;b&gt; chmodコマンド&lt;/b&gt;&lt;/font&gt;を使用します。&lt;/p&gt;
&lt;p&gt;数値で指定する&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ls -l　
-rw-r--r--  1 user group      9  1月 1 00:00 hoge.txt
$ chmod 764 hoge.txt
$ ls -l
-rwxrw-r--  1 user group      9  1月 1 00:00 hoge.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記のコマンドはhoge.txtに対してパーミッションの確認→変更→確認を行っています。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ chmod 764 hoge.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;に関して説明していきます。&lt;br&gt;
ファイルのパーミッションの変更は以下の通りコマンドを実行すれば可能です。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chmod モード 対象ファイル名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;モードの数字について&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;モード(数字)&lt;/th&gt;&lt;th&gt;モード(アルファベット)&lt;/th&gt;&lt;th&gt;権限&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;r&lt;/td&gt;&lt;td&gt;読み取り&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;w&lt;/td&gt;&lt;td&gt;書き込み&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;td&gt;実行&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
上記の合計値を「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます。
要するに上記の「764」は
「所有者」に対して「読み取り」「書き込み」「実行」を、
「所有グループ」に対して「読み取り」「書き込み」を、
「その他」に「読み取り」を付与しています。
&lt;p&gt;詳しくはこちら&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/shisama/items/5f4c4fa768642aad9e06&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qiita.com/shisama/items/5f4c4fa768642aad9e06&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;echo-コマンド&#34;&gt;echo コマンド&lt;/h2&gt;
&lt;p&gt;echoコマンドの使用：&lt;br&gt;
さまざまなオプションでechoコマンドを使用できます。&lt;br&gt;
次の例では、いくつかの便利なオプションについて説明します。&lt;br&gt;
オプションなしで「echo」コマンドを使用すると、デフォルトで改行が追加されます。&lt;br&gt;
&amp;lsquo;-n&amp;rsquo;オプションは、改行なしでテキストを印刷するために使用され、&#39;-e&amp;rsquo;オプションは、出力からバックスラッシュ文字を削除するために使用されます。&lt;br&gt;
&amp;lsquo;echo_example.sh&amp;rsquo;という名前の新しいbashファイルを作成し、次のスクリプトを追加します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:echo_example.sh&#34; data-lang=&#34;bash:echo_example.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;改行付きのテキストの印刷&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;改行なしのテキストの印刷&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;\n削除\tバックスラッシュ\t文字\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bashコマンドでファイルを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash echo_example.sh
改行付きのテキストの印刷
改行なしのテキストの印刷
削除	バックスラッシュ	文字
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;コメント&#34;&gt;コメント&lt;/h2&gt;
&lt;p&gt;コメントの使用&lt;br&gt;
「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。&lt;br&gt;
&amp;lsquo;comment_example.sh&amp;rsquo;という名前の新しいファイルを作成し、1行コメント付きの次のスクリプトを追加します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:comment_example.sh&#34; data-lang=&#34;bash:comment_example.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#2つの数値をsumに追加します&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25+35&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#結果を出力します&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$sum&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bashコマンドでファイルを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash comment_example.sh
60
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;マルチラインコメント&#34;&gt;マルチラインコメント&lt;/h2&gt;
&lt;p&gt;複数行コメントの使用&lt;br&gt;
bashではさまざまな方法で複数行コメントを使用できます。&lt;br&gt;
次の例に簡単な方法を示します。&lt;br&gt;
&amp;lsquo;multiline-comment.sh&amp;rsquo;という名前の新しいbashを作成し、次のスクリプトを追加します。&lt;br&gt;
ここでは、「:」と「&#39;」でbashで複数行コメントを実現しています。&lt;br&gt;
次のスクリプトは、5の2乗を計算します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:multiline-comment.sh&#34; data-lang=&#34;bash:multiline-comment.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
: &lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;次のスクリプトは、
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;数値の2乗値5を計算します。
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;area&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;5*5&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$area&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bashコマンドでファイルを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash multiline-comment.sh
25
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;while-ループ&#34;&gt;while ループ&lt;/h2&gt;
&lt;p&gt;whileループの使用&lt;br&gt;
whileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成します。&lt;br&gt;
この例では、whileループが5回繰り返されます。&lt;br&gt;
count変数の値は、各ステップで1ずつ増加します。&lt;br&gt;
count変数の値が5になると、whileループは終了します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:while_exapmle.sh&#34; data-lang=&#34;bash:while_exapmle.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;valid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$valid&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$count&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$count&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    break&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;count++&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bashコマンドでファイルを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash while_example.sh
1
2
3
4
5
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;for-ループ&#34;&gt;for ループ&lt;/h2&gt;
&lt;p&gt;forループの使用&lt;br&gt;
基本的なforループ宣言を示します。&lt;br&gt;
&amp;lsquo;for_example.sh&amp;rsquo;という名前のファイルを作成し、forループを使用して、次のスクリプトを追加します。&lt;br&gt;
ここでは、forループは10回繰り返され、変数のすべての値、counterを1行で出力します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:for_example.sh&#34; data-lang=&#34;bash:for_example.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;counter&amp;gt;0&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;counter--&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$counter&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bashコマンドでファイルを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash for_example.sh
10 9 8 7 6 5 4 3 2 1
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;対話型入力&#34;&gt;対話型入力&lt;/h2&gt;
&lt;p&gt;ユーザー入力の取得&lt;br&gt;
&amp;lsquo;read&amp;rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。&lt;br&gt;
&amp;lsquo;user_input.sh&amp;rsquo;という名前のファイルを作成し、ユーザーから入力を取得するための次のスクリプトを追加します。&lt;br&gt;
ここでは、1つの文字列値がユーザーから取得され、他の文字列値を組み合わせて値が表示されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:user_input.sh&#34; data-lang=&#34;bash:user_input.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;あなたの名前を入力して下さい&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; name
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ようこそ &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;. ＮＬＰへ&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bashコマンドでファイルを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash user_input.sh
あなたの名前を入力して下さい
suzuki
ようこそ suzuki。 ＮＬＰへ
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;if-文&#34;&gt;If 文&lt;/h2&gt;
&lt;p&gt;if文を使う&lt;br&gt;
単数、または複数の条件でif条件を使用できます。&lt;br&gt;
このステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義されます。&lt;br&gt;
「simple_if.sh」という名前のファイルを作成し、bashでのifステートメントの使用を確認します。&lt;br&gt;
ここでは、変数nに10が割り当てられています。&lt;br&gt;
$nの値が10未満の場合、出力は「1桁の数値です」になります。&lt;br&gt;
それ以外の場合、出力は「2桁の数値です」になります。&lt;br&gt;
比較のために、ここでは「-lt」を使用しています。&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;オプション&lt;/th&gt;&lt;th&gt;意味&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-eq&lt;/td&gt;&lt;td&gt;同　じ（==）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-lt&lt;/td&gt;&lt;td&gt;小さい（＜）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-gt&lt;/td&gt;&lt;td&gt;大きい（＞）&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;数値を比較する場合は、「&amp;lt;」「&amp;gt;」「=」ではなく、&lt;br&gt;
-eq -lt -gt を使う必要があります。&lt;/p&gt;
&lt;p&gt;文字列を比較する場合は 「==」または 「!=」を使います。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:simple_if.sh&#34; data-lang=&#34;bash:simple_if.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$n&lt;/span&gt; -lt &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1桁の数値です&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2桁の数値です&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bashコマンドでファイルを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash simple_if.sh
2桁の数値です
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;９and-条件を-if-文で使う&#34;&gt;９．and 条件を if 文で使う&lt;/h2&gt;
&lt;p&gt;2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用できます。&lt;br&gt;
andロジックを使用してifステートメントで複数の条件を定義する方法を次の例に示します。&lt;br&gt;
&amp;lsquo;&amp;amp;&amp;amp;&amp;lsquo;は、ifステートメントのandロジックを適用するために使用されます。&lt;br&gt;
&amp;lsquo;if_with_and.sh&amp;rsquo;という名前のファイルを作成して、次のコードを確認します。&lt;br&gt;
ここで、ユーザー名とパスワードの変数の値はユーザーから取得され、「admin」および「secret」と比較されます。&lt;br&gt;
両方の値が一致する場合、出力は「有効なユーザー」になります。一致しない場合、出力は「無効なユーザー」になります。&lt;/p&gt;
&lt;font color=red&gt;
数値を比較する場合は、「&lt;」「&gt;」「=」ではなく、
-eq -lt -gt を使う必要があります。
文字列を比較する場合は 「==」または 「!=」を使います。
&lt;/font&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:if_with_and.sh&#34; data-lang=&#34;bash:if_with_and.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;名前を入力して下さい&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; username
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;パスワードを入力して下さい&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; password

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;無効なユーザーです&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;有効なユーザーです&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bashコマンドでファイルを実行します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash if_with_and.sh
名前を入力して下さい
suzuki
パスワードを入力して下さい
password
無効なユーザーです
$
&lt;/code&gt;&lt;/pre&gt;&lt;!--
## １０．or 条件を if文で使う
## １１．else if と else
## １２．case 文
## １３．コマンドラインから引数を取得
## １４．名前を使用してコマンドラインから引数を取得する
## １５．変数に2つの文字列を組み合わせる
## １６．文字列の部分文字列を取得する
## １７．変数に2つの数値を追加します
## １８．関数を作成する
## １９．関数パラメーターを使用する
## ２０．スクリプトからの戻り値を渡す
## ２１．ディレクトリを作成する
## ２２．存在を確認してディレクトリを作成する
## ２３．ファイルを読む
## ２４．ファイルを削除する
## ２５．ファイルに追加
## ２６．ファイルが存在するかどうかを確認
## ２７．mailコマンド
## ２８．dateコマンド
## ２９．waitコマンド
## ３０．sleepコマンド
--&gt;
&lt;h1 id=&#34;書籍の紹介&#34;&gt;書籍の紹介&lt;/h1&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4774186945&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2&gt;
      &lt;p&gt;定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/gp/product/B00QJINS1A/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B00QJINS1A&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=36dff1cf8fa7d4852b5a4a3cf874304b&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B00QJINS1A&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;UNIXシェルスクリプト マスターピース132&lt;/h2&gt;
      &lt;p&gt;すべてのUNIXエンジニア必携!!
&lt;p&gt;サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。&lt;br&gt;
知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。&lt;/p&gt;
&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;
</description>
        </item>
        <item>
        <title>簡単にできるHugoで人気の記事を表示する方法 #1</title>
        <link>https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/</link>
        <pubDate>Thu, 06 Jan 2022 16:50:50 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/analytics.jpg" alt="Featured image of post 簡単にできるHugoで人気の記事を表示する方法 #1" /&gt;&lt;p&gt;Hugoには様々な機能があり、ブログを作るにはもってこいの静的サイトジェネレータです。&lt;br&gt;
関連記事も取得できて、検索機能もある「至れり尽くせり」なジェネレータだと思います。&lt;/p&gt;
&lt;p&gt;しかし、1点だけどうしても重要な機能がありません。&lt;br&gt;
それは人気記事の表示です。&lt;br&gt;
人気記事を表示させるとなると、データベースを用意したりサーバのアクセスカウントを行う必要があります。&lt;br&gt;
そんな面倒なことはしたくありませんよね？&lt;/p&gt;
&lt;p&gt;今回はHugoでも簡単に人気の記事を表示する方法を紹介いたします。&lt;/p&gt;
&lt;h2 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h2&gt;
&lt;p&gt;Hugoで人気記事を出すために必要なものは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Googleスプレッドシート&lt;/li&gt;
&lt;li&gt;Googleアナリティクス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上です。&lt;br&gt;
それでは実際の設定やプログラムを行っていきましょう。&lt;/p&gt;
&lt;h2 id=&#34;googleアナリティクスの設定&#34;&gt;Googleアナリティクスの設定&lt;/h2&gt;
&lt;p&gt;Googleアナリティクスをサイトに設定します。&lt;br&gt;
設定の際にはv4ではなく、v2が必要です。(2022年1月6日現在)&lt;br&gt;
v4を設定している場合は、同時にv2も設定する必要があります。&lt;/p&gt;
&lt;p&gt;「アカウントを作成」「アカウントの設定」をした後に、「 &lt;strong&gt;プロパティの設定&lt;/strong&gt; 」で「ユニバーサル アナリティクス プロパティの作成」をONにするとv4とv2の両方でアナリティクスを設定することができます。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 391px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting.png&#34; data-size=&#34;980x601&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting.png&#34;
			width=&#34;980&#34;
			height=&#34;601&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting_hu1de37cbb321319f7b20f9e0b0bc31b91_205070_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/setting_hu1de37cbb321319f7b20f9e0b0bc31b91_205070_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;ユニバーサル アナリティクス プロパティの作成&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;ユニバーサル アナリティクス プロパティの作成&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;あとはv4とv2のコードをサイトに貼り付けるだけです。&lt;br&gt;
貼り付け方法はGoogleに書いてある通りです。&lt;/p&gt;
&lt;h2 id=&#34;スプレッドシートの設定&#34;&gt;スプレッドシートの設定&lt;/h2&gt;
&lt;p&gt;次にスプレッドシートを設定します。&lt;br&gt;
Googleドライブで「新規」「Googleスプレッドシート」でシートを作成します。&lt;br&gt;
作成したシートに適当な名前をつけます。&lt;/p&gt;
&lt;p&gt;その後に、「拡張機能」の「App Script」を押して、GoogleAppScript（GAS）に移動します。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 180; 
			flex-basis: 433px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas.png&#34; data-size=&#34;980x542&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas.png&#34;
			width=&#34;980&#34;
			height=&#34;542&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas_hua5e979262c3621ae25b1ecd1b3f95ba4_106503_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/spreads-gas_hua5e979262c3621ae25b1ecd1b3f95ba4_106503_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;ユニバーサル アナリティクス プロパティの作成&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;ユニバーサル アナリティクス プロパティの作成&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;gasのプログラム&#34;&gt;GASのプログラム&lt;/h2&gt;
&lt;h3 id=&#34;日付の取得&#34;&gt;日付の取得&lt;/h3&gt;
&lt;p&gt;日付を計算するために、「daysjs」というライブラリを追加します。&lt;br&gt;
ライブラリの＋をクリックして、以下を検索します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;検索して、days.jsが表示されたら追加をします。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 321px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs.png&#34; data-size=&#34;980x732&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs.png&#34;
			width=&#34;980&#34;
			height=&#34;732&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs_huc72d901922502ee5755367cabcfc143d_172673_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/dayjs_huc72d901922502ee5755367cabcfc143d_172673_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;day.jsライブラリの追加&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;day.jsライブラリの追加&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;これで日付の検索が可能になります。&lt;br&gt;
以下が日付のプログラムです。&lt;/p&gt;
&lt;p&gt;今日から1日、1月、1年前なのかという切り替えが可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;year: 今日から1年間の範囲&lt;/li&gt;
&lt;li&gt;month: 今日から1ヶ月の範囲&lt;/li&gt;
&lt;li&gt;day: 今日から1日の範囲&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dayjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dayjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ja&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subtract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここまでをテスト実行してみましょう。&lt;br&gt;
デバッグの隣りにあるセレクトを「test」にして、「実行」を押してみます。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 138; 
			flex-basis: 333px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1.png&#34; data-size=&#34;980x706&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1.png&#34;
			width=&#34;980&#34;
			height=&#34;706&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1_hu88d49d2022eb88c51862fef2af5ceb89_155241_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/gas1_hu88d49d2022eb88c51862fef2af5ceb89_155241_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;br&gt;
正常に終了されれば実行ログに結果と実行完了が表示されるはずです。&lt;/p&gt;
&lt;h3 id=&#34;gasとgoogleアナリティクスの連携&#34;&gt;GASとGoogleアナリティクスの連携&lt;/h3&gt;
&lt;p&gt;GASとアナリティクスの連携にはビューIDが必要です。&lt;br&gt;
ビューIDはv2で取得できるので、v4とv2を設定したのはこのビューIDを取得するためになります。&lt;/p&gt;
&lt;p&gt;GASのプログラムにGoogleアナリティクスの「アカウント」「プロパティ」「ビュー」「ビューの設定」にあるビューIDを設定します。&lt;br&gt;
設定する際は「ga:ビューID」と &lt;code&gt;ga:&lt;/code&gt; を付ける必要があります。&lt;/p&gt;
&lt;p&gt;先程のプログラムの下に、下記のプログラムを記述します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ga:[GAビューID]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AnalyticsReporting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;batchGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;reportRequests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;viewId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;dateRanges&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;startDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;endDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;samplingLevel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;LARGE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pageviews&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:sessions&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:users&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pagePath&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; 
      &lt;span class=&#34;nx&#34;&gt;orderBys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fieldName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pageviews&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;sortOrder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DESCENDING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;posts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SpreadsheetApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getActive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSheetByName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unshift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setMonth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここでは、ページのパスをキーとしてページビューとセッション、ユーザー数を集計するようにしています。&lt;br&gt;
並び順はpageviewsの数の降順です。&lt;/p&gt;
&lt;p&gt;必要なデータがあれば各自で編集することをおすすめいたします。&lt;/p&gt;
&lt;p&gt;そして、各項目のラベルを出力するために、&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unshift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;として、先頭行のデータにラベル行を追加しています。&lt;br&gt;
この部分も各自のデータに合うようにしてください。&lt;/p&gt;
&lt;p&gt;アナリティクスから取得したデータはスプレッドシートのシート名に紐付けるので、&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;の場合は、「month」というシートにデータを反映するということになります。&lt;/p&gt;
&lt;h4 id=&#34;サービスの読み込み&#34;&gt;サービスの読み込み&lt;/h4&gt;
&lt;p&gt;GASとアナリティクスを連携させるために、サービスを読み込みます。&lt;br&gt;
サービスのプラスマークをクリックして、「Analytics Reporting API」を選択、追加します。&lt;br&gt;
以上でサービスの読み込みは終わりです。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 91; 
			flex-basis: 218px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service.png&#34; data-size=&#34;980x1074&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service.png&#34;
			width=&#34;980&#34;
			height=&#34;1074&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service_hu7ab2f10bac6fb2f3280c3db360bbe4e5_248749_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/service_hu7ab2f10bac6fb2f3280c3db360bbe4e5_248749_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;それでは、実行してみましょう。&lt;/p&gt;
&lt;h4 id=&#34;実行&#34;&gt;実行&lt;/h4&gt;
&lt;p&gt;まずははスプレッドシートに「month」という名前のシートを作ります。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 628; 
			flex-basis: 1507px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet.png&#34; data-size=&#34;980x156&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet.png&#34;
			width=&#34;980&#34;
			height=&#34;156&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet_hu098d5f6469a907b1d8d02d13736689c1_32063_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet_hu098d5f6469a907b1d8d02d13736689c1_32063_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;br&gt;
シートができたら、再度コードエディターに戻ります。&lt;/p&gt;
&lt;p&gt;先程のデバッグの隣りにあるセレクト「test」を「setMonth」にして、実行を押します。&lt;br&gt;
承認を求められるので、「権限を確認」を押します。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 159; 
			flex-basis: 382px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1.png&#34; data-size=&#34;980x615&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1.png&#34;
			width=&#34;980&#34;
			height=&#34;615&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1_hu351b98adf0dfa0bfaa7f9f567f66552b_121313_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm1_hu351b98adf0dfa0bfaa7f9f567f66552b_121313_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;br&gt;
使用するアカウントをクリクで選んで、「詳細」をクリックして、「〜（安全ではないページ）に移動」をクリックします。&lt;br&gt;
すると、アクセスの許可を求められるので、「許可」を押します。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 140; 
			flex-basis: 336px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2.png&#34; data-size=&#34;980x699&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2.png&#34;
			width=&#34;980&#34;
			height=&#34;699&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2_hub35238c03fb887b06d8047fbcaec43b4_246816_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/perm2_hub35238c03fb887b06d8047fbcaec43b4_246816_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;実行ログに結果と実行完了が表示されるはずです。&lt;br&gt;
スプレッドシートを確認すると、アナリティクスのデータが反映されているはずです&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 70; 
			flex-basis: 170px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2.png&#34; data-size=&#34;980x1382&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2.png&#34;
			width=&#34;980&#34;
			height=&#34;1382&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2_hu76389b174b068c261adeed39fea2a17c_292266_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/sheet2_hu76389b174b068c261adeed39fea2a17c_292266_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;これで月間の人気記事の取得ができました。&lt;br&gt;
同じように日、年も設定しておきましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setDay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setYear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;まずがGASとアナリティクスの連携ができました。&lt;br&gt;
次回はこのデータを使ってHugoとアナリティクスを連携して、人気記事を表示できるようにしたいと思います。&lt;/p&gt;
&lt;p&gt;ここまでの全プログラムは下記になります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;month&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dayjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dayjs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ja&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subtract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;YYYY-MM-DD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ga:[GAビューID]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AnalyticsReporting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;batchGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;reportRequests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;viewId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;dateRanges&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;startDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;endDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt; 
      &lt;span class=&#34;nx&#34;&gt;samplingLevel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;LARGE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pageviews&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:sessions&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:users&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pagePath&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; 
      &lt;span class=&#34;nx&#34;&gt;orderBys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fieldName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ga:pageviews&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;sortOrder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DESCENDING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;posts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dimensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SpreadsheetApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getActive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSheetByName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unshift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setMonth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setDay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setYear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;getGoogleAnalytics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;書籍の紹介&#34;&gt;書籍の紹介&lt;/h2&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/1%E9%80%B1%E9%96%93%E3%81%A7Google%E3%82%A2%E3%83%8A%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B94%E3%81%AE%E5%9F%BA%E7%A4%8E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E6%9C%AC-1%E9%80%B1%E9%96%93%E3%81%A7%E5%9F%BA%E7%A4%8E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E7%AA%AA%E7%94%B0-%E6%9C%9B/dp/429501172X?_encoding=UTF8&amp;amp;qid=1641513597&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=1ee510fa1a17d9dbf251af13ddde94c3&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_il&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B09HGQH66R&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;1週間でGoogleアナリティクス4の基礎が学べる本 (1週間で基礎が学べるシリーズ)&lt;/h2&gt;
      &lt;p&gt;大幅に改訂されたWebマーケティングツール「Googleアナリティクス4」の基礎と活用法を最前線のWebマーケッターたちがやさしく解説!
本書は、WebマーケターのためにGoogleアナリティクス4（GA4・ジーエーフォー）の基礎知識を解説した入門書です。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/Google-Apps-Script%E5%AE%8C%E5%85%A8%E5%85%A5%E9%96%80-Google%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8Google-Workspace%E3%81%AE%E6%9C%80%E6%96%B0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%AC%E3%82%A4%E3%83%89/dp/4798063339?_encoding=UTF8&amp;amp;qid=1641513615&amp;amp;sr=8-8&amp;amp;linkCode=li3&amp;amp;tag=nlpqueens-22&amp;amp;linkId=e2278a36e1a2780b57906fc14ef78eb4&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_il&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4798063339&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;詳解! Google Apps Script完全入門[第2版] ~GoogleアプリケーションとGoogle Workspaceの最新プログラミングガイド&lt;/h2&gt;
      &lt;p&gt;今や私たちの仕事や生活に無くてはならない存在になったGoogleサービス。これらGoogleサービスの自動化や連携を行うことで、大幅な効率化が図れます。そして、それを可能にするのがGoogle Apps Script(GAS)です。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;</description>
        </item>
        <item>
        <title>シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし</title>
        <link>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</link>
        <pubDate>Thu, 06 Jan 2022 14:21:51 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし" /&gt;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようというものです。&lt;/p&gt;
&lt;p&gt;hugo コマンドでgithub.ioディレクトリに記事を投稿する場合、以下のコマンドをたたくと思います。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new posts/＜ディレクトリ＞/index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;または&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new posts/＜今日の日付＞.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;面倒なんですよね。。。&lt;/p&gt;
&lt;h2 id=&#34;ディレクトリの指定&#34;&gt;ディレクトリの指定&lt;/h2&gt;
&lt;p&gt;通常、記事毎にディレクトリを分けて、アクセスされるファイルをindex.mdにした場合は、以下の通りになりますよね。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new posts/＜今日の日付のディレクトリ＞/index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ナンバリングの効用&#34;&gt;ナンバリングの効用&lt;/h2&gt;
&lt;p&gt;ただ、同日に気分が乗ってきて、もう一つ記事を投稿しようとする場合は、日付の後ろに「-02」とか工夫する必要も出てきたりします。たとえば以下のように&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new posts/＜今日の日付のディレクトリ＞-＜ナンバリング02＞/index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;複数メンバーの投稿を区別する&#34;&gt;複数メンバーの投稿を区別する&lt;/h2&gt;
&lt;p&gt;複数のコラボレーターで投稿するgithub.ioの場合は、投稿者も区別したくなります。例えば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new posts/＜今日の日付のディレクトリ＞-＜作成者＞-＜ナンバリング02＞/index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ようするに、シェルスクリプトを使って、以下のコマンドを実行したい訳です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new posts/2022-01-06-01-suzuki/index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;起動パラメータ&#34;&gt;起動パラメータ&lt;/h2&gt;
&lt;p&gt;と、なると、パラメータは以下の三つとなりますね。&lt;br&gt;
$today 今日の日付&lt;br&gt;
$number 記事のナンバリング&lt;br&gt;
$author 作成者&lt;/p&gt;
&lt;h2 id=&#34;実行イメージ&#34;&gt;実行イメージ&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 作成者 suzuki の 01 番目の投稿記事&lt;/span&gt;
$ bash mkArticle.sh suzuki &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt;
$ hugo new posts/&lt;span class=&#34;nv&#34;&gt;$today&lt;/span&gt;-&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;-&lt;span class=&#34;nv&#34;&gt;$author&lt;/span&gt;/index.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;気をつけるところは&#34;&gt;気をつけるところは&lt;/h2&gt;
&lt;h3 id=&#34;パラメータを省略したときの挙動&#34;&gt;パラメータを省略したときの挙動&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ bash mkArticle.sh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行した場合に、「作成者が指定されていないからやりなおしてね」というのもちょっと寂しいものがあります。指定していなければ、都度、聞いてきて欲しいものです。そこで readコマンドで作成者を尋ねてくる感じにします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$author&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ユーザー名を半角で入力&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; author&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;同日ファイルの存在を確認&#34;&gt;同日ファイルの存在を確認&lt;/h3&gt;
&lt;p&gt;２．すでに同日に一つ目の記事を投稿してある。要するに生成しようとしているファイルがすでに存在する場合の挙動です。こちらは、ファイルが存在していれば、１を応用して、別のナンバリングを指定するように尋ねてくれると良さそうです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;content/posts/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$today&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$author&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/index.md&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ファイルが既に存在します。&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;別のナンバリングを指定して下さい 02とか03とか&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; number&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
      break&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ですので、ナンバリングの初期値は「01」としておいて、そのファイルが既に存在する場合は、あらためてユーザーにナンバリングを尋ねてくるという手法としました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;01&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;実行方法&#34;&gt;実行方法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ bash mkArticle.sh suzuki 01&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;前述のとおり作成者、ナンバリングは省略可能です。
$ bash mkArticle.sh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ソース全文&#34;&gt;ソース全文&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash:mkArticle.sh&#34; data-lang=&#34;bash:mkArticle.sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
: &lt;span class=&#34;s1&#34;&gt;&amp;#39;使い方
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;一つ目のパラメーターに作成者を指定します
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;二つ目のパラメータにナンバリングを指定します
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;一つ目 01(未指定の場合は01）
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;二つ目 02
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;（例)
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;$ bash mkArticle.sh suzuki 01;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#作成者 無指定であれば入力を促す&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;c1&#34;&gt;#今日の日付&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;today&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date &lt;span class=&#34;s2&#34;&gt;&amp;#34;+%Y-%m-%d%n&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#今日のインデクス 一つ目の投稿であれば01 二つ目の投稿であれば02&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; getParam&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;01&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$author&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ユーザー名を半角で入力&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; author&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;content/posts/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$today&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$author&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/index.md&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ファイルが既に存在します。&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;別のナンバリングを指定して下さい 02とか03とか&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; number&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
      break&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; execHugo&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hugoコマンドを実行します&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hugo new posts/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$today&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$author&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/index.md&amp;#34;&lt;/span&gt;
  hugo new posts/&lt;span class=&#34;nv&#34;&gt;$today&lt;/span&gt;-&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;-&lt;span class=&#34;nv&#34;&gt;$author&lt;/span&gt;/index.md

  &lt;span class=&#34;c1&#34;&gt;# 処理終了&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ファイルの編集は以下の通りです。&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;vim content/posts/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$today&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$author&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/index.md;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# パラメータの取得&lt;/span&gt;
getParam&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# hugoコマンドの実行&lt;/span&gt;
execHugo&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
exit&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;日頃、手間を掛けてコマンドを入力している場合は、シェルスクリプトを使って簡便にできる事に加え、さらにカスタマイズを加え、便利に記事投稿ができるとブログも気分もがぜん盛り上がりますね。&lt;/p&gt;
&lt;h2 id=&#34;書籍の紹介&#34;&gt;書籍の紹介&lt;/h2&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/gp/product/4774186945/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4774186945&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=8ef3ff961c569212e910cf3d6e37dcb6&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4774186945&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB&amp;#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20&lt;/h2&gt;
      &lt;p&gt;定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。
シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。
本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、
基本から丁寧に解説。
第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。
合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。
ますますパワーアップした改訂版をお届けします。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/gp/product/B07LBSWJNP/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B07LBSWJNP&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=fd3f2918d16f32f53feccf492263133a&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B07LBSWJNP&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;いちばんやさしいGit&amp;amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ&lt;/h2&gt;
      &lt;p&gt;実際のワークフローをイメージしながら
実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。
前半は、手元のパソコンでファイルを実際にバージョン管理しながら、
Gitの基本的な使い方を解説。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;
</description>
        </item>
        <item>
        <title>GitHub Pagesを使って無料でSSL付きのサイトを公開</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/</link>
        <pubDate>Tue, 28 Dec 2021 12:07:19 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg" alt="Featured image of post GitHub Pagesを使って無料でSSL付きのサイトを公開" /&gt;&lt;p&gt;デザイナーでもできる初めてのHugoの2回目になります。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-21/&#34; &gt;前回（デザイナーでもできる初めてのHugo #01）&lt;/a&gt;はHugoのインストールから公開の方法までを説明しました。&lt;br&gt;
今回は前回作成したページをGitHub Pagesを使って公開してみたいと思います。&lt;/p&gt;
&lt;h2 id=&#34;github-pages用の設定ファイルを作成&#34;&gt;GitHub Pages用の設定ファイルを作成&lt;/h2&gt;
&lt;p&gt;GitHub PagesはGitHubにあるコンテンツを静的ページを公開する機能です。&lt;br&gt;
SSLまでついているので、非常に便利です。&lt;/p&gt;
&lt;p&gt;公開用のファイルは&lt;code&gt;.github/workflows/gh-pages.yml&lt;/code&gt;というYAML形式のファイルになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml:.github/workflows/gh-pages.yml&#34; data-lang=&#34;yaml:.github/workflows/gh-pages.yml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Hugo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# schedule:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# - cron: &amp;#39;*/10 * * * *&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gh-pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Checkout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;persist-credentials&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;submodules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Fetch Hugo themes (true OR recursive)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Fetch all history for .GitInfo and .Lastmod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://github.com/marketplace/actions/github-pages-action&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Setup&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-hugo@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hugo-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;extended&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hugo --minify&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deploy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;github_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;publish_branch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gh-pages&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;はGitHubでのActionsに表示される名前になります。&lt;br&gt;
今回は公開用として&lt;strong&gt;gh-pages&lt;/strong&gt;というブランチにわけています。ここおらへんはお好みで設定して下さい。&lt;br&gt;
hugoでテーマを使っている場合は&lt;strong&gt;submodules: true&lt;/strong&gt;とする必要があります。&lt;br&gt;
また、Hugoで更新日をGitの日付と合わせたい場合は&lt;strong&gt;fetch-depth: 0&lt;/strong&gt;として、Gitの履歴を取得するようにしましょう。&lt;/p&gt;
&lt;h2 id=&#34;github-pagesの設定&#34;&gt;GitHub Pagesの設定&lt;/h2&gt;
&lt;p&gt;GitHub PagesのURLは&lt;code&gt;https://ユーザまたは組織名.github.io/リポジトリ名&lt;/code&gt;となります。&lt;br&gt;
GitHubでリポジトリを作成する際に「ユーザまたは組織名.github.io」とすると「https://ユーザまたは組織名.github.io」とすることができます。&lt;/p&gt;
&lt;p&gt;まずは先程のファイルを含めてサイト全体をGitにアップして、gh-pagesというブランチが作られるのを待ちましょう。&lt;br&gt;
その後に、setings &amp;gt; Pages にでGitHub Pagesの設定を行います。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 162; 
			flex-basis: 390px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg&#34; data-size=&#34;980x603&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings.jpg&#34;
			width=&#34;980&#34;
			height=&#34;603&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings_hub5e89b620d2afe5c10cf3894738f1203_124480_480x0_resize_q75_box.jpg 480w, https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings_hub5e89b620d2afe5c10cf3894738f1203_124480_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;GitHub Pagesの設定&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;GitHub Pagesの設定&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Your GitHub Pages site is currently being built from the gh-pages branch&lt;br&gt;
にあるBranchをgh-pagesに変更します。&lt;br&gt;
設定は以上です。&lt;/p&gt;
&lt;p&gt;Hugoの初期設定であれば&lt;code&gt;publishDir: public&lt;/code&gt;となっているので、GitHub Pagesではpublicがルートディレクトリとして公開されます。&lt;br&gt;
.gitignoreに「public」を除外するようにしておきましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-:.gitignore&#34; data-lang=&#34;:.gitignore&#34;&gt;/public
/resources
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最後に設定したURLにアクセスするとサイトが確認できるはずです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;GitHub Pagesを使えば、難しいサーバの設定などをすることなく、無料でSSL付きのサイトを公開することが可能です。&lt;br&gt;
いくつかの制限はありますが、すごく便利な機能なのでみなさんもぜひ使ってみてはいかがでしょうか。&lt;/p&gt;
&lt;p&gt;公開する際はパスワードなどの情報も一緒にアップしないようにしてください。&lt;/p&gt;
&lt;h2 id=&#34;書籍の紹介&#34;&gt;書籍の紹介&lt;/h2&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/gp/product/B07LBSWJNP/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B07LBSWJNP&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=fd3f2918d16f32f53feccf492263133a&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B07LBSWJNP&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;いちばんやさしいGit&amp;amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ&lt;/h2&gt;
      &lt;p&gt;実際のワークフローをイメージしながら
実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。
前半は、手元のパソコンでファイルを実際にバージョン管理しながら、
Gitの基本的な使い方を解説。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/Web%E5%88%B6%E4%BD%9C%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AEGitHub%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8-%E3%83%81%E3%83%BC%E3%83%A0%E3%81%AE%E5%8A%B9%E7%8E%87%E3%82%92%E6%9C%80%E5%A4%A7%E5%8C%96%E3%81%99%E3%82%8B%E5%85%B1%E5%90%8C%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB-%E5%A1%A9%E8%B0%B7-%E5%95%93/dp/4844337009?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;crid=3C1ZNYZB4N0C3&amp;amp;keywords=github&amp;amp;qid=1640665205&amp;amp;sprefix=github%2Caps%2C284&amp;amp;sr=8-8&amp;amp;linkCode=ll1&amp;amp;tag=nlpqueens-22&amp;amp;linkId=65876fc9d77e695d11f02ec867bc8c4a&amp;amp;language=ja_JP&amp;amp;ref_=as_li_ss_tl&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4844337009&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=nlpqueens-22&amp;amp;language=ja_JP&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;Web制作者のためのGitHubの教科書 チームの効率を最大化する共同開発ツール&lt;/h2&gt;
      &lt;p&gt;そろそろ「プルリ」しませんか?しくみを理解して使えば怖くない。リポジトリの作成から複数デザインの提示、「Pull Request」を使った分担作業まで、Webサイト制作を例に実践的なワークフローを身に付ける。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;</description>
        </item>
        <item>
        <title>e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/</link>
        <pubDate>Sun, 26 Dec 2021 21:54:39 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/anal.jpg" alt="Featured image of post e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？" /&gt;&lt;p&gt;私のe-Statでのデータマイニングの現在の目的は以下の通りです&lt;br&gt;
大量の政府公開データの中から&lt;br&gt;
①面白そうなデータをピックアップする&lt;br&gt;
②データをわかりやすくサマライズする&lt;br&gt;
　・列情報などを必要な項目に絞り込む&lt;br&gt;
　・前年度比５倍とか急激な変化があった場合をピックアップできるようにする&lt;br&gt;
最終的にはこれらを自動でできるようにしたいです。&lt;/p&gt;
&lt;p&gt;今回は、まず①面白そうなデータをピックアップすることを目的にe-Statを見てみましょう。&lt;/p&gt;
&lt;h2 id=&#34;ランキングページを見てみよう&#34;&gt;ランキングページを見てみよう&lt;/h2&gt;
&lt;p&gt;e-Statのトップページ（https://www.e-stat.go.jp/）の画面の下の方にランキングという欄があります。&lt;br&gt;
そのランキングの現在(2021/12/26)３位が「アイスクリーム」なんです。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 149; 
			flex-basis: 358px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking.png&#34; data-size=&#34;1434x960&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking.png&#34;
			width=&#34;1434&#34;
			height=&#34;960&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking_hu5dadec452d8bd9bb4d7577d888e43b5e_127374_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/ranking_hu5dadec452d8bd9bb4d7577d888e43b5e_127374_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;ランキング&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;ランキング&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;アイスクリームが含まれるのはどんなデータか&#34;&gt;アイスクリームが含まれるのはどんなデータか&lt;/h2&gt;
&lt;p&gt;「アイスクリーム」は柔らかめのキーワードなので面白いデータの予感がします。&lt;br&gt;
「アイスクリーム」が含まれるデータはどんなデータなんでしょうか？&lt;br&gt;
ちょっと見てみましょう。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.e-stat.go.jp/stat-search?page=1&amp;amp;query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0&amp;amp;layout=dataset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.e-stat.go.jp/stat-search?page=1&amp;query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0&amp;layout=dataset&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 143; 
			flex-basis: 343px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist.png&#34; data-size=&#34;2144x1498&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist.png&#34;
			width=&#34;2144&#34;
			height=&#34;1498&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist_hue7cc00b95248977b49d9c465262cbdcd_468131_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/iceweblist_hue7cc00b95248977b49d9c465262cbdcd_468131_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;アイスクリーム&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;アイスクリーム&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;「アイスクリーム」が含まれるデータは7640件あるみたいです。&lt;br&gt;
ちょっと多いですね。。。&lt;br&gt;
検索条件なのですが、提供分類、表題を検索　データベース、ファイル内を検索にチェックがついています。&lt;br&gt;
「検索のしかた」をみてみるとキーワードのOR検索やAND検索もできそうです。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 134; 
			flex-basis: 323px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod.png&#34; data-size=&#34;2110x1566&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod.png&#34;
			width=&#34;2110&#34;
			height=&#34;1566&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod_hu93293dc2bfe7d1c29535017dd6b31a46_524310_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icewebsearchmethod_hu93293dc2bfe7d1c29535017dd6b31a46_524310_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;検索のしかた&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;検索のしかた&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ちなみに検索キーワードでの絞り込みはAPI(統計表情報取得)でももちろんできます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl &amp;quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?appId=xxxxxxxxxx&amp;amp;searchWord=アイスクリーム&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;アイスクリームだと数が多すぎるので試しに「ガリガリ君」で検索してみましたが、0件でした。「ハーゲンダッツ」で検索したところ22件引っかかってきました。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 168; 
			flex-basis: 405px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist.png&#34; data-size=&#34;2048x1212&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist.png&#34;
			width=&#34;2048&#34;
			height=&#34;1212&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist_hu2fc48b6ec53a6bb1ca177d6aca1d85a9_370194_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/hagenlist_hu2fc48b6ec53a6bb1ca177d6aca1d85a9_370194_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;ハーゲンダッツ&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;ハーゲンダッツ&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;「ハーゲンダッツ」どこに出てくるのかなと思ってAPIを一通り叩いてみたのですがAPIの実行結果からは「ハーゲンダッツ」は見つけられませんでした。&lt;br&gt;
エクセル表示を見てみたところ、「銘柄」という項目に「バニラアイスクリーム，カップ入り（110mL入り），「ハーゲンダッツ バニラ」」とありました。&lt;br&gt;
どうも全国のアイスクリームの価格を「ハーゲンダッツ　バニラ」を基準に算出しているみたいです。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 188; 
			flex-basis: 453px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel.png&#34; data-size=&#34;1360x720&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel.png&#34;
			width=&#34;1360&#34;
			height=&#34;720&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel_hue69ec4e6af4f57f83b84afa986f8b0bc_139125_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1excel_hue69ec4e6af4f57f83b84afa986f8b0bc_139125_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;excel&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;excel&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ちなみに、2020年だと１番安いのが長野市の221円で１番高いのが那覇市の300円でした。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 199; 
			flex-basis: 478px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst.png&#34; data-size=&#34;1990x998&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst.png&#34;
			width=&#34;1990&#34;
			height=&#34;998&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst_hue322c7afb8a1654734b465c6222623d4_212046_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1rst_hue322c7afb8a1654734b465c6222623d4_212046_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;統計表&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;統計表&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;単にハーゲンダッツの価格ってだけだと少しパンチ力弱いかもしれませんね。。。&lt;/p&gt;
&lt;p&gt;個人的には明治のスーパーカップが１位でジャンボモナカが２位でとかアイスクリーム売れ筋ランキングとかの方が楽しいのですが、政府はそこまで調べてくれないですよね。&lt;/p&gt;
&lt;h2 id=&#34;小売統計調査とは&#34;&gt;小売統計調査とは&lt;/h2&gt;
&lt;p&gt;小売物価統計調査はお米の価格から葬儀代まで約８００の小売価格を調査したデータ&lt;br&gt;
調査結果は、年金等の給付見直しの際の基礎資料や、公共料金の上限値を決める際の資料として、幅広く利用されているそうです。&lt;br&gt;
アイスクリームは約８００ある中の項目の一つです。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 178; 
			flex-basis: 429px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column.png&#34; data-size=&#34;2064x1154&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column.png&#34;
			width=&#34;2064&#34;
			height=&#34;1154&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column_hud83e50fd9037a6518d3a30b034ab02f7_1950832_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/icedetail1column_hud83e50fd9037a6518d3a30b034ab02f7_1950832_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;銘柄&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;銘柄&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;小売物価統計調査をピックアップするとしたら、ここ数年で値段が大きく変化しているものや地域間の差が特に大きいものとかですかね。&lt;/p&gt;
&lt;p&gt;「小売物価統計」でgoogle検索して面白そうな記事を見てみると&lt;br&gt;
「今年のX’マスケーキは小さくなるか」という記事がありました。&lt;/p&gt;
&lt;p&gt;ケーキにもよく使われる小麦や油量種子はとりわけ高騰が目立つ&lt;br&gt;
→&lt;br&gt;
小売物価統計調査によると、東京都区部の小売価格で、今年11月の1kgあたりの小麦価格は1年前より約20円上昇した。食用油に至っては1kgあたり約60円と大幅な値上がりで、価格が比較的安定している食品の代名詞ともなってきた鶏卵でさえ、1パックあたり約12円上昇した。&lt;br&gt;
→&lt;br&gt;
クリスマスイブにケーキを買って帰る人も多いだろうが、今年は例年と比べて値段がほとんど同じなのにサイズが小さくなっていても不思議ではない。&lt;/p&gt;
&lt;p&gt;こんな感じのものは自動的にピックアップできると理想的なんですけどね。&lt;/p&gt;
&lt;h2 id=&#34;今日のところのまとめ&#34;&gt;今日のところのまとめ&lt;/h2&gt;
&lt;p&gt;自動的にピックアップするとしたら&lt;br&gt;
・柔らかめのキーワード&lt;br&gt;
・ここ数年間で値が急激に変化してるもの&lt;br&gt;
・地域間の格差が大きいもの&lt;br&gt;
ですかね。データを見ていって判定項目を増やしていきたいと思います。&lt;/p&gt;
&lt;p&gt;その他、アイスクリームでの検索結果には「家計調査」というのもありました。&lt;br&gt;
家計の４半期での支出額の平均を出したものなのですが、アイスクリームの支出は当然夏が冬の倍くらい多い感じになってます。&lt;/p&gt;
&lt;p&gt;アイスクリームは当たり前ですが、その他季節によって大きく支出が違うものって何なのかは少し興味がありますね。&lt;br&gt;
毎月や四半期ごとに値があるものについては、期間によって差が大きいものはピックアップしても良いかもしれませんね。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 116; 
			flex-basis: 279px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei.png&#34; data-size=&#34;1586x1360&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei.png&#34;
			width=&#34;1586&#34;
			height=&#34;1360&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei_hu134f38bd5ad256f8c70391b3da64abab_312038_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/kakei_hu134f38bd5ad256f8c70391b3da64abab_312038_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;家計調査&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;家計調査&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>e-Statのデータの見方</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/</link>
        <pubDate>Sat, 25 Dec 2021 21:55:55 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/anal.jpg" alt="Featured image of post e-Statのデータの見方" /&gt;&lt;p&gt;今回は前回登場したデータの内容を調べてみましょう。&lt;br&gt;
「統計表情報取得」（リスト取得）APIで取得したデータをもとにe-Statのサイト（https://www.e-stat.go.jp/）からデータを見つけてみましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;LIST_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
           &amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
           &amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
           &amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
           &amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
           &amp;lt;CYCLE&amp;gt;四半期&amp;lt;/CYCLE&amp;gt;
           &amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
           &amp;lt;OPEN_DATE&amp;gt;2020-04-01&amp;lt;/OPEN_DATE&amp;gt;
           &amp;lt;SMALL_AREA&amp;gt;0&amp;lt;/SMALL_AREA&amp;gt;
       &amp;lt;/LIST_INF&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;データを検索してみよう&#34;&gt;データを検索してみよう&lt;/h2&gt;
&lt;p&gt;IDで検索できるのが一番良いのですが、キーワード検索のテキストフィールドに入力して検索してもダメでした。&lt;/p&gt;
&lt;p&gt;しょうが無いので、TITLE全文「形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）」で検索しましたがでダメでした。&lt;/p&gt;
&lt;p&gt;少し削って、「形態別国内家計最終消費支出 年度デフレータ—　前年度比」  だと４０５件。&lt;br&gt;
多すぎるので、SURVEY_DATE、OPEN_DATEを使って調査年、調査月、公開年月で絞り込むと２件に絞り込めました。&lt;br&gt;
あとはSTATISTICS_NAMEで特定できました。&lt;/p&gt;
&lt;h2 id=&#34;詳細ページに行ってみましょう&#34;&gt;詳細ページに行ってみましょう&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.e-stat.go.jp/stat-search/database?page=1&amp;amp;query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20&amp;amp;layout=dataset&amp;amp;year=20100&amp;amp;month=23070900&amp;amp;open_date=202004&amp;amp;statdisp_id=0003384123&amp;amp;metadata=1&amp;amp;data=1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.e-stat.go.jp/stat-search/database?page=1&amp;query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20&amp;layout=dataset&amp;year=20100&amp;month=23070900&amp;open_date=202004&amp;statdisp_id=0003384123&amp;metadata=1&amp;data=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上段が「統計表情報取得」の内容&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 147; 
			flex-basis: 355px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list.png&#34; data-size=&#34;1986x1342&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list.png&#34;
			width=&#34;1986&#34;
			height=&#34;1342&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list_hu5d314213e6b3192530f77b816005c824_381643_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/list_hu5d314213e6b3192530f77b816005c824_381643_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;統計表情報&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;統計表情報&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;br&gt;
下段が「メタ情報取得」の内容見たいです。&lt;br&gt;
&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 155; 
			flex-basis: 373px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta.png&#34; data-size=&#34;1988x1278&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta.png&#34;
			width=&#34;1988&#34;
			height=&#34;1278&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta_hu31ce838285791fd60ddd4f121b3decf8_248311_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/meta_hu31ce838285791fd60ddd4f121b3decf8_248311_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;メタ情報取得&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;メタ情報取得&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;DBをクリックするとグラフが表示されました。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 240; 
			flex-basis: 576px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png&#34; data-size=&#34;1892x788&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png&#34;
			width=&#34;1892&#34;
			height=&#34;788&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei_hu124fe87f1847cfac0453afe0f1b0ea67_189919_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei_hu124fe87f1847cfac0453afe0f1b0ea67_189919_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;グラフ&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;グラフ&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;行情報が「1981年度、1982年度、1983年度。。。」&lt;br&gt;
列情報が「家計最終消費支出（再掲）、家計最終消費支出（再掲）_居住者家計の海外での直接購入、。。。」&lt;/p&gt;
&lt;p&gt;なんと、APIクリックすると丁寧にクエリを表示してくれました(API仕様書とか見る必要ないですね)。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 164; 
			flex-basis: 393px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api.png&#34; data-size=&#34;1962x1196&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api.png&#34;
			width=&#34;1962&#34;
			height=&#34;1196&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api_hu76bd22dd2d5fa36b989bf3e0c65e8f8d_349632_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/api_hu76bd22dd2d5fa36b989bf3e0c65e8f8d_349632_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;API&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;API&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;br&gt;
フォーマットもXML,JSON,CSVが選べますね。&lt;br&gt;
私はCSVの方が扱いやすいのでこれからはCSVでダウンロードすることにします。&lt;/p&gt;
&lt;p&gt;appIdがカラに空になっているので追加してcurlで叩くだけでいいですね。至れり尽くりです。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl &amp;quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;amp;metaGetFlg=Y&amp;amp;cntGetFlg=N&amp;amp;explanationGetFlg=Y&amp;amp;annotationGetFlg=Y&amp;amp;sectionHeaderFlg=1&amp;amp;replaceSpChars=0&amp;quot;
    
&amp;quot;tab_code&amp;quot;,&amp;quot;表章項目&amp;quot;,&amp;quot;cat01_code&amp;quot;,&amp;quot;形態別国内家計最終消費支出&amp;quot;,&amp;quot;time_code&amp;quot;,&amp;quot;時間軸（年度）&amp;quot;,&amp;quot;unit&amp;quot;,&amp;quot;value&amp;quot;,&amp;quot;annotation&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;3.8&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1982100000&amp;quot;,&amp;quot;1982年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;2.3&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1983100000&amp;quot;,&amp;quot;1983年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;&amp;quot;
.
.
.
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;17.6&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1982100000&amp;quot;,&amp;quot;1982年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;15.6&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot;,&amp;quot;1983100000&amp;quot;,&amp;quot;1983年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;-1.8&amp;quot;,&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;データの見方は&#34;&gt;データの見方は？&lt;/h2&gt;
&lt;p&gt;DBで表示させた「統計表表示」と見比べてみると&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 240; 
			flex-basis: 576px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png&#34; data-size=&#34;1892x788&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei.png&#34;
			width=&#34;1892&#34;
			height=&#34;788&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei_hu124fe87f1847cfac0453afe0f1b0ea67_189919_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/tokei_hu124fe87f1847cfac0453afe0f1b0ea67_189919_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;グラフ&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;グラフ&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;17&amp;quot;,&amp;quot;前年度比&amp;quot;,&amp;quot;11&amp;quot;,&amp;quot;家計最終消費支出（再掲）&amp;quot;,&amp;quot;1981100000&amp;quot;,&amp;quot;1981年度&amp;quot;,&amp;quot;％&amp;quot;,&amp;quot;3.8&amp;quot;,&amp;quot;&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;が１行目「1981年度」の１列目「家計最終消費支出（再掲）」に該当するみたいですね。&lt;br&gt;
１セル、１行のデータ構造みたいですね。&lt;br&gt;
１列目の情報がしばらく続いて、全行終わると次は２列目の情報みたいな構成だということがわかりました。&lt;/p&gt;
&lt;h2 id=&#34;国民経済計算って何&#34;&gt;国民経済計算って何&lt;/h2&gt;
&lt;p&gt;このデータは国民経済計算を算出したものということですが、国民経済計算ってなんでしょう？&lt;/p&gt;
&lt;p&gt;内閣府のサイトによると&lt;br&gt;
国民経済計算は「四半期別ＧＤＰ速報」と「国民経済計算年次推計」の２つからなっている。「四半期別ＧＤＰ速報」は速報性を重視し、ＧＤＰをはじめとする支出側系列等を、年に８回四半期別に作成・公表している。「国民経済計算年次推計」は、生産・分配・支出・資本蓄積といったフロー面や、資産・負債といったストック面も含めて、年に１回作成・公表している。&lt;/p&gt;
&lt;p&gt;GDPを算出するための何かみたいですね。&lt;/p&gt;
&lt;p&gt;googleの検索結果を見てみると、国や地方自治体のサイトや経済学の解説サイトがメインで、たまに今年のGDPはどうだったという記事でちょっと書かれてたりしました。&lt;/p&gt;
&lt;p&gt;記事の中でちょっと気になったのは、&lt;br&gt;
日本では新型コロナウイルスの影響で個人消費が落ち込んでおり、貯蓄が増加傾向にあります。内閣府の国民経済計算によると、2020年に消費されずに貯蓄に回ったお金は、一律10万円の特別定額給付金の影響もあり、35.8兆円に達しました。この額は前年の5倍の水準です。&lt;br&gt;
所得に対する貯蓄の割合を示す家計貯蓄率は13.1%と19年度（3.7%）から大きく上昇した。&lt;/p&gt;
&lt;p&gt;前年度から比較して急激に大きくなったという部分(5倍も！)。こういうのは是非ピックアップしたいと思いました。&lt;/p&gt;
&lt;h2 id=&#34;e-statでのマイニングの目的は&#34;&gt;e-Statでのマイニングの目的は&lt;/h2&gt;
&lt;p&gt;とわ言え「国民経済計算」全般的に堅い感じですね。。。。&lt;/p&gt;
&lt;p&gt;私のe-Statマイニングの目的は大量の政府公開データに埋もれている中から人の興味を引きそうな面白そうなコンテンツをピックアップしてわかりやすくサマリーを表示することなのです。&lt;/p&gt;
&lt;p&gt;キーワードランキングを見てみると「アイスクリーム」「身長・体重の平均値」みたいな面白そうな柔らかめのコンテンツもあるんです。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 149; 
			flex-basis: 358px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking.png&#34; data-size=&#34;1434x960&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking.png&#34;
			width=&#34;1434&#34;
			height=&#34;960&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking_hu5dadec452d8bd9bb4d7577d888e43b5e_127374_480x0_resize_box_3.png 480w, https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/ranking_hu5dadec452d8bd9bb4d7577d888e43b5e_127374_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;ランキング&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;ランキング&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;次回から、&lt;br&gt;
・e-Statの森の中から面白いコンテンツを見つけよう&lt;br&gt;
・うまくサマライズして表示しよう&lt;br&gt;
　　興味深い列情報に絞りたい&lt;br&gt;
　　前年度から５倍とか急激に変化した部分をピックアップして伝えたい&lt;br&gt;
という視点からe-Statを調査していきたいと思います。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>「UNIXという考え方―その設計思想と哲学」　メモ</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</link>
        <pubDate>Sat, 25 Dec 2021 09:25:50 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 「UNIXという考え方―その設計思想と哲学」　メモ" /&gt;&lt;h2 id=&#34;書籍の紹介&#34;&gt;書籍の紹介&lt;/h2&gt;
&lt;aside class=&#34;amazon-box&#34;&gt;
  &lt;a href=&#34;https://www.amazon.co.jp/gp/product/4274064069/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4274064069&amp;amp;linkCode=as2&amp;amp;tag=nlpqueens-22&amp;amp;linkId=d045d50d407b75e179a1c786ee85e152&#34; target=&#34;_blank&#34;&gt;
    &lt;div class=&#34;columns amazon-image&#34;&gt;
      &lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4274064069&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=nlpqueens-22&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;columns amazon-info&#34;&gt;
      &lt;h2 class=&#34;amazon-name&#34;&gt;UNIXという考え方―その設計思想と哲学&lt;/h2&gt;
      &lt;p&gt;UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。&lt;/p&gt;
      &lt;span class=&#34;link&#34;&gt;Amazonで詳細を見る&lt;/span&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;small&gt;Amazon.co.jpアソシエイトを使用&lt;/small&gt;
&lt;/aside&gt;
&lt;h2 id=&#34;あらすじ&#34;&gt;あらすじ&lt;/h2&gt;
&lt;p&gt;UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。&lt;/p&gt;
&lt;p&gt;そもそもUNIXはMulticsという巨大なOSの開発から生まれたものだ。あまりに巨大なMulticsはその複雑さゆえに開発は遅々として進まず、その反省からケン・トンプソンが作ったのがUNIXの初めとされる。その後デニス・リッチーら多数の開発者が携わり、UNIXは発展した。本書はこのUNIXに込められた「思想と哲学」を抽出し、数々のエピソードとともにUNIXの特徴を浮き彫りにしていく。&lt;/p&gt;
&lt;p&gt;たとえば本書で述べられているUNIXの発想のひとつとして「過度の対話式インタフェースを避ける」というものがある。UNIXのシステムは初心者には「不親切」なつくり、つまり親切な対話式のインタフェースはほとんどなく、ユーザーがコマンドを実行しようとするときはオプションをつける形をとっている。この形式はオプションをいちいち覚えねばならず、初心者に決してやさしくない。しかしこれはプログラムを小さく単純なものにし、他のプログラムとの結合性を高くする。そして結果としてUNIXのスケーラビリティと移植性の高さを支えることになっているのだ。このような形式で本書では9つの定理と10の小定理を掲げ、UNIXが何を重視し、何を犠牲にしてきたのかを明快に解説している。&lt;/p&gt;
&lt;h2 id=&#34;このページはなんだ&#34;&gt;このページはなんだ？&lt;/h2&gt;
&lt;p&gt;　という前置きはよいとして、心に余裕があれば、ぜひ本書を読んでいただきたい。全てのLinux初心者必携の書だ。そして、このページは何かというと、この本のエッセンスを抜粋した「メモ」という位置づけとしてとらえて欲しい。&lt;/p&gt;
&lt;p&gt;　一度、本を読んで頂ければ、このメモを見ればいつでもほんの情景がフィードバックされるはずだ。とうぜん、本を読まずしてこのメモを見てもいまいちちんぷんかんぷんかとは思う。&lt;/p&gt;
&lt;p&gt;　ただ、エッセンスからでも読み取れることも多い。&lt;/p&gt;
&lt;p&gt;　解決方法は皆さんにお任せする。&lt;/p&gt;
&lt;h2 id=&#34;１小さいものは美しい&#34;&gt;■１．小さいものは美しい&lt;/h2&gt;
&lt;h3 id=&#34;抜粋&#34;&gt;抜粋&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;　　小さなプログラムはわかりやすい
　　小さなプログラムは保守しやすい
　　小さなプログラムはシステムリソースに易しい
　　小さなプログラムは他のツールと組み合わせやすい

　　「伝統的なプログラマは、巨大なアメリカンプログラムによって、
　　　　世界中の全ての問題を一つのプログラムで解決しようとする。」
　　「プログラムの９０％はクズである。
　　　　ただしあらゆるものの９０％はクズである。」

　　パラメータが一行に収まらない
　　メソッドが画面に収まらない
　　コメントを読まないと何をやっているのか思い出せない
　　lsでモジュール名が多すぎて画面の端から消えていってしまう
　　まだ開発中なのにエラーメッセージの意味を思い出せない
　　整理するためにソースコードを印刷している自分に気がついた
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;エッセンス&#34;&gt;エッセンス&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　「スモールイズビューティフル」
　　「伝統的なプログラマは、巨大なアメリカンプログラムによって、
　　　　世界中の全ての問題を一つのプログラムで解決しようとする。」
　　「プログラムの９０％はクズである。
　　　　ただしあらゆるものの９０％はクズである。」
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;２一つのプログラムには一つの事をうまくやらせる&#34;&gt;■２．一つのプログラムには一つの事をうまくやらせる&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-1&#34;&gt;抜粋&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-　　a)ユーザーとの対話が必要か。パラメータではだめか&#34; data-lang=&#34;　　a)ユーザーとの対話が必要か。パラメータではだめか&#34;&gt;　　b)入力データは特殊フォーマットが必要か。フォーマット変換プログラムがすでにシステム上にないか。
　　c)出力データは特殊フォーマットが必要か。通常のASCIIファイルではだめか。
　　d)新しいプログラムを書かずとも似たような機能を持つ他のプログラムがあるのではないか。

　　「一つの事をうまくやるようにプログラムを作れないのであれば、
　　　　おそらく問題をまだ完全に理解していない。」
　　「しのびよる多機能主義。
　　　　プログラマはいつだってプログラムを遅くする方法を見つける。」

　　一つの事をうまくやるようにアプリケーションを書けば、それは必然的に小さなプログラムになる。
　　小さなプログラムは単一機能になる傾向があり、単一機能のプログラムは小さくなる傾向がある。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;エッセンス-1&#34;&gt;エッセンス&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　「わかることは分けること」
　　「UNIXユーザーは、自分が何をしているのかをわかっている。
　　　　何をしているのかわからないのなら、ここにいるべきではない」
　　「一つの事をうまくやるようにプログラムを作れないのであれば、
　　　　おそらく問題をまだ完全に理解していない。」
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;３出来るだけ早く試作する&#34;&gt;■３．出来るだけ早く試作する&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-2&#34;&gt;抜粋&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　「試作によって学ぶ。早い試作はリスクを減らす。
　　　「正しく」やっている時間などない」
　　「なにができるか」
　　　　むしろ重要な事は、「なにができないか」を知る事だ。」

　　三つのシステム
　　１．第一のシステム
　　　第一のシステムは正しくやっている時間などない。
　　　第一のシステムは追い詰められた人間が作る。
　　　第一のシステムのコンセプトは人々の想像力を刺激する。
　　　第一のシステムは一人かせいぜい数人からなる小さなグループで作られる。
　　　第一のシステムは高い情熱によって推進され開発は急速に進む。
　　　第一のシステムは実に性能がよい。

　　２．第二のシステム
　　　第二のシステムは第一のシステムで証明されたアイデアを継承する。
　　　第二のシステムは委員会が設計する。
　　　第二のシステムは委員会によりものごとを全て公開の場で自分自身の正当化のために議論を進める。
　　　第二のシステムは第一のシステムの成功に便乗し分け前にあずかろうとする自称専門家で作られる。
　　　第二のシステムは自称専門家によりリポジトリ、進捗管理ツールが導入され計画は遅延する。
　　　第二のシステムは自称専門家のプログラムにおきかえられ贅肉がつき像のようにゆっくり動く。
　　　第二のシステムは「最初の設計のひどい欠点を見違えるように改善」され多機能となり無知が使う。
　　　第二のシステムは三つのシステムの中で最悪のシステムである。

　　３．第三のシステム
　　　第三のシステムはこれまでのシステムへの反抗から生まれる。
　　　第三のシステムの名前が変わり、オリジナルのアイデアはもはや常識となる。
　　　第三のシステムは第一と第二のシステムの最良の特徴を組み合わせる。
　　　第三のシステムは設計者にとってようやく「正しく」やる事が出来る。
　　　第三のシステムはユーザーが実際に使用する機能しか含まれない。
　　　第三のシステムはディスク、メモリ、CPUサイクルなど最適なバランスが実現されている。
　　　第三のシステムは提供される性能レベルも良くバランスがとれている。

　　第一のシステムとして「試作」を１ナノ秒でも早く作り、
　　　第一のシステムと第二のシステムのサイクルを反復と協調し、
　　　　第三のシステムに向かって協力しながら進んでいく。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;エッセンス-2&#34;&gt;エッセンス&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　「反復と協調」
　　「試作によって学ぶ。早い試作はリスクを減らす。
　　　「正しく」やっている時間などない」
　　「なにができるか」
　　　　むしろ重要な事は、「なにができないか」を知る事だ。」
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;４効率より移植性&#34;&gt;■４．効率より移植性&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-3&#34;&gt;抜粋&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　UNIXにおいてそれはシェルスクリプトしかない。
　　次のハードウェアはもっと速く走る。だからプログラムを速くするという誘惑に負けない。
　　わずかな速度を求めてCで書き直さない。それは時間の無駄だ。

　　シェルスクリプトをあれこれいじる余裕が一瞬でも生じればほとんどのプログラマは
          a) 新しい機能をいくつか付け加えようとする
　　　b) スクリプトそのものを洗練し、実行速度を高めようとする
　　　c) その一部、または大部分をCで書き直してパフォーマンスの向上を図ろうとする。

　　「最も効率の良い方法は、
　　　　ほとんどの場合「移植性」に欠ける。」
　　「移植か死か。優れたソフトウェアは移植され成長し、
　　　　それ以外は取り残され捨てられる。」

　　DQ1カートリッジ(64kb)用のコード
　　　自分のプログラマ人生で最も効率の良い、そして移植の難しいコード」を書いた。
　　　命令をデータとして扱い、データを命令として扱った。
　　　走査線が画面の右端から左端に引き返すまでの間を狙って命令を実行した。
　　　メモリ節約のためありとあらゆる技を駆使した。
　　　こうしてできあがったコードは芸術品と言えるほど見事なものだった。
　　　フォルクスワーゲンのビートルに２０人ほど詰め込むようなものだった。
　　　そして保守担当者にとっては究極の悪夢でもあった。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;エッセンス-3&#34;&gt;エッセンス&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;　bashとawkとsed
　　「最も効率の良い方法は、
　　　　ほとんどの場合「移植性」に欠ける。」
　　「移植か死か。優れたソフトウェアは移植され成長し、
　　　　それ以外は取り残され捨てられる。」
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;５出力結果はasciiフラットファイルに保存する&#34;&gt;■５．出力結果はASCIIフラットファイルに保存する&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-4&#34;&gt;抜粋&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　「動かせないデータは死んだデータだ。」

　　出力結果はASCIIフラットファイルに保存する。
　　RDBを使わない。
　　中間ファイルをはき出さない。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;エッセンス-4&#34;&gt;エッセンス&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　中間ファイルは作らない　RDBは使わない
　　「動かせないデータは死んだデータだ。」
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;６ソフトウェアを梃子として使う&#34;&gt;■６．ソフトウェアを梃子として使う　&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-5&#34;&gt;抜粋&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　梃子の支点をいかに自分のほうに近づける事が出来るか
　　独自技術症候群を避け、すでにあるものにクリエイティブな付加価値をつける
　　独自技術症候群は創造性を伸ばさない。

　　「良いプログラマはよいコードを書く。
　　　　偉大なプログラマは良いコードを借りてくる。」
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;エッセンス-5&#34;&gt;エッセンス&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　「良いプログラマはよいコードを書く。
　　　　偉大なプログラマは良いコードを借りてくる。」
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;７シェルスクリプトによって梃子の効果と移植性を高めるパイプ&#34;&gt;■７．シェルスクリプトによって梃子の効果と移植性を高める　パイプ&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-6&#34;&gt;抜粋&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　シェルスクリプトには恐ろしいほどの梃子の効果がある
　　シェルスクリプトは梃子の降下で時間も節約する
　　シェルスクリプトはCより移植性が高い

　　「熟練プログラマはシェルスクリプトを熱心に使う。
　　　　あなたもまたそうするべきだ。」
　　「UNIXの源流は高水準の抽象化モデル「シェルスクリプト」であり、
　　　　それは今も普遍である。」
　　「私は人生で二度しか奇跡を見た事がない。
　　　　一つは核融合、もう一つは複利だ
　　　少量のものを繰り返し掛け合わせていく事で、
　　　　やがて奇跡的な規模に達する。」アインシュタイン

　　シェルスクリプト一行はおよそ１万倍の複利を生む
```bash
　　echo who | awk &#39;{ print $1 ; }&#39; | sort | uniq | sed -e &amp;quot;s/  /,  /g&amp;quot; ;

　　echo   177
　　who    755
　　awk   3411
　　sort  2614
　　uniq    302
　　sed   2093
-------------------------
　　　　  9.353
　　処理をパイプでつなぎ処理全体を一行で完結させる。
　　「ひとつのことをうまくやる」の良い事例だ。
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;　　&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; sh_func_getTitle&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
　　  &lt;span class=&#34;nv&#34;&gt;TITLE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;URLGETOPT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;　　    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
　　      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;title=&amp;#34;&lt;/span&gt; &amp;gt; /dev/null&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
　　        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;　　          sed -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/^.*title=\x27//g&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;　　              -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/\x27.*&lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;//g&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;　　              -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/\r//g&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;　　              -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;　　              -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/^[●○■□△▽]//g&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
　　      &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
　　    &lt;span class=&#34;k&#34;&gt;done)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
　　&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;エッセンス-6&#34;&gt;エッセンス&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　「私は人生で二度しか奇跡を見た事がない。
　　　　一つは核融合、もう一つは複利だ
　　　　　少量のものを繰り返し掛け合わせていく事で、
　　　　　　やがて奇跡的な規模に達する。」
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;８全てのプログラムをフィルタとして設計する&#34;&gt;■８．全てのプログラムをフィルタとして設計する&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-7&#34;&gt;抜粋&lt;/h3&gt;
&lt;p&gt;　　メソッド間の入力をstdin、出力はstdoutを使用する&lt;br&gt;
　　オンメモリでコマンドフィルタとして稼働する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;　&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; trim&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
　　&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -p /dev/stdin &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
 　   cat - &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
　　&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
　　&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/^ *//g&amp;#39;&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/ *$//g&amp;#39;&lt;/span&gt;
　&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

　　実行結果
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;      ほげ      &amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; trim &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      ほげ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;　　以下でも良い。　　&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;　&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; trim&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
　　awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ print $1; }&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/^ *//g&amp;#39;&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/ *$//g&amp;#39;&lt;/span&gt;  &amp;lt;/dev/stdin
　&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

　　実行結果
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;      ほげ      &amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; trim &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      ほげ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;エッセンス-7&#34;&gt;エッセンス&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;　　　メソッド間の入力をstdin、出力はstdoutを使用する
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;９並行して考える&#34;&gt;■９．並行して考える&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-8&#34;&gt;抜粋&lt;/h3&gt;
&lt;p&gt;　　並列処理が可能なメソッドを積極的に書く&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; 　　 メソッドの並列処理
 　　  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#!/bin/bash&lt;/span&gt;
 　　  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; cmd&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; 
 　　  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
 　　  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
 　　  &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; sh_xargs&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
 　　  &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; 　&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; -f cmd
 　　  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; 　yes &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -1000 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -n1 -P4 -I % bash -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;cmd %&amp;#34;&lt;/span&gt;
 　　  &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
 　　  &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; sh_xargs &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;エッセンス-8&#34;&gt;エッセンス&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　　並列処理が可能なメソッドを積極的に書く
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;１０木を守る&#34;&gt;■１０．木を守る&lt;/h2&gt;
&lt;h3 id=&#34;抜粋-9&#34;&gt;抜粋&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　UNIXユーザーは紙のドキュメントを忌み嫌う。不要なドキュメントを印刷して整理する事はしない。
　　ソースコードが実体であり、高水準のドキュメントとなるようプログラムする。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;エッセンス-9&#34;&gt;エッセンス&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　　　UNIXはドキュメントを忌み嫌う
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>知識ゼロからのe-Statマイニング</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/</link>
        <pubDate>Fri, 24 Dec 2021 18:12:54 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/anal.jpg" alt="Featured image of post 知識ゼロからのe-Statマイニング" /&gt;&lt;p&gt;知識ゼロからのe-Statマイニング&lt;br&gt;
日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-Statという日本の統計が閲覧できる政府統計ポータルサイトを発見しました。&lt;br&gt;
アイスの売り上げから子供の平均身長まで大量の統計資料が公開されており、しかもAPIまであるすごいサイトです。 このe-Statをマイニングしてみようと思います。&lt;br&gt;
まずはAPIを叩くところまでやってみます。&lt;/p&gt;
&lt;h2 id=&#34;まずはアプリケーションidを取得しよう&#34;&gt;まずはアプリケーションIDを取得しよう&lt;/h2&gt;
&lt;p&gt;APIを叩くにはアプリケーションIDが必要です。&lt;br&gt;
まずはアプリケーションIDを取得しましょう。&lt;br&gt;
アプリケーションIDを取得するにはユーザー登録が必要です。以下のURLから手順に従ってユーザー登録してください。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.e-stat.go.jp/mypage/user/preregister&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.e-stat.go.jp/mypage/user/preregister&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アプリケーションIDはログイン後マイページ内のAPI機能(アプリケーションID発行)で取得できます。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.e-stat.go.jp/mypage/view/api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.e-stat.go.jp/mypage/view/api&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;入力項目は名称、URL、概要の３つです。&lt;br&gt;
名称、概要は適当で大丈夫です。&lt;br&gt;
URLは、http://localhostだと私はダメだったのでこのサイトのURLを設定しました。&lt;/p&gt;
&lt;p&gt;発行ボタンを押すとappIdにアプリケーションIDが払い出されます。&lt;/p&gt;
&lt;h2 id=&#34;apiを叩いてみよう&#34;&gt;APIを叩いてみよう&lt;/h2&gt;
&lt;p&gt;APIの仕様は以下のURLに記載されています。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.e-stat.go.jp/api/api-info/e-stat-manual3-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;難しいです。&lt;br&gt;
なんとなく、「統計表情報取得」でリストを取得して、「メタ情報取得」「統計データ取得」で個別のデータを取得する感じでしょうか？&lt;br&gt;
まずは叩いてみます。&lt;/p&gt;
&lt;h2 id=&#34;統計表情報取得&#34;&gt;統計表情報取得&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=xxxxxxxxx&amp;amp;lang=J&amp;amp;searchKind=&amp;amp;searchWord=&amp;quot;

&amp;lt;LIST_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
            &amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
            &amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
            &amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
            &amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
            &amp;lt;CYCLE&amp;gt;四半期&amp;lt;/CYCLE&amp;gt;
            &amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
            &amp;lt;OPEN_DATE&amp;gt;2020-04-01&amp;lt;/OPEN_DATE&amp;gt;
            &amp;lt;SMALL_AREA&amp;gt;0&amp;lt;/SMALL_AREA&amp;gt;
        &amp;lt;/LIST_INF&amp;gt;


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LIST_INF idの「0003384123」」が個別データのidみたいです。これを使ってメタ情報取得、統計情報取得を呼び出します。&lt;/p&gt;
&lt;p&gt;##メタ情報取得&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=xxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;quot;

&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;GET_META_INFO xsi:noNamespaceSchemaLocation=&amp;quot;https://api.e-stat.go.jp/rest/1.0/schema/GetMetaInfo.xsd&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
    &amp;lt;RESULT&amp;gt;
        &amp;lt;STATUS&amp;gt;0&amp;lt;/STATUS&amp;gt;
        &amp;lt;ERROR_MSG&amp;gt;正常に終了しました。&amp;lt;/ERROR_MSG&amp;gt;
        &amp;lt;DATE&amp;gt;2021-12-24T18:35:07.926+09:00&amp;lt;/DATE&amp;gt;
    &amp;lt;/RESULT&amp;gt;
    &amp;lt;PARAMETER&amp;gt;
        &amp;lt;LANG&amp;gt;J&amp;lt;/LANG&amp;gt;
        &amp;lt;STATS_DATA_ID&amp;gt;0003384123&amp;lt;/STATS_DATA_ID&amp;gt;
    &amp;lt;/PARAMETER&amp;gt;
    &amp;lt;METADATA_INF&amp;gt;
        &amp;lt;TABLE_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
            &amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
            &amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
            &amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
            &amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
            &amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
        &amp;lt;/TABLE_INF&amp;gt;
        &amp;lt;CLASS_INF&amp;gt;
            &amp;lt;CLASS_OBJ id=&amp;quot;tab&amp;quot; name=&amp;quot;表章項目&amp;quot; description=&amp;quot;Excelの書式設定で統計表の数値を&amp;amp;quot;-0.0&amp;amp;quot;としている場合、データベース上&amp;amp;quot;0.0&amp;amp;quot;として収録されているため、Excel統計表の数値とは必ずしも一致しない。&amp;quot;&amp;gt;
                &amp;lt;CLASS code=&amp;quot;17&amp;quot; name=&amp;quot;前年度比&amp;quot; level=&amp;quot;&amp;quot; unit=&amp;quot;％&amp;quot;/&amp;gt;
            &amp;lt;/CLASS_OBJ&amp;gt;
            &amp;lt;CLASS_OBJ id=&amp;quot;cat01&amp;quot; name=&amp;quot;形態別国内家計最終消費支出&amp;quot;&amp;gt;
                &amp;lt;CLASS code=&amp;quot;11&amp;quot; name=&amp;quot;家計最終消費支出（再掲）&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;12&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;13&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_（控除）非居住者家計の国内での直接購入&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;14&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出&amp;quot; level=&amp;quot;2&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;15&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;16&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_半耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;17&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_非耐久財&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;18&amp;quot; name=&amp;quot;家計最終消費支出（再掲）_国内家計最終消費支出_サービス&amp;quot; level=&amp;quot;3&amp;quot;/&amp;gt;
            &amp;lt;/CLASS_OBJ&amp;gt;
            &amp;lt;CLASS_OBJ id=&amp;quot;time&amp;quot; name=&amp;quot;時間軸（年度）&amp;quot;&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1981100000&amp;quot; name=&amp;quot;1981年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1982100000&amp;quot; name=&amp;quot;1982年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1983100000&amp;quot; name=&amp;quot;1983年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1984100000&amp;quot; name=&amp;quot;1984年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1985100000&amp;quot; name=&amp;quot;1985年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1986100000&amp;quot; name=&amp;quot;1986年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1987100000&amp;quot; name=&amp;quot;1987年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1988100000&amp;quot; name=&amp;quot;1988年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;
                &amp;lt;CLASS code=&amp;quot;1989100000&amp;quot; name=&amp;quot;1989年度&amp;quot; level=&amp;quot;1&amp;quot;/&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上の方がデータ内容の説明なのか？よくわかりません。&lt;/p&gt;
&lt;h2 id=&#34;統計情報取得&#34;&gt;統計情報取得&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl &amp;quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000&amp;amp;appId=xxxxxxxxxx&amp;amp;lang=J&amp;amp;statsDataId=0003384123&amp;amp;metaGetFlg=N&amp;amp;cntGetFlg=N&amp;quot;

&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;GET_STATS_DATA xsi:noNamespaceSchemaLocation=&amp;quot;https://api.e-stat.go.jp/rest/1.0/schema/GetStatsData.xsd&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
    &amp;lt;RESULT&amp;gt;
        &amp;lt;STATUS&amp;gt;0&amp;lt;/STATUS&amp;gt;
        &amp;lt;ERROR_MSG&amp;gt;正常に終了しました。&amp;lt;/ERROR_MSG&amp;gt;
        &amp;lt;DATE&amp;gt;2021-12-24T18:37:22.156+09:00&amp;lt;/DATE&amp;gt;
    &amp;lt;/RESULT&amp;gt;
    &amp;lt;PARAMETER&amp;gt;
        &amp;lt;LANG&amp;gt;J&amp;lt;/LANG&amp;gt;
        &amp;lt;STATS_DATA_ID&amp;gt;0003384123&amp;lt;/STATS_DATA_ID&amp;gt;
        &amp;lt;DATA_FORMAT&amp;gt;X&amp;lt;/DATA_FORMAT&amp;gt;
        &amp;lt;START_POSITION&amp;gt;1&amp;lt;/START_POSITION&amp;gt;
        &amp;lt;LIMIT&amp;gt;10000&amp;lt;/LIMIT&amp;gt;
        &amp;lt;METAGET_FLG&amp;gt;N&amp;lt;/METAGET_FLG&amp;gt;
        &amp;lt;CNT_GET_FLG&amp;gt;N&amp;lt;/CNT_GET_FLG&amp;gt;
    &amp;lt;/PARAMETER&amp;gt;
    &amp;lt;STATISTICAL_DATA&amp;gt;
        &amp;lt;TABLE_INF id=&amp;quot;0003384123&amp;quot;&amp;gt;
            &amp;lt;STAT_NAME code=&amp;quot;00100409&amp;quot;&amp;gt;国民経済計算&amp;lt;/STAT_NAME&amp;gt;
            &amp;lt;GOV_ORG code=&amp;quot;00100&amp;quot;&amp;gt;内閣府&amp;lt;/GOV_ORG&amp;gt;
            &amp;lt;STATISTICS_NAME&amp;gt;四半期別ＧＤＰ速報 過去の値 1次速報値&amp;lt;/STATISTICS_NAME&amp;gt;
            &amp;lt;TITLE&amp;gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）&amp;lt;/TITLE&amp;gt;
            &amp;lt;SURVEY_DATE&amp;gt;201007-201009&amp;lt;/SURVEY_DATE&amp;gt;
            &amp;lt;TOTAL_NUMBER&amp;gt;232&amp;lt;/TOTAL_NUMBER&amp;gt;
            &amp;lt;FROM_NUMBER&amp;gt;1&amp;lt;/FROM_NUMBER&amp;gt;
            &amp;lt;TO_NUMBER&amp;gt;232&amp;lt;/TO_NUMBER&amp;gt;
        &amp;lt;/TABLE_INF&amp;gt;
        &amp;lt;DATA_INF&amp;gt;
            &amp;lt;NOTE char=&amp;quot;***&amp;quot;&amp;gt;数字が得られないもの&amp;lt;/NOTE&amp;gt;
            &amp;lt;NOTE char=&amp;quot;-&amp;quot;&amp;gt;数字が得られないもの&amp;lt;/NOTE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1981100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;3.8&amp;lt;/VALUE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1982100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.3&amp;lt;/VALUE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1983100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2&amp;lt;/VALUE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1984100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.2&amp;lt;/VALUE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1985100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;1.2&amp;lt;/VALUE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1986100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.1&amp;lt;/VALUE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1987100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.5&amp;lt;/VALUE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1988100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;0.5&amp;lt;/VALUE&amp;gt;
            &amp;lt;VALUE tab=&amp;quot;17&amp;quot; cat01=&amp;quot;11&amp;quot; time=&amp;quot;1989100000&amp;quot; unit=&amp;quot;％&amp;quot;&amp;gt;2.5&amp;lt;/VALUE&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;VALUEが値みたいですがどういう列情報になっているのでしょうか？&lt;br&gt;
とりあえずAPIはお手軽に叩けることがわかりました。&lt;br&gt;
次回以降はデータの内容を理解していこうと思います。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</link>
        <pubDate>Fri, 24 Dec 2021 11:55:21 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法" /&gt;&lt;h2 id=&#34;関連記事&#34;&gt;関連記事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-21-01-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【ssh/bash】ssh/Bashでサーバーへログイン・実行・ログアウトの一連自動化処理を作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;
&lt;p&gt;sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトしてローカルに何事もなかったかのようにもどってくる最も簡単な方法ってなにかないでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;イメージ&#34;&gt;イメージ&lt;/h2&gt;
&lt;p&gt;従来の方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ローカルＰＣのターミナル

↓ Linuxサーバーにログイン

$df $uptime などを実行

↓ Linuxサーバーをログアウト

ローカルＰＣにもどる
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これからつくるBash/ssh&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ローカルＰＣのターミナル
↓ 
Linuxサーバーにログイン 
$df $uptime などを実行 
Linuxサーバーをログアウト
↓ 
ローカルＰＣのターミナルにもどる
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;わかりにくいですか？&lt;br&gt;
まず、メリットとしてサーバーでコマンドからログアウトする必要がありません。&lt;br&gt;
これができれば、一台一台サーバーのヘルスチェックをせずとも、数十台のサーバーを&lt;br&gt;
順番に訪ね歩きファイルに出力する事も可能です。&lt;/p&gt;
&lt;p&gt;以下、ソースです。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/bash

##############################################
# sshでサーバーにログインして、なんらかのコマンドを
# 実行しターミナルに表示、ミッション終了後、ターミ
# ナルを自動的にログアウトしてローカルに何事もなか
# ったかのようにもどってくる最も簡単シェルスクリプト
##############################################
#
# サーバーのＩＰアドレスとか
SERVER=&amp;quot;centos@xx.xx.xx.xxx&amp;quot;
# 実行したいコマンドを &amp;amp;&amp;amp; でつなぐ
COMMAND=&amp;quot;uptime &amp;amp;&amp;amp; df -h&amp;quot;;

echo &amp;quot;centosサーバーログイン&amp;quot;; 

# ポイントは -t です。
ssh $SERVER  -t $COMMAND; 

echo &amp;quot;centosサーバーログアウト&amp;quot;;

exit;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;たったこれだけですが、この工夫により多くのサーバーを&lt;br&gt;
スクリプトで一括回遊することができます。 お試しあれ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/</link>
        <pubDate>Fri, 24 Dec 2021 09:43:41 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/af7ef3c0-44c1-4f2f-aad8-1a0664724558.jpg" alt="Featured image of post SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない" /&gt;&lt;p&gt;hugoでscssやsassを含んだファイルををGitHubに公開、Git Actionで自動ビルドしようとした際に、見慣れないエラーが表示された&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Run hugo --minify
Error: Error building site: TOCSS:
failed to transform &amp;quot;scss/style.scss&amp;quot; (text/x-scss). 
Check your Hugo installation;
you need the extended version to build SCSS/SASS.
: this feature is not available in your current Hugo version,
see https://goo.gl/YMrWcn for more information
...
Total in 148 ms
Error: Process completed with exit code 255.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;はて？なにか悪いことでもしたのだろうか。&lt;br&gt;
それとも変な記述をしてしまったのだろうか。&lt;/p&gt;
&lt;h2 id=&#34;エラーの内容&#34;&gt;エラーの内容&lt;/h2&gt;
&lt;p&gt;こういうときは、落ち着いてエラーを見てみよう。&lt;br&gt;
大抵のことはちゃんと教えてくれているはずだ。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Check your Hugo installation; you need the extended version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;なるほど、extended を使えと行っている。&lt;br&gt;
extended とはなんだろう。&lt;/p&gt;
&lt;h2 id=&#34;エラーの対応&#34;&gt;エラーの対応&lt;/h2&gt;
&lt;p&gt;さらに落ち着いて設定ファイルを確認することをおすすめする。&lt;br&gt;
.github/workflow/gh-pages.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Setup&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;peaceiris/actions-hugo@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hugo-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0.87.0&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#extended: true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;設定の extended が思いっきりコメントアウトされていました&lt;/p&gt;
&lt;p&gt;コメントを外して、再度Gitにpushしたところ、正常にビルドされて公開できました。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;scssやsassを含んだファイルをhugoをgitに公開しようとした際に、ビルドできない場合は設定を確認することをおすすめする。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【プログレスバー】Bashでプログレスバーを作ってみようって話</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</link>
        <pubDate>Thu, 23 Dec 2021 16:10:20 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【プログレスバー】Bashでプログレスバーを作ってみようって話" /&gt;&lt;h2 id=&#34;関連記事&#34;&gt;関連記事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;プログレスバー&#34;&gt;プログレスバー&lt;/h2&gt;
&lt;p&gt;ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。&lt;br&gt;
処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。&lt;br&gt;
シェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい&lt;/p&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;処理のループ中に以下の1行を追記します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;progress &amp;quot;$#&amp;quot; &amp;quot;$MAX&amp;quot;; set - &amp;quot;$@&amp;quot; count ;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;実行手順&#34;&gt;実行手順&lt;/h2&gt;
&lt;p&gt;以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ :&amp;gt; Progress.sh
$ vim Progress.sh
# vimで以下のソースコードを貼り付けて保存
# ソースコードのファイルエンコードをUTF-8に変更します。
$ nkf -wLu Progress.sh &amp;gt; Progress.sh.utf8
# ファイルエンコードを変更したファイルを元のファイル名にリネームします。
$ mv Progress.sh.utf8 Progress.sh
# 実行権限を付与します
$ chmod +x Progress.sh
# 実行
$ ./Progress.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ソースコード&#34;&gt;ソースコード&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#! /bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#######################################&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 進捗を表示するプログレスバー&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#######################################&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# percent $1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# GT      $2&lt;/span&gt;
progress&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;

  &lt;span class=&#34;nv&#34;&gt;percent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;GT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  

  &lt;span class=&#34;nv&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;expr &lt;span class=&#34;m&#34;&gt;71&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\*&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$percent&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; / &lt;span class=&#34;nv&#34;&gt;$GT&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;nspace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;expr &lt;span class=&#34;m&#34;&gt;71&lt;/span&gt; - &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$column&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;#プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\r[&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 

  &lt;span class=&#34;c1&#34;&gt;#位置パラメータの数($#)を１にリセット（カウンタとして流用）&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; dummy &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -le &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$column&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# barに=を追加&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; - &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; dummy&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# $#をインクリメント&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;#barの先端に&amp;gt;を追加&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;#位置パラメータの数($#)を１にリセット（カウンタとして流用）&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; dummy &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -le &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$nspace&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; 
    &lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; - &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; dummy&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$percent&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$GT&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# barに]と１行分のプログレスバーを表示&lt;/span&gt;

  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#######################################&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# メイン処理&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; count &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; i&amp;lt;&lt;span class=&#34;nv&#34;&gt;$MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; i++&lt;span class=&#34;o&#34;&gt;)){&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。&lt;/span&gt;
  progress &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$MAX&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; - &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; count &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#終了&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使い方-1&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。&lt;/p&gt;
&lt;p&gt;自作ソースの中のループ処理の関数の頭に以下を追記します。&lt;br&gt;
MAX=100; は、処理の最大値を指定します。&lt;br&gt;
処理のループ最大数が150回であれば、以下の通りに修正します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set count;
MAX=150;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;forやwhileループ処理の中に以下を埋め込みます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;progress &amp;quot;$#&amp;quot; &amp;quot;$MAX&amp;quot;; set - &amp;quot;$@&amp;quot; count ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最後にforまたはwhileループを抜けた後に&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;quot;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;を追加します。これだけです。&lt;/p&gt;
&lt;h2 id=&#34;実行結果&#34;&gt;実行結果&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 160; 
			flex-basis: 384px&#34;
	&gt;
	&lt;a href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress.gif&#34; data-size=&#34;640x400&#34;&gt;
		&lt;img src=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress.gif&#34;
			width=&#34;640&#34;
			height=&#34;400&#34;
			srcset=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress_hu82b3c24b65bc35ce8f36dc9d39d1cc0e_130983_480x0_resize_box.gif 480w, https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/progress_hu82b3c24b65bc35ce8f36dc9d39d1cc0e_130983_1024x0_resize_box.gif 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【unComp】Bashで便利なコマンドを作ってみようって話</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</link>
        <pubDate>Thu, 23 Dec 2021 13:11:13 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【unComp】Bashで便利なコマンドを作ってみようって話" /&gt;&lt;h2 id=&#34;関連記事&#34;&gt;関連記事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;できること&#34;&gt;できること&lt;/h2&gt;
&lt;p&gt;圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。&lt;/p&gt;
&lt;h2 id=&#34;圧縮ファイルと実行コマンドパラメータ一覧&#34;&gt;圧縮ファイルと実行コマンド、パラメータ一覧&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  拡張子           パラメータ
  tgz | tar.gz     tar zxvf  
  tar.Z            gunzip 
  tar.bz2          tar xvfj 
  tar              tar xvfz 
  gz               gunzip 
  Z                gunzip 
  bz2              bunzip2 
  zip              unzip 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。&lt;/p&gt;
&lt;h2 id=&#34;実行例&#34;&gt;実行例&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 圧縮ファイルを解凍する便利な unCompコマンド
$ unComp comp.tar.gz2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;作成&#34;&gt;作成&lt;/h2&gt;
&lt;p&gt;まずファイルを作ります。ファイル名は unComp とします&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# unComp というファイルを作成
$ :&amp;gt; unComp 

# vim で unComp を開く
$ vim unComp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;unCompファイルに以下の内容を貼り付ける&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash
#
#圧縮されているファイルを解凍する
# unComp を /usr/local/bin/にコピーすると
# 通常のコマンドとして本実行ファイルを利用する事が出来ます。
#
# cp unComp /usr/local/bin/unComp
#
# 実行例
# $ unComp filename(圧縮ファイル)
#
if [ $# -ne 1 ]; then
  echo &amp;quot;&amp;quot;
  exit ;
fi
#
case $1 in
  *.tgz | *.tar.gz)   tar zxvf $1 ;;
  *.tar.Z)            gunzip $1
                      tar xvf $( echo &amp;quot;$1&amp;quot; | sed &#39;s/\.Z$//&#39;)
                      ;;
  *.tar.bz2)          tar xvfj $1;;
  *.tar)              tar xvfz $1;;
  *.gz)               gunzip $1;;
  *.Z)                gunzip $1;;
  *.bz2)              bunzip2 $1;;
  *.zip)              unzip $1;;
  *)                  echo &amp;quot;ファイルの拡張子が対応していません:$1&amp;quot;
esac
exit ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/&#34;  title=&#34;wLu&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wLu&lt;/a&gt;をつかってUTF-8に変換するとさらに便利です。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# unComp ファイルをnkf -wLu でUTF-8に変換
$ nkf -wLu unComp &amp;gt; unComp.txt

# unComp.txtをunCompにリネームします
$ mv unComp.txt unComp

# 作成したunCompコマンドファイルを/usr/local/bin にコピーします
$ sudo unComp /usr/local/bin/

# コマンドが配置されたかを確認
$ which unComp
$ /usr/local/bin/unComp
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;使い方&#34;&gt;使い方&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する
# 実行
$ unComp sample.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。&lt;br&gt;
便利ですね。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【wLu】Bashで便利なコマンドを作ってみようって話</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</link>
        <pubDate>Thu, 23 Dec 2021 10:27:27 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/2021-12-23-bash.jpg" alt="Featured image of post 【wLu】Bashで便利なコマンドを作ってみようって話" /&gt;&lt;h2 id=&#34;関連記事&#34;&gt;関連記事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【wLu】Bashで便利なコマンドを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【unComp】Bashで便利なコマンドを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【プログレスバー】Bashでプログレスバーを作ってみようって話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h2&gt;
&lt;p&gt;ネットワーク漢字フィルター nkf&lt;br&gt;
※macの場合、&lt;a class=&#34;link&#34; href=&#34;https://brew.sh/index_ja&#34;  title=&#34;Homebrew&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Homebrew&lt;/a&gt; が必要になります。&lt;/p&gt;
&lt;h2 id=&#34;nkf-インストールの手順&#34;&gt;nkf インストールの手順&lt;/h2&gt;
&lt;p&gt;まず、nkfがインストールされているかを確認します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ which nkf 
/usr/local/bin/nkf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;インストールされていない場合、macの場合はbrewでインストールします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew install nkf 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;インストールしようとすると以下のエラーが出ることがあります&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Error: The `brew link` step did not complete successfully
The formula built, but is not symlinked into /usr/local
Could not symlink share/man/ja/man1/nkf.1
/usr/local/share/man/ja/man1 is not writable.

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;権限周りを下記のコマンドを打って変更します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo chmod 775 /usr/local/share/man/ja/man1
sudo chown &amp;lt;ユーザ名&amp;gt;:admin /usr/local/share/man/ja/man1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下記のページを参考にさせていただきました&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&#34;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.kozakana.net%2F2018%2F09%2Fhomebrew_link_error%2F&#34; title=&#34;Homebrewでインストール時にlinkが出来ないエラー | Simple is Beautiful.&#34; class=&#34;embed-card embed-webcard&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;コマンドを確認します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ nkf -v
Network Kanji Filter Version 2.1.5 (2018-12-15)
Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa).
Copyright (C) 1996-2018, The nkf Project.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;nkfコマンドとは？&lt;br&gt;
「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。&lt;/p&gt;
&lt;p&gt;nkfコマンドの書式&lt;br&gt;
nkf オプション ファイル名&lt;/p&gt;
&lt;p&gt;UTF-8に変換する場合は、オプションに wLu をつけて変換します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ nkf -wLu isofile.txt &amp;gt; utf8.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;変換の流れ手動編&#34;&gt;変換の流れ（手動編）&lt;/h3&gt;
&lt;p&gt;元ファイル  moto.txt (UTF-8以外のファイルエンコード、改行コード）&lt;br&gt;
↓&lt;br&gt;
変換後のファイル ato.txt(UTF-8に変換したファイル）&lt;br&gt;
↓&lt;br&gt;
変換後のファイルをリネームする&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# UTF-8に変換
$ nkf -wLu moto.txt &amp;gt; ato.txt

# 変換後のファイルを元のファイル名にリネームする
$ mv ato.txt moto.txt

# vimiでファイルエンコードを確認する
$ vim moto.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。&lt;/p&gt;
&lt;h3 id=&#34;変換の流れ自動編&#34;&gt;変換の流れ（自動編）&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# UTF-8に変換 wLu コマンドをこれから自作します
$ wLu moto.txt
$ vim moto.txt ← UTF-8 に変換されている！
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;コマンドの内容&#34;&gt;コマンドの内容&lt;/h3&gt;
&lt;p&gt;まずファイルを作ります。ファイル名は wLu とします&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# wLu というファイルを作成
$ :&amp;gt; wLu

# vim で wLu を開く
$ vim wLu 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下の内容をファイルに貼り付ける&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

#################################################
# パラメータで渡されたファイル名をutf8に変換する
#
# 使い方
# wLu UTF-8に変換したいファイル名
# wLu を /usr/local/bin/にコピーすると
# 通常のコマンドとして本実行ファイルを利用する事が出来ます。
#
#################################################
#
filename=&amp;quot;$1&amp;quot; ;
#
function wLu(){
  if [ -f &amp;quot;$filename&amp;quot; ]; then
    cat &amp;quot;$filename&amp;quot; | nkf -wLu &amp;gt; &amp;quot;$filename&amp;quot;.u ;
    mv &amp;quot;$filename&amp;quot;.u &amp;quot;$filename&amp;quot; ;
  fi
}
#
if ! which nkf &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then
  echo &amp;quot;nkf がありません&amp;quot; ;
  echo &amp;quot;nkf をインストールして下さい&amp;quot; ; 
  exit ;
fi
#
if [ -z &amp;quot;$filename&amp;quot; ] ; then
  echo &amp;quot;第一引数にファイル名を指定して下さい&amp;quot;
  echo &amp;quot;実行例： wLu filename&amp;quot; ;  
  exit ;
fi
# 実行
wLu ;
# 終了
exit ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# wLu ファイルをnkf -wLu でUTF-8に変換
$ nkf -wLu wLu &amp;gt; wLu.txt

# wLu.txtをwLuにリネームします
$ mv wLu.txt wLu

# 作成したwLuコマンドファイルを/usr/local/bin にコピーします
$ sudo wLu /usr/local/bin/

# コマンドが配置されたかを確認
$ which wLu
$ /usr/local/bin/wLu
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;使い方-1&#34;&gt;使い方&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# UTF-8以外のファイルエンコードファイル
$ cat moto.txt
$ wLu moto.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;変換結果を一時ファイルにし、リネームする手間が省けます。&lt;br&gt;
便利ですね。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-21-03/</link>
        <pubDate>Wed, 22 Dec 2021 21:22:23 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-21-03/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-03/error.jpg" alt="Featured image of post hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー" /&gt;&lt;h2 id=&#34;エラーの内容&#34;&gt;エラーの内容&lt;/h2&gt;
&lt;p&gt;記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について&lt;br&gt;
hugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。&lt;/p&gt;
&lt;p&gt;Start building sites …&lt;br&gt;
Total in 10 ms&lt;br&gt;
Error: Error building site: &amp;ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1&amp;rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed&lt;/p&gt;
&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;
&lt;p&gt;このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。&lt;br&gt;
vim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？&lt;/p&gt;
&lt;h2 id=&#34;対応&#34;&gt;対応&lt;/h2&gt;
&lt;p&gt;この場合ファイルの文字コードをUTF8に変更してみましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nkf -wLu ファイル名 &amp;gt;一時保存ファイル名;
mv 一時保存ファイル名 ファイル名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一時保存した後にmvで戻したり面倒ですよね。&lt;br&gt;
面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/suzukiiichiro/linuxConfig/blob/master/wLu&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/suzukiiichiro/linuxConfig/blob/master/wLu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>プライバシーポリシーページを設置する</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-21-02/</link>
        <pubDate>Wed, 22 Dec 2021 17:40:27 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-21-02/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-02/privacy.jpg" alt="Featured image of post プライバシーポリシーページを設置する" /&gt;&lt;p&gt;github pagesでもgoogle adsenseの審査に通過したい！&lt;/p&gt;
&lt;p&gt;ということで色々先人の方達のサイトをみさせていただいたところ&lt;/p&gt;
&lt;p&gt;google adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。&lt;/p&gt;
&lt;h2 id=&#34;内容はとりあえずコピペで行こう&#34;&gt;内容はとりあえずコピペで行こう&lt;/h2&gt;
&lt;p&gt;まずはコピペOKの親切な方のサイトを探します。&lt;/p&gt;
&lt;p&gt;内容については以下のサイトを参考にさせていただきました。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://liberty-life-blog.com/wordpress/privacy-policy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://liberty-life-blog.com/wordpress/privacy-policy/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;
&lt;p&gt;以下のコマンドでhugoでページを作成します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new page/privacy.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コンテンツの構成を以下のように管理しているのでpage以下に保存しました。&lt;br&gt;
content/posts   &amp;ndash; 記事&lt;br&gt;
/page    &amp;ndash; about usページなど&lt;br&gt;
/assetes &amp;ndash; 画像など&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vim content/page/privacy.md
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
title: &amp;quot;Privacy&amp;quot;
date: 2021-12-22T17:16:15+09:00
draft: false                                                              
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ページの内容を２個目の&amp;mdash;以下に貼り付けます&lt;br&gt;
draft: true に変更します&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ビルドします&lt;/p&gt;
&lt;h2 id=&#34;フッターにリンクを置こう&#34;&gt;フッターにリンクを置こう&lt;/h2&gt;
&lt;p&gt;フッターの内容を修正してプライバシーポリシーのリンクを設置します。&lt;br&gt;
themes以下にあるファイルを直接書き換えるのではなく&lt;br&gt;
layoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。&lt;/p&gt;
&lt;p&gt;layouts/partial/footer/footer.html&amp;lt;&amp;ndash;優先順位高い&lt;br&gt;
themes/テーマ名/layouts/partial/footer/footer.html&lt;/p&gt;
&lt;p&gt;layouts/partial/footer/footer.html を新規に作成して&lt;br&gt;
以下の内容を入力&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;footer class=&amp;quot;site-footer&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Site.BaseURL }}privacy/&amp;quot;&amp;gt;プライバシーポリシー&amp;lt;/a&amp;gt;
    &amp;lt;section class=&amp;quot;copyright&amp;quot;&amp;gt;
        &amp;amp;copy;
        {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format &amp;quot;2006&amp;quot;))) }}
            {{ .Site.Params.footer.since }} -
        {{ end }}
        {{ now.Format &amp;quot;2006&amp;quot; }} {{ .Site.Title }}
    &amp;lt;/section&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;リンクの書き方が&lt;br&gt;
{{ .Site.BaseURL }}privacy/&lt;br&gt;
のは注意&lt;/p&gt;
</description>
        </item>
        <item>
        <title>デザイナーでもできる初めてのHugo #01</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/</link>
        <pubDate>Wed, 22 Dec 2021 13:07:49 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/2021-12-22-hugo-01.jpg" alt="Featured image of post デザイナーでもできる初めてのHugo #01" /&gt;&lt;p&gt;CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。&lt;br&gt;
Wordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。&lt;br&gt;
色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。&lt;br&gt;
無料で、httpsも設定できるので非常に便利です。&lt;/p&gt;
&lt;h2 id=&#34;hugoのインストール&#34;&gt;Hugoのインストール&lt;/h2&gt;
&lt;p&gt;Hugoを使うためにはhugoをインストールする必要があります。&lt;br&gt;
インストールは簡単です。&lt;/p&gt;
&lt;p&gt;&lt;small&gt;※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://brew.sh/index_ja&#34;  title=&#34;Homebrew&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Homebrew&lt;/a&gt; が必要になります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;
&lt;p&gt;hugoのインストールが終わったら、サイトを作成します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new site ＜作成するディレクトリ＞
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;色々表示されているかと思いますが、気にしないで大丈夫です。&lt;/p&gt;
&lt;h3 id=&#34;設定ファイル&#34;&gt;設定ファイル&lt;/h3&gt;
&lt;p&gt;hugoの設定はTOMLという形式で記述します。&lt;br&gt;
TOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。&lt;br&gt;
その場合はconfig.tomlを削除して下さい。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;baseURL = &amp;quot;http://example.org/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;baseURL: サイトの公開URL&lt;/li&gt;
&lt;li&gt;languageCode: HTMLのlang部分&lt;/li&gt;
&lt;li&gt;title: サイトの名前&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;記事の投稿&#34;&gt;記事の投稿&lt;/h2&gt;
&lt;p&gt;記事を作成するにはコマンドを打つ必要があります&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new posts/helloworld.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます&lt;br&gt;
テーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。&lt;/p&gt;
&lt;h2 id=&#34;下書きから公開へ&#34;&gt;下書きから公開へ&lt;/h2&gt;
&lt;p&gt;作成されたファイルはmarkdown形式で記述されています。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
title: &amp;quot;helloworld&amp;quot;
date: 2021-12-22T11:23:09Z
draft: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;draft の部分が下書き状態を表しています。&lt;br&gt;
trueにすることで公開となり表示されます。&lt;/p&gt;
&lt;h2 id=&#34;確認&#34;&gt;確認&lt;/h2&gt;
&lt;p&gt;サイトの確認を行うには&lt;br&gt;
hugoをインストールしたディレクトリで&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;を実行します。&lt;br&gt;
この場合は公開されている記事のみを表示した状態のサーバが立ち上がります。&lt;br&gt;
未公開も含めたい場合は&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とすることで表示できます。&lt;/p&gt;
&lt;h2 id=&#34;公開&#34;&gt;公開&lt;/h2&gt;
&lt;p&gt;公開をするにはサイト全体を構築し直す必要があります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このコマンドでサイト全体が自動的に生成されます。&lt;br&gt;
作成されたサイトは初期状態ではpublicディレクトリに展開されます。&lt;br&gt;
configの&lt;em&gt;publicDir&lt;/em&gt;に任意のディレクトリを設定することも可能です&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;publicDir = &#39;docs&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この場合はdocsディレクトリに公開ファイルが展開されます。&lt;/p&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;駆け足でしたが、hugoの簡単な使い方になります。&lt;br&gt;
大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。&lt;br&gt;
みなさんもぜひ、hugoを試してみて下さい。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hugoでテーマが反映されない（画面が真っ白のまま）</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-21/</link>
        <pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-21/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21/2021-12-21.jpg" alt="Featured image of post Hugoでテーマが反映されない（画面が真っ白のまま）" /&gt;&lt;p&gt;Hugoでテーマが反映されない（画面が真っ白のまま）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Hugoで記事の投稿の仕方</title>
        <link>https://suzukiiichiro.github.io/posts/2021-12-21-01/</link>
        <pubDate>Tue, 21 Dec 2021 18:08:57 +0900</pubDate>
        
        <guid>https://suzukiiichiro.github.io/posts/2021-12-21-01/</guid>
        <description>&lt;img src="https://suzukiiichiro.github.io/posts/2021-12-21-01/2021-12-21-1.jpg" alt="Featured image of post Hugoで記事の投稿の仕方" /&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ hugo new posts/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ファイル名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.md
$ vim content/posts/2021-12-21.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;draft: false&lt;/code&gt; にする事でドラフトを公開にすることができる&lt;/p&gt;
&lt;p&gt;ビルドする&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
