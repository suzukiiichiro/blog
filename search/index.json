[{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  プログレスバー ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。 処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。 シェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい\n使い方 処理のループ中に以下の1行を追記します。\nprogress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; 実行手順 以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。\n$ :\u0026gt; Progress.sh $ vim Progress.sh # vimで以下のソースコードを貼り付けて保存 # ソースコードのファイルエンコードをUTF-8に変更します。 $ nkf -wLu Progress.sh \u0026gt; Progress.sh.utf8 # ファイルエンコードを変更したファイルを元のファイル名にリネームします。 $ mv Progress.sh.utf8 Progress.sh # 実行権限を付与します $ chmod +x Progress.sh # 実行 $ ./Progress.sh ソースコード #! /bin/bash ####################################### # 進捗を表示するプログレスバー # ####################################### # # # percent $1 # GT $2 progress(){ percent=$1; GT=$2; column=`expr 71 \\* \u0026quot;$percent\u0026quot; / $GT`; nspace=`expr 71 - \u0026quot;$column\u0026quot;`; #プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入 bar='\\r['; #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026quot;$column\u0026quot; ];do bar=$bar'='; # barに=を追加 set - \u0026quot;$@\u0026quot; dummy; # $#をインクリメント done bar=$bar'\u0026gt;'; #barの先端に\u0026gt;を追加 #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026quot;$nspace\u0026quot; ]; do bar=$bar' '; set - \u0026quot;$@\u0026quot; dummy; done bar=$bar']'$percent/$GT'\\c'; # barに]と１行分のプログレスバーを表示 echo -e \u0026quot;$bar\u0026quot;; } ####################################### # メイン処理 # set count ; MAX=100 ; #最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。 # for (( i=0; i\u0026lt;$MAX; i++)){ # ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。 progress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; } echo \u0026quot;\u0026quot;; # #終了 exit ; 使い方 シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。\n自作ソースの中のループ処理の関数の頭に以下を追記します。 MAX=100; は、処理の最大値を指定します。 処理のループ最大数が150階であれば、以下の通りに修正します。\nset count; MAX=150; forやwhileループ処理の中に以下を埋め込みます。\nprogress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; 最後にforまたはwhileループを抜けた後に\necho \u0026quot;\u0026quot;; を追加します。これだけです。\n実行結果  Progress.sh \n","date":"2021-12-23T16:10:20+09:00","image":"https://suzukiiichiro.github.io/assets/images/2021-12-23-bash.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/","title":"【プログレスバー】Bashでプログレスバーを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。\n圧縮ファイルと実行コマンド、パラメータ一覧  拡張子 パラメータ tgz | tar.gz tar zxvf tar.Z gunzip tar.bz2 tar xvfj tar tar xvfz gz gunzip Z gunzip bz2 bunzip2 zip unzip こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。\n実行例 # 圧縮ファイルを解凍する便利な unCompコマンド $ unComp comp.tar.gz2 作成 まずファイルを作ります。ファイル名は unComp とします\n# unComp というファイルを作成 $ :\u0026gt; unComp # vim で unComp を開く $ vim unComp unCompファイルに以下の内容を貼り付ける\n#!/bin/bash # #圧縮されているファイルを解凍する # unComp を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # # cp unComp /usr/local/bin/unComp # # 実行例 # $ unComp filename(圧縮ファイル) # if [ $# -ne 1 ]; then echo \u0026quot;\u0026quot; exit ; fi # case $1 in *.tgz | *.tar.gz) tar zxvf $1 ;; *.tar.Z) gunzip $1 tar xvf $( echo \u0026quot;$1\u0026quot; | sed 's/\\.Z$//') ;; *.tar.bz2) tar xvfj $1;; *.tar) tar xvfz $1;; *.gz) gunzip $1;; *.Z) gunzip $1;; *.bz2) bunzip2 $1;; *.zip) unzip $1;; *) echo \u0026quot;ファイルの拡張子が対応していません:$1\u0026quot; esac exit ; 作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。 wLuをつかってUTF-8に変換するとさらに便利です。\n# unComp ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu unComp \u0026gt; unComp.txt # unComp.txtをunCompにリネームします $ mv unComp.txt unComp # 作成したunCompコマンドファイルを/usr/local/bin にコピーします $ sudo unComp /usr/local/bin/ # コマンドが配置されたかを確認 $ which unComp $ /usr/local/bin/unComp 使い方 # 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する # 実行 $ unComp sample.zip 圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。 便利ですね。\n","date":"2021-12-23T13:11:13+09:00","image":"https://suzukiiichiro.github.io/assets/images/2021-12-23-bash.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/","title":"【unComp】Bashで便利なコマンドを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  必要なもの ネットワーク漢字フィルター nkf ※macの場合、Homebrew が必要になります。\nnkf インストールの手順 まず、nkfがインストールされているかを確認します。\n$ which nkf /usr/local/bin/nkf インストールされていない場合、macの場合はbrewでインストールします。\n$ brew install nkf インストールしようとすると以下のエラーが出ることがあります\nError: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink share/man/ja/man1/nkf.1 /usr/local/share/man/ja/man1 is not writable. 権限周りを下記のコマンドを打って変更します。\nsudo chmod 775 /usr/local/share/man/ja/man1 sudo chown \u0026lt;ユーザ名\u0026gt;:admin /usr/local/share/man/ja/man1 下記のページを参考にさせていただきました\nコマンドを確認します。\n$ nkf -v Network Kanji Filter Version 2.1.5 (2018-12-15) Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa). Copyright (C) 1996-2018, The nkf Project. 使い方 nkfコマンドとは？ 「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。\nnkfコマンドの書式 nkf オプション ファイル名\nUTF-8に変換する場合は、オプションに wLu をつけて変換します。\n$ nkf -wLu isofile.txt \u0026gt; utf8.txt 変換の流れ（手動編） 元ファイル moto.txt (UTF-8以外のファイルエンコード、改行コード） ↓ 変換後のファイル ato.txt(UTF-8に変換したファイル） ↓ 変換後のファイルをリネームする\n# UTF-8に変換 $ nkf -wLu moto.txt \u0026gt; ato.txt # 変換後のファイルを元のファイル名にリネームする $ mv ato.txt moto.txt # vimiでファイルエンコードを確認する $ vim moto.txt 面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。\n変換の流れ（自動編） # UTF-8に変換 wLu コマンドをこれから自作します $ wLu moto.txt $ vim moto.txt ← UTF-8 に変換されている！ コマンドの内容 まずファイルを作ります。ファイル名は wLu とします\n# wLu というファイルを作成 $ :\u0026gt; wLu # vim で wLu を開く $ vim wLu 以下の内容をファイルに貼り付ける\n#!/bin/bash ################################################# # パラメータで渡されたファイル名をutf8に変換する # # 使い方 # wLu UTF-8に変換したいファイル名 # wLu を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # ################################################# # filename=\u0026quot;$1\u0026quot; ; # function wLu(){ if [ -f \u0026quot;$filename\u0026quot; ]; then cat \u0026quot;$filename\u0026quot; | nkf -wLu \u0026gt; \u0026quot;$filename\u0026quot;.u ; mv \u0026quot;$filename\u0026quot;.u \u0026quot;$filename\u0026quot; ; fi } # if ! which nkf \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then echo \u0026quot;nkf がありません\u0026quot; ; echo \u0026quot;nkf をインストールして下さい\u0026quot; ; exit ; fi # if [ -z \u0026quot;$filename\u0026quot; ] ; then echo \u0026quot;第一引数にファイル名を指定して下さい\u0026quot; echo \u0026quot;実行例： wLu filename\u0026quot; ; exit ; fi # 実行 wLu ; # 終了 exit ; 作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。\n# wLu ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu wLu \u0026gt; wLu.txt # wLu.txtをwLuにリネームします $ mv wLu.txt wLu # 作成したwLuコマンドファイルを/usr/local/bin にコピーします $ sudo wLu /usr/local/bin/ # コマンドが配置されたかを確認 $ which wLu $ /usr/local/bin/wLu 使い方 # UTF-8以外のファイルエンコードファイル $ cat moto.txt $ wLu moto.txt 変換結果を一時ファイルにし、リネームする手間が省けます。 便利ですね。\n","date":"2021-12-23T10:27:27+09:00","image":"https://suzukiiichiro.github.io/assets/images/2021-12-23-bash.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/","title":"【wLu】Bashで便利なコマンドを作ってみようって話"},{"content":"エラーの内容 記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について\nhugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。\nStart building sites … Total in 10 ms Error: Error building site: \u0026ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1\u0026rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed\n原因 このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。\nvim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？\n対応 この場合ファイルの文字コードをUTF8に変更してみましょう。\nnkf -wLu ファイル名 \u0026gt;一時保存ファイル名; mv 一時保存ファイル名 ファイル名 一時保存した後にmvで戻したり面倒ですよね。 面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。\nhttps://github.com/suzukiiichiro/linuxConfig/blob/master/wLu\nhugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。\n","date":"2021-12-22T21:22:23+09:00","image":"https://suzukiiichiro.github.io/assets/images/error.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-03/","title":"hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー"},{"content":"github pagesでもgoogle adsenseの審査に通過したい！\nということで色々先人の方達のサイトをみさせていただいたところ\ngoogle adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。\n内容はとりあえずコピペで行こう まずはコピペOKの親切な方のサイトを探します。\n内容については以下のサイトを参考にさせていただきました。\nhttp://liberty-life-blog.com/wordpress/privacy-policy/\n設定 以下のコマンドでhugoでページを作成します。\nhugo new page/privacy.md コンテンツの構成を以下のように管理しているのでpage以下に保存しました。 content/posts \u0026ndash; 記事 /page \u0026ndash; about usページなど /assetes \u0026ndash; 画像など\nvim content/page/privacy.md --- title: \u0026quot;Privacy\u0026quot; date: 2021-12-22T17:16:15+09:00 draft: false --- ページの内容を２個目の\u0026mdash;以下に貼り付けます draft: true に変更します\nhugo ビルドします\nフッターにリンクを置こう フッターの内容を修正してプライバシーポリシーのリンクを設置します。\nthemes以下にあるファイルを直接書き換えるのではなく\nlayoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。\nlayouts/partial/footer/footer.html\u0026lt;\u0026ndash;優先順位高い\nthemes/テーマ名/layouts/partial/footer/footer.html\nlayouts/partial/footer/footer.html を新規に作成して 以下の内容を入力\n\u0026lt;footer class=\u0026quot;site-footer\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;{{ .Site.BaseURL }}privacy/\u0026quot;\u0026gt;プライバシーポリシー\u0026lt;/a\u0026gt; \u0026lt;section class=\u0026quot;copyright\u0026quot;\u0026gt; \u0026amp;copy; {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026quot;2006\u0026quot;))) }} {{ .Site.Params.footer.since }} - {{ end }} {{ now.Format \u0026quot;2006\u0026quot; }} {{ .Site.Title }} \u0026lt;/section\u0026gt; \u0026lt;/footer\u0026gt; ","date":"2021-12-22T17:40:27+09:00","image":"https://suzukiiichiro.github.io/assets/images/privacy.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-02/","title":"プライバシーポリシーページを設置する"},{"content":"CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。 Wordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。 色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。 無料で、httpsも設定できるので非常に便利です。\nHugoのインストール Hugoを使うためにはhugoをインストールする必要があります。 インストールは簡単です。\n※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。Homebrew が必要になります。\nbrew install hugo 設定 hugoのインストールが終わったら、サイトを作成します。\nhugo new site ＜作成するディレクトリ＞ 色々表示されているかと思いますが、気にしないで大丈夫です。\n設定ファイル hugoの設定はTOMLという形式で記述します。 TOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。 その場合はconfig.tomlを削除して下さい。\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot;  baseURL: サイトの公開URL languageCode: HTMLのlang部分 title: サイトの名前  記事の投稿 記事を作成するにはコマンドを打つ必要があります\nhugo new posts/helloworld.md このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます テーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。\n下書きから公開へ 作成されたファイルはmarkdown形式で記述されています。\n--- title: \u0026quot;helloworld\u0026quot; date: 2021-12-22T11:23:09Z draft: true --- draft の部分が下書き状態を表しています。 trueにすることで公開となり表示されます。\n確認 サイトの確認を行うには hugoをインストールしたディレクトリで\nhugo server を実行します。 この場合は公開されている記事のみを表示した状態のサーバが立ち上がります。 未公開も含めたい場合は\nhugo server -D とすることで表示できます。\n公開 公開をするにはサイト全体を構築し直す必要があります。\nhugo このコマンドでサイト全体が自動的に生成されます。 作成されたサイトは初期状態ではpublicディレクトリに展開されます。 configのpublicDirに任意のディレクトリを設定することも可能です\npublicDir = 'docs' この場合はdocsディレクトリに公開ファイルが展開されます。\n終わりに 駆け足でしたが、hugoの簡単な使い方になります。 大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。 みなさんもぜひ、hugoを試してみて下さい。\n","date":"2021-12-22T13:07:49+09:00","image":"https://suzukiiichiro.github.io/assets/images/2021-12-22-hugo-01.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01/","title":"デザイナーでもできる初めてのHugo #01"},{"content":"テーマが反映されない（画面が真っ白のまま）\n$ git submodule update --init --recursive ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/assets/images/2021-12-21.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21/","title":"テーマが反映されない（画面が真っ白のまま）"},{"content":"$ hugo new posts/[ファイル名].md $ vim content/posts/2021-12-21.md draft: false にする事でドラフトを公開にすることができる\nビルドする\n$ hugo ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/assets/images/2021-12-21-1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-01/","title":"記事の投稿の仕方"}]