[{"content":"はじめに ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようというものです。\nhugo コマンドでgithub.ioディレクトリに記事を投稿する場合、以下のコマンドをたたくと思います。\n$ hugo new posts/＜ディレクトリ＞/index.md または\n$ hugo new posts/＜今日の日付＞.md 面倒なんですよね。。。\nディレクトリの指定 通常、記事毎にディレクトリを分けて、アクセスされるファイルをindex.mdにした場合は、以下の通りになりますよね。\n$ hugo new posts/＜今日の日付のディレクトリ＞/index.md ナンバリングの効用 ただ、同日に気分が乗ってきて、もう一つ記事を投稿しようとする場合は、日付の後ろに「-02」とか工夫する必要も出てきたりします。たとえば以下のように\n$ hugo new posts/＜今日の日付のディレクトリ＞-＜ナンバリング02＞/index.md 複数メンバーの投稿を区別する 複数のコラボレーターで投稿するgithub.ioの場合は、投稿者も区別したくなります。例えば\n$ hugo new posts/＜今日の日付のディレクトリ＞-＜作成者＞-＜ナンバリング02＞/index.md ようするに、シェルスクリプトを使って、以下のコマンドを実行したい訳です。\n$ hugo new posts/2022-01-06-01-suzuki/index.md 起動パラメータ と、なると、パラメータは以下の三つとなりますね。\n$today 今日の日付\n$number 記事のナンバリング\n$author 作成者\n実行イメージ # 作成者 suzuki の 01 番目の投稿記事 $ bash mkArticle.sh suzuki 01 $ hugo new posts/$today-$number-$author/index.md 気をつけるところは パラメータを省略したときの挙動 $ bash mkArticle.sh 実行した場合に、「作成者が指定されていないからやりなおしてね」というのもちょっと寂しいものがあります。指定していなければ、都度、聞いてきて欲しいものです。そこで readコマンドで作成者を尋ねてくる感じにします。\nif [ -z \u0026#34;$author\u0026#34; ]; then echo \u0026#34;ユーザー名を半角で入力\u0026#34;; read author; fi 同日ファイルの存在を確認 ２．すでに同日に一つ目の記事を投稿してある。要するに生成しようとしているファイルがすでに存在する場合の挙動です。こちらは、ファイルが存在していれば、１を応用して、別のナンバリングを指定するように尋ねてくれると良さそうです。\nwhile [ true ] ;do if [ -f \u0026#34;content/posts/$today-$number-$author/index.md\u0026#34; ]; then echo \u0026#34;$numberファイルが既に存在します。\u0026#34;; echo \u0026#34;別のナンバリングを指定して下さい 02とか03とか\u0026#34;; read number; else break; fi done ですので、ナンバリングの初期値は「01」としておいて、そのファイルが既に存在する場合は、あらためてユーザーにナンバリングを尋ねてくるという手法としました。\nif [ -z \u0026#34;$number\u0026#34; ]; then number=\u0026#34;01\u0026#34;; fi 実行方法 $ bash mkArticle.sh suzuki 01; 前述のとおり作成者、ナンバリングは省略可能です。 $ bash mkArticle.sh ソース全文 #!/bin/bash  : \u0026#39;使い方 一つ目のパラメーターに作成者を指定します 二つ目のパラメータにナンバリングを指定します 一つ目 01(未指定の場合は01） 二つ目 02 （例) $ bash mkArticle.sh suzuki 01; \u0026#39; # #作成者 無指定であれば入力を促す author=$1; #今日の日付 today=$(date \u0026#34;+%Y-%m-%d%n\u0026#34;); #今日のインデクス 一つ目の投稿であれば01 二つ目の投稿であれば02 number=\u0026#34;$2\u0026#34;; # function getParam(){ if [ -z \u0026#34;$number\u0026#34; ]; then number=\u0026#34;01\u0026#34;; fi # if [ -z \u0026#34;$author\u0026#34; ]; then echo \u0026#34;ユーザー名を半角で入力\u0026#34;; read author; fi # while [ true ] ;do if [ -f \u0026#34;content/posts/$today-$number-$author/index.md\u0026#34; ]; then echo \u0026#34;$numberファイルが既に存在します。\u0026#34;; echo \u0026#34;別のナンバリングを指定して下さい 02とか03とか\u0026#34;; read number; else break; fi done } # function execHugo(){ echo \u0026#34;\u0026#34;; echo \u0026#34;hugoコマンドを実行します\u0026#34;; echo \u0026#34;hugo new posts/$today-$number-$author/index.md\u0026#34; hugo new posts/$today-$number-$author/index.md # 処理終了 echo \u0026#34;ファイルの編集は以下の通りです。\u0026#34; echo \u0026#34;vim content/posts/2022-01-06-01-suzuki/index.md;\u0026#34; } # # パラメータの取得 getParam; # hugoコマンドの実行 execHugo; exit; # おわりに 日頃、手間を掛けてコマンドを入力している場合は、シェルスクリプトを使って簡便にできる事に加え、さらにカスタマイズを加え、便利に記事投稿ができるとブログも気分もがぜん盛り上がりますね。\n","date":"2022-01-06T14:21:51+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/","title":"シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし"},{"content":"デザイナーでもできる初めてのHugoの2回目になります。\n前回（デザイナーでもできる初めてのHugo #01）はHugoのインストールから公開の方法までを説明しました。\n今回は前回作成したページをGitHub Pagesを使って公開してみたいと思います。\nGitHub Pages用の設定ファイルを作成 GitHub PagesはGitHubにあるコンテンツを静的ページを公開する機能です。\nSSLまでついているので、非常に便利です。\n公開用のファイルは.github/workflows/gh-pages.ymlというYAML形式のファイルになります。\nname:Hugoon:push:# schedule:# - cron: \u0026#39;*/10 * * * *\u0026#39;jobs:gh-pages:runs-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2with:persist-credentials:falsesubmodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod# https://github.com/marketplace/actions/github-pages-action- name:Setupuses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GITHUB_TOKEN }}publish_branch:gh-pagesnameはGitHubでのActionsに表示される名前になります。\n今回は公開用としてgh-pagesというブランチにわけています。ここおらへんはお好みで設定して下さい。\nhugoでテーマを使っている場合はsubmodules: trueとする必要があります。\nまた、Hugoで更新日をGitの日付と合わせたい場合はfetch-depth: 0として、Gitの履歴を取得するようにしましょう。\nGitHub Pagesの設定 GitHub PagesのURLはhttps://ユーザまたは組織名.github.io/リポジトリ名となります。\nGitHubでリポジトリを作成する際に「ユーザまたは組織名.github.io」とすると「https://ユーザまたは組織名.github.io」とすることができます。\nまずは先程のファイルを含めてサイト全体をGitにアップして、gh-pagesというブランチが作られるのを待ちましょう。\nその後に、setings \u0026gt; Pages にでGitHub Pagesの設定を行います。\n GitHub Pagesの設定 \nYour GitHub Pages site is currently being built from the gh-pages branch\nにあるBranchをgh-pagesに変更します。\n設定は以上です。\nHugoの初期設定であればpublishDir: publicとなっているので、GitHub Pagesではpublicがルートディレクトリとして公開されます。\n.gitignoreに「public」を除外するようにしておきましょう。\n/public /resources 最後に設定したURLにアクセスするとサイトが確認できるはずです。\nまとめ GitHub Pagesを使えば、難しいサーバの設定などをすることなく、無料でSSL付きのサイトを公開することが可能です。\nいくつかの制限はありますが、すごく便利な機能なのでみなさんもぜひ使ってみてはいかがでしょうか。\n公開する際はパスワードなどの情報も一緒にアップしないようにしてください。\n書籍の紹介  いちばんやさしいGit\u0026amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ  実際のワークフローをイメージしながら 実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。 前半は、手元のパソコンでファイルを実際にバージョン管理しながら、 Gitの基本的な使い方を解説。 Amazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Web制作者のためのGitHubの教科書 チームの効率を最大化する共同開発ツール  そろそろ「プルリ」しませんか?しくみを理解して使えば怖くない。リポジトリの作成から複数デザインの提示、「Pull Request」を使った分担作業まで、Webサイト制作を例に実践的なワークフローを身に付ける。 Amazonで詳細を見る   Amazon.co.jpアソシエイトを使用 ","date":"2021-12-28T12:07:19+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings_hub5e89b620d2afe5c10cf3894738f1203_124480_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/","title":"GitHub Pagesを使って無料でSSL付きのサイトを公開"},{"content":"私のe-Statでのデータマイニングの現在の目的は以下の通りです\n大量の政府公開データの中から\n①面白そうなデータをピックアップする\n②データをわかりやすくサマライズする\n・列情報などを必要な項目に絞り込む\n・前年度比５倍とか急激な変化があった場合をピックアップできるようにする\n最終的にはこれらを自動でできるようにしたいです。\n今回は、まず①面白そうなデータをピックアップすることを目的にe-Statを見てみましょう。\nランキングページを見てみよう e-Statのトップページ（https://www.e-stat.go.jp/）の画面の下の方にランキングという欄があります。\nそのランキングの現在(2021/12/26)３位が「アイスクリーム」なんです。\n ランキング \nアイスクリームが含まれるのはどんなデータか 「アイスクリーム」は柔らかめのキーワードなので面白いデータの予感がします。\n「アイスクリーム」が含まれるデータはどんなデータなんでしょうか？\nちょっと見てみましょう。\nhttps://www.e-stat.go.jp/stat-search?page=1\u0026query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0\u0026layout=dataset\n アイスクリーム \n「アイスクリーム」が含まれるデータは7640件あるみたいです。\nちょっと多いですね。。。\n検索条件なのですが、提供分類、表題を検索　データベース、ファイル内を検索にチェックがついています。\n「検索のしかた」をみてみるとキーワードのOR検索やAND検索もできそうです。\n 検索のしかた \nちなみに検索キーワードでの絞り込みはAPI(統計表情報取得)でももちろんできます。\ncurl \u0026quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?appId=xxxxxxxxxx\u0026amp;searchWord=アイスクリーム\u0026quot; アイスクリームだと数が多すぎるので試しに「ガリガリ君」で検索してみましたが、0件でした。「ハーゲンダッツ」で検索したところ22件引っかかってきました。\n ハーゲンダッツ \n「ハーゲンダッツ」どこに出てくるのかなと思ってAPIを一通り叩いてみたのですがAPIの実行結果からは「ハーゲンダッツ」は見つけられませんでした。\nエクセル表示を見てみたところ、「銘柄」という項目に「バニラアイスクリーム，カップ入り（110mL入り），「ハーゲンダッツ バニラ」」とありました。\nどうも全国のアイスクリームの価格を「ハーゲンダッツ　バニラ」を基準に算出しているみたいです。\n excel \nちなみに、2020年だと１番安いのが長野市の221円で１番高いのが那覇市の300円でした。\n 統計表 \n単にハーゲンダッツの価格ってだけだと少しパンチ力弱いかもしれませんね。。。\n個人的には明治のスーパーカップが１位でジャンボモナカが２位でとかアイスクリーム売れ筋ランキングとかの方が楽しいのですが、政府はそこまで調べてくれないですよね。\n小売統計調査とは 小売物価統計調査はお米の価格から葬儀代まで約８００の小売価格を調査したデータ\n調査結果は、年金等の給付見直しの際の基礎資料や、公共料金の上限値を決める際の資料として、幅広く利用されているそうです。\nアイスクリームは約８００ある中の項目の一つです。\n 銘柄 \n小売物価統計調査をピックアップするとしたら、ここ数年で値段が大きく変化しているものや地域間の差が特に大きいものとかですかね。\n「小売物価統計」でgoogle検索して面白そうな記事を見てみると\n「今年のX’マスケーキは小さくなるか」という記事がありました。\nケーキにもよく使われる小麦や油量種子はとりわけ高騰が目立つ\n→\n小売物価統計調査によると、東京都区部の小売価格で、今年11月の1kgあたりの小麦価格は1年前より約20円上昇した。食用油に至っては1kgあたり約60円と大幅な値上がりで、価格が比較的安定している食品の代名詞ともなってきた鶏卵でさえ、1パックあたり約12円上昇した。\n→\nクリスマスイブにケーキを買って帰る人も多いだろうが、今年は例年と比べて値段がほとんど同じなのにサイズが小さくなっていても不思議ではない。\nこんな感じのものは自動的にピックアップできると理想的なんですけどね。\n今日のところのまとめ 自動的にピックアップするとしたら\n・柔らかめのキーワード\n・ここ数年間で値が急激に変化してるもの\n・地域間の格差が大きいもの\nですかね。データを見ていって判定項目を増やしていきたいと思います。\nその他、アイスクリームでの検索結果には「家計調査」というのもありました。\n家計の４半期での支出額の平均を出したものなのですが、アイスクリームの支出は当然夏が冬の倍くらい多い感じになってます。\nアイスクリームは当たり前ですが、その他季節によって大きく支出が違うものって何なのかは少し興味がありますね。\n毎月や四半期ごとに値があるものについては、期間によって差が大きいものはピックアップしても良いかもしれませんね。\n 家計調査 \n","date":"2021-12-26T21:54:39+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/","title":"e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？"},{"content":"今回は前回登場したデータの内容を調べてみましょう。\n「統計表情報取得」（リスト取得）APIで取得したデータをもとにe-Statのサイト（https://www.e-stat.go.jp/）からデータを見つけてみましょう。\n\u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; データを検索してみよう IDで検索できるのが一番良いのですが、キーワード検索のテキストフィールドに入力して検索してもダメでした。\nしょうが無いので、TITLE全文「形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）」で検索しましたがでダメでした。\n少し削って、「形態別国内家計最終消費支出 年度デフレータ—　前年度比」 だと４０５件。\n多すぎるので、SURVEY_DATE、OPEN_DATEを使って調査年、調査月、公開年月で絞り込むと２件に絞り込めました。\nあとはSTATISTICS_NAMEで特定できました。\n詳細ページに行ってみましょう https://www.e-stat.go.jp/stat-search/database?page=1\u0026query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20\u0026layout=dataset\u0026year=20100\u0026month=23070900\u0026open_date=202004\u0026statdisp_id=0003384123\u0026metadata=1\u0026data=1\n上段が「統計表情報取得」の内容\n 統計表情報 \n下段が「メタ情報取得」の内容見たいです。\n メタ情報取得 \nDBをクリックするとグラフが表示されました。\n グラフ \n行情報が「1981年度、1982年度、1983年度。。。」\n列情報が「家計最終消費支出（再掲）、家計最終消費支出（再掲）_居住者家計の海外での直接購入、。。。」\nなんと、APIクリックすると丁寧にクエリを表示してくれました(API仕様書とか見る必要ないですね)。\n API \nフォーマットもXML,JSON,CSVが選べますね。\n私はCSVの方が扱いやすいのでこれからはCSVでダウンロードすることにします。\nappIdがカラに空になっているので追加してcurlで叩くだけでいいですね。至れり尽くりです。\ncurl \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; \u0026quot;tab_code\u0026quot;,\u0026quot;表章項目\u0026quot;,\u0026quot;cat01_code\u0026quot;,\u0026quot;形態別国内家計最終消費支出\u0026quot;,\u0026quot;time_code\u0026quot;,\u0026quot;時間軸（年度）\u0026quot;,\u0026quot;unit\u0026quot;,\u0026quot;value\u0026quot;,\u0026quot;annotation\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;3.8\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1982100000\u0026quot;,\u0026quot;1982年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;2.3\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1983100000\u0026quot;,\u0026quot;1983年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;\u0026quot; . . . \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;17.6\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1982100000\u0026quot;,\u0026quot;1982年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;15.6\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1983100000\u0026quot;,\u0026quot;1983年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;-1.8\u0026quot;,\u0026quot;\u0026quot; データの見方は？ DBで表示させた「統計表表示」と見比べてみると\n グラフ \n\u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;3.8\u0026quot;,\u0026quot;\u0026quot; が１行目「1981年度」の１列目「家計最終消費支出（再掲）」に該当するみたいですね。\n１セル、１行のデータ構造みたいですね。\n１列目の情報がしばらく続いて、全行終わると次は２列目の情報みたいな構成だということがわかりました。\n国民経済計算って何 このデータは国民経済計算を算出したものということですが、国民経済計算ってなんでしょう？\n内閣府のサイトによると\n国民経済計算は「四半期別ＧＤＰ速報」と「国民経済計算年次推計」の２つからなっている。「四半期別ＧＤＰ速報」は速報性を重視し、ＧＤＰをはじめとする支出側系列等を、年に８回四半期別に作成・公表している。「国民経済計算年次推計」は、生産・分配・支出・資本蓄積といったフロー面や、資産・負債といったストック面も含めて、年に１回作成・公表している。\nGDPを算出するための何かみたいですね。\ngoogleの検索結果を見てみると、国や地方自治体のサイトや経済学の解説サイトがメインで、たまに今年のGDPはどうだったという記事でちょっと書かれてたりしました。\n記事の中でちょっと気になったのは、\n日本では新型コロナウイルスの影響で個人消費が落ち込んでおり、貯蓄が増加傾向にあります。内閣府の国民経済計算によると、2020年に消費されずに貯蓄に回ったお金は、一律10万円の特別定額給付金の影響もあり、35.8兆円に達しました。この額は前年の5倍の水準です。\n所得に対する貯蓄の割合を示す家計貯蓄率は13.1%と19年度（3.7%）から大きく上昇した。\n前年度から比較して急激に大きくなったという部分(5倍も！)。こういうのは是非ピックアップしたいと思いました。\ne-Statでのマイニングの目的は とわ言え「国民経済計算」全般的に堅い感じですね。。。。\n私のe-Statマイニングの目的は大量の政府公開データに埋もれている中から人の興味を引きそうな面白そうなコンテンツをピックアップしてわかりやすくサマリーを表示することなのです。\nキーワードランキングを見てみると「アイスクリーム」「身長・体重の平均値」みたいな面白そうな柔らかめのコンテンツもあるんです。\n ランキング \n次回から、\n・e-Statの森の中から面白いコンテンツを見つけよう\n・うまくサマライズして表示しよう\n興味深い列情報に絞りたい\n前年度から５倍とか急激に変化した部分をピックアップして伝えたい\nという視点からe-Statを調査していきたいと思います。\n","date":"2021-12-25T21:55:55+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/","title":"e-Statのデータの見方"},{"content":"書籍の紹介  UNIXという考え方―その設計思想と哲学  UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。 Amazonで詳細を見る   Amazon.co.jpアソシエイトを使用  あらすじ UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。\nそもそもUNIXはMulticsという巨大なOSの開発から生まれたものだ。あまりに巨大なMulticsはその複雑さゆえに開発は遅々として進まず、その反省からケン・トンプソンが作ったのがUNIXの初めとされる。その後デニス・リッチーら多数の開発者が携わり、UNIXは発展した。本書はこのUNIXに込められた「思想と哲学」を抽出し、数々のエピソードとともにUNIXの特徴を浮き彫りにしていく。\nたとえば本書で述べられているUNIXの発想のひとつとして「過度の対話式インタフェースを避ける」というものがある。UNIXのシステムは初心者には「不親切」なつくり、つまり親切な対話式のインタフェースはほとんどなく、ユーザーがコマンドを実行しようとするときはオプションをつける形をとっている。この形式はオプションをいちいち覚えねばならず、初心者に決してやさしくない。しかしこれはプログラムを小さく単純なものにし、他のプログラムとの結合性を高くする。そして結果としてUNIXのスケーラビリティと移植性の高さを支えることになっているのだ。このような形式で本書では9つの定理と10の小定理を掲げ、UNIXが何を重視し、何を犠牲にしてきたのかを明快に解説している。\nこのページはなんだ？ 　という前置きはよいとして、心に余裕があれば、ぜひ本書を読んでいただきたい。全てのLinux初心者必携の書だ。そして、このページは何かというと、この本のエッセンスを抜粋した「メモ」という位置づけとしてとらえて欲しい。\n　一度、本を読んで頂ければ、このメモを見ればいつでもほんの情景がフィードバックされるはずだ。とうぜん、本を読まずしてこのメモを見てもいまいちちんぷんかんぷんかとは思う。\n　ただ、エッセンスからでも読み取れることも多い。\n　解決方法は皆さんにお任せする。\n■１．小さいものは美しい 抜粋 小さなプログラムはわかりやすい 小さなプログラムは保守しやすい 小さなプログラムはシステムリソースに易しい 小さなプログラムは他のツールと組み合わせやすい 「伝統的なプログラマは、巨大なアメリカンプログラムによって、 世界中の全ての問題を一つのプログラムで解決しようとする。」 「プログラムの９０％はクズである。 ただしあらゆるものの９０％はクズである。」 パラメータが一行に収まらない メソッドが画面に収まらない コメントを読まないと何をやっているのか思い出せない lsでモジュール名が多すぎて画面の端から消えていってしまう まだ開発中なのにエラーメッセージの意味を思い出せない 整理するためにソースコードを印刷している自分に気がついた エッセンス 　「スモールイズビューティフル」 「伝統的なプログラマは、巨大なアメリカンプログラムによって、 世界中の全ての問題を一つのプログラムで解決しようとする。」 「プログラムの９０％はクズである。 ただしあらゆるものの９０％はクズである。」 ■２．一つのプログラムには一つの事をうまくやらせる 抜粋 b)入力データは特殊フォーマットが必要か。フォーマット変換プログラムがすでにシステム上にないか。 c)出力データは特殊フォーマットが必要か。通常のASCIIファイルではだめか。 d)新しいプログラムを書かずとも似たような機能を持つ他のプログラムがあるのではないか。 「一つの事をうまくやるようにプログラムを作れないのであれば、 おそらく問題をまだ完全に理解していない。」 「しのびよる多機能主義。 プログラマはいつだってプログラムを遅くする方法を見つける。」 一つの事をうまくやるようにアプリケーションを書けば、それは必然的に小さなプログラムになる。 小さなプログラムは単一機能になる傾向があり、単一機能のプログラムは小さくなる傾向がある。 エッセンス 　「わかることは分けること」 「UNIXユーザーは、自分が何をしているのかをわかっている。 何をしているのかわからないのなら、ここにいるべきではない」 「一つの事をうまくやるようにプログラムを作れないのであれば、 おそらく問題をまだ完全に理解していない。」 ■３．出来るだけ早く試作する 抜粋 　「試作によって学ぶ。早い試作はリスクを減らす。 「正しく」やっている時間などない」 「なにができるか」 むしろ重要な事は、「なにができないか」を知る事だ。」 三つのシステム １．第一のシステム 第一のシステムは正しくやっている時間などない。 第一のシステムは追い詰められた人間が作る。 第一のシステムのコンセプトは人々の想像力を刺激する。 第一のシステムは一人かせいぜい数人からなる小さなグループで作られる。 第一のシステムは高い情熱によって推進され開発は急速に進む。 第一のシステムは実に性能がよい。 ２．第二のシステム 第二のシステムは第一のシステムで証明されたアイデアを継承する。 第二のシステムは委員会が設計する。 第二のシステムは委員会によりものごとを全て公開の場で自分自身の正当化のために議論を進める。 第二のシステムは第一のシステムの成功に便乗し分け前にあずかろうとする自称専門家で作られる。 第二のシステムは自称専門家によりリポジトリ、進捗管理ツールが導入され計画は遅延する。 第二のシステムは自称専門家のプログラムにおきかえられ贅肉がつき像のようにゆっくり動く。 第二のシステムは「最初の設計のひどい欠点を見違えるように改善」され多機能となり無知が使う。 第二のシステムは三つのシステムの中で最悪のシステムである。 ３．第三のシステム 第三のシステムはこれまでのシステムへの反抗から生まれる。 第三のシステムの名前が変わり、オリジナルのアイデアはもはや常識となる。 第三のシステムは第一と第二のシステムの最良の特徴を組み合わせる。 第三のシステムは設計者にとってようやく「正しく」やる事が出来る。 第三のシステムはユーザーが実際に使用する機能しか含まれない。 第三のシステムはディスク、メモリ、CPUサイクルなど最適なバランスが実現されている。 第三のシステムは提供される性能レベルも良くバランスがとれている。 第一のシステムとして「試作」を１ナノ秒でも早く作り、 第一のシステムと第二のシステムのサイクルを反復と協調し、 第三のシステムに向かって協力しながら進んでいく。 エッセンス 　「反復と協調」 「試作によって学ぶ。早い試作はリスクを減らす。 「正しく」やっている時間などない」 「なにができるか」 むしろ重要な事は、「なにができないか」を知る事だ。」 ■４．効率より移植性 抜粋 　UNIXにおいてそれはシェルスクリプトしかない。 次のハードウェアはもっと速く走る。だからプログラムを速くするという誘惑に負けない。 わずかな速度を求めてCで書き直さない。それは時間の無駄だ。 シェルスクリプトをあれこれいじる余裕が一瞬でも生じればほとんどのプログラマは a) 新しい機能をいくつか付け加えようとする b) スクリプトそのものを洗練し、実行速度を高めようとする c) その一部、または大部分をCで書き直してパフォーマンスの向上を図ろうとする。 「最も効率の良い方法は、 ほとんどの場合「移植性」に欠ける。」 「移植か死か。優れたソフトウェアは移植され成長し、 それ以外は取り残され捨てられる。」 DQ1カートリッジ(64kb)用のコード 自分のプログラマ人生で最も効率の良い、そして移植の難しいコード」を書いた。 命令をデータとして扱い、データを命令として扱った。 走査線が画面の右端から左端に引き返すまでの間を狙って命令を実行した。 メモリ節約のためありとあらゆる技を駆使した。 こうしてできあがったコードは芸術品と言えるほど見事なものだった。 フォルクスワーゲンのビートルに２０人ほど詰め込むようなものだった。 そして保守担当者にとっては究極の悪夢でもあった。 エッセンス bashとawkとsed 「最も効率の良い方法は、 ほとんどの場合「移植性」に欠ける。」 「移植か死か。優れたソフトウェアは移植され成長し、 それ以外は取り残され捨てられる。」 ■５．出力結果はASCIIフラットファイルに保存する 抜粋 　「動かせないデータは死んだデータだ。」 出力結果はASCIIフラットファイルに保存する。 RDBを使わない。 中間ファイルをはき出さない。 エッセンス 　中間ファイルは作らない　RDBは使わない 「動かせないデータは死んだデータだ。」 ■６．ソフトウェアを梃子として使う　 抜粋 　梃子の支点をいかに自分のほうに近づける事が出来るか 独自技術症候群を避け、すでにあるものにクリエイティブな付加価値をつける 独自技術症候群は創造性を伸ばさない。 「良いプログラマはよいコードを書く。 偉大なプログラマは良いコードを借りてくる。」 エッセンス 　「良いプログラマはよいコードを書く。 偉大なプログラマは良いコードを借りてくる。」 ■７．シェルスクリプトによって梃子の効果と移植性を高める　パイプ 抜粋 　シェルスクリプトには恐ろしいほどの梃子の効果がある シェルスクリプトは梃子の降下で時間も節約する シェルスクリプトはCより移植性が高い 「熟練プログラマはシェルスクリプトを熱心に使う。 あなたもまたそうするべきだ。」 「UNIXの源流は高水準の抽象化モデル「シェルスクリプト」であり、 それは今も普遍である。」 「私は人生で二度しか奇跡を見た事がない。 一つは核融合、もう一つは複利だ 少量のものを繰り返し掛け合わせていく事で、 やがて奇跡的な規模に達する。」アインシュタイン シェルスクリプト一行はおよそ１万倍の複利を生む ```bash echo who | awk '{ print $1 ; }' | sort | uniq | sed -e \u0026quot;s/ /, /g\u0026quot; ; echo 177 who 755 awk 3411 sort 2614 uniq 302 sed 2093 ------------------------- 9.353 処理をパイプでつなぎ処理全体を一行で完結させる。 「ひとつのことをうまくやる」の良い事例だ。 function sh_func_getTitle() { TITLE=$(echo ${URLGETOPT} | \\ 　while read line ;do if echo \u0026#34;$line\u0026#34; | grep -i \u0026#34;title=\u0026#34; \u0026gt; /dev/null; then echo \u0026#34;$line\u0026#34; | \\ 　sed -e \u0026#34;s/^.*title=\\x27//g\u0026#34; \\ 　-e \u0026#34;s/\\x27.*$//g\u0026#34; \\ 　-e \u0026#34;s/\\r//g\u0026#34; \\ 　-e \u0026#34;s/\u0026lt;[^\u0026gt;]*\u0026gt;//g\u0026#34; \\ 　-e \u0026#34;s/^[●○■□△▽]//g\u0026#34;; fi done); } エッセンス 　「私は人生で二度しか奇跡を見た事がない。 一つは核融合、もう一つは複利だ 少量のものを繰り返し掛け合わせていく事で、 やがて奇跡的な規模に達する。」 ■８．全てのプログラムをフィルタとして設計する 抜粋 　メソッド間の入力をstdin、出力はstdoutを使用する\nオンメモリでコマンドフィルタとして稼働する。\nfunction trim(){ if [ -p /dev/stdin ]; then cat - ; else echo -n ; fi | sed -e \u0026#39;s/^ *//g\u0026#39; -e \u0026#39;s/ *$//g\u0026#39; } 実行結果 echo \u0026#34; ほげ \u0026#34; | trim ; ほげ 　以下でも良い。　function trim(){ awk \u0026#39;{ print $1; }\u0026#39; | sed -e \u0026#39;s/^ *//g\u0026#39; -e \u0026#39;s/ *$//g\u0026#39; \u0026lt;/dev/stdin } 実行結果 echo \u0026#34; ほげ \u0026#34; | trim ; ほげ エッセンス メソッド間の入力をstdin、出力はstdoutを使用する ■９．並行して考える 抜粋 　並列処理が可能なメソッドを積極的に書く\nメソッドの並列処理 1 #!/bin/bash 2 cmd() { 3 echo \u0026#34;Hello, $1!\u0026#34;; 4 } 5 function sh_xargs(){ 6 export -f cmd 7 yes | head -1000 | xargs -n1 -P4 -I % bash -c \u0026#34;cmd %\u0026#34; 8 } 9 sh_xargs ; エッセンス 　並列処理が可能なメソッドを積極的に書く ■１０．木を守る 抜粋 　UNIXユーザーは紙のドキュメントを忌み嫌う。不要なドキュメントを印刷して整理する事はしない。 ソースコードが実体であり、高水準のドキュメントとなるようプログラムする。 エッセンス 　UNIXはドキュメントを忌み嫌う ","date":"2021-12-25T09:25:50+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/","title":"「UNIXという考え方―その設計思想と哲学」　メモ"},{"content":"知識ゼロからのe-Statマイニング\n日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-Statという日本の統計が閲覧できる政府統計ポータルサイトを発見しました。\nアイスの売り上げから子供の平均身長まで大量の統計資料が公開されており、しかもAPIまであるすごいサイトです。 このe-Statをマイニングしてみようと思います。\nまずはAPIを叩くところまでやってみます。\nまずはアプリケーションIDを取得しよう APIを叩くにはアプリケーションIDが必要です。\nまずはアプリケーションIDを取得しましょう。\nアプリケーションIDを取得するにはユーザー登録が必要です。以下のURLから手順に従ってユーザー登録してください。\nhttps://www.e-stat.go.jp/mypage/user/preregister\nアプリケーションIDはログイン後マイページ内のAPI機能(アプリケーションID発行)で取得できます。\nhttps://www.e-stat.go.jp/mypage/view/api\n入力項目は名称、URL、概要の３つです。\n名称、概要は適当で大丈夫です。\nURLは、http://localhostだと私はダメだったのでこのサイトのURLを設定しました。\n発行ボタンを押すとappIdにアプリケーションIDが払い出されます。\nAPIを叩いてみよう APIの仕様は以下のURLに記載されています。\nhttps://www.e-stat.go.jp/api/api-info/e-stat-manual3-0\n難しいです。\nなんとなく、「統計表情報取得」でリストを取得して、「メタ情報取得」「統計データ取得」で個別のデータを取得する感じでしょうか？\nまずは叩いてみます。\n統計表情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=xxxxxxxxx\u0026amp;lang=J\u0026amp;searchKind=\u0026amp;searchWord=\u0026quot; \u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; LIST_INF idの「0003384123」」が個別データのidみたいです。これを使ってメタ情報取得、統計情報取得を呼び出します。\n##メタ情報取得\ncurl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=xxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_META_INFO xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetMetaInfo.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:35:07.926+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;METADATA_INF\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;CLASS_INF\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;tab\u0026quot; name=\u0026quot;表章項目\u0026quot; description=\u0026quot;Excelの書式設定で統計表の数値を\u0026amp;quot;-0.0\u0026amp;quot;としている場合、データベース上\u0026amp;quot;0.0\u0026amp;quot;として収録されているため、Excel統計表の数値とは必ずしも一致しない。\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;前年度比\u0026quot; level=\u0026quot;\u0026quot; unit=\u0026quot;％\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;cat01\u0026quot; name=\u0026quot;形態別国内家計最終消費支出\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;11\u0026quot; name=\u0026quot;家計最終消費支出（再掲）\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;12\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;13\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_（控除）非居住者家計の国内での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;14\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;15\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;16\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_半耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_非耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;18\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_サービス\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;time\u0026quot; name=\u0026quot;時間軸（年度）\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;1981100000\u0026quot; name=\u0026quot;1981年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1982100000\u0026quot; name=\u0026quot;1982年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1983100000\u0026quot; name=\u0026quot;1983年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1984100000\u0026quot; name=\u0026quot;1984年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1985100000\u0026quot; name=\u0026quot;1985年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1986100000\u0026quot; name=\u0026quot;1986年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1987100000\u0026quot; name=\u0026quot;1987年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1988100000\u0026quot; name=\u0026quot;1988年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1989100000\u0026quot; name=\u0026quot;1989年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; 上の方がデータ内容の説明なのか？よくわかりません。\n統計情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000\u0026amp;appId=xxxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=N\u0026amp;cntGetFlg=N\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_STATS_DATA xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetStatsData.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:37:22.156+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;DATA_FORMAT\u0026gt;X\u0026lt;/DATA_FORMAT\u0026gt; \u0026lt;START_POSITION\u0026gt;1\u0026lt;/START_POSITION\u0026gt; \u0026lt;LIMIT\u0026gt;10000\u0026lt;/LIMIT\u0026gt; \u0026lt;METAGET_FLG\u0026gt;N\u0026lt;/METAGET_FLG\u0026gt; \u0026lt;CNT_GET_FLG\u0026gt;N\u0026lt;/CNT_GET_FLG\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;STATISTICAL_DATA\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;TOTAL_NUMBER\u0026gt;232\u0026lt;/TOTAL_NUMBER\u0026gt; \u0026lt;FROM_NUMBER\u0026gt;1\u0026lt;/FROM_NUMBER\u0026gt; \u0026lt;TO_NUMBER\u0026gt;232\u0026lt;/TO_NUMBER\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;DATA_INF\u0026gt; \u0026lt;NOTE char=\u0026quot;***\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;NOTE char=\u0026quot;-\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1981100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;3.8\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1982100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.3\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1983100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1984100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1985100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;1.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1986100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.1\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1987100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1988100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1989100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.5\u0026lt;/VALUE\u0026gt; VALUEが値みたいですがどういう列情報になっているのでしょうか？\nとりあえずAPIはお手軽に叩けることがわかりました。\n次回以降はデータの内容を理解していこうと思います。\n","date":"2021-12-24T18:12:54+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/","title":"知識ゼロからのe-Statマイニング"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話 【ssh/bash】ssh/Bashでサーバーへログイン・実行・ログアウトの一連自動化処理を作ってみようって話  やりたいこと sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトしてローカルに何事もなかったかのようにもどってくる最も簡単な方法ってなにかないでしょうか。\nイメージ 従来の方法\nローカルＰＣのターミナル ↓ Linuxサーバーにログイン $df $uptime などを実行 ↓ Linuxサーバーをログアウト ローカルＰＣにもどる これからつくるBash/ssh\nローカルＰＣのターミナル ↓ Linuxサーバーにログイン $df $uptime などを実行 Linuxサーバーをログアウト ↓ ローカルＰＣのターミナルにもどる わかりにくいですか？\nまず、メリットとしてサーバーでコマンドからログアウトする必要がありません。\nこれができれば、一台一台サーバーのヘルスチェックをせずとも、数十台のサーバーを\n順番に訪ね歩きファイルに出力する事も可能です。\n以下、ソースです。\n#!/usr/bin/bash ############################################## # sshでサーバーにログインして、なんらかのコマンドを # 実行しターミナルに表示、ミッション終了後、ターミ # ナルを自動的にログアウトしてローカルに何事もなか # ったかのようにもどってくる最も簡単シェルスクリプト ############################################## # # サーバーのＩＰアドレスとか SERVER=\u0026quot;centos@xx.xx.xx.xxx\u0026quot; # 実行したいコマンドを \u0026amp;\u0026amp; でつなぐ COMMAND=\u0026quot;uptime \u0026amp;\u0026amp; df -h\u0026quot;; echo \u0026quot;centosサーバーログイン\u0026quot;; # ポイントは -t です。 ssh $SERVER -t $COMMAND; echo \u0026quot;centosサーバーログアウト\u0026quot;; exit; たったこれだけですが、この工夫により多くのサーバーを\nスクリプトで一括回遊することができます。 お試しあれ。\n","date":"2021-12-24T11:55:21+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/","title":"【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法"},{"content":"hugoでscssやsassを含んだファイルををGitHubに公開、Git Actionで自動ビルドしようとした際に、見慣れないエラーが表示された\nRun hugo --minify Error: Error building site: TOCSS: failed to transform \u0026quot;scss/style.scss\u0026quot; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS. : this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information ... Total in 148 ms Error: Process completed with exit code 255. はて？なにか悪いことでもしたのだろうか。\nそれとも変な記述をしてしまったのだろうか。\nエラーの内容 こういうときは、落ち着いてエラーを見てみよう。\n大抵のことはちゃんと教えてくれているはずだ。\nCheck your Hugo installation; you need the extended version なるほど、extended を使えと行っている。\nextended とはなんだろう。\nエラーの対応 さらに落ち着いて設定ファイルを確認することをおすすめする。\n.github/workflow/gh-pages.yml\n- name:Setupuses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.87.0\u0026#39;#extended: true設定の extended が思いっきりコメントアウトされていました\nコメントを外して、再度Gitにpushしたところ、正常にビルドされて公開できました。\nまとめ scssやsassを含んだファイルをhugoをgitに公開しようとした際に、ビルドできない場合は設定を確認することをおすすめする。\n","date":"2021-12-24T09:43:41+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/af7ef3c0-44c1-4f2f-aad8-1a0664724558_huf3902e4d08fb0294f3a250034e0748e3_207097_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/","title":"SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  プログレスバー ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。\n処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。\nシェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい\n使い方 処理のループ中に以下の1行を追記します。\nprogress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; 実行手順 以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。\n$ :\u0026gt; Progress.sh $ vim Progress.sh # vimで以下のソースコードを貼り付けて保存 # ソースコードのファイルエンコードをUTF-8に変更します。 $ nkf -wLu Progress.sh \u0026gt; Progress.sh.utf8 # ファイルエンコードを変更したファイルを元のファイル名にリネームします。 $ mv Progress.sh.utf8 Progress.sh # 実行権限を付与します $ chmod +x Progress.sh # 実行 $ ./Progress.sh ソースコード #! /bin/bash  ####################################### # 進捗を表示するプログレスバー #  ####################################### # # # percent $1  # GT $2 progress(){ percent=$1; GT=$2; column=`expr 71 \\* \u0026#34;$percent\u0026#34; / $GT`; nspace=`expr 71 - \u0026#34;$column\u0026#34;`; #プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入 bar=\u0026#39;\\r[\u0026#39;; #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026#34;$column\u0026#34; ];do bar=$bar\u0026#39;=\u0026#39;; # barに=を追加 set - \u0026#34;$@\u0026#34; dummy; # $#をインクリメント done bar=$bar\u0026#39;\u0026gt;\u0026#39;; #barの先端に\u0026gt;を追加 #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026#34;$nspace\u0026#34; ]; do bar=$bar\u0026#39; \u0026#39;; set - \u0026#34;$@\u0026#34; dummy; done bar=$bar\u0026#39;]\u0026#39;$percent/$GT\u0026#39;\\c\u0026#39;; # barに]と１行分のプログレスバーを表示 echo -e \u0026#34;$bar\u0026#34;; } ####################################### # メイン処理 # set count ; MAX=100 ; #最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。 # for (( i=0; i\u0026lt;$MAX; i++)){ # ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。 progress \u0026#34;$#\u0026#34; \u0026#34;$MAX\u0026#34;; set - \u0026#34;$@\u0026#34; count ; } echo \u0026#34;\u0026#34;; # #終了 exit ; 使い方 シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。\n自作ソースの中のループ処理の関数の頭に以下を追記します。\nMAX=100; は、処理の最大値を指定します。\n処理のループ最大数が150回であれば、以下の通りに修正します。\nset count; MAX=150; forやwhileループ処理の中に以下を埋め込みます。\nprogress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; 最後にforまたはwhileループを抜けた後に\necho \u0026quot;\u0026quot;; を追加します。これだけです。\n実行結果  \n","date":"2021-12-23T16:10:20+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/","title":"【プログレスバー】Bashでプログレスバーを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。\n圧縮ファイルと実行コマンド、パラメータ一覧  拡張子 パラメータ tgz | tar.gz tar zxvf tar.Z gunzip tar.bz2 tar xvfj tar tar xvfz gz gunzip Z gunzip bz2 bunzip2 zip unzip こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。\n実行例 # 圧縮ファイルを解凍する便利な unCompコマンド $ unComp comp.tar.gz2 作成 まずファイルを作ります。ファイル名は unComp とします\n# unComp というファイルを作成 $ :\u0026gt; unComp # vim で unComp を開く $ vim unComp unCompファイルに以下の内容を貼り付ける\n#!/bin/bash # #圧縮されているファイルを解凍する # unComp を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # # cp unComp /usr/local/bin/unComp # # 実行例 # $ unComp filename(圧縮ファイル) # if [ $# -ne 1 ]; then echo \u0026quot;\u0026quot; exit ; fi # case $1 in *.tgz | *.tar.gz) tar zxvf $1 ;; *.tar.Z) gunzip $1 tar xvf $( echo \u0026quot;$1\u0026quot; | sed 's/\\.Z$//') ;; *.tar.bz2) tar xvfj $1;; *.tar) tar xvfz $1;; *.gz) gunzip $1;; *.Z) gunzip $1;; *.bz2) bunzip2 $1;; *.zip) unzip $1;; *) echo \u0026quot;ファイルの拡張子が対応していません:$1\u0026quot; esac exit ; 作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。\nwLuをつかってUTF-8に変換するとさらに便利です。\n# unComp ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu unComp \u0026gt; unComp.txt # unComp.txtをunCompにリネームします $ mv unComp.txt unComp # 作成したunCompコマンドファイルを/usr/local/bin にコピーします $ sudo unComp /usr/local/bin/ # コマンドが配置されたかを確認 $ which unComp $ /usr/local/bin/unComp 使い方 # 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する # 実行 $ unComp sample.zip 圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。\n便利ですね。\n","date":"2021-12-23T13:11:13+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/","title":"【unComp】Bashで便利なコマンドを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  必要なもの ネットワーク漢字フィルター nkf\n※macの場合、Homebrew が必要になります。\nnkf インストールの手順 まず、nkfがインストールされているかを確認します。\n$ which nkf /usr/local/bin/nkf インストールされていない場合、macの場合はbrewでインストールします。\n$ brew install nkf インストールしようとすると以下のエラーが出ることがあります\nError: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink share/man/ja/man1/nkf.1 /usr/local/share/man/ja/man1 is not writable. 権限周りを下記のコマンドを打って変更します。\nsudo chmod 775 /usr/local/share/man/ja/man1 sudo chown \u0026lt;ユーザ名\u0026gt;:admin /usr/local/share/man/ja/man1 下記のページを参考にさせていただきました\n\nコマンドを確認します。\n$ nkf -v Network Kanji Filter Version 2.1.5 (2018-12-15) Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa). Copyright (C) 1996-2018, The nkf Project. 使い方 nkfコマンドとは？\n「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。\nnkfコマンドの書式\nnkf オプション ファイル名\nUTF-8に変換する場合は、オプションに wLu をつけて変換します。\n$ nkf -wLu isofile.txt \u0026gt; utf8.txt 変換の流れ（手動編） 元ファイル moto.txt (UTF-8以外のファイルエンコード、改行コード）\n↓\n変換後のファイル ato.txt(UTF-8に変換したファイル）\n↓\n変換後のファイルをリネームする\n# UTF-8に変換 $ nkf -wLu moto.txt \u0026gt; ato.txt # 変換後のファイルを元のファイル名にリネームする $ mv ato.txt moto.txt # vimiでファイルエンコードを確認する $ vim moto.txt 面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。\n変換の流れ（自動編） # UTF-8に変換 wLu コマンドをこれから自作します $ wLu moto.txt $ vim moto.txt ← UTF-8 に変換されている！ コマンドの内容 まずファイルを作ります。ファイル名は wLu とします\n# wLu というファイルを作成 $ :\u0026gt; wLu # vim で wLu を開く $ vim wLu 以下の内容をファイルに貼り付ける\n#!/bin/bash ################################################# # パラメータで渡されたファイル名をutf8に変換する # # 使い方 # wLu UTF-8に変換したいファイル名 # wLu を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # ################################################# # filename=\u0026quot;$1\u0026quot; ; # function wLu(){ if [ -f \u0026quot;$filename\u0026quot; ]; then cat \u0026quot;$filename\u0026quot; | nkf -wLu \u0026gt; \u0026quot;$filename\u0026quot;.u ; mv \u0026quot;$filename\u0026quot;.u \u0026quot;$filename\u0026quot; ; fi } # if ! which nkf \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then echo \u0026quot;nkf がありません\u0026quot; ; echo \u0026quot;nkf をインストールして下さい\u0026quot; ; exit ; fi # if [ -z \u0026quot;$filename\u0026quot; ] ; then echo \u0026quot;第一引数にファイル名を指定して下さい\u0026quot; echo \u0026quot;実行例： wLu filename\u0026quot; ; exit ; fi # 実行 wLu ; # 終了 exit ; 作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。\n# wLu ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu wLu \u0026gt; wLu.txt # wLu.txtをwLuにリネームします $ mv wLu.txt wLu # 作成したwLuコマンドファイルを/usr/local/bin にコピーします $ sudo wLu /usr/local/bin/ # コマンドが配置されたかを確認 $ which wLu $ /usr/local/bin/wLu 使い方 # UTF-8以外のファイルエンコードファイル $ cat moto.txt $ wLu moto.txt 変換結果を一時ファイルにし、リネームする手間が省けます。\n便利ですね。\n","date":"2021-12-23T10:27:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/","title":"【wLu】Bashで便利なコマンドを作ってみようって話"},{"content":"エラーの内容 記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について\nhugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。\nStart building sites …\nTotal in 10 ms\nError: Error building site: \u0026ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1\u0026rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed\n原因 このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。\nvim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？\n対応 この場合ファイルの文字コードをUTF8に変更してみましょう。\nnkf -wLu ファイル名 \u0026gt;一時保存ファイル名; mv 一時保存ファイル名 ファイル名 一時保存した後にmvで戻したり面倒ですよね。\n面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。\nhttps://github.com/suzukiiichiro/linuxConfig/blob/master/wLu\nhugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。\n","date":"2021-12-22T21:22:23+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-03/error_hu7e39d96c0286759ff592e45a50a24444_91990_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-03/","title":"hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー"},{"content":"github pagesでもgoogle adsenseの審査に通過したい！\nということで色々先人の方達のサイトをみさせていただいたところ\ngoogle adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。\n内容はとりあえずコピペで行こう まずはコピペOKの親切な方のサイトを探します。\n内容については以下のサイトを参考にさせていただきました。\nhttp://liberty-life-blog.com/wordpress/privacy-policy/\n設定 以下のコマンドでhugoでページを作成します。\nhugo new page/privacy.md コンテンツの構成を以下のように管理しているのでpage以下に保存しました。\ncontent/posts \u0026ndash; 記事\n/page \u0026ndash; about usページなど\n/assetes \u0026ndash; 画像など\nvim content/page/privacy.md --- title: \u0026quot;Privacy\u0026quot; date: 2021-12-22T17:16:15+09:00 draft: false --- ページの内容を２個目の\u0026mdash;以下に貼り付けます\ndraft: true に変更します\nhugo ビルドします\nフッターにリンクを置こう フッターの内容を修正してプライバシーポリシーのリンクを設置します。\nthemes以下にあるファイルを直接書き換えるのではなく\nlayoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。\nlayouts/partial/footer/footer.html\u0026lt;\u0026ndash;優先順位高い\nthemes/テーマ名/layouts/partial/footer/footer.html\nlayouts/partial/footer/footer.html を新規に作成して\n以下の内容を入力\n\u0026lt;footer class=\u0026quot;site-footer\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;{{ .Site.BaseURL }}privacy/\u0026quot;\u0026gt;プライバシーポリシー\u0026lt;/a\u0026gt; \u0026lt;section class=\u0026quot;copyright\u0026quot;\u0026gt; \u0026amp;copy; {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026quot;2006\u0026quot;))) }} {{ .Site.Params.footer.since }} - {{ end }} {{ now.Format \u0026quot;2006\u0026quot; }} {{ .Site.Title }} \u0026lt;/section\u0026gt; \u0026lt;/footer\u0026gt; リンクの書き方が\n{{ .Site.BaseURL }}privacy/\nのは注意\n","date":"2021-12-22T17:40:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-02/privacy_hu6d356af4ff9900abfdb99df6dc97252e_302641_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-02/","title":"プライバシーポリシーページを設置する"},{"content":"CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。\nWordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。\n色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。\n無料で、httpsも設定できるので非常に便利です。\nHugoのインストール Hugoを使うためにはhugoをインストールする必要があります。\nインストールは簡単です。\n※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。\nHomebrew が必要になります。\nbrew install hugo 設定 hugoのインストールが終わったら、サイトを作成します。\nhugo new site ＜作成するディレクトリ＞ 色々表示されているかと思いますが、気にしないで大丈夫です。\n設定ファイル hugoの設定はTOMLという形式で記述します。\nTOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。\nその場合はconfig.tomlを削除して下さい。\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot;  baseURL: サイトの公開URL languageCode: HTMLのlang部分 title: サイトの名前  記事の投稿 記事を作成するにはコマンドを打つ必要があります\nhugo new posts/helloworld.md このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます\nテーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。\n下書きから公開へ 作成されたファイルはmarkdown形式で記述されています。\n--- title: \u0026quot;helloworld\u0026quot; date: 2021-12-22T11:23:09Z draft: true --- draft の部分が下書き状態を表しています。\ntrueにすることで公開となり表示されます。\n確認 サイトの確認を行うには\nhugoをインストールしたディレクトリで\nhugo server を実行します。\nこの場合は公開されている記事のみを表示した状態のサーバが立ち上がります。\n未公開も含めたい場合は\nhugo server -D とすることで表示できます。\n公開 公開をするにはサイト全体を構築し直す必要があります。\nhugo このコマンドでサイト全体が自動的に生成されます。\n作成されたサイトは初期状態ではpublicディレクトリに展開されます。\nconfigのpublicDirに任意のディレクトリを設定することも可能です\npublicDir = 'docs' この場合はdocsディレクトリに公開ファイルが展開されます。\n終わりに 駆け足でしたが、hugoの簡単な使い方になります。\n大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。\nみなさんもぜひ、hugoを試してみて下さい。\n","date":"2021-12-22T13:07:49+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/2021-12-22-hugo-01_hub5e89b620d2afe5c10cf3894738f1203_83896_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/","title":"デザイナーでもできる初めてのHugo #01"},{"content":"Hugoでテーマが反映されない（画面が真っ白のまま）\n$ git submodule update --init --recursive ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21/2021-12-21_hud06831bf5e2aede9b7d29f34463c4a46_63839_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21/","title":"Hugoでテーマが反映されない（画面が真っ白のまま）"},{"content":"$ hugo new posts/[ファイル名].md $ vim content/posts/2021-12-21.md draft: false にする事でドラフトを公開にすることができる\nビルドする\n$ hugo ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-01/2021-12-21-1_hubb580b3412968a99eba9faea3f838cef_148014_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-01/","title":"Hugoで記事の投稿の仕方"}]