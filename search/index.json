[{"content":"出典元：8 Essential CSS Tips and Tricks Every Developer Should Know\nCSSは、HTMLスケルトンを設定した後、Webページにスタイルを追加するために使用されます。さらに、わずか数行のコードでCSSで洗練されたデザインを作成できます。\nすべての開発者は、プロジェクトを迅速かつ効率的に開発するために、これらのCSSのトリックを知っている必要があります。あなたの生産性を次のレベルに確実に向上させます。\nそれでは始めてみましょう。\nhover効果 ：hoverセレクターを使用して、HTML要素にホバー効果を追加できます。\n次の例ではボタン要素にホバー効果を追加します。\n\u0026lt;button\u0026gt;Hover Over Me\u0026lt;/button\u0026gt; button:hover { color: #0062FF; border: #0062FF solid 1px; background: #FFFF99; } このコードをいじって、フェードイン、拡縮、変形などのエフェクトを追加できます。\nCSSホバーへのフェードイン効果 button{ opacity: 0.5 } button:hover{ opacity: 1; } CSSホバーへの拡縮効果 button:hover{ -webkit-transform: scale(1.2); -ms-transform: scale(1.2); transform: scale(1.2); } divコンテナに合うように画像のサイズを変更します height、width、およびobject-fitプロパティを使用して、divコンテナに合うように画像のサイズを変更できます。\n\u0026lt;img class=\u0026#34;random-image\u0026#34; src=\u0026#34;画像ファイル\u0026#34; /\u0026gt; .random-image { eight: 100%; width: 100%; object-fit: contain; } すべてのスタイルをオーバーライドする !important を使用して、属性の他のすべてのスタイル宣言（インラインスタイルを含む）をオーバーライドできます。\n\u0026lt;p class=\u0026#34;className\u0026#34; id=\u0026#34;idName\u0026#34; style=\u0026#34;background-color: orange;\u0026#34;\u0026gt; Hello World! \u0026lt;/p\u0026gt; p { background-color: yellow; } .className { background-color: blue !important; } #idName { background-color: green; } この例では、!importantルールが他のすべての背景色宣言をオーバーライドし、背景色が緑ではなく青に設定されるようにします。\nただし、!important は便利ではありますが、使いすぎると上書きできないといった不具合にもつながるので、できるだけ階層を持ったCSSの記述を心がけてください。\n三点リーダー text-overflow のCSSプロパティを使用して、オーバーフローしたテキストを省略記号（\u0026hellip;）で切り捨てることができます。\n\u0026lt;p class=\u0026#34;text\u0026#34;\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit, sed do eiusmod tempor. \u0026lt;/p\u0026gt; .text { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 200px; } 文字の変形 text-transform CSSプロパティを使用して、テキストを強制的に大文字、小文字、または大文字にすることができます。\n指定文字を大文字にする（Uppercase） text-transform: uppercase;のCSSを使用すると、クラスなどで指定した範囲をすべて大文字表示にできます。\n\u0026lt;p class=\u0026#34;uppercase\u0026#34;\u0026gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. \u0026lt;/p\u0026gt; .uppercase { text-transform: uppercase; } 指定文字を小文字にする（Lowercase） text-transform: lowercase;のCSSを使用することで、クラスなどで指定した範囲をすべて小文字表示にできます。\n\u0026lt;p class=\u0026#34;lowercase\u0026#34;\u0026gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. \u0026lt;/p\u0026gt; .lowercase { text-transform: lowercase; } 先頭を大文字に（Capitalize） 先頭文字のみを大文字（Capitalize）したい場合は text-transform: capitalize; のCSSを使用します。\n\u0026lt;p class=\u0026#34;capitalize\u0026#34;\u0026gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. \u0026lt;/p\u0026gt; .capitalize { text-transform: capitalize; } 単一行プロパティ宣言の使用 CSSの省略形のプロパティを使用して、コードを簡潔で読みやすくすることができます。\nたとえば、CSS backgroundは、background-color、background-image、background-repeat、およびbackground-positionの値を定義できる省略形のプロパティです。\n同様に、フォント、境界線、マージン、およびパディングのプロパティを定義できます。\n単一行のbackgroundプロパティ宣言 background-color: black; background-image: url(images/xyz.png); background-repeat: no-repeat; background-position: left top; 上記の宣言を1行に簡略化できます。\nbackground: black url(images/xyz.png) no-repeat left top; 省略形のプロパティは非常に使いやすいですが、ブラウザ依存などもあるので、使用する際には、 tricky edgecases （MDN Web Docsで概説されている）を考慮する必要があります。\nツールチップ ツールチップは、ユーザーがマウスポインターを要素上に移動したときに、要素に関する詳細情報を表示する方法です。\n右方向のツールチップ \u0026lt;div class=\u0026#34;tooltip_div\u0026#34;\u0026gt; Right Tooltip \u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;This is the Tooltip text\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; body { text-align: center; } .tooltip_div { position: relative; display: inline-block; } .tooltip_div .tooltip { visibility: hidden; width: 170px; background-color: blue; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; /* Positioning the tooltip */ position: absolute; z-index: 1; top: -5px; left: 105%; } .tooltip_div:hover .tooltip { visibility: visible; } 左方向のツールチップ \u0026lt;div class=\u0026#34;tooltip_div\u0026#34;\u0026gt; Left Tooltip \u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;This is the Tooltip text\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; body { text-align: center; } .tooltip_div { position: relative; display: inline-block; } .tooltip_div .tooltip { visibility: hidden; width: 170px; background-color: blue; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; /* Positioning the tooltip */ position: absolute; z-index: 1; top: -5px; right: 105%; } .tooltip_div:hover .tooltip { visibility: visible; } 上方向のツールチップ \u0026lt;div class=\u0026#34;tooltip_div\u0026#34;\u0026gt; Top Tooltip \u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;This is the Tooltip text\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; body { text-align: center; } .tooltip_div { position: relative; display: inline-block; } .tooltip_div .tooltip { visibility: hidden; width: 170px; background-color: blue; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; /* Positioning the tooltip */ position: absolute; z-index: 1; bottom: 100%; left: 50%; margin-left: -60px; } .tooltip_div:hover .tooltip { visibility: visible; } 下方向のツールチップ \u0026lt;div class=\u0026#34;tooltip_div\u0026#34;\u0026gt; Bottom Tooltip \u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;This is the Tooltip text\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; body { text-align: center; } .tooltip_div { position: relative; display: inline-block; } .tooltip_div .tooltip { visibility: hidden; width: 170px; background-color: blue; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; /* Positioning the tooltip */ position: absolute; z-index: 1; top: 100%; left: 50%; margin-left: -60px; } .tooltip_div:hover .tooltip { visibility: visible; } Bootstrapライブラリを使用して、カスタムの Bootstrap tooltips を作成することもできます。\n影を追加 text-shadowおよびbox-shadowCSSプロパティをそれぞれ使用して、テキストおよび要素にCSSシャドウ効果を追加できます。\n文字に影を追加 text-shadow CSSプロパティは、テキストに影とレイヤーを追加します。 text-shadowプロパティは、テキストに適用されるシャドウのコンマ区切りリストを受け入れます。\n/* text-shadowには4つのCSSプロパティがあります:offset-x, offset-y, blur-radius, and color */ /* offset-x | offset-y | blur-radius | color */ text-shadow: 2px 2px 4px red; /* color | offset-x | offset-y | blur-radius */ text-shadow: #18fa3e 1px 2px 10px; color および blur-radius 引数はオプションです。\nこんなこともできます。\nbackground: #e74c3c; color: #fff; font-family: lato; text-shadow: 1px 1px rgba(123, 25, 15, 0.5), 2px 2px rgba(129, 28, 18, 0.51), 3px 3px rgba(135, 31, 20, 0.52), 4px 4px rgba(140, 33, 22, 0.53), 5px 5px rgba(145, 36, 24, 0.54), 6px 6px rgba(150, 38, 26, 0.55), 7px 7px rgba(154, 40, 28, 0.56), 8px 8px rgba(158, 42, 30, 0.57), 9px 9px rgba(162, 44, 31, 0.58), 10px 10px rgba(166, 45, 33, 0.59), 11px 11px rgba(169, 47, 34, 0.6), 12px 12px rgba(173, 48, 36, 0.61), 13px 13px rgba(176, 50, 37, 0.62), 14px 14px rgba(178, 51, 38, 0.63), 15px 15px rgba(181, 52, 39, 0.64), 16px 16px rgba(184, 54, 40, 0.65), 17px 17px rgba(186, 55, 41, 0.66), 18px 18px rgba(189, 56, 42, 0.67), 19px 19px rgba(191, 57, 43, 0.68), 20px 20px rgba(193, 58, 44, 0.69), 21px 21px rgba(195, 59, 45, 0.7), 22px 22px rgba(197, 60, 46, 0.71), 23px 23px rgba(199, 61, 47, 0.72), 24px 24px rgba(201, 62, 47, 0.73), 25px 25px rgba(202, 62, 48, 0.74), 26px 26px rgba(204, 63, 49, 0.75), 27px 27px rgba(206, 64, 49, 0.76), 28px 28px rgba(207, 65, 50, 0.77), 29px 29px rgba(209, 65, 51, 0.78), 30px 30px rgba(210, 66, 51, 0.79), 31px 31px rgba(211, 67, 52, 0.8), 32px 32px rgba(213, 67, 52, 0.81), 33px 33px rgba(214, 68, 53, 0.82), 34px 34px rgba(215, 69, 53, 0.83), 35px 35px rgba(216, 69, 54, 0.84), 36px 36px rgba(218, 70, 54, 0.85), 37px 37px rgba(219, 70, 55, 0.86), 38px 38px rgba(220, 71, 55, 0.87), 39px 39px rgba(221, 71, 56, 0.88), 40px 40px rgba(222, 72, 56, 0.89), 41px 41px rgba(223, 72, 57, 0.9), 42px 42px rgba(224, 73, 57, 0.91), 43px 43px rgba(225, 73, 57, 0.92), 44px 44px rgba(225, 73, 58, 0.93), 45px 45px rgba(226, 74, 58, 0.94), 46px 46px rgba(227, 74, 58, 0.95), 47px 47px rgba(228, 75, 59, 0.96), 48px 48px rgba(229, 75, 59, 0.97), 49px 49px rgba(230, 75, 59, 0.98), 50px 50px rgba(230, 76, 60, 0.99); 要素に影をつける box-shadowプロパティは、HTML要素に影を適用するために使用されます。\nbox-shadowの構文は下記になります。\nbox-shadow: [横方向のオフセット] [縦方向のオフセット] [ぼかしの量] [影の広がり（オプション）] [色]; ぼかし、広がり、色のパラメーターはオプションです。\n実際の記述は次のようになります。\nbox-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px; この記事で使用されている完全なソースコードを確認したい場合は、GitHubリポジトリをご覧ください。\nWebサイトにCSSのテキストシャドウを追加することは、ユーザーの注意を引くのに最適な方法です。Webサイトにある種のエレガンスとユニークな雰囲気を与えることができます。あなたのサイトのテーマに合うようなテキストシャドウの例を、創造力を働かせて試してみてください。\nまとめ いかがだったでしょうか。いままでJSを使ってやっていたことが実はCSSでも可能になっているケースが多いです。\nJavascript記述するよりも、cssのほうが軽量です。\nぜひ皆さんのサイトにも導入してUI、UXの向上につなげてみてください。\nおすすめの書籍  HTML5 \u0026amp; CSS3 デザインレシピ集   本書は、HTML5とCSS3によるWebサイト制作のための\u0026#34;おいしい\u0026#34;レシピ集です。 制作の現場で使われる定番テクニックから、プロ技まで余すところなく集めました。 テキスト/リスト/リンク/画像/ボックス/ テーブル/フォーム/ナビゲーション/ レイアウト/レスポンシブWebデザイン… テーマ別にレシピを整理しているので、引きやすくなっています。 「あのデザインはどう作るんだろう?」が、スグにわかります。 デザイナーからWebプログラマーまで、Web制作に携わるすべての方にお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   HTML5＋CSS3の新しい教科書　改訂新版　基礎から覚える、深く理解できる。   この商品は固定レイアウトで作成されており、タブレットなど大きいディスプレイを備えた端末で読むことに適しています。また、文字列のハイライトや検索、辞書の参照、引用などの機能が使用できません。 〈電子書籍版に関する注意事項〉 本書は固定レイアウト型の電子書籍です。リフロー型と異なりビューア機能が制限されるほか、端末によって見え方が異なりますので、ご購入前にお使いの端末にて「無料サンプル」をお試しください。 【技術の進化に左右されないWebサイトの作り方がわかる！】 Web制作のプロを目指す方に向けて、HTML5\u0026#43;CSS3を使ったWebサイトの作り方を解説した入門書の改訂版。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-19T08:08:44+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/catch_hu144dc8c1d01c2bc536cd605c73db2bc8_60732_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/","title":"Javascriptを使わないで、CSSでもできる。開発者が知っておくべき重要なCSSのヒントとコツ 8選"},{"content":"統計名でgoogle検索して関心度の高いキーワードを抽出しよう e-Statの解析の目標として、膨大な統計データの中から一般の人に関心度の高いものを抽出してデータを要約したいと考えています。\ngoogle検索で上位にくるものは関心度が高いと言えるでしょうから統計名でgoogle検索して関心度の高いキーワードを抽出したいと思います。\ngoogle検索を自動でするためにGoogle Custom Search APIを使います。\nGoogle Custom Search API は１日１００回までは無料で、それ以上だと１０００回につき５ドル課金されるみたいです。\nhttps://developers.google.com/custom-search/v1/overview#pricing\n１日に発表される統計は10個いかないくらいなので無料の範囲で使えそうです。\nGoogle Custom Search APIを使ってみましょう。\nGoogle Custom Search API を使えるように設定する（2022年1月時点) 以下の手順で設定します。\n・googleアカウントを取得する\ngmailのメールアドレスです。\n・Google Cloud Platformでクレジットカード情報を登録する\nhttps://console.cloud.google.com/billing/create?hl=ja\n・プロジェクトを作成する\nhttps://console.cloud.google.com/projectcreate\n・認証情報を作成する\nhttps://console.cloud.google.com/apis/credentials\n「+認証情報を作成」をクリックして「APIキー」を選択すると\nAPIキーが作成されますのでコピーしておきましょう\n・APIキーの利用制限\nキーの制限をクリックしてAPIキーの利用を制限しておきましょう\n接続元が固定のIPアドレスを持っているなら「アプリケーションの制限」でIPアドレスを設定しましょう。\nAPIの制限もとりあえすCustom Search API １個にしときます。\n保存ボタンをクリックします\n・Custom Search API を有効にする\nhttps://console.cloud.google.com/apis/library/customsearch.googleapis.com\n「有効にする」ボタンをクリックします。\n・検索エンジンIDの取得\nhttps://cse.google.com/create/new\n検索するサイトは「www.google.co.jp（後で削除するので適当で良いです）」\n言語は「日本語」\n検索エンジンの名前は適当で良いです。\n左側の設定ボタンを押すと画面中央中段に「検索エンジンID」があるのでコピーします。\n検索するサイトをで「www.google.co.jp」を「削除」します\n「ウェブ全体を検索」を「オン」にします\nCurlでGoogle Custom Search API検索する 試しに検索してみましょう。\ncurlを利用します。\ncurlでAPIキー、検索エンジンID、キーワードを指定して検索します。\ncurl \u0026lsquo;https://www.googleapis.com/customsearch/v1?key=google apiキー\u0026amp;cx=検索エンジン ID\u0026amp;q=検索キーワード\u0026rsquo;\n「木材流通統計調査」で検索してみました。\ncurl \u0026lsquo;https://www.googleapis.com/customsearch/v1?key=google apiキー\u0026amp;cx=検索エンジンID\u0026amp;q=木材流通統計調査\u0026rsquo;\n結果はjsonで返ってきます。\n見た感じ、ブラウザのgoogle検索の結果と同じ感じなので良さそうですね。\n \u0026quot;items\u0026quot;: [ { \u0026quot;kind\u0026quot;: \u0026quot;customsearch#result\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;木材流通統計調査：農林水産省\u0026quot;, \u0026quot;htmlTitle\u0026quot;: \u0026quot;\\u003cb\\u003e木材流通統計調査\\u003c/b\\u003e：農林水産省\u0026quot;, \u0026quot;link\u0026quot;: \u0026quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/\u0026quot;, \u0026quot;displayLink\u0026quot;: \u0026quot;www.maff.go.jp\u0026quot;, \u0026quot;snippet\u0026quot;: \u0026quot;木材流通構造調査, 木材の販売金額、素材及び材料の入荷先別入荷量、製材品、合板及び集成材の出荷先別出荷量、製材用、合単板及び木材チップ製造用機械の所有状況、 ...\u0026quot;, \u0026quot;htmlSnippet\u0026quot;: \u0026quot;\\u003cb\\u003e木材流通\\u003c/b\\u003e構造\\u003cb\\u003e調査\\u003c/b\\u003e, \\u003cb\\u003e木材\\u003c/b\\u003eの販売金額、素材及び材料の入荷先別入荷量、製材品、合板及び集成材の出荷先別出荷量、製材用、合単板及び\\u003cb\\u003e木材\\u003c/b\\u003eチップ製造用機械の所有状況、\u0026amp;nbsp;...\u0026quot;, \u0026quot;cacheId\u0026quot;: \u0026quot;cMExMff56bgJ\u0026quot;, \u0026quot;formattedUrl\u0026quot;: \u0026quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/\u0026quot;, \u0026quot;htmlFormattedUrl\u0026quot;: \u0026quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/\u0026quot;, \u0026quot;pagemap\u0026quot;: { \u0026quot;cse_thumbnail\u0026quot;: [ { \u0026quot;src\u0026quot;: \u0026quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSmlCF9ltcQbjL9DAnpZfJIotIT2ej4cd_YfBfs5ew-v2FR_NxjLAGdFTTI\u0026quot;, \u0026quot;width\u0026quot;: \u0026quot;200\u0026quot;, \u0026quot;height\u0026quot;: \u0026quot;200\u0026quot; } ], \u0026quot;metatags\u0026quot;: [ { \u0026quot;viewport\u0026quot;: \u0026quot;width=device-width, initial-scale=1\u0026quot;, \u0026quot;format-detection\u0026quot;: \u0026quot;telephone=no\u0026quot; } ], \u0026quot;cse_image\u0026quot;: [ { \u0026quot;src\u0026quot;: \u0026quot;https://www.maff.go.jp/j/shared_new/shared/images/icon_pnavi@2x.png\u0026quot; } ] } },  検索結果 \n","date":"2022-01-19T00:31:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/","title":"e-Stat でGoogle Custom Search APIを使おう（１）"},{"content":"最近ダークモードと呼ばれる機能に対応したアプリが増え、それと同じようにWebサイトでもダークモードに対応しているものを見かけるようになりました。\n今回はWebサイトの中でファビコンを1サイズで用意して、さらにそのファビコンをダークモードに対応させてみたいと思います。\nダークモードって何？ ダークモードとは画面の色を反転して表示するスマホやタブレットに追加された機能になります。\niPhoneやiPadなどが先行iOS13のリリースの際に実装しました。\n例えば、一般的なアプリの背景は白だったかと思いますが、ダークモードをオンにしているときは背景の色が暗めの配色となり、文字色が反対に明るめの配色になったりします。\nこの機能は光が抑えられるため、目に優しかったりすると言われてます。さらに、画面の発光を抑えられるため、バッテリーの持ちも良くなるとのことでした。\nこのダークモード機能がMacやWindowsなどのパソコンでも使用可能となり、それに伴ってブラウザでも使えるようになりました。\nWEBサイトをダークモードに対応 Webサイトを構築する際に、今までのCSSは下記のような記述になっていたかと思います。\nbody { background-color: #FFF; color: #000; } 背景を白にして、文字色を黒にするといったような記述です。\nこの場合、ダークモードに対応した端末で見た場合に、ダークモードがONであるにもかかわらず、背景が白のサイトが表示されてしまいます。\nこれをダークモードに対応させると、\n@media (prefers-color-scheme: dark) { body { background-color: #000; color: #fff; } } 上記のCSSのように @media (prefers-color-scheme: dark) を追記して、ダークモードの場合は別のCSSで上書きをしてやる必要があります。\n実はこの機能を使うことで、ファビコンも色を変えて、ダークモードに対応させることができてしまうのです。\nファビコンは1つ 今まで、ファビコンは大量に設置する必要がありました。\n全部設置仕様となると、50個近くのファイルを読み込んで、metaに記述する必要がありました。\nそんな手間をしたくないと思います。\nそもそも、そんなに大量のファビコンは必要でしょうか？\nモダンブラウザと呼ばれる最新のブラウザのみに対応であればファビコンは1つで十分です。\n「サイズごとに用意する必要があるのに、そんなことないだろ」と思われるかもしれませんが、近年のブラウザはSVGと呼ばれる形式の画像に対応しております。\nこの画像は従来のピクセルデータではなく、ベクターデータと呼ばれる座標で画像を構築してます。\n座標データなので、縮小、拡大しても画質は綺麗なままです。\nそれではSVGでファビコンを作ったらどうでしょうか？\nそうです。大量のサイズを用意しないで、1ファイルでファビコンを用意できてしまうのです。\nファビコンを設置 ファビコンをIllustratorやXDで作成して、SVG形式で保存します。\n作成したファビコンをWebサイトに反映します。\n\u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;favicon.svg\u0026#34; type=\u0026#34;image/svg+xml\u0026#34;\u0026gt; head部分に上記のlinkタグを記述します。hrefの部分は適宜変更してください。\nこれでファビコンをSVG化することができました。\nファビコンをダークモードに対応させる ダークモードに対応させるためにはもうひと工夫必要です。先程作成したファイルを開いて、CSSのスタイルを追加します。\nIllustratorで色を塗っていた場合、styleタグに色情報が記述されているかと思います。\nそこに、@media (prefers-color-scheme: dark) でダークモードの際の色を指定します。\nfillはSVGの塗りつぶしを意味してます。\n\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; .st0 { fill: #34495E; } @media (prefers-color-scheme: dark) { .st0{ fill:# FFF; } } \u0026lt;/style\u0026gt; これでfaviconもダークモード対応できました。\n実際にブウラウザでアクセスして、ダークモードを切り替えると確認できるかと思います。\nまとめ 今まで大量のfaviconを用意して、metaタグに記述していましたが、モダンブラウザになると、SVGファイル1つで様々なサイズに対応可能です。しかも画質がきれいなので、高画素端末で見ても安心です。\nさらに、SVGファイルのファビコンであればファイル自体にcssのスタイルを記述できるので、@media (prefers-color-scheme: dark) を使ってダークモードに対応することもできます。\nこうした小さなUI、UXの改善がウェブサイトの大きな改善につながるのではないかと思います。\nみなさんも、ぜひダークモードに対応したおしゃれなファビコンを設置してみませんか？\nおすすめの書籍  ブランディングデザインの教科書   企業経営に役立つ「ブランディング」と「デザイン」がこの1冊で一気にわかる! ブランディング成功の秘訣とは──。 これからブランディングをはじめたい経営者やプランナー、ブランド全体をデザインしてみたいというデザイナーや学生の方に向け、100以上のブランド開発実績を持つブランディングデザイナー西澤明洋が「ブランディング」と「デザイン」の方法を徹底解説。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   ICONISM 世界のアイコン・ピクトグラムのデザイン   情報をわかりやすく効果的に伝えるデザインと活用例が満載! アイコンやピクトグラムは、ガイドサインだけでなく、ブランディングやウェブサイト・アプリなど現代生活のあらゆる場面で、コミュニケーションを円滑にするためますます重要な役割を担っています。世界各国の優れたデザインと展開実例を用途別に集めた1冊です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-18T17:17:37+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/catch_hu535661bce2c742bf7a0f6a055ac0b6d1_28043_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/","title":"ファビコンは1サイズのみでいい。さらにダークモード対応させる"},{"content":"出典元：Top 15 Mobile App Development Trends to Watch for in 2022\nモバイルアプリ開発業界は、驚異的なスピードで進化しています。このデジタルダーウィン時代に生き残り、繁栄するには、変化するモバイルアプリ開発のトレンドに精通する必要があります。 今日、スマートフォンはデジタルメディアの成功の鍵です。これは、ビジネスモデル、運用モデル、および市場を驚くべき速度で根本的に変革します。 2022年までに、モバイルアプリ市場の収益は6,930億ドルに達すると予想されています。\nただし、ほとんどのアプリは失敗してしまっているであるということです。\nこの失敗の主な理由は、最新のモバイルアプリテクノロジーのトレンドを追跡および実装できないことです。または、より技術的に適応力のある競合他社に負ける結果になります。\nモバイルアプリを成功させるための最初のステップは、2022年のモバイルアプリ開発のトレンドを常に把握することです。これらの最新のトレンドのいくつかについて詳しく説明しましょう。\nモバイルアプリ開発の新しいトレンドが数多く出現していますが、ここでは、詳細な事実に基づいた調査の結果、モバイルアプリ開発のトレンドのTOP15を取り上げました。\n5Gの台頭 5Gテクノロジーは数年前から存在していますが、近年より注目されるうようになりました。テクノロジー企業は5Gを本格的に取り入れ始めており、5G対応デバイスが市場に出回っています。来年までに、6億6000万台のスマートフォンが5G接続になると予想されており、これは全デバイスの約47.5％を占めています。 世界中の5G接続が今後数年間でどのように成長すると予測されているかを見てみましょう。\n rise of 5g \n5Gの出現でアプリ開発はどうなる？ 5Gは、アプリの構築と使用の方法を変え、速度と効率が大幅に向上します。\nそれにより期待できることがいくつかあります。\n 5Gは4Gよりも最大100倍高速になります。 レイテンシーは50ミリ秒（4G）から1ミリ秒に短縮されます。 高解像度、低遅延、高速性能により、ビデオストリーミングアプリケーションは大幅に改善されるだろう。 5Gでは、これらの技術をアプリに統合することが容易になるため、ARやVRの機会が増えるだろう。 デバイスとスマートフォン間でのデータ転送がより高速かつスムーズになります。 5Gを使用すると、開発者はアプリのパフォーマンスに悪影響を与えることなく新しい機能を構築できます 識別のための生体認証データの処理が高速化されているため、モバイル決済はより迅速かつ安全になります。  全体として、5Gテクノロジーはアプリをより速く、よりスムーズに、より効率的にすることができます。また、イノベーションの余地も広がります。アプリに関するワクワクするようなアイデアは、もはやアイデアにとどまることはありません。5Gを使えば、それらを実現することができます。5Gが何をもたらすのか、今から楽しみです。\n折りたたみ式デバイス用アプリ 折りたたみ式端末はスマートフォン市場全体のシェアの先端ですが、今後数年で状況が変わってきます。統計局 によると、2022年には5,000万台が出荷されるとのことです。つまりモバイルアプリの開発戦略を練る際には、折りたたみ式デバイスも念頭に置くべきでしょう。2022年のモバイルアプリ開発のトレンドである折りたたみ式デバイスで、あなたのアプリがシームレスに動作することを確認してください。\n端末を折りたたんで大きな画面を提供することは、ユーザーにいい影響を与えます。\n 大きな画面は、詳細で没入感のある体験を提供するためのスペースを意味します。 マルチウィンドウにより、ユーザーは複数のタスクを同時に実行することができます。  ビデオストリーミングやゲームアプリは、画面サイズを大きくするだけで、折りたたみ式デバイスから最大限の利益を得ることができ、余分なスペースを使って追加の情報やコントロールを提供することもできます。このように、画面を意識したアプリの開発は、2022年のモバイルアプリ開発における最大のトレンドの1つとなるでしょう。\n ストリーミング \nAR＆VR ポケモンGOの成功は一時的なものだったかもしれませんが、モバイルアプリ開発におけるARの道を切り開いたと言えるでしょう。それは、VRを使ってユーザーに没入型の体験を提供することが現実的に可能であることを世界に示したのです。\n今日、周りを見渡せば、ブランドがユーザー体験を高めるためにAR＆VRを活用しているシーンは数多く見受けられます。\n IKEAはARを使用して、ユーザーが購入する前に自宅で家具がどのように見えるかを確認できるようにします。 L\u0026rsquo;Orealは、ユーザーが自分の顔に化粧をしたときの見え方を確認できるバーチャルメイクアップアプリを提供しています。 Lenskartは、ユーザーがメガネを買う前にバーチャルで試せるようにしています。  Apple、Google、Metaでさえも、AR \u0026amp; VRにイノベーションをもたらしています。グーグルはグーグルマップに「ライブビュー」という機能を導入し、ユーザーは現実の画像上でリアルタイムに方角を確認することができるようになりました。\nLiDARもまた、最近ARの分野で見られた重要な技術的進歩です。Appleによって光の速度のARと呼ばれる - 私たちは、この技術がiPad Pro、iPhone 12 Pro、iPhone Pro 12 Pro maxでデビューするのを目にしました。それは、ARをまったく新しいレベルに引き上げました。LiDARにより、低照度下でも優れた品質の写真を撮影することが可能になりました。\nAppleはIkeaと提携し、LiDAR技術を利用した新しいスタジオモード機能を開始し、家具の買い方にまで革命を起こしています。この機能を使うと、ユーザーは家具を置きたい場所にデバイスを向けると、LiDARテクノロジーが部屋をスキャンして、実物大の家具モデルをバーチャルに配置することができます。\n今年は、ARとVRが、私たちの想像を絶する方法でモバイルアプリ開発業界を形成することが予想されます。モバイルアプリのトレンドは、より主流になるでしょう。統計局によると、ARとVR技術の世界市場は、2018年の270億ドルから2022年には約2,090億ドルに上昇すると言われています。\nまた、今年はAR＆VRのユーザー数が急増することが予想されます。このようなモバイルアプリの開発トレンドを活用して、モバイルでユーザーにゲームを変えるような体験を提供する絶好のチャンスがあるということです。\n ar and vr \nウェアラブルアプリの統合 ウェアラブルデバイスがすでに世界を席巻しています。\n統計局 によると、接続されたウェアラブルデバイスは2017年に4億5300万に達し、2022年までに9億2900万に達するでしょう。\n今年は、ウェアラブルデバイス業界で多くの重要なことが起こっているのを見ました。\nアップルはWatchOS 8アップデートを発表しました。これは、アップルウォッチユーザーに新機能、新鮮なウォッチフェイス、ウォレットへのアクセスの増加、インターフェイスの再設計をもたらしました。\nGoogleも、同社のウェアOSとSamsungのTizenソフトウェア・プラットフォームを融合した統一ウェアラブル・プラットフォームを発表し、アプリの起動時間を30％向上させました。\nこれは、2022年のモバイルアプリ開発の必須トレンドの1つであるウェアラブルテクノロジーの台頭を意味するものです。\nつまり、アプリ開発者や企業は、スマートウォッチやウェアラブルでユーザーに優れたデジタル体験を提供するアプリを準備し、そうでない企業に対して明確な優位性を獲得する必要があるのです。\nこのモバイルアプリ開発のトレンドを取り入れ、シームレスなデジタル体験を提供することで、ターゲットとなる顧客との距離を縮めましょう。\n食品・食料品の配達アプリ 人々はロックダウン後、在宅時間が多くなるため、食料品の即日配達サービスやミールキットなどのアプリに大きく依存するようになり、この2つは2020年から21年にかけて最も成長したアプリのカテゴリーとなりました。\n food grocery delivery apps \nご覧の通り、2020年には食料品アプリの利用者が40.9％増加しました。ほとんどの人が、食料品の買い物は実店舗に行かず、オンラインで行うことを選んだのです。\n同様のことは、フードデリバリーアプリでも起こりました。安全性が高く、オンラインで食品を注文することを好む人が多いため、32.9％の上昇となりました。\nしかし、2021年にはどちらのアプリも人気が低下しています。食料品アプリが5.8％上昇したのに対し、フードデリバリーアプリの利用者は2.6％減少しました。\n通常の生活に戻れば、その成長も少し低下するかもしれません。食品・食料品アプリは、依然として私たちの生活の重要な一部となるでしょう。人々はオンラインで食べ物を注文することをやめることはないでしょうし、食料品アプリはスマートフォンユーザーの15.5%を占めることに変わりはないでしょう。\nいずれにせよ、時間が経てばわかることですが、2022年に食品・食料品配達アプリがどのような道を歩むのか、興味深いところです。\nモバイルエンターテインメント＆ゲーム エンターテイメントやゲームアプリは、今やライフスタイルの一部となりました。それ無しでは一日たりとも過ごせないという人もいるほどです。\nNetflixの米国とカナダでのアクティブな加入者が約74％であることから、モバイルエンターテイメントアプリの人気は推し量ることができます。それだけでなく、1億5910万人以上の携帯電話ユーザーがおり、モバイルデバイスはゲーマーに人気があり、米国のデジタルゲーマーの89%以上に相当します。\nこの数字は、2022年にはさらに上昇することが予想されます。\n mobile entertainment \nなぜモバイルエンターテインメントとゲームアプリが人気があるのか？  エンターテインメントを手軽に楽しめるようになった。\n高価なガジェットや高価なノートパソコンを買う必要はなく、モバイルで楽しむことができる。 映画を見たり、ゲームをしたりするために、1つの場所に閉じこもる必要がない。外出先でも楽しむことができる。 AR、VR、人工知能などの技術の進歩により、ゲームやエンターテインメントアプリは、より没入感のあるもの。 モバイルエンターテインメント＆ゲームアプリは非日常を提供する。  特にパンデミック時には、人々はゲームやエンターテインメントアプリに時間を費やし、気を紛らわせました。\nAIと機械学習 FaceApp（自撮り写真を加工するアプリ）の画期的な成功の後、ほとんどの人が疑問に思っていました。次は何をするのだろう？そんな時、AIは期待をさらに大きく前進させるものをもたらしてくれました。MyHeritageAppは、写真をリアルなアニメーションに変換するすごい機能をもたらしたのです。このアニメーションはとても印象的で、愛する人があなたに微笑んでいるように感じられます。その結果、多くのリアクションが生まれました。\n昨年、AIで起こった興味深いことはこれだけではありません。Googleがマップアプリに、AIを使ってユーザー体験を向上させる新機能を投入したのも記憶に新しいです。そのひとつが、広い屋内空間でARナビゲーションを提供するライブビューです。\nGoogleはAIを利用して、燃料消費量が少なくなるように道順を最適化し、二酸化炭素排出量の少ないルートを提案することも行っています。\nAIとMLは、ここ数年連続してモバイルアプリ開発のトップトレンドの1つとなっています。しかし、これらの技術の進歩は、2022年のモバイルアプリ開発のハードルを非常に高くしており、今年はそれが何をもたらすのか興味深いところです。\n機械学習もまた、革命的なことが起こるのが待ち望まれるエキサイティングな分野です。ディープラーニングが機械学習と手を組めば、貴重なデータとリアルタイムの分析を提供し、モバイルアプリ開発プロジェクトに素晴らしい効果をもたらすことができます。\nCAGR42％で成長する世界のML産業は、2019年の機械学習から2022年後半には約90億ドル規模になる見込みです。\nAppleは、機械学習における重要なプレイヤーの1つで、その優秀なMLモデルにより、開発者は没入感のある新しい体験を生み出すことができるようになりました。既存の機能を簡単に追加できるだけでなく、新しい機能を作ることもできます。その上、ML APIで新しい機能を追加することもできます。\n今年は、これらの技術に深く入り込み、その機能をきちんと理解し、多くの構成要素に触れることをお勧めします。\nモバイルアプリのセキュリティがより重視 チェック・ポイントの「State of Mobile Security 2021」レポートによると、約46％の組織が、悪意のあるモバイル・アプリケーションをダウンロードした従業員を少なくとも1人抱えているとのことです。従業員のモバイル端末への依存度が高いことを考えると、企業にとって懸念すべき問題であると言えます。\nほとんどの企業は、サイバーセキュリティがデータ保護や情報プライバシーに関する法律に直結していることを考慮して、サイバーセキュリティへの投資を増やそうとしています。\nこのように、デジタルセキュリティは、2022年のモバイルアプリ開発のトップトレンドの1つとして浮上しています。業界の優れた頭脳は、モバイルアプリにまつわる不確実性を引き出すためにレベルアップしています。WWDC 2021で、Appleは \u0026ldquo;iCloud キーチェーン\u0026rdquo; という新機能を導入し、パスワードレスの未来への第一歩を踏み出しました。これによって、アップルはパスワードに代わって、より安全なログインプロセスを提供することになりました。\n nobile app security \n2022年、モバイルアプリ開発業界は、セキュリティファーストのアプローチにシフトし、強固なDevOps戦略のロードマップを構築すると予想されます。\nスーパーアプリ 1つのアプリに1つの目的 - これが、モバイルアプリ開発会社の長年のアプローチです。しかし今、そのアプローチは変わりつつあります。企業は、単一目的のアプリから、複数の目的を解決するワンストップ・ソリューションにシフトしているのです。\nこのようなアプリはスーパーアプリと呼ばれ、アジアで絶大な人気を誇っています。しかし、このトレンドは欧米にも浸透しつつある。米国では、カリフォルニアに本社を置くブレインテクノロジーズ社が開発したNatural AIが面白い例として挙げられます。このアプリは、人々の携帯電話との付き合い方を変え、1つのアプリから複数の目的を解決できるようにすることを目指しています。\n super apps \nさらに、Facebookが単なるソーシャルメディアのプラットフォームからどのように拡張されたかをご覧になったことがあるかと思います。現在では、人々が製品を売買できるマーケットプレイスも提供されています。同様に、オンラインショッピングとは別に、請求書の支払いやAmazonからの支払いもできるようになりました。\n欧米では、スーパーアプリの流行はそれほど高くはなく、人々は1つに決める前にさまざまなソリューションを試すことを好むからです。それでも、最終的には誰もが利便性を求めるものです。スーパーアプリは、2022年に期待すべきモバイルアプリ開発のトレンドと言えるでしょう。\nモバイルコマース EEコマース分野は3兆5,600億ドル相当の売上を誇り、その72.9%はモバイルで発生しています。\nつまり、モバイルコマースはアプリ開発のトレンドとして高まっているのです。\nCOVIDの大流行後、ライフスタイルの大きな変化が見られました。大規模な小売業者から中小企業、個人消費者に至るまで、誰もがモバイルアプリに依存するようになったのです。\nそのため、適応できないEコマース企業は不利な状況に置かれています。彼らは多くの顧客を失い、彼らは変換することができるものを見逃しているもです。\nつまり、企業は、このトレンドに適応し、電子商取引のビジネスアプリを持っている必要があります。それは、彼らがカットスロート競争を生き残ることができる唯一の方法です。\nP2Pモバイルアプリ P2Pモバイルアプリは、モバイルアプリ開発分野を特徴付けるもう一つの重要なトレンドです。eMarketerによると、P2Pモバイルトランザクションの予測価値は2023年までに6,122億3,000万ドルに達するでしょう。これは、現在、P2Pモバイルアプリに大きな可能性があることを意味します。\n p2p mobile apps \nP2Pモバイルアプリが企業やユーザーの間で人気を集めている理由は、その利便性にある。ユーザーは素早く支払いができ、売り手は自分のアカウントに直接支払いを受けることができます。そのため、余計な手間がかかりません。\n今年、私たちの周りで見られるP2Pモバイル・アプリの種類をいくつか紹介ましょう。\n 決済機能を内蔵したソーシャルメディアプラットフォーム 決済のためのシステムを組み込んだモバイルOSシステム。例：Apple Pay、Samsung Pay、Android Payなど。 独自の決済システムを提供している独立系プロバイダー。 銀行を決済の当事者とするP2Pアプリ。 暗号通貨のウォレット。  P2Pモバイルアプリのアイデアがあるなら、それを実現する絶好の機会です。\nブロックチェーン 私たちがブロックチェーンについて初めて耳にしたのは、暗号通貨ブームの時でした。しかし、今ではこの技術は大きく進歩し、さまざまな分野で応用できるようになりました。かなりの勢いで成長しており、2024年までに200億ドルの収益が蓄積されると予想されています。ブロックチェーンは、モバイルアプリ開発においても極めて重要な役割を担っています。\n分散型アプリは最近の流行りです。ブロックチェーンウォレットは7000万個以上あり、そのうちモバイルウォレットは最も好まれるブロックチェーンウォレットの形態です。これらの統計は、ブロックチェーンウォレットのユーザー数が大幅に増加していることも示しています。\n blockchain \nそのほかに、デジタル資産の追跡、デジタルIDの保護、ロイヤルティプログラムの追跡にブロックチェーンを使用する通貨換算器も見られます。\n2022年以降には、インテリジェント・コントラクト、著作権侵害防止ソフトウェア、選挙を穏健化するツール、Blockchain as a service（BaaS）プラットフォームなど、このトレンドがより主流になると見ています。特にモバイルコマースやモバイル決済アプリでは、ブロックチェーンを利用して不正を未然に防ぐことができるのです。\n予測分析 企業は以前からモバイルアプリで予測分析を利用しています。Netflixは、ユーザーの視聴習慣に基づいて映画やテレビ番組を推薦するためにこれを使用しています。また、Amazonは、予測分析を活用して、商品の推薦をパーソナライズしています。\n今年は、予測分析がより主流になると思われます。ここでは、2022年のモバイルアプリ開発において、このトレンドが重要な役割を果たすと考えられる2つの分野を紹介します。\n 開発プロセスの最適化へ\n企業は、開発者から収集したデータを処理することで、問題を事前に発見し、より良い代替案を提案することができます。 ユーザーエクスペリエンスを向上させるために\n企業はユーザーデータを利用して、ユーザーの行動を予測し、その旅をパーソナライズすることができます。  その結果、優れた品質を維持しながら開発期間を大幅に短縮し、イノベーションの実現により注力することが可能になったのです。\nモバイル学習 統計局によると、従業員の35％ がモバイルデバイスを頻繁に使って学習しているとのことです。また、モバイルラーニング市場は、2025年までに585億ドルに達し、2020年から2025年にかけて21.45%のCAGRが約束されると予想されています。つまり、モバイルラーニングは、モバイルアプリ開発のあり方を変える、有望なトレンドといえます。\nモバイルラーニングは多くの理由で有名です。まず、学習が簡単にアクセスできるようになります。学習者はどこでも、誰でも学習できるため、力を得たと感じられます。さらに、継続的なフィードバックや360度学習などの体験により、学習がインタラクティブで楽しいものになりました。\nコースの修了率の向上、学習の迅速化、エンゲージメントの向上、知識の定着率の向上につながるため、現在では企業でもモバイル学習が支持されています。\nそのため、モバイル学習アプリの需要は高いといえます。画期的なアイデアや、社員教育のためにモバイル学習ソリューションを立ち上げる計画があるのなら、今こそ教育アプリ開発を専門とするチームにコンタクトを取るべきでしょう。\nIoT対応のモバイルアプリ インターネットは私たちの生活の中に深く入り込んでいます。スマートフォン、ノートパソコン、タブレットから、音声で操作できるスマートホームデバイスまで、私たちはインターネットに接続された機器に囲まれています。モノのインターネット（IoT）は、単なるトレンドにとどまらず、2022年の市場規模は5940億ドルと推定され、私たちの日常生活の一部となりました。\nここ数年、アマゾンやグーグルのようなブランドがこの技術をフルに活用しているのを目にしました。彼らはそれぞれ「Echo」シリーズのデバイスとGoogle Home Voice Controllerを発表して、IoTの競争を強化しました。\nしかし現在では、Samsung、Xiaomi、Bosch、Honeywellなどのブランドも、モノのインターネット技術に急速に移行しています。小売業における継続的なサプライチェーン、スマートホーム、精通した健康保険プランなどは、もはやSF的なものではなく、現実に生きてきているのです。\nIoTガジェットやシステムの需要増加に伴い、IoT対応アプリの需要も同時に増加するため、2022年のモバイルアプリ開発のトップトレンドのリストに含まれています。\nまとめ GoogleとAppleのApp Storeを合わせると663万個のアプリが存在します。あなたのアプリを目立たせるには、どうしたらいいでしょうか？\n実は、モバイルアプリ開発の最新トレンドを常に把握し、それを活用して堅牢で機能豊富なアプリを提供する方法を知らなければ、できないことなのです。\nモバイルアプリ業界は今後も急速に拡大し、モバイルアプリ開発の領域も進化していくでしょう。新興のモバイルアプリプラットフォーム開発技術、上昇するバックエンドプラットフォーム、マイクロサービス、そして新しいハードウェアの性能と相まって、モバイルアプリソリューションの舵取りを続けていくでしょう。継続的に学習し、常に意識することが、熾烈な競争を勝ち抜く唯一の方法なのです。\nおすすめの書籍  NO RULES(ノー・ルールズ) 世界一「自由」な会社、NETFLIX  5万部突破!! 日経朝刊で「経営者が読むべき1冊」と激賞! (2020年12月26日付) 「日本でこんなマネのできる企業はまずないだろうが、海外の競争相手はネットフリックス流の人材厳選主義を採用しているかもしれない。その迫力と怖さを知るためにも、経営者が手に取るべき本である」 ●Netflixはどうやって190カ国で2億人を獲得できたのか？。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   オードリー・タン デジタルとAIの未来を語る  オードリー・タン氏自身が、自らの考え、行動、夢を語る。 世界のメディアがいま、最も注目するテクノロジー界の叡智が、描くデジタルとAI（人工知能）の未来！ 台湾は、2020年に全世界を襲った新型コロナウイルス（COVID－19）の封じ込めに唯一成功しました。 本書は、その中心的な役割を担った若きデジタル担当政務委員（閣僚）が、コロナ対策成功の秘密、デジタルと民主主義、デジタルと教育、AIと社会・イノベーション、そして日本へのメッセージを、自身の言葉で語りつくします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-17T18:11:53+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/catch_hua4378086a6141903b68a22e47c9014eb_24823_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/","title":"2022年に注目すべきモバイルアプリ開発トレンド 15選"},{"content":"Pandas DataFrameオブジェクト Pandasでcsvをread_csvするとDataFrameオブジェクトとして読み込まれます。\nDataFramオブジェクトは２次元配列な感じです。\n１次元目が列、２次元目が行のイメージみたいです。\n例えば以下のcsvだと\ndate,value 2019,2845 2020,3246 2021,3633 read_csvしたDataFrameオブジェクトの変数名をdfとすると\nそれぞれのデータには以下の方法でアクセスします。\ndf['date'][0]-\u0026gt;2019 df['date'][1]-\u0026gt;2020 df['date'][2]-\u0026gt;2021 df['value'][0]-\u0026gt;2845 df['value][1]-\u0026gt;3246 df['value'][2]-\u0026gt;3633 read_csvするとデフォルトだと１行目を列名とみなすみたいです。\nアクセスの方法も列名が反映され連想配列っぽくなります。\nPandas Seriesオブジェクト hampelの第１引数はPandasのSeriesオブジェクトです。\nSeriesオブジェクトは１次元の配列みたいです。\nDataFrameオブジェクトからSeriesオブジェクトに変換する方法ですが\n以下の方法でできます。\ninput=pd.Series(df['value']) csvを読み込んでhampelメソッドを使い異常値を検出する 。 プログラムは以下の流れになります。\ncsvをread_csvでDataFrameオブジェクトとして読み込む。\nDataFrameオブジェクトからSeriesオブジェクトを生成する。\nSeriesオブジェクトを使ってhampelメソッドを呼び出して異常値を検出する。\nソースコードは以下の通り\nimport matplotlib.pyplot as plt import pandas as pd from hampel import hampel # データ取得 df = pd.read_csv('./kome.csv') print(df.columns) print(df['value']) input = pd.Series(df['value']) rsts = hampel(input, window_size=5, n=3) for rst in rsts: print('%d:date:%s value:%d' % (rst,df['date'][rst],df['value'][rst])) ","date":"2022-01-17T17:46:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/","title":"s-Stat 時系列データで異常値を検知しよう（３）"},{"content":"hampel フィルタとは 時系列データの異常値検知で良いのないかなあと探しました。\n最近は機械学習で時系列データの異常値検知をやっているものが結構ある感じでしたが、\ne-Statの統計データですが年次や月次だったりするのでデータ数がそんなに多くないので機械学習はどうだろうと思い今回は機械学習以外の方法を探しました。\n標準偏差などを利用して異常値を検出するアルゴリズムとしてHampelフィルターというものがありました。\npythonでhampelというライブラリーで簡単に利用できそうなのでまずこれを試してみます。\npython hampel ライブラリを利用 hampelはpip で簡単にインストールできます\npip install hampel import matplotlib.pyplot as plt import pandas as pd from hampel import hampel input=pd.Series([3, 2, 1 , 3 , 1, 2, 9, 2, 1, 22, 1, 1, 8]) rst = hampel(input, window_size=5, n=3) print(\u0026quot;rst: \u0026quot;, rst) bash-3.2$ python p.py rst: [6, 9, 12] 時系列データをpandasのSeriesに１次元で食わせて\nhampelメソッドを呼び出すだけで簡単に異常値が検出できます。\n異常値が検出された配列の番号が返却されます。\nこの例だと7個目の9,10個目の22,13個目の8です。\nwindon_size などは経験的にパラメータ調整するみたいです。\n次回は前回読み込んだcsvを使って異常値を検出するところまで行きたいと思います。\n","date":"2022-01-17T10:51:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/","title":"s-Stat 時系列データで異常値を検知しよう（２）"},{"content":"出典元：Prevent Scroll Chaining With Overscroll Behavior - Ahmad Shadeed \nposition: fixedの要素があるとしましょう。スクロールがある場合は、要素の下部の境界に到達すると、ブラウザはbody要素をスクロールし続けることに気付くでしょう。これは望ましくない混乱を招く効果です。ありがたいことに、CSSで修正できます。 この記事では、overscroll-behavior CSSプロパティ、それが解決する問題、その仕組み、および使用場所について説明します。\nはじめに 非常に一般的な問題を取り上げましょう。ビューポートの中央に配置されたモーダルダイアログがあります。そのモーダルの下に、実際のWebページのコンテンツがあります。\n \nモーダルコンテンツの最後に到達すると、ブラウザは代わりにメインページのコンテンツをスクロールし続けます。これはスクロールチェーンと呼ばれます。これはデフォルトの動作であり、overscroll-behaviorという新しいCSSプロパティでオーバーライドできるようになりました。\n \n多くの場合、この動作は不要であり、ユーザーがモーダルコンテンツに集中できなくなる可能性があります。上の図では、モーダルの最後に到達したときに、ページがスクロールし続けていることに注目してください。\n無理やり対応する 以前は、Javascriptを介してbody要素にoverflow: hiddenを適用することでこれを修正していました。モーダルが開かれると、オーバーフローの適用を担当するクラスが本体に追加されます。\nbody.modal-open { overflow: hidden; } .modal.is-open { display: block; } このやり方は、以前はデスクトップブラウザ間で完全に機能していましたが、iOS上のSafariでは動作しませんでした。これを機能させるには、body要素にposition: fixedを追加する必要もあります。\nbody.modal-open { position: fixed; overflow: hidden; } .modal.is-open { display: block; } これは機能しますが、ブラウザが一番上までスクロールし、ユーザーが手元のタスクから気をそらしてしまいます。これは、他の問題を引き起こす修正です。\nベン・フレインによる 記事 に固定されたものを除いて、私はその解決策を知りません。 ベンの記事のスニペットによると、モーダルがアクティブになったら、\u0026lt;body\u0026gt;要素に以下を追加する必要があります。\n.bg-scrolling-element-when-modal-active { /* when modal active */ touch-action: none; -webkit-overflow-scrolling: none; overflow: hidden; /* Other browsers */ overscroll-behavior: none; } 2018年にクライアントプロジェクトに取り組んだことを覚えています。そこでは、iOSのモバイルメニューの本文のスクロールを防ぐことはできないと彼に話しました。\n彼は：\n プログラミングで不可能なことは何もありません。解決策があると確信している。\n といっていました。\n「プログラミング？」と思うかもしれませんが、それはCSSを指します。多くのことを試して、研究し続けましたが、完璧な解決策はありませんでした。\nそれでは時間を遡って、overscroll-behaviorをソリューションに紹介したいと思います。\noverscroll-behaviorについて overscroll-behaviorプロパティは、スクロール領域の境界に到達したときにブラウザが実行する処理を設定します。 Safariを除くすべての主要なブラウザで[サポートされています。プロパティは、overscroll-behavior-xおよびoverscroll-behavior-yの省略形です。 overscroll-behaviorを設定すると、両方の軸が設定されることに注意してください。\n設定可能な値を見てみましょう。\noverscroll-behavior: auto デフォルト値は auto で、これによりスクロールチェーンが可能になります。スクロール要素があり、その境界に達すると、ブラウザは\u0026lt;body\u0026gt;コンテンツをスクロールし続けます。\n \n \noverscroll-behavior: contain その名前から、値containには、要素の境界内にスクロールが含まれます。次の図では、スクロールは青い輪郭のラッパー内に含まれています。\n \n \noverscroll-behavior: none none を設定すると、 contains と同様の効果があり、 さらに ページの上部または下部に達したときのバウンス効果を防ぎます。\nユースケースと例 overscroll-behavior がどのように機能するかがわかったところで、いくつかの便利なユースケースを見てみましょう。\nモバイルナビゲーション モバイルナビゲーションが長すぎる場合、スクロールが速すぎると、本文のコンテンツでスクロールチェーンの問題が発生する可能性があります。\n次の図には、スクロール可能な長いナビゲーションリストがあります。\n \nスクロールが含まれていない場合は、本文のコンテンツもスクロールします。それを避けることができます\n.nav { overscroll-behavior-y: contain; overflow-y: auto; } 動画で見てみましょう。\n \nナビゲーションの下に表示される半透明の背景を追加しました。 overscroll-behavior-yプロパティをオフに切り替えたときの動作に注意してください。\nオフに切り替えると、ボディスクロールが発生します。\nただし、ナビゲーションが短く（つまり、スクロールできない）、ユーザーが理由もなくスクロールしようとすると、overscroll-behavior-y: containであっても、本文がスクロールすることに注意してください。\n \n残念ながら、記事の冒頭で紹介した「無理やり対応」以外の修正方法はわかりません。\nサイドナビゲーション overscroll-behavior のもう1つの便利な使用法は、サイドバーとメインがある場合です。その場合、サイドバーは固定されており、コンテンツが長すぎるとスクロール可能になる可能性があります。\n \nサイドバーの端の境界に達したときにメインセクションがスクロールしないようにするには、次を追加する必要があります。\n.aside { overscroll-behavior-y: contain; } チャットコンポーネント  \nFacebookに触発されたチャットコンポーネントは、 overscroll-behavior の完璧なユースケースです。これを使用して、最後に到達したときにボディがスクロールしないようにすることができます。\n.aside { overscroll-behavior-y: contain; } モーダルコンテンツ 記事内で最初に行った例はモーダルなので、繰り返しません。ただし、モーダル内にリストが必要な場合があり、そのリストがスクロール可能である場合は、スクロールチェーンを発生させたくありません。\n \nモーダルのオプションのリストに注意してください。これはスクロール可能なリストです。その境界に達すると、モーダルコンテンツがスクロールします。これを回避するには、 overscroll-behavior を使用します。\n.list-wrapper { overscroll-behavior-y: contain; overflow-y: auto; max-height: 130px; } 水平リスト Facebookのホームページでこのユースケースを見つけました。ユーザーのリストがあるセクションがあり、次の図に示すように水平方向にスクロールします。\n \nこれはoverscroll-behavior-xのベストな使い方です。\n.list { overscroll-behavior-x: contain; } まとめ CSS overscroll-behavior は、何年も前に無理やり対応していた問題を解決する便利なプロパティです。\nおすすめ書籍  ざっくりつかむ　CSS設計[リフロー版]   Web制作の現場でこれだけは知っておきたい、CSSの扱い方、管理、運用の基本！ Web開発が複雑化した現在、CSSについても仕様や知識を知っているだけでは対応できない問題が増えています。\nAmazonで詳細を見る\n\n\nAmazon.co.jpアソシエイトを使用\n  プロの「引き出し」を増やす　HTML\u0026#43;CSSコーディングの強化書  HTML・CSSの基本は覚えたけれど、デザインカンプから情報を読み取って、イチからコーディングするのはまだ無理……。 初心者を脱して、コーダー／マークアップエンジニアとして制作現場でバリバリ活躍する力をつけたい。 本書はそんな方に向けたものです。\nAmazonで詳細を見る\n\n\nAmazon.co.jpアソシエイトを使用\n ","date":"2022-01-15T12:16:02+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/intro_hube3343b77de99cb499300b8d9b324547_119554_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/","title":"overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止"},{"content":"s-Stat 時系列データで異常値を検知しよう たくさんあるデータの中から関心の高そうな項目を抽出して表示しようというテーマでe-Statデータを取り扱っています。\n関心の高そうな項目としては、キーワードが重要というのもあります。これは前回で取り扱ったテーマでgoogle検索などを利用してピックアップしてこうかなと考えております。\nそのほか、値が急上昇、急下降したような場合も関心が高い項目と言えそうです。\n今回は、データの中から値が急上昇、急下降した場合を抽出する方法を考えて行きたいと思います。\nwebで検索した感じだと今回やりたいことは、時系列データの異常値を検知するというものみたいです。\n方法を色々調べてみたのですがpython のhampel を使うのが簡単そうです。\ne-Statのapiを取得したcsvを利用しますので、まずpythonでcsvを取り扱う方法から調べる必要があります。\npython でcsvを取り扱う 今回は、pandasを利用することになるのでpandasでcsvを読み込むことにします。\n課題としては、商品の小売価格の変動が分かりやすいので「小売物価統計調査 小売物価統計調査（動向編） 」から札幌市のコシヒカリの値段を抜粋してcsvを作成したいと思います。\nwget \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003421913\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; -O kouri.csv cat kouri.csv |grep \u0026quot;札幌市\u0026quot;|grep \u0026quot;1001 うるち米(単一原料米,「コシヒカリ」)\u0026quot;|awk -F, '{print $10\u0026quot;,\u0026quot;$13;}'|sed -e \u0026quot;s|\\\u0026quot;||g\u0026quot;|sort -n \u0026gt;kome.csv 2002000101,2483 2002000202,2483 2002000303,2480 2002000404,2520 2002000505,2573 2002000606,2520 2002000707,2431 2002000808,2404 こんな感じで年月と値段の２列のcsvになりました。\npythonのソースコードは以下の通り\nimport matplotlib.pyplot as plt import pandas as pd from hampel import hampel df = pd.read_csv('./kome.csv') print(df) 2002000101 2483 0 2002000202 2483 1 2002000303 2480 2 2002000404 2520 3 2002000505 2573 4 2002000606 2520 .. ... ... 233 2021000707 2470 234 2021000808 2443 デリミタが「,」の時はdelimiter=\u0026quot;;\u0026ldquo;みたく第２引数で指定する必要はないみたいです。\ncsvの読み込み方はいろんなサイトに書かれているのですが、読み込んだcsvを操作する方法についてはすぐ出てこなかったので次回はpandasで読み込んだcsvを操作する方法を取り扱いと思います。\n","date":"2022-01-14T13:40:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/","title":"s-Stat 時系列データで異常値を検知しよう（１）"},{"content":"はじめに HTMLをこれから始める人、HTMLってプログラムみたいで難しそうと思っている人、HTMLで挫折してしまった人。そういった人たちでもHTMLがわかるようになってほしいと思って「現役Webデザイナーが教えるHTML初心者講座」を始めてみました。\nまずは簡単にタグを覚える方法を紹介します。\nHTMLってなに？ HTMLとは（Hypertext Markup Language、ハイパーテキスト・マークアップ・ランゲージ）と呼ばれる言語のことで、書き方でタイトルや文章、箇条書き、画像の挿入ができたりします。\n例えば\n\u0026lt;h1\u0026gt;タイトル\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;文章\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;リンク\u0026lt;/a\u0026gt; という内容であればヘッドラインと文章とリンクになります。\n他のプログラムのようにHTML自体で何かを動かすということはできませんが、Web上でなにか公開するとなると、HTMLを使う必要が出てきます。\nタグを覚えよう HTMLにはタグと呼ばれるものがあり、それぞれ意味を持っています。\n「たくさんあって覚えられないよ」という人もいるかと思います。HTMLは覚えたらそれが全てというわけではなく、年々更新されて、知らないようなタグが出てきたりします。\nとはいっても、基本的なタグは変わりません。\nここでは基本的なタグを覚えてみましょう。\n覚え方はすごく簡単です。英語にしたときの頭文字だと思っておけば9割は覚えられました。\n残りの1割程度は頭文字ではなく、単語の確率が高いです。\nこれでHTMLのタグはほぼほぼ覚えられました。\n他の言語と違って、すごく簡単だと思いませんか？\nそれでは主要なタグを見てみましょう。\nヘッドライン \u0026lt;h1\u0026gt; \u0026lt;h2\u0026gt; \u0026lt;h3\u0026gt; \u0026lt;h4\u0026gt; \u0026lt;h5\u0026gt; \u0026lt;h6\u0026gt; Headline（見出し）の頭文字hを使ったタグです。\n文章を書く上で大事なのがhタグです。h1からh6まであります。\nh1は最上位の見出しタグで、基本的にはサイト内に1つしか存在してはならないとされてます。\nそのページのいちばん大事なタイトル部分にh1を設定する事が多いです。\nh2は大見出し的な扱いです。h1よりも重要度は下がってきます。\nh3は小見出し的な扱いです。\nそして、h4、 h5、h6となっていきます。\n文章 \u0026lt;p\u0026gt; Paragraph（文章）の頭文字で、文章を表すタグが\u0026lt;p\u0026gt;です。\n\u0026lt;p\u0026gt;今日はいい天気だ。\u0026lt;/p\u0026gt; とすることで、一つの文章になります。\n段落を構成したい場合は、\n\u0026lt;p\u0026gt;今日はいい天気だ。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;洗濯物もよく乾く。\u0026lt;/p\u0026gt; と\u0026lt;p\u0026gt;を続けて書いてやれば大丈夫です。\n改行 \u0026lt;br\u0026gt; 先程の文章内で改行したいとなったときは Break（壊す）の\u0026lt;br\u0026gt;を使ってみましょう。\n「いい天気だ」の「いい」という部分で改行したい場合は\n\u0026lt;p\u0026gt;今日は\u0026lt;br\u0026gt;いい天気だ。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;洗濯物もよく乾く。\u0026lt;/p\u0026gt; とすることで改行がされます。\nリンク \u0026lt;a\u0026gt; 次に、リンクを張りたい場合は、Anchor（いかり）のリンクの出発点や到達点を指定するタグ\u0026lt;a\u0026gt;を使いましょう。\n\u0026lt;a\u0026gt;タグは今までのタグと少し違い、属性と呼ばれる文字を追記する必要があります。\nたとえば、googleにリンクを張りたいと思ったときは\n\u0026lt;a\u0026gt;リンクだよ\u0026lt;/a\u0026gt; とするのではなく、\n\u0026lt;a href=\u0026#34;https://google.com/\u0026#34;\u0026gt;リンクだよ\u0026lt;/a\u0026gt; とする必要があります。\nこのhrefは「hypertext reference」の略です。日本語訳すると「参照」とかになるのでしょうか。\nhref部分にはリンクしたいサイトのURLを貼り付けて、囲んだタグの中には表示したい文字列を入力します。\n画像 \u0026lt;img\u0026gt; Image（画像）はHTMLでも\u0026lt;img\u0026gt;となってます。\nこのタグも前回のリンクと同じように属性が必要です。\n画像に必要な属性はsrcとaltになります。\nsrcは「source（元）」の略で、画像のURLを入力します。\naltは「alternate」の略です。日本語では「代替」となります。つまり、画像が何らかの原因で表示できなかったり、目の不自由な方に対して、その画像がどういったものなのかを記述することで、画像を表現することができます。\n箱的なもの \u0026lt;div\u0026gt; divはちょっと厄介で、今まで出てきたタグのように意味を持っていません。\nしかし、このタグで囲ったものをグループとして機能させるようにできます。\ndivideやdivisionの略で、分割するという意味になります。\n例えば、サイトを3つの構成に分けたいとしましょう。\nその場合は、\n\u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;コンテンツ1\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;コンテンツ2\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;コンテンツ3\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; などとすることが可能です。\nリスト \u0026lt;ul\u0026gt; \u0026lt;ol\u0026gt; リスト形式の文章を作りたいときには\u0026lt;ul\u0026gt;や\u0026lt;ol\u0026gt;を使用します。\nulは「unordered list」の略で、順序がないリストと言う意味です。\nolは「order list」の略で、順序があるリストと言う意味ですね。\nulやolの中には\u0026lt;li\u0026gt;というタグを記述します。\nこれは「list」を意味するタグです。\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;リスト1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;リスト2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;リスト3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;リスト1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;リスト2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;リスト3\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; ulとolの違いは、ulの場合はliの頭に「・」が付き、olの場合は「数字」が付きます。\n以上が比較的よく使うHTMLタグになります。\nまとめ すごく簡単でしたが、HTMLのタグの説明になります。\nタグが多くて難しいと感じている方は、やりたいことを英語にしたときになんていうのかということを考えれば、HTMLタグに置き換えることができるのではないかと思います。\n例えば、文章を強調したいなと思ったとしたら、強調は強くしたいってことだから「strong」だよな。となります。\nそして、HTMLには\u0026lt;strong\u0026gt;という強調のためのタグが存在しています。\nまた、ここは関係ないところだなというのは、脇に追いやっておきたいので、\u0026lt;aside\u0026gt;というタグを使うことが可能です。\nこのように、HTMLタグは自分がやりたいとを英語にしたときになんて言うのかさえわかってしまえば簡単に記述することが可能です。\nおすすめ書籍  【Amazon.co.jp 限定】1冊ですべて身につくHTML \u0026amp; CSSとWebデザイン入門講座 (DL特典: CSS Flexbox チートシート)  Web界隈やデザイナーに大人気! Web関連の情報やデザインについて記事が学べる『Webクリエイターボックス』の管理人、 Manaによる渾身のHTML \u0026amp; CSSとWebデザインが学べる本\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   これだけで基本がしっかり身につく HTML/CSS\u0026amp;Webデザイン1冊目の本   Webサイト制作をこれから学ぶ人へ送る “1冊目\u0026#34;に最適の入門書! 【学びをサポートする4大特典つき】 本書は手を動かしてWebサイトを作りながら\nHTML/CSSとWebデザインの基本を楽しく学べる入門書です。\n初学者が1冊目に読む本としてふさわしい内容を盛り込んでいるため、\nこれを読めば必要な基礎知識がひととおり身につきます。\nAmazonで詳細を見る\n\n\nAmazon.co.jpアソシエイトを使用\n ","date":"2022-01-13T14:14:30+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/image_hu6fb473ffe2cd11eeea2f386291804615_63092_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/","title":"現役Webデザイナーが教えるHTML初心者講座 - 初めてのHTML"},{"content":"関数からの戻り値の受け渡し 関数からの戻り値の受け渡し：\nBash関数は、数値と文字列値の両方を渡すことができます。関数から文字列値を渡す方法を次の例に示します。\u0026lsquo;function_return.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加します。関数greeting（）は、文字列値を変数valに返します。この変数は、処理の最後に他の文字列と組み合わせて出力します。\n#!/bin/bash  function greeting(){ str=\u0026#34;こんにちは、$name\u0026#34;; echo \u0026#34;$str\u0026#34;; } echo \u0026#34;あなたの名前を入力して下さい\u0026#34;; read name; val=$(greeting); echo \u0026#34;関数からの戻り値は「${val}」です。\u0026#34;; bashコマンドでファイルを実行します。\n$ bash function_return.sh あなたの名前を入力して下さい suzuki 関数からの戻り値は「こんにちは、suzuki」です。 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/","title":"【２０．スクリプトからの戻り値を渡す】ざっくりわかる「シェルスクリプト」"},{"content":"ディレクトリを作成する ディレクトリを作成する：\nBashは「mkdir」コマンドを使用して新しいディレクトリを作成します。\u0026lsquo;make_directory.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加して、ユーザーから新しいディレクトリ名を取得します。ディレクトリ名が現在の場所に存在しない場合は、ディレクトリが作成されます。\n#!/bin/bash  echo \u0026#34;ディレクトリ名を入力して下さい。\u0026#34; read newdir `mkdir \u0026#34;$newdir\u0026#34;` bashコマンドでファイルを実行します。\n$ bash make_directory.sh ディレクトリ名を入力して下さい。 suzuki $ ls suzuki/ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/","title":"【２１．ディレクトリを作成する】ざっくりわかる「シェルスクリプト」"},{"content":"存在を確認してディレクトリを作成する 存在を確認してディレクトリを作成します。\n\u0026lsquo;mkdir\u0026rsquo;コマンドを実行する前に、現在の場所にディレクトリが存在することを確認する事ができます。mkdir コマンドの\u0026rsquo; -d \u0026lsquo;オプションは、特定のディレクトリが存在するかどうかをテストするためのオプションです。\u0026lsquo;directory_exist.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加してください。ディレクトリの存在を確認してディレクトリを作成します。\n#!/bin/bash  echo \u0026#34;ディレクトリ名を入力して下さい。\u0026#34;; read ndir; if [ -d \u0026#34;$ndir\u0026#34; ];then echo \u0026#34;ディレクトリが存在します。\u0026#34;; else `mkdir $ndir`; echo \u0026#34;ディレクトリを作成しました。\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash directory_exist.sh ディレクトリ名を入力して下さい。 suzuki ディレクトリを作成しました。 $ ls suzuki/ $ bash directory_exist.sh ディレクトリ名を入力して下さい。 suzuki ディレクトリが存在します。 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/","title":"【２２．存在を確認してディレクトリを作成する】ざっくりわかる「シェルスクリプト」"},{"content":"ファイルを読む ファイルを読む：\nwhileループでreadコマンドを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。\u0026lsquo;read_file.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加してください。 別途作成する\u0026rsquo;book.txt\u0026rsquo;の内容を読み取ります。\n「book.txt」ファイルを作成します。\n$ vim book.txt ファイルを読む： ループを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。 \u0026#39;read_file.sh\u0026#39;という名前のファイルを作成し、次のコードを追加して、\u0026#39;book.txt\u0026#39;という名前の既存のファイルを読み取ります。 #!/bin/bash  file=\u0026#39;book.txt\u0026#39;; if [ -f \u0026#34;$file\u0026#34; ];then while read line;do echo \u0026#34;$line\u0026#34;; done\u0026lt;$file else echo \u0026#34;$fileファイルがありません\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash read_file.sh ファイルを読む： ループを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。 'read_file.sh'という名前のファイルを作成し、次のコードを追加して、'book.txt'という名前の既存のファイルを読み取ります。 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/","title":"【２３．ファイルを読む】ざっくりわかる「シェルスクリプト」"},{"content":"ファイルを削除する ファイルを削除します：\n\u0026lsquo;rm\u0026rsquo;コマンドは、ファイルまたはディレクトリを削除するためのコマンドです。次のコードを使用して「delete_file.sh」という名前のファイルを作成し、ユーザーからファイル名を取得して削除します。ここで、「-i」オプションは、ファイルを削除する前にユーザーに削除確認をに使用されます。\n#!/bin/bash  echo \u0026#34;削除するファイルまたはディレクトリ名を入力して下さい。\u0026#34; read fn rm -i $fn bashコマンドでファイルを実行します。\n$ ls suzuki/ book.txt bash delete_file.sh 削除するファイルまたはディレクトリ名を入力して下さい。 suzuki rm: suzuki: is a directory bash delete_file.sh 削除するファイルまたはディレクトリ名を入力して下さい。 book.txt $ ls suzuki/ $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/","title":"【２４．ファイルを削除する】ざっくりわかる「シェルスクリプト」"},{"content":"ファイルに追加 ファイルに追加：\nbashで「\u0026raquo;」演算子を使用すると、既存のファイルに新しいデータを追加できます。\u0026lsquo;append_file.sh \u0026lsquo;という名前のファイルを作成し、次のコードを追加して、ファイルの最後に新しいコンテンツを追加します。ここで、「Learning Level 5」は、スクリプトの実行後に「level.txt」ファイルのに追加されます。\n1. Pro AngularJS 2. Learning JQuery 3. PHP Programming 4. Code Igniter #!/bin/bash  echo \u0026#34;追加する前のファイル\u0026#34;; cat book.txt; echo \u0026#34;5. Bash Programming\u0026#34; \u0026gt;\u0026gt; level.txt echo \u0026#34;追加した後のファイル\u0026#34; cat book.txt; bashコマンドでファイルを実行します。\n$ bash append_file.sh 追加する前のファイル 1. Pro AngularJS 2. Learning JQuery 3. PHP Programming 4. Code Igniter 追加した後のファイル 1. Pro AngularJS 2. Learning JQuery 3. PHP Programming 4. Code Igniter 5. Bash Programming $ 「\u0026gt;」はファイルを新しく作成して追記します。\n「\u0026raquo;」は既に存在するファイルに追記します。ですので、ファイルが存在しないにもかかわらず、「\u0026raquo;」を行うと、ついするファイルがないため、エラーとなります。ファイルの存在を確認するための方法を次の章で説明します。\n関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/","title":"【２５．ファイルに追加】ざっくりわかる「シェルスクリプト」"},{"content":"ファイルが存在するかどうかを確認 ファイルが存在するかどうかをテストします。\n\u0026lsquo;-e\u0026rsquo;または\u0026rsquo;-f\u0026rsquo;オプションを使用して、ファイルの存在を確認できます。次のコードの \u0026lsquo;if [ ]\u0026lsquo;では、ファイルの存在をテストするために「-f」オプションが使用されています。\u0026rsquo; file_exist.sh \u0026lsquo;という名前のファイルを作成し、次のコードを追加します。ここで、ファイル名はコマンドラインから渡されます。\n#!/bin/bash  filename=$1; if [ -f \u0026#34;$filename\u0026#34; ];then echo \u0026#34;ファイルが存在します。\u0026#34;; else echo \u0026#34;ファイルは存在しません。\u0026#34;; fi bashコマンドでファイルを実行します。\n$ ls book.txt level.txt bash file_exist.sh level2.txt ファイルは存在しません。 bash file_exist.sh level.txt ファイルが存在します。 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/","title":"【２６．ファイルが存在するかどうかを確認】ざっくりわかる「シェルスクリプト」"},{"content":"mailコマンド メールを送る：\n' mail \u0026lsquo;または ' sendmail \u0026lsquo;コマンドを使用して電子メールを送信できます。これらのコマンドを使用する前に、mailまたはsendmailに必要なパッケージをインストール・設定をする必要があります。\u0026rsquo; mail_example.sh \u0026lsquo;という名前のファイルを作成し、次のコードを追加して電子メールを送信します。\nadmin@sample.com の部分を自分のメールアドレスに置き換えて実行して下さい。\n#!/bin/bash  Recipient=”admin@sample.com” Subject=”Greeting” Message=”Welcome to our site” `mail -s $Subject $Recipient \u0026lt;\u0026lt;\u0026lt; $Message` bashコマンドでファイルを実行します。\n$ bash mail_example.sh 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/","title":"【２７．mailコマンド】ざっくりわかる「シェルスクリプト」"},{"content":"dateコマンド 現在の日付を解析する：\ndateコマンドを使用して、現在のシステムの日付と時刻の値を取得することができます。日付と時刻は、「Y」、「m」、「d」、「H」、「M」、および「S」を使用します。\u0026lsquo;date_parse.sh\u0026rsquo;という名前の新しいファイルを作成し、次のコードを追加して、日、月、年、時、分、秒の値を表示します。\n#!/bin/bash  Year=`date +%Y`; Month=`date +%m`; Day=`date +%d`; Hour=`date +%H`; Minute=`date +%M`; Second=`date +%S`; echo `date`; echo \u0026#34;Current Date is: $Day-$Month-$Year\u0026#34;; echo \u0026#34;Current Time is: $Hour:$Minute:$Second\u0026#34;; bashコマンドでファイルを実行します。\n$ bash date_parse.sh 2022年 1月13日 木曜日 12時19分06秒 JST Current Date is: 13-01-2022 Current Time is: 12:19:06 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/","title":"【２８．dateコマンド】ざっくりわかる「シェルスクリプト」"},{"content":"waitコマンド waitコマンド：\nwaitコマンドは、実行中のプロセスの完了を待機するLinuxの組み込みコマンドです。 waitコマンドは、特定のプロセスIDまたはジョブIDで使用されます。waitコマンドでプロセスIDまたはジョブIDが指定されていない場合、現在のすべての子プロセスが完了するのを待機し、終了ステータスを返します。' wait_example.sh\u0026rsquo;という名前のファイルを作成し、次のスクリプトを追加します。\n#!/bin/bash  echo \u0026#34;Wait command\u0026#34; \u0026amp; process_id=$! wait $process_id echo \u0026#34;Exited with status $?\u0026#34; bashコマンドでファイルを実行します。\n$ bash wait_example.sh Wait command Exited with status 0 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/","title":"【２９．waitコマンド】ざっくりわかる「シェルスクリプト」"},{"content":"sleepコマンド sleepコマンド：\nコマンドの実行を特定の期間一時停止する場合は、sleepコマンドを使用できます。遅延量は、 秒（s）、分（m）、時間（h）、および日（d）で設定できます。\u0026lsquo;sleep_example.sh\u0026rsquo; という名前のファイルを作成し、次のスクリプトを追加します。このスクリプトは、実行後5秒間待機します。\n#!/bin/bash  echo “Wait for 5 seconds” sleep 5 echo “Completed” bashコマンドでファイルを実行します。\n$ bash sleep_example.sh “Wait for 5 seconds” “Completed” $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/","title":"【３０．sleepコマンド】ざっくりわかる「シェルスクリプト」"},{"content":"はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。\nこの記事では、bashプログラミングの次のトピックについて説明します。\n関数からの戻り値の受け渡し 関数からの戻り値の受け渡し：\nBash関数は、数値と文字列値の両方を渡すことができます。関数から文字列値を渡す方法を次の例に示します。\u0026lsquo;function_return.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加します。関数greeting（）は、文字列値を変数valに返します。この変数は、処理の最後に他の文字列と組み合わせて出力します。\n#!/bin/bash  function greeting(){ str=\u0026#34;こんにちは、$name\u0026#34;; echo \u0026#34;$str\u0026#34;; } echo \u0026#34;あなたの名前を入力して下さい\u0026#34;; read name; val=$(greeting); echo \u0026#34;関数からの戻り値は「${val}」です。\u0026#34;; bashコマンドでファイルを実行します。\n$ bash function_return.sh あなたの名前を入力して下さい suzuki 関数からの戻り値は「こんにちは、suzuki」です。 $ ディレクトリを作成する ディレクトリを作成する：\nBashは「mkdir」コマンドを使用して新しいディレクトリを作成します。\u0026lsquo;make_directory.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加して、ユーザーから新しいディレクトリ名を取得します。ディレクトリ名が現在の場所に存在しない場合は、ディレクトリが作成されます。\n#!/bin/bash  echo \u0026#34;ディレクトリ名を入力して下さい。\u0026#34; read newdir `mkdir \u0026#34;$newdir\u0026#34;` bashコマンドでファイルを実行します。\n$ bash make_directory.sh ディレクトリ名を入力して下さい。 suzuki $ ls suzuki/ 存在を確認してディレクトリを作成する 存在を確認してディレクトリを作成します。\n\u0026lsquo;mkdir\u0026rsquo;コマンドを実行する前に、現在の場所にディレクトリが存在することを確認する事ができます。mkdir コマンドの\u0026rsquo; -d \u0026lsquo;オプションは、特定のディレクトリが存在するかどうかをテストするためのオプションです。\u0026lsquo;directory_exist.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加してください。ディレクトリの存在を確認してディレクトリを作成します。\n#!/bin/bash  echo \u0026#34;ディレクトリ名を入力して下さい。\u0026#34;; read ndir; if [ -d \u0026#34;$ndir\u0026#34; ];then echo \u0026#34;ディレクトリが存在します。\u0026#34;; else `mkdir $ndir`; echo \u0026#34;ディレクトリを作成しました。\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash directory_exist.sh ディレクトリ名を入力して下さい。 suzuki ディレクトリを作成しました。 $ ls suzuki/ $ bash directory_exist.sh ディレクトリ名を入力して下さい。 suzuki ディレクトリが存在します。 $ ファイルを読む ファイルを読む：\nwhileループでreadコマンドを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。\u0026lsquo;read_file.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加してください。 別途作成する\u0026rsquo;book.txt\u0026rsquo;の内容を読み取ります。\n「book.txt」ファイルを作成します。\n$ vim book.txt ファイルを読む： ループを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。 \u0026#39;read_file.sh\u0026#39;という名前のファイルを作成し、次のコードを追加して、\u0026#39;book.txt\u0026#39;という名前の既存のファイルを読み取ります。 #!/bin/bash  file=\u0026#39;book.txt\u0026#39;; if [ -f \u0026#34;$file\u0026#34; ];then while read line;do echo \u0026#34;$line\u0026#34;; done\u0026lt;$file else echo \u0026#34;$fileファイルがありません\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash read_file.sh ファイルを読む： ループを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。 'read_file.sh'という名前のファイルを作成し、次のコードを追加して、'book.txt'という名前の既存のファイルを読み取ります。 ファイルを削除する ファイルを削除します：\n\u0026lsquo;rm\u0026rsquo;コマンドは、ファイルまたはディレクトリを削除するためのコマンドです。次のコードを使用して「delete_file.sh」という名前のファイルを作成し、ユーザーからファイル名を取得して削除します。ここで、「-i」オプションは、ファイルを削除する前にユーザーに削除確認をに使用されます。\n#!/bin/bash  echo \u0026#34;削除するファイルまたはディレクトリ名を入力して下さい。\u0026#34; read fn rm -i $fn bashコマンドでファイルを実行します。\n$ ls suzuki/ book.txt bash delete_file.sh 削除するファイルまたはディレクトリ名を入力して下さい。 suzuki rm: suzuki: is a directory bash delete_file.sh 削除するファイルまたはディレクトリ名を入力して下さい。 book.txt $ ls suzuki/ $ ファイルに追加 ファイルに追加：\nbashで「\u0026raquo;」演算子を使用すると、既存のファイルに新しいデータを追加できます。\u0026lsquo;append_file.sh \u0026lsquo;という名前のファイルを作成し、次のコードを追加して、ファイルの最後に新しいコンテンツを追加します。ここで、「Learning Level 5」は、スクリプトの実行後に「level.txt」ファイルのに追加されます。\n1. Pro AngularJS 2. Learning JQuery 3. PHP Programming 4. Code Igniter #!/bin/bash  echo \u0026#34;追加する前のファイル\u0026#34;; cat book.txt; echo \u0026#34;5. Bash Programming\u0026#34; \u0026gt;\u0026gt; level.txt echo \u0026#34;追加した後のファイル\u0026#34; cat book.txt; bashコマンドでファイルを実行します。\n$ bash append_file.sh 追加する前のファイル 1. Pro AngularJS 2. Learning JQuery 3. PHP Programming 4. Code Igniter 追加した後のファイル 1. Pro AngularJS 2. Learning JQuery 3. PHP Programming 4. Code Igniter 5. Bash Programming $ 「\u0026gt;」はファイルを新しく作成して追記します。\n「\u0026raquo;」は既に存在するファイルに追記します。ですので、ファイルが存在しないにもかかわらず、「\u0026raquo;」を行うと、ついするファイルがないため、エラーとなります。ファイルの存在を確認するための方法を次の章で説明します。\nファイルが存在するかどうかを確認 ファイルが存在するかどうかをテストします。\n\u0026lsquo;-e\u0026rsquo;または\u0026rsquo;-f\u0026rsquo;オプションを使用して、ファイルの存在を確認できます。次のコードの \u0026lsquo;if [ ]\u0026lsquo;では、ファイルの存在をテストするために「-f」オプションが使用されています。\u0026rsquo; file_exist.sh \u0026lsquo;という名前のファイルを作成し、次のコードを追加します。ここで、ファイル名はコマンドラインから渡されます。\n#!/bin/bash  filename=$1; if [ -f \u0026#34;$filename\u0026#34; ];then echo \u0026#34;ファイルが存在します。\u0026#34;; else echo \u0026#34;ファイルは存在しません。\u0026#34;; fi bashコマンドでファイルを実行します。\n$ ls book.txt level.txt bash file_exist.sh level2.txt ファイルは存在しません。 bash file_exist.sh level.txt ファイルが存在します。 mailコマンド メールを送る：\n' mail \u0026lsquo;または ' sendmail \u0026lsquo;コマンドを使用して電子メールを送信できます。これらのコマンドを使用する前に、mailまたはsendmailに必要なパッケージをインストール・設定をする必要があります。\u0026rsquo; mail_example.sh \u0026lsquo;という名前のファイルを作成し、次のコードを追加して電子メールを送信します。\nadmin@sample.com の部分を自分のメールアドレスに置き換えて実行して下さい。\n#!/bin/bash  Recipient=”admin@sample.com” Subject=”Greeting” Message=”Welcome to our site” `mail -s $Subject $Recipient \u0026lt;\u0026lt;\u0026lt; $Message` bashコマンドでファイルを実行します。\n$ bash mail_example.sh dateコマンド 現在の日付を解析する：\ndateコマンドを使用して、現在のシステムの日付と時刻の値を取得することができます。日付と時刻は、「Y」、「m」、「d」、「H」、「M」、および「S」を使用します。\u0026lsquo;date_parse.sh\u0026rsquo;という名前の新しいファイルを作成し、次のコードを追加して、日、月、年、時、分、秒の値を表示します。\n#!/bin/bash  Year=`date +%Y`; Month=`date +%m`; Day=`date +%d`; Hour=`date +%H`; Minute=`date +%M`; Second=`date +%S`; echo `date`; echo \u0026#34;Current Date is: $Day-$Month-$Year\u0026#34;; echo \u0026#34;Current Time is: $Hour:$Minute:$Second\u0026#34;; bashコマンドでファイルを実行します。\n$ bash date_parse.sh 2022年 1月13日 木曜日 12時19分06秒 JST Current Date is: 13-01-2022 Current Time is: 12:19:06 $ waitコマンド waitコマンド：\nwaitコマンドは、実行中のプロセスの完了を待機するLinuxの組み込みコマンドです。 waitコマンドは、特定のプロセスIDまたはジョブIDで使用されます。waitコマンドでプロセスIDまたはジョブIDが指定されていない場合、現在のすべての子プロセスが完了するのを待機し、終了ステータスを返します。\u0026rsquo; wait_example.sh\u0026rsquo;という名前のファイルを作成し、次のスクリプトを追加します。\n#!/bin/bash  echo \u0026#34;Wait command\u0026#34; \u0026amp; process_id=$! wait $process_id echo \u0026#34;Exited with status $?\u0026#34; bashコマンドでファイルを実行します。\n$ bash wait_example.sh Wait command Exited with status 0 $ sleepコマンド sleepコマンド：\nコマンドの実行を特定の期間一時停止する場合は、sleepコマンドを使用できます。遅延量は、 秒（s）、分（m）、時間（h）、および日（d）で設定できます。\u0026lsquo;sleep_example.sh\u0026rsquo; という名前のファイルを作成し、次のスクリプトを追加します。このスクリプトは、実行後5秒間待機します。\n#!/bin/bash  echo “Wait for 5 seconds” sleep 5 echo “Completed” bashコマンドでファイルを実行します。\n$ bash sleep_example.sh “Wait for 5 seconds” “Completed” $ #関連記事\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-13T11:26:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/","title":"ざっくりわかる「シェルスクリプト３」"},{"content":"e-Statで新着一覧を取得しよう 毎日自動的に処理できるようにしたいので新着一覧を取得する必要があります。\n新着一覧は、リスト取得用のAPIでupdateDateに日付を指定してその日の更新分を取得してくるようにしました。\nwget \u0026quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?updatedDate=20220111\u0026amp;appId=xxxxxxxxxxxx\u0026amp;lang=J\u0026quot; -O new.csv STAT_CODEが政府統計コード、TABLE_INFがデータセットIDになります。\n\u0026quot;0003254482\u0026quot;,\u0026quot;00552010\u0026quot;,\u0026quot;知的財産活動調査\u0026quot;,\u0026quot;00552\u0026quot;,\u0026quot;特許庁\u0026quot;,\u0026quot;知的財産活動調査\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;1-1\u0026quot;,\u0026quot;業種別出願件数階級別 売上高、営業利益高、経常 利益高、従業者数、研究関係従業者数及び研究費\u0026quot;,\u0026quot;（注1）各設問項目によって標本数が異なるため、例えば研究関係従業者数の集計結果が従業者数の集計結果を上回るなど、大小関係の逆転が生じ得る点に留意する必要がある。（注2）業種 「個人」において売上高等の記載される場合があるが、これは事業を営む個人事業主が調査票の業種を「個人」として回答したことによる。\u0026quot;,\u0026quot;業種別出願件数階級別\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;年 度次\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;2022-01-11\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;該当なし\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;2022-01-11\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;情報通信・科学技術\u0026quot;,\u0026quot;03\u0026quot;,\u0026quot;知的財産\u0026quot; データセットID（TABLE_INF）を使って個別データを取得しましょう。\nwget \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxxxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003254482\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; -O 0003254482.csv 知的財産活動調査とは 今日の課題は新着一覧に出てきた「知的財産活動調査」をどう処理するか検討してみましょう。\n知的財産活動調査は、我が国における知的財産活動の現状を定量的に把握することを目的とした一般統計調査とのことです。\n特許権などの利用状況を調査したものみたいです。\n データセット \n知的財産活動調査のデータセット数ですが１４０件もあります。\n統計のデータセット数は１つの時もあればこのように１００を超える時もあるみたいです。\nこれだけデータセット数が多いとこの中から主要なデータセットを選択してサマリーを作成するのは大変ですね。\ngoogle検索で「知的財産活動調査」の分析記事を調べてみると\nhttps://www.semiconportal.com/archive/editorial/industry/17.html\n知的財産担当者数は増加傾向にあり、2004年度は、約45,500人で前年度に比べ16.6 ％増加。\n企業等の知的財産活動費は約9,200 億円で前年度に比べ17.1 ％増加。\n特許権の活用状況 国内における2004年度の特許権の利用率は48.2 ％であり、依然として所有する権利の約半数が利用されていないことがわかる。\nhttps://www.jstage.jst.go.jp/article/jasmin/2018s/0/2018s_246/_article/-char/ja/\n研究開発活動が利益率に対して最も顕著なプラスの効果を持っていたのは「医薬品製造業」であった．また，研究費投資から利益率向上には25年程度のラグがあることも示された\n「知的財産担当者数」「知的財産活動費」「特許権の利用率」あたりがよく出るキーワードみたいです。\n主要なキーワードの抽出方法なのですが、「知的財産活動調査」のように統計名でgoogle検索した結果に対して、「知的財産担当者数」「知的財産活動費」などのデータセット名で検索して件数が多いものを主要なキーワードとして取り扱うことができるか検討してみたいと思います。\n「利益率」という面白いキーワードがあったのですが、統計の中にはそのままのデータはありませんでした。「経常利益高」という項目があるのでこれを「知的財産活動費」で割り算する必要がありそうです。\n「利益率」が出せそうなら出してみるというのも検討してみると面白いかもしれません。\n主要なキーワードとしては、「知的財産担当者数」「知的財産活動費」「特許権の利用率」のようにその統計に固有のものもありますが、「利益率」「担当者数」「費用」「利用率」など汎用的に重要な項目もあるのかなと思いました。\nデータセットの先頭にある「売上高、営業利益高、経常利益高、従業者数、研究関係従業者数及び研究費」は「特許権の利用率」は含まないものの「経常利益高」「知的財産担当者数」「知的財産活動費」を含むものでした。\nデータセットが大量にある統計の場合先頭のデータセットはまとめ的なデータになるのでしょうか。他の統計も見てみようと思います。\nデータセットの中に「標本数」というものがありました。「標本数」は、アンケート結果の回収数です。データの信用性を図る上では大切な項目ですが、サマリーを作成する際は除外しても良い項目かもしれません。\n 知的財産担当者数 \n 知的財産活動費 \n","date":"2022-01-12T13:40:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/","title":"e-Statで新着一覧を取得しよう"},{"content":"or 条件を if文で使う orロジックでifステートメントを使用する：\n\u0026lsquo;||\u0026lsquo;は、ifステートメントでorロジックを定義するために使用されます。次のコードを使用して「if_with_or.sh」という名前のファイルを作成し、ifステートメントのorロジックの使用を確認します。ここで、nの値はユーザーから取得されます。値が15または45の場合、出力は「ゲームに勝ちました」になります。それ以外の場合、出力は「ゲームに負けました」になります。\n#!/bin/bash  echo \u0026#34;数値を入力して下さい。\u0026#34;; read n; if [[ (\u0026#34;$n\u0026#34; -eq 15 || \u0026#34;$n\u0026#34; -eq 45) ]];then echo \u0026#34;ゲームに勝ちました\u0026#34;; else echo \u0026#34;ゲームに負けました\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash if_with_or.sh 数値を入力して下さい。 5 ゲームに負けました $ bash if_with_or.sh 数値を入力して下さい。 45 ゲームに勝ちました bash-5.1$ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/","title":"【１０．or 条件を if文で使う】ざっくりわかる「シェルスクリプト」"},{"content":"else if と else else ifステートメントの使用：\nelse if条件の使用は、bashでは「elif」を定義します。\u0026lsquo;elseif_example.sh\u0026rsquo;という名前のファイルを作成し、次のスクリプトを追加して、bashスクリプトでelseifがどのように定義されているかを確認します。\n#!/bin/bash  echo \u0026#34;あなたのラッキーナンバーを入力して下さい。\u0026#34;; read n; if [ \u0026#34;$n\u0026#34; -eq 101 ];then echo \u0026#34;あなたは一等賞を獲得しました\u0026#34;; elif [ \u0026#34;$n\u0026#34; -eq 510 ];then echo \u0026#34;あなたは二等賞を獲得しました\u0026#34;; elif [ \u0026#34;$n\u0026#34; -eq 999 ];then echo \u0026#34;あなたは三等賞を獲得しました\u0026#34;; else echo \u0026#34;すみません、またチャレンジして下さい\u0026#34;; fi bashコマンドでファイルを実行します。\nbash$ bash elseif_example.sh あなたのラッキーナンバーを入力して下さい。 101 あなたは一等賞を獲得しました bash$ bash elseif_example.sh あなたのラッキーナンバーを入力して下さい。 999 あなたは三等賞を獲得しました bash$ bash elseif_example.sh あなたのラッキーナンバーを入力して下さい。 100 すみません、またチャレンジして下さい bash$ bash elseif_example.sh $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/","title":"【１１．else if と else】ざっくりわかる「シェルスクリプト」"},{"content":"case 文 caseステートメントの使用：\ncaseステートメントは、if-elseif-elseステートメントの代わりに使用されます。このステートメントの開始ブロックと終了ブロックは、「case」と「esac」によって定義されます。\u0026lsquo;case_example.sh\u0026rsquo;という名前の新しいファイルを作成し、次のスクリプトを追加します。次のスクリプトの出力は、例として前のelseと同じになります。\n#!/bin/bash  echo \u0026#34;あなたのラッキーナンバーを入力して下さい。\u0026#34;; read n; case \u0026#34;$n\u0026#34; in 101) echo \u0026#34;あなたは一等賞を獲得しました\u0026#34; ;; 510) echo \u0026#34;あなたは二等賞を獲得しました\u0026#34; ;; 999) echo \u0026#34;あなたは三等賞を獲得しました\u0026#34; ;; *) echo \u0026#34;すみません、またチャレンジして下さい\u0026#34; esac bashコマンドでファイルを実行します。\nbash$ bash case_example.sh あなたのラッキーナンバーを入力して下さい。 101 あなたは一等賞を獲得しました bash$ bash case_example.sh あなたのラッキーナンバーを入力して下さい。 510 あなたは二等賞を獲得しました bash$ bash case_example.sh あなたのラッキーナンバーを入力して下さい。 999 あなたは三等賞を獲得しました bash$ bash case_example.sh あなたのラッキーナンバーを入力して下さい。 777 すみません、またチャレンジして下さい 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/","title":"【１２．case 文】ざっくりわかる「シェルスクリプト」"},{"content":"コマンドラインから引数を取得 コマンドラインから引数を取得：\nBashスクリプトは、他のプログラミング言語と同様に、コマンドライン引数から入力を読み取ることができます。たとえば、$1と$2の変数は、最初と2番目のコマンドライン引数を読み取るために使用されます。「command_line.sh」という名前のファイルを作成し、次のスクリプトを追加します。次のスクリプトによって読み取られた2つの引数値は、引数の総数と引数値を出力として出力します。\n#!/bin/bash  echo \u0026#34;引数の数 : $#\u0026#34;; echo \u0026#34;一つ目の引数 = $1\u0026#34;; echo \u0026#34;二つ目の引数 = $2\u0026#34;; bashコマンドでファイルを実行します。\n$ bash command_line.sh apple windows 引数の数 : 2 一つ目の引数 = apple 二つ目の引数 = windows $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/","title":"【１３．コマンドラインから引数を取得】ざっくりわかる「シェルスクリプト」"},{"content":"名前を使用してコマンドラインから引数を取得する コマンドラインから名前付きの引数を取得：\n名前付きのコマンドライン引数を読み取る方法を示します。\u0026lsquo;command_line_names.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加します。ここで、XとYの2つの引数がこのスクリプトによって読み取られ、XとYの合計が出力されます。\n#!/bin/bash  for arg in \u0026#34;$@\u0026#34;;do index=$(echo $arg | cut -f1 -d=); val=$(echo $arg | cut -f2 -d=); case $index in X) x=$val;; Y) y=$val;; *) esac done ((result=x+y)); echo \u0026#34;X+Y=$result\u0026#34;; bashコマンドで二つのコマンドライン引数を使用して、ファイルを実行します。\n$ bash command_line_names.sh X=45 Y=30 X+Y=75 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/","title":"【１４．名前を使用してコマンドラインから引数を取得する】ざっくりわかる「シェルスクリプト」"},{"content":"変数に2つの文字列を組み合わせる 文字列変数を組み合わせる：\n文字列変数はbashで簡単に組み合わせることができます。「string_combine.sh」という名前のファイルを作成し、次のスクリプトを追加して、変数を一緒に配置するか、「+」演算子を使用して、bashで文字列変数を組み合わせる方法を確認します。\n#!/bin/bash  string1=\u0026#34;Apple\u0026#34;; string2=\u0026#34;Mac OS\u0026#34;; echo \u0026#34;$string1$string2\u0026#34;; string3=\u0026#34;$string1$string2\u0026#34;; string3+=\u0026#34; は、とても優れたＯＳです。\u0026#34; ; echo $string3; bashコマンドでファイルを実行します。\n$ bash string_combine.sh Apple Mac OS Apple Mac OS は、とても優れたＯＳです。 $ Bash は += 演算子を用いて文字列を連結することもできます。単純に a+=b とすると、a=a+b と理解することができます。\n関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/","title":"【１５．変数に2つの文字列を組み合わせる】ざっくりわかる「シェルスクリプト」"},{"content":"文字列の部分文字列を取得する 文字列の部分文字列を取得します。\n他のプログラミング言語と同様に、bashには文字列データから値を切り取る組み込み関数はありません。ただし、次のスクリプトに示すbashで、別の方法で部分文字列のタスクを実行できます。スクリプトをテストするには、次のコードを使用して「substring_example.sh」という名前のファイルを作成します。ここで、値6は部分文字列が開始する開始点を示し、5は部分文字列の長さを示します。\n#!/bin/bash  Str=\u0026#34;Learn Bash from NLP\u0026#34;; subStr=${Str:6:4}; echo \u0026#34;$subStr\u0026#34;; bashコマンドでファイルを実行します。\n$ bash substring_example.sh Bash $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/","title":"【１６．文字列の部分文字列を取得する】ざっくりわかる「シェルスクリプト」"},{"content":"変数に2つの数値を追加します 2つの数字を追加します。\nさまざまな方法でbashの算術演算を実行できます。次のスクリプトに、二重角かっこを使用してbashに2つの整数を追加する方法を示します。次のコードを使用して、「add_numbers.sh」という名前のファイルを作成します。2つの整数値がユーザーから取得され、加算の結果が出力されます。\n#!/bin/bash  echo \u0026#34;最初の数値を入力\u0026#34;; read x; echo \u0026#34;2番目の数値を入力\u0026#34;; read y; ((sum=x+y)); echo \u0026#34;加算の結果=$sum\u0026#34;; bashコマンドでファイルを実行します。\n$ bash add_numbers.sh 最初の数値を入力 25 2番目の数値を入力 56 加算の結果=81 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/","title":"【１７．変数に2つの数値を追加します】ざっくりわかる「シェルスクリプト」"},{"content":"関連記事\nざっくりわかるシェルスクリプト１」\nざっくりわかるシェルスクリプト２」\nざっくりわかるシェルスクリプト３」\n関数を作成する 関数の作成：\n簡単な関数を作成して関数を呼び出す方法を次のスクリプトに示します。\u0026lsquo;function_example.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加します。bashスクリプトで角かっこを使用せずに、名前でのみ関数を呼び出すことができます。\n#!/bin/bash  function F1(){ echo \u0026#39;わたしはbashプログラミングが大好きです。\u0026#39;; } F1; bashコマンドでファイルを実行します。\n$ bash function_example.sh わたしはbashプログラミングが大好きです。 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/","title":"【１８．関数を作成する】ざっくりわかる「シェルスクリプト」"},{"content":"関数パラメーターを使用する パラメータを使用して関数を作成します。\nBashは、関数宣言時に関数パラメーターまたは引数を宣言できません。ただし、他の変数を使用して、関数内でパラメーターを使用できます。関数の呼び出し時に2つの値が渡された場合、値の読み取りには$1と$2の変数が使用されます。\u0026lsquo;function_parameter.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加します。ここで、関数 \u0026lsquo;Rectangle_Area\u0026rsquo;は、パラメーター値に基づいて長方形の面積を計算します。\n#!/bin/bash  Rectangle_Area(){ area=$(($1*$2)); echo \u0026#34;面積は : $area\u0026#34;; } Rectangle_Area 10 20; bashコマンドでファイルを実行します。\nbash-5.1$ bash tmp 面積は : 200 bash-5.1$ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/","title":"【１９．関数パラメーターを使用する】ざっくりわかる「シェルスクリプト」"},{"content":"はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。\nこの記事では、bashプログラミングの次のトピックについて説明します。\nor 条件を if文で使う orロジックでifステートメントを使用する：\n\u0026lsquo;||\u0026lsquo;は、ifステートメントでorロジックを定義するために使用されます。次のコードを使用して「if_with_or.sh」という名前のファイルを作成し、ifステートメントのorロジックの使用を確認します。ここで、nの値はユーザーから取得されます。値が15または45の場合、出力は「ゲームに勝ちました」になります。それ以外の場合、出力は「ゲームに負けました」になります。\n#!/bin/bash  echo \u0026#34;数値を入力して下さい。\u0026#34;; read n; if [[ (\u0026#34;$n\u0026#34; -eq 15 || \u0026#34;$n\u0026#34; -eq 45) ]];then echo \u0026#34;ゲームに勝ちました\u0026#34;; else echo \u0026#34;ゲームに負けました\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash if_with_or.sh 数値を入力して下さい。 5 ゲームに負けました $ bash if_with_or.sh 数値を入力して下さい。 45 ゲームに勝ちました bash-5.1$ else if と else else ifステートメントの使用：\nelse if条件の使用は、bashでは「elif」を定義します。\u0026lsquo;elseif_example.sh\u0026rsquo;という名前のファイルを作成し、次のスクリプトを追加して、bashスクリプトでelseifがどのように定義されているかを確認します。\n#!/bin/bash  echo \u0026#34;あなたのラッキーナンバーを入力して下さい。\u0026#34;; read n; if [ \u0026#34;$n\u0026#34; -eq 101 ];then echo \u0026#34;あなたは一等賞を獲得しました\u0026#34;; elif [ \u0026#34;$n\u0026#34; -eq 510 ];then echo \u0026#34;あなたは二等賞を獲得しました\u0026#34;; elif [ \u0026#34;$n\u0026#34; -eq 999 ];then echo \u0026#34;あなたは三等賞を獲得しました\u0026#34;; else echo \u0026#34;すみません、またチャレンジして下さい\u0026#34;; fi bashコマンドでファイルを実行します。\nbash$ bash elseif_example.sh あなたのラッキーナンバーを入力して下さい。 101 あなたは一等賞を獲得しました bash$ bash elseif_example.sh あなたのラッキーナンバーを入力して下さい。 999 あなたは三等賞を獲得しました bash$ bash elseif_example.sh あなたのラッキーナンバーを入力して下さい。 100 すみません、またチャレンジして下さい bash$ bash elseif_example.sh $ case 文 caseステートメントの使用：\ncaseステートメントは、if-elseif-elseステートメントの代わりに使用されます。このステートメントの開始ブロックと終了ブロックは、「case」と「esac」によって定義されます。\u0026lsquo;case_example.sh\u0026rsquo;という名前の新しいファイルを作成し、次のスクリプトを追加します。次のスクリプトの出力は、例として前のelseと同じになります。\n#!/bin/bash  echo \u0026#34;あなたのラッキーナンバーを入力して下さい。\u0026#34;; read n; case \u0026#34;$n\u0026#34; in 101) echo \u0026#34;あなたは一等賞を獲得しました\u0026#34; ;; 510) echo \u0026#34;あなたは二等賞を獲得しました\u0026#34; ;; 999) echo \u0026#34;あなたは三等賞を獲得しました\u0026#34; ;; *) echo \u0026#34;すみません、またチャレンジして下さい\u0026#34; esac bashコマンドでファイルを実行します。\nbash$ bash case_example.sh あなたのラッキーナンバーを入力して下さい。 101 あなたは一等賞を獲得しました bash$ bash case_example.sh あなたのラッキーナンバーを入力して下さい。 510 あなたは二等賞を獲得しました bash$ bash case_example.sh あなたのラッキーナンバーを入力して下さい。 999 あなたは三等賞を獲得しました bash$ bash case_example.sh あなたのラッキーナンバーを入力して下さい。 777 すみません、またチャレンジして下さい コマンドラインから引数を取得 コマンドラインから引数を取得：\nBashスクリプトは、他のプログラミング言語と同様に、コマンドライン引数から入力を読み取ることができます。たとえば、$1と$2の変数は、最初と2番目のコマンドライン引数を読み取るために使用されます。「command_line.sh」という名前のファイルを作成し、次のスクリプトを追加します。次のスクリプトによって読み取られた2つの引数値は、引数の総数と引数値を出力として出力します。\n#!/bin/bash  echo \u0026#34;引数の数 : $#\u0026#34;; echo \u0026#34;一つ目の引数 = $1\u0026#34;; echo \u0026#34;二つ目の引数 = $2\u0026#34;; bashコマンドでファイルを実行します。\n$ bash command_line.sh apple windows 引数の数 : 2 一つ目の引数 = apple 二つ目の引数 = windows $ 名前を使用してコマンドラインから引数を取得する コマンドラインから名前付きの引数を取得：\n名前付きのコマンドライン引数を読み取る方法を示します。\u0026lsquo;command_line_names.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加します。ここで、XとYの2つの引数がこのスクリプトによって読み取られ、XとYの合計が出力されます。\n#!/bin/bash  for arg in \u0026#34;$@\u0026#34;;do index=$(echo $arg | cut -f1 -d=); val=$(echo $arg | cut -f2 -d=); case $index in X) x=$val;; Y) y=$val;; *) esac done ((result=x+y)); echo \u0026#34;X+Y=$result\u0026#34;; bashコマンドで二つのコマンドライン引数を使用して、ファイルを実行します。\n$ bash command_line_names.sh X=45 Y=30 X+Y=75 $ 変数に2つの文字列を組み合わせる 文字列変数を組み合わせる：\n文字列変数はbashで簡単に組み合わせることができます。「string_combine.sh」という名前のファイルを作成し、次のスクリプトを追加して、変数を一緒に配置するか、「+」演算子を使用して、bashで文字列変数を組み合わせる方法を確認します。\n#!/bin/bash  string1=\u0026#34;Apple\u0026#34;; string2=\u0026#34;Mac OS\u0026#34;; echo \u0026#34;$string1$string2\u0026#34;; string3=\u0026#34;$string1$string2\u0026#34;; string3+=\u0026#34; は、とても優れたＯＳです。\u0026#34; ; echo $string3; bashコマンドでファイルを実行します。\n$ bash string_combine.sh Apple Mac OS Apple Mac OS は、とても優れたＯＳです。 $ Bash は += 演算子を用いて文字列を連結することもできます。単純に a+=b とすると、a=a+b と理解することができます。\n文字列の部分文字列を取得する 文字列の部分文字列を取得します。\n他のプログラミング言語と同様に、bashには文字列データから値を切り取る組み込み関数はありません。ただし、次のスクリプトに示すbashで、別の方法で部分文字列のタスクを実行できます。スクリプトをテストするには、次のコードを使用して「substring_example.sh」という名前のファイルを作成します。ここで、値6は部分文字列が開始する開始点を示し、5は部分文字列の長さを示します。\n#!/bin/bash  Str=\u0026#34;Learn Bash from NLP\u0026#34;; subStr=${Str:6:4}; echo \u0026#34;$subStr\u0026#34;; bashコマンドでファイルを実行します。\n$ bash substring_example.sh Bash $ 変数に2つの数値を追加します 2つの数字を追加します。\nさまざまな方法でbashの算術演算を実行できます。次のスクリプトに、二重角かっこを使用してbashに2つの整数を追加する方法を示します。次のコードを使用して、「add_numbers.sh」という名前のファイルを作成します。2つの整数値がユーザーから取得され、加算の結果が出力されます。\n#!/bin/bash  echo \u0026#34;最初の数値を入力\u0026#34;; read x; echo \u0026#34;2番目の数値を入力\u0026#34;; read y; ((sum=x+y)); echo \u0026#34;加算の結果=$sum\u0026#34;; bashコマンドでファイルを実行します。\n$ bash add_numbers.sh 最初の数値を入力 25 2番目の数値を入力 56 加算の結果=81 $ 関数を作成する 関数の作成：\n簡単な関数を作成して関数を呼び出す方法を次のスクリプトに示します。\u0026lsquo;function_example.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加します。bashスクリプトで角かっこを使用せずに、名前でのみ関数を呼び出すことができます。\n#!/bin/bash  function F1(){ echo \u0026#39;わたしはbashプログラミングが大好きです。\u0026#39;; } F1; bashコマンドでファイルを実行します。\n$ bash function_example.sh わたしはbashプログラミングが大好きです。 $ 関数パラメーターを使用する パラメータを使用して関数を作成します。\nBashは、関数宣言時に関数パラメーターまたは引数を宣言できません。ただし、他の変数を使用して、関数内でパラメーターを使用できます。関数の呼び出し時に2つの値が渡された場合、値の読み取りには$1と$2の変数が使用されます。\u0026lsquo;function_parameter.sh\u0026rsquo;という名前のファイルを作成し、次のコードを追加します。ここで、関数 \u0026lsquo;Rectangle_Area\u0026rsquo;は、パラメーター値に基づいて長方形の面積を計算します。\n#!/bin/bash  Rectangle_Area(){ area=$(($1*$2)); echo \u0026#34;面積は : $area\u0026#34;; } Rectangle_Area 10 20; bashコマンドでファイルを実行します。\nbash-5.1$ bash tmp 面積は : 200 bash-5.1$ 関連記事 【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-12T12:30:57+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/","title":"ざっくりわかる「シェルスクリプト２」"},{"content":"簡単にできるHugoで人気の記事を表示する方法の2回目になります。\n前回（簡単にできるHugoで人気の記事を表示する方法 #01）ではGAS（Google App Scripts）を使ってアナリティクスのデータをスプレッドシートに反映するところまで説明しました。\n今回は前回作成したスプレッドシートからデータを取得して、Hugoと連携するところまでやっていきましょう。\nスプレッドシートのデータをJSONで取得 Hugoやjsなどとの連携を簡単にするために、スプレッドシートのデータをjsonで取得できるようにします。\n前回作成したプログラムを開きます。\n開き方は前回の「簡単にできるHugoで人気の記事を表示する方法 #01」にある「スプレッドシートの設定」を確認してください。\nスプレッドシートのデータをjsonで取得するためには、APIを使用するケースもありますが、今回はAPIを使用しないで取得します。\nプログラムの内容は下記になります。\nスプレッドシートのIDはスプレッドシートのURL部分の\ndocs.google.com/spreadsheets/d/ スプレッドシートのID /edit#gid=0\nといったように docs.google.com/spreadsheets/d/ と edit に囲まれた部分になります。\nfunction getData(sheetName) { const sheet = SpreadsheetApp.openById(\u0026#34;スプレッドシートのID\u0026#34;).getSheetByName(sheetName); const rows = sheet.getDataRange().getValues(); const keys = rows.splice(0, 1)[0]; return rows.map(row =\u0026gt; { let obj = {}; row.map((item, index) =\u0026gt; obj[keys[index]] = item); return obj; }); } function doGet(e) { let data = getData(e.parameter.sheetname); return ContentService.createTextOutput(JSON.stringify(data, null, 2)).setMimeType(ContentService.MimeType.JSON); } プログラムの説明 doGetってなに？ doGet(e) はこのプログラムをURLから実行できるようにした際にパラメータの値を取得して処理を行う関数です。\nここでは getData()という関数に、クエリパラメータsheetnameを渡しております。\nURLにすると、https://〜/exec?sheetname=パラメータ\nとなります。\nこのパラメータ部分にスプレッドシートのシート名を渡すことで、該当するスプレッドシートのデータを表示できるようになるというわけです。\ngetDataでやってること getData(sheetName) では先程のクエリパラメータsheetnameの値を使って、シートから情報を取得してjsonに格納している部分です。\n指定したシートIDの値がある範囲からから値を取得するのが下記のプログラムです。\nconst rows = sheet.getDataRange().getValues(); その取得した値からタイトル、jsonのキーとなる部分を keys として格納します。\nそしたら先程取得した rows の値をループで取得しながらjson形式のデータに加工します。\nすると、\n[ [リンク, pv数, session数, users数], [リンク, pv数, session数, users数] ] というデータが\n[ {link: リンク, pv: pv数, session: session数, users: users数}, {link: リンク, pv: pv数, session: session数, users: users数} ] というjson形式に加工することができました。\nここまでを保存しておきます。\nこのプログラムを公開してURLでアクセスできるようにしましょう。\nGASのプログラムをデプロイして公開 それではここまでのファイルをデプロイして、Webでアクセスできるようにしましょう。\n右上にある「デプロイ」を押して、新しいデプロイをクリックします。\nすると、「新しいデプロイ」となるので、歯車のマーク「デプロイを有効にする」をおして、「ウェブアプリ」を選択します。\n \n設定の画面になるので、説明などを入力します。\n「次のユーザーとして実行」は自身のアドレスでかまいません。\n「アクセスできるよユーザー」部分は「 全員 」とします。\nこれによって、Hugoから呼び出した際に実行できるようになります。\n \nここまで設定できたら「デプロイ」を押して、プログラムを公開します。\n表示されたウェブアプリのURLが表示されるので、コピーしておきます。\n先程コピーしたURLの末尾に?sheetname=monthを追加してアクセスしてみましょう。\nhttps://script.google.com/macros/s/〜/exec?sheetname=month\nURLはこのような形になります。\n正常にアクセスできていれば\n \nとjson形式のデータが表示されるはずです。\nエラーが出た場合 TypeError: Cannot read property 'getDataRange' of null（行 3、ファイル「コード」） というエラーが出た場合はパラメータが記述されていないだけなので、パラメータを記述することで正常に取得できます。\nそれ以外の場合は、「デバッグ」を使ってエラーを特定していく必要があります。\nデバッグではdoGetはクエリ取得できないので、e.parameter.sheetname部分を\u0026quot;month\u0026quot;と直書きしてデバッグを実行します。\nデプロイには注意 デプロイで「新しいデプロイ」を選択するとURLが変わる点に注意です。\nGASでウェブアプリのURLを固定するための方法は、「デプロイを管理」から更新をするようにします。\n 「デプロイ」の「デプロイを管理」を押します。 そして、右にある鉛筆マークの「編集」を押します。\nすると、編集画面になり、バージョンや説明を修正することができます。 バージョン部分を「新しいバージョン」として、説明に「最新版」とでも打っておきましょう。 この状態で「デプロイ」をクリックします。  上記の作業で、URLを固定したままウェブアプリを公開することができます。\n \nHugoと連携して人気の記事を表示する アナリティクスとスプレッドシートを使って人気の記事をjsonで取得する事ができるようになったので、Hugoと連携します。\nHugoにはjsonを取得する機能がついているので、その機能を使ってデータを取得します。\n{{ $json := getJSON \u0026#34;https://script.google.com/macros/s/〜/exec?sheetname=month\u0026#34; }} \u0026lt;aside class=\u0026#34;widget archives sidearticle-contents--wrapper\u0026#34; id=\u0026#34;popular-articles--month\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contents-area\u0026#34;\u0026gt; \u0026lt;header\u0026gt;\u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;人気の記事（1ヶ月以内）\u0026lt;/h2\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;sidearticle-contents\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex article-list--tile\u0026#34;\u0026gt; {{ $page := .Site.Pages }} {{ range first .Site.Params.widgets.populerArticles.limit $json }} {{ $article := index (where $page \u0026#34;.RelPermalink\u0026#34; \u0026#34;eq\u0026#34; .link ) 0 }} {{ if $article }} \u0026lt;article\u0026gt; \u0026lt;h3 class=\u0026#34;article-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ $article.RelPermalink }}\u0026#34;\u0026gt;{{- $article.Title -}}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;/article\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; getJSON のURLは先ほど作成したGASのウェブアプリURLになります。\n今回は月間の人気記事を取得したいので、?sheetname=monthとしてあります。\n年の場合はyear日の場合はdayなどとすることで必要な情報を取得できます。\n使用しているテンプレートにも夜と思いますが、layouts/partials/widget/popularArticlesMonth.html として保存しておきましょう。\nこのファイルをHugoで読み込むことで人気の記事を表示する事ができるようになります。\n取得する人気の記事件数はconfig.yamlなどのhugoの設定ファイル内のwidhetsにpopulerArticlesを追加して記述しておきます。\nwidgets:enabled:- popular-articlespopulerArticles:limit:10人気の記事を表示するプログラムの解説 まずはサイト全体の記事を取得しておきます。\n{{ $page := .Site.Pages }} 次に、取得したjsonのデータを設定で指定した範囲で取得します。\n{{ range first .Site.Params.widgets.populerArticles.limit $json }} ... {{ end }} 取得したデータからリンクに一致する記事を探します。\n配列のデータで検索されているので、indexを使って0番目の記事を取得しています。\nあとは通常の記事と同じように扱えます。\n{{ $article := index (where $page \u0026quot;.RelPermalink\u0026quot; \u0026quot;eq\u0026quot; .link ) 0 }} 今回は画像無しでタイトルのみの表示となりますが、データ自体は他の記事と同じなので画像やカテゴリ、本文などにもアクセス可能です。\n自動更新の設定 サイトに人気の記事を表示させることができました。\n今の設定だと人気の記事が更新されないので、GASの「トリガー」を使って定期的にアナリティクスのデータをjsonに反映するようにしておきます。\nfunction setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } function all() { setDay(); setMonth(); setYear(); } 月だけでなく、日、年のデータも取得する夜にしておきます。\nそして、それらをすべて実行する関数「all」も追加しておきましょう。ここで保存しておきます。\nこれで準備ができました。\n左袖にあるストップウォッチアイコンを押して、「トリガー」を追加します。\n \n 「トリガーを追加」を押して、「実行する関数」で実行したい関数を選びます。今回は月間のデータを取得したいので「setMonth」を選択します。 「実行するデプロイを選択」は「Head」のままで構いません。 「イベントのソースを選択」は「時間主導型」に変更して、時間で実行するようにしておきます。 「時間ベースのトリガーのタイプを選択」を更新したい頻度で選択します。月間のデータなので1日おきくらいに更新でもいいかもしれません。「日付ベースのタイマー」を選択します。\n一日おきではなく、毎時で更新したい場合は「時間ベースのタイマー」など各自にあったタイマーを選択してください。 「時刻を選択」で更新したい時間を選びます。とりあえず「午前4時〜5時」くらいに更新するようにしておきます。 「エラー通知設定」は各自で好きなタイミングで受信するようにしてください。私はいっぱい来ると嫌なので、「1週間おきに通知を受け取る」にしてあります。\n以上で設定が終わりました。下にある「保存」を押して保存します。\n   これで定期的にアナリティクスのデータがスプレッドシートに反映されるようになりました。\nまとめ Hugoで人気の記事を表示するには\n Googleアナリティクスの連携 スプレッドシートを使ってjsonを作成  上記の2つを使うことで簡単に導入可能です。\nHugoを使って人気の記事を作成するにはサイトや投稿を公開した際になりますが、GitHub Actionsなどを使えばcron処理で定期的に再構築をかけることが可能なので、数十分おきに人気の記事を更新したり、スプレッドシートとgasのレン系の際にjsonを作成したので、javascriptでjsonを読み取って表示するといったことも可能です。\nソース 前回と今回で作成したソースになります。\nGASとスプレッドシートを使ってHugoに人気の記事を表示する function getData(sheetName) { const sheet = SpreadsheetApp.openById(\u0026#34;シートID\u0026#34;).getSheetByName(sheetName); const rows = sheet.getDataRange().getValues(); const keys = rows.splice(0, 1)[0]; return rows.map(row =\u0026gt; { let obj = {}; row.map((item, index) =\u0026gt; obj[keys[index]] = item); return obj; }); } function doGet(e) { let data = getData(e.parameter.sheetname); return ContentService.createTextOutput(JSON.stringify(data, null, 2)).setMimeType(ContentService.MimeType.JSON); } function getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function getGoogleAnalytics(name) { const id = \u0026#34;ga:ビューID\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } function all() { setDay(); setMonth(); setYear(); } Hugoで人気の記事を表示する \u0026lt;aside class=\u0026#34;widget archives sidearticle-contents--wrapper\u0026#34; id=\u0026#34;popular-articles--month\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contents-area\u0026#34;\u0026gt; \u0026lt;header\u0026gt;\u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;人気の記事（1ヶ月以内）\u0026lt;/h2\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;sidearticle-contents\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex article-list--tile\u0026#34;\u0026gt; {{ $page := .Site.Pages }} {{ range first .Site.Params.widgets.populerArticles.limit $json }} {{ $article := index (where $page \u0026#34;.RelPermalink\u0026#34; \u0026#34;eq\u0026#34; .link ) 0 }} {{ if $article }} \u0026lt;article\u0026gt; \u0026lt;h3 class=\u0026#34;article-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ .context.RelPermalink }}\u0026#34;\u0026gt;{{- .context.Title -}}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;/article\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; 書籍の紹介  Googleアナリティクス プロフェッショナル　～分析・施策のアイデアを生む最強リファレンス  ウェブ制作者から、マーケター、ウェブアナリストまで必携の1冊 「Googleアナリティクスはどこへ向かうのか?進化し続けるツールのポテンシャルを最大限に引き出したときに、新しい分析や施策のアイディアが生まれる」\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Google Apps Script目的別リファレンス 実践サンプルコード付き Excelのマクロに似た「スクリプト」を書けば、Gmailや「スプレッドシート」などのGoogleサービスを更に効率的に、思うように使えます。そのスクリプトを書いて実行するプログラミング環境が、Google Apps Script(GAS)。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用 ","date":"2022-01-07T11:54:15+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/analytics_huc3037b2e6dc6703167c8466692625b0d_86753_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/","title":"GASとアナリティクスを使って、Hugoに人気記事を表示させる - 簡単にできるHugoで人気の記事を表示する方法 #2"},{"content":"Hello World はじめてのbashコマンド「echo」\nターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, World」になります。\n$ echo \u0026quot;Hello, World\u0026quot; Hello, World $ はじめてのbashスクリプト「vim」\n$ vim HelloWorld.sh ＜空のvim HelloWorld.sh が開きます＞ vimで開いたHelloWorld.shを編集します。\n#!/bin/bash  echo \u0026#34;Hello World\u0026#34;; はじめての実行権限「chmod」\nbashファイルは2つの方法で実行できます。\n１．bashコマンドを使用する方法、\n２．bashファイルに実行権限を設定し、ファイルを実行する方法\n一つ目の方法「bashコマンドを使用する」\n$ bash HelloWorld.sh もう一つの方法「chmodで実行権限を付与する」\n# +x で実行権限を付与 $ chmod +x HelloWorld.sh # ドット　スラッシュをつけて実行 $ ./HelloWorld.sh  ヒント 考え方ですが、bashコマンドでファイルを実行する場合のメリットは、ファイルに実行権限をやみくもに与える必要がないことです。同時に、第三者が簡単にファイルを実行できる、操作をあやまって実行してしまう事を防ぐことができます。 実行権限を与える方法は、一般的ではありますが、注意も必要です。   chmod の実行権限には +x で実行権限を付与する方法の他、0755 などの数字で付与する場合もあります。\nこれらをパーミッションと言います。\nパーミッションの確認\nターミナルのコマンドでカレントディレクトリ内のファイルやディレクトリの情報を確認します。\n$ls -l 上記のコマンドを実行すると、以下のような一覧が表示されるかと思います。\n-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt drwxr-xr-x 6 user group 20480 1月 1 00:00 ダウンロード パーミッションの読み方\n「-rw-r\u0026ndash;r\u0026ndash;」や「drwxr-xr-x」の先頭の謎の10文字についてですが、\n最初の１文字目はファイル種別を表しています。\n-rw-r\u0026ndash;r\u0026ndash;\n 種別意味 -ファイル dディレクトリ lシンボリックリンク  2文字目から4文字目はファイルの所有者に対する権限を表し、\n5文字目から7文字目はファイルの所有グループに対する権限を表し、\n8文字目から10文字目はその他に対する権限を表しています\n上記から-rw-r\u0026ndash;r\u0026ndash;は、\n「ファイル種別」が「ファイル」であり、\n「所有者」に「読み取り」と「書き込み」の権限があり、\n「所有グループ」に「読み取り」の権限があり、\n「その他」に「読み取り」の権限があることを示しています。\ndrwxr-xr-xは、\n「ファイル種別」が「ディレクトリ」であり、\n「所有者」に「読み取り」と「書き込み」と「実行」の権限があり、\n「所有グループ」に「読み取り」と「実行」の権限があり、\n「その他」に「読み取り」と「実行」の権限があることを示しています。\nアクセス権限の変更\nアクセス権限を変更する方法について記載します。\nパーミッションの変更には chmodコマンドを使用します。\n数値で指定する\n$ ls -l　-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt $ chmod 764 hoge.txt $ ls -l -rwxrw-r-- 1 user group 9 1月 1 00:00 hoge.txt 上記のコマンドはhoge.txtに対してパーミッションの確認→変更→確認を行っています。\n$ chmod 764 hoge.txt に関して説明していきます。\nファイルのパーミッションの変更は以下の通りコマンドを実行すれば可能です。\nchmod モード 対象ファイル名 モードの数字について\n モード(数字)モード(アルファベット)権限 4r読み取り 2w書き込み 1x実行  上記の合計値を「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます。 要するに上記の「764」は 「所有者」に対して「読み取り」「書き込み」「実行」を、 「所有グループ」に対して「読み取り」「書き込み」を、 「その他」に「読み取り」を付与しています。  ヒント 実行したい場合は $ chmod 755 \u0026lt;ファイル名\u0026gt; 読み取りのみを許可し、実行しない場合は $ chmod 644 \u0026lt;ファイル名\u0026gt; 自分だけの読み取りを許可する場合は $ chmod 600 \u0026lt;ファイル名\u0026gt; 通常は上記３種類しか使いません。 CGI などを使う場合は $ chown や $chgrp を組み合わせて使うことが多いです。 $ chmod 777 \u0026lt;ファイル名\u0026gt; というパーミッションを軽率に与えず、上手にコマンドを使いこなすことがセキュリティにつながります。   詳しくはこちら\nhttps://qiita.com/shisama/items/5f4c4fa768642aad9e06\n関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/","title":"【１．Hello World】ざっくりわかる「シェルスクリプト」"},{"content":"echo コマンド  echoコマンドの使用：\nさまざまなオプションでechoコマンドを使用できます。\n次の例では、いくつかの便利なオプションについて説明します。\nオプションなしで「echo」コマンドを使用すると、デフォルトで改行が追加されます。\n\u0026lsquo;-n\u0026rsquo;オプションは、改行なしでテキストを印刷するために使用され、'-e\u0026rsquo;オプションは、出力からバックスラッシュ文字を削除するために使用されます。\n\u0026lsquo;echo_example.sh\u0026rsquo;という名前の新しいbashファイルを作成し、次のスクリプトを追加します。\n#!/bin/bash  echo \u0026#34;改行付きのテキストの印刷\u0026#34;; echo -n \u0026#34;改行なしのテキストの印刷\u0026#34;; echo -e \u0026#34;\\n削除\\tバックスラッシュ\\t文字\\n\u0026#34;; bashコマンドでファイルを実行します。\n$ bash echo_example.sh 改行付きのテキストの印刷 改行なしのテキストの印刷 削除\tバックスラッシュ\t文字 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/","title":"【２．echo コマンド】ざっくりわかる「シェルスクリプト」"},{"content":"コメント  コメントの使用\n「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。\n\u0026lsquo;comment_example.sh\u0026rsquo;という名前の新しいファイルを作成し、1行コメント付きの次のスクリプトを追加します。\n#!/bin/bash  #2つの数値をsumに追加します ((sum=25+35)); #結果を出力します echo \u0026#34;$sum\u0026#34;; bashコマンドでファイルを実行します。\n$ bash comment_example.sh 60 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/","title":"【３．コメント】ざっくりわかる「シェルスクリプト」"},{"content":"マルチラインコメント  複数行コメントの使用\nbashではさまざまな方法で複数行コメントを使用できます。\n次の例に簡単な方法を示します。\n\u0026lsquo;multiline-comment.sh\u0026rsquo;という名前の新しいbashを作成し、次のスクリプトを追加します。\nここでは、「:」と「'」でbashで複数行コメントを実現しています。\n次のスクリプトは、5の2乗を計算します。\n#!/bin/bash  : \u0026#39; 次のスクリプトは、 数値の2乗値5を計算します。 \u0026#39; ((area=5*5)); echo \u0026#34;$area\u0026#34;; bashコマンドでファイルを実行します。\n$ bash multiline-comment.sh 25 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/","title":"【４．マルチラインコメント】ざっくりわかる「シェルスクリプト」"},{"content":"while ループ  whileループの使用\nwhileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成します。\nこの例では、whileループが5回繰り返されます。\ncount変数の値は、各ステップで1ずつ増加します。\ncount変数の値が5になると、whileループは終了します。\n#!/bin/bash  valid=true; count=1 while [ \u0026#34;$valid\u0026#34; ];do echo \u0026#34;$count\u0026#34;; if [ \u0026#34;$count\u0026#34; -eq 5 ];then break; fi ((count++)); done bashコマンドでファイルを実行します。\n$ bash while_example.sh 1 2 3 4 5 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/","title":"【５．while ループ】ざっくりわかる「シェルスクリプト」"},{"content":"for ループ  forループの使用\n基本的なforループ宣言を示します。\n\u0026lsquo;for_example.sh\u0026rsquo;という名前のファイルを作成し、forループを使用して、次のスクリプトを追加します。\nここでは、forループは10回繰り返され、変数のすべての値、counterを1行で出力します。\n#!/bin/bash  for((counter=10;counter\u0026gt;0;counter--));do echo -n \u0026#34;$counter\u0026#34;; done printf \u0026#34;\\n\u0026#34; bashコマンドでファイルを実行します。\n$ bash for_example.sh 10 9 8 7 6 5 4 3 2 1 $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/","title":"【６．for ループ】ざっくりわかる「シェルスクリプト」"},{"content":"対話型入力  ユーザー入力の取得\n\u0026lsquo;read\u0026rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。\n\u0026lsquo;user_input.sh\u0026rsquo;という名前のファイルを作成し、ユーザーから入力を取得するための次のスクリプトを追加します。\nここでは、1つの文字列値がユーザーから取得され、他の文字列値を組み合わせて値が表示されます。\n#!/bin/bash  echo \u0026#34;あなたの名前を入力して下さい\u0026#34; read name echo \u0026#34;ようこそ $name. ＮＬＰへ\u0026#34; bashコマンドでファイルを実行します。\n$ bash user_input.sh あなたの名前を入力して下さい suzuki ようこそ suzuki。 ＮＬＰへ $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/","title":"【７．対話型入力】ざっくりわかる「シェルスクリプト」"},{"content":"if 文  if文を使う\n単数、または複数の条件でif条件を使用できます。\nこのステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義されます。\n「simple_if.sh」という名前のファイルを作成し、bashでのifステートメントの使用を確認します。\nここでは、変数nに10が割り当てられています。\n$nの値が10未満の場合、出力は「1桁の数値です」になります。\nそれ以外の場合、出力は「2桁の数値です」になります。\n比較のために、ここでは「-lt」を使用しています。\n オプション意味 -eq同　じ（==） -lt小さい（＜） -gt大きい（＞）  数値を比較する場合は、「\u0026lt;」「\u0026gt;」「=」ではなく、\n-eq -lt -gt を使う必要があります。\n文字列を比較する場合は 「==」または 「!=」を使います。\n#!/bin/bash  n=10; if [ $n -lt 10 ];then echo \u0026#34;1桁の数値です\u0026#34;; else echo \u0026#34;2桁の数値です\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash simple_if.sh 2桁の数値です $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/","title":"【８．If 文】ざっくりわかる「シェルスクリプト」"},{"content":"and 条件を if 文で使う ANDロジックでifステートメントを使用する：\n2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用できます。\nandロジックを使用してifステートメントで複数の条件を定義する方法を次の例に示します。\n\u0026lsquo;\u0026amp;\u0026amp;\u0026lsquo;は、ifステートメントのandロジックを適用するために使用されます。\n\u0026lsquo;if_with_and.sh\u0026rsquo;という名前のファイルを作成して、次のコードを確認します。\nここで、ユーザー名とパスワードの変数の値はユーザーから取得され、「admin」および「secret」と比較されます。\n両方の値が一致する場合、出力は「有効なユーザー」になります。一致しない場合、出力は「無効なユーザー」になります。\n数値を比較する場合は、「」「=」ではなく、 -eq -lt -gt を使う必要があります。 文字列を比較する場合は 「==」または 「!=」を使います。  #!/bin/bash  echo \u0026#34;名前を入力して下さい\u0026#34; read username echo \u0026#34;パスワードを入力して下さい\u0026#34; read password if [[ (\u0026#34;$username\u0026#34;==\u0026#34;admin\u0026#34; \u0026amp;\u0026amp; \u0026#34;$password\u0026#34;==\u0026#34;secret\u0026#34;) ]];then echo \u0026#34;無効なユーザーです\u0026#34;; else echo \u0026#34;有効なユーザーです\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash if_with_and.sh 名前を入力して下さい suzuki パスワードを入力して下さい password 無効なユーザーです $ 関連記事 ざっくりわかる シェルスクリプト【０１．Hello World】\nざっくりわかる シェルスクリプト【０２．echo コマンド】\nざっくりわかる シェルスクリプト【０３．コメント】\nざっくりわかる シェルスクリプト【０４．マルチラインコメント】\nざっくりわかる シェルスクリプト【０５．while ループ】\nざっくりわかる シェルスクリプト【０６．for ループ】\nざっくりわかる シェルスクリプト【０７．対話型入力】\nざっくりわかる シェルスクリプト【０８．If 文】\nざっくりわかる シェルスクリプト【０９and 条件を if 文で使う】\nざっくりわかる シェルスクリプト【１０．or 条件を if文で使う】\nざっくりわかる シェルスクリプト【１１．else if と else】\nざっくりわかる シェルスクリプト【１２．case 文】\nざっくりわかる シェルスクリプト【１３．コマンドラインから引数を取得】\nざっくりわかる シェルスクリプト【１４．名前を使用してコマンドラインから引数を取得する】\nざっくりわかる シェルスクリプト【１５．変数に2つの文字列を組み合わせる】\nざっくりわかる シェルスクリプト【１６．文字列の部分文字列を取得する】\nざっくりわかる シェルスクリプト【１７．変数に2つの数値を追加します】\nざっくりわかる シェルスクリプト【１８．関数を作成する】\nざっくりわかる シェルスクリプト【１９．関数パラメーターを使用する】\nざっくりわかる シェルスクリプト【２０．スクリプトからの戻り値を渡す】\nざっくりわかる シェルスクリプト【２１．ディレクトリを作成する】\nざっくりわかる シェルスクリプト【２２．存在を確認してディレクトリを作成する】\nざっくりわかる シェルスクリプト【２３．ファイルを読む】\nざっくりわかる シェルスクリプト【２４．ファイルを削除する】\nざっくりわかる シェルスクリプト【２５．ファイルに追加】\nざっくりわかる シェルスクリプト【２６．ファイルが存在するかどうかを確認】\nざっくりわかる シェルスクリプト【２７．mailコマンド】\nざっくりわかる シェルスクリプト【２８．dateコマンド】\nざっくりわかる シェルスクリプト【２９．waitコマンド】\nざっくりわかる シェルスクリプト【３０．sleepコマンド】\n【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/","title":"【９．and 条件を if 文で使う】ざっくりわかる「シェルスクリプト」"},{"content":"はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。\nこの記事では、bashプログラミングの次のトピックについて説明します。\nHello World はじめてのbashコマンド「echo」\nターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, World」になります。\n$ echo \u0026quot;Hello, World\u0026quot; Hello, World $ はじめてのbashスクリプト「vim」\n$ vim HelloWorld.sh ＜空のvim HelloWorld.sh が開きます＞ vimで開いたHelloWorld.shを編集します。\n#!/bin/bash  echo \u0026#34;Hello World\u0026#34;; はじめての実行権限「chmod」\nbashファイルは2つの方法で実行できます。\n１．bashコマンドを使用する方法、\n２．bashファイルに実行権限を設定し、ファイルを実行する方法\n一つ目の方法「bashコマンドを使用する」\n$ bash HelloWorld.sh もう一つの方法「chmodで実行権限を付与する」\n# +x で実行権限を付与 $ chmod +x HelloWorld.sh # ドット　スラッシュをつけて実行 $ ./HelloWorld.sh 考え方ですが、bashコマンドで実行する場合のメリットは、ファイルに闇雲に実行権限を与える必要がないことです。実行権限を与える方法は、一般的ではありますが注意も必要です。\nchmod の実行権限には +x で実行権限を付与する方法の他、0755 などの数字で付与する場合もあります。\nこれらをパーミッションと言います。\nパーミッションの確認\nターミナルのコマンドでカレントディレクトリ内のファイルやディレクトリの情報を確認します。\n$ls -l 上記のコマンドを実行すると、以下のような一覧が表示されるかと思います。\n-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt drwxr-xr-x 6 user group 20480 1月 1 00:00 ダウンロード パーミッションの読み方\n「-rw-r\u0026ndash;r\u0026ndash;」や「drwxr-xr-x」の先頭の謎の10文字についてですが、\n最初の１文字目はファイル種別を表しています。\n-rw-r\u0026ndash;r\u0026ndash;\n 種別意味 -ファイル dディレクトリ lシンボリックリンク  2文字目から4文字目はファイルの所有者に対する権限を表し、\n5文字目から7文字目はファイルの所有グループに対する権限を表し、\n8文字目から10文字目はその他に対する権限を表しています\n上記から-rw-r\u0026ndash;r\u0026ndash;は、\n「ファイル種別」が「ファイル」であり、\n「所有者」に「読み取り」と「書き込み」の権限があり、\n「所有グループ」に「読み取り」の権限があり、\n「その他」に「読み取り」の権限があることを示しています。\ndrwxr-xr-xは、\n「ファイル種別」が「ディレクトリ」であり、\n「所有者」に「読み取り」と「書き込み」と「実行」の権限があり、\n「所有グループ」に「読み取り」と「実行」の権限があり、\n「その他」に「読み取り」と「実行」の権限があることを示しています。\nアクセス権限の変更\nアクセス権限を変更する方法について記載します。\nパーミッションの変更には chmodコマンドを使用します。\n数値で指定する\n$ ls -l　-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt $ chmod 764 hoge.txt $ ls -l -rwxrw-r-- 1 user group 9 1月 1 00:00 hoge.txt 上記のコマンドはhoge.txtに対してパーミッションの確認→変更→確認を行っています。\n$ chmod 764 hoge.txt に関して説明していきます。\nファイルのパーミッションの変更は以下の通りコマンドを実行すれば可能です。\nchmod モード 対象ファイル名 モードの数字について\n モード(数字)モード(アルファベット)権限 4r読み取り 2w書き込み 1x実行  上記の合計値を「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます。 要するに上記の「764」は 「所有者」に対して「読み取り」「書き込み」「実行」を、 「所有グループ」に対して「読み取り」「書き込み」を、 「その他」に「読み取り」を付与しています。 詳しくはこちら\nhttps://qiita.com/shisama/items/5f4c4fa768642aad9e06\necho コマンド  echoコマンドの使用：\nさまざまなオプションでechoコマンドを使用できます。\n次の例では、いくつかの便利なオプションについて説明します。\nオプションなしで「echo」コマンドを使用すると、デフォルトで改行が追加されます。\n\u0026lsquo;-n\u0026rsquo;オプションは、改行なしでテキストを印刷するために使用され、'-e\u0026rsquo;オプションは、出力からバックスラッシュ文字を削除するために使用されます。\n\u0026lsquo;echo_example.sh\u0026rsquo;という名前の新しいbashファイルを作成し、次のスクリプトを追加します。\n#!/bin/bash  echo \u0026#34;改行付きのテキストの印刷\u0026#34;; echo -n \u0026#34;改行なしのテキストの印刷\u0026#34;; echo -e \u0026#34;\\n削除\\tバックスラッシュ\\t文字\\n\u0026#34;; bashコマンドでファイルを実行します。\n$ bash echo_example.sh 改行付きのテキストの印刷 改行なしのテキストの印刷 削除\tバックスラッシュ\t文字 $ コメント  コメントの使用\n「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。\n\u0026lsquo;comment_example.sh\u0026rsquo;という名前の新しいファイルを作成し、1行コメント付きの次のスクリプトを追加します。\n#!/bin/bash  #2つの数値をsumに追加します ((sum=25+35)); #結果を出力します echo \u0026#34;$sum\u0026#34;; bashコマンドでファイルを実行します。\n$ bash comment_example.sh 60 $ マルチラインコメント  複数行コメントの使用\nbashではさまざまな方法で複数行コメントを使用できます。\n次の例に簡単な方法を示します。\n\u0026lsquo;multiline-comment.sh\u0026rsquo;という名前の新しいbashを作成し、次のスクリプトを追加します。\nここでは、「:」と「'」でbashで複数行コメントを実現しています。\n次のスクリプトは、5の2乗を計算します。\n#!/bin/bash  : \u0026#39; 次のスクリプトは、 数値の2乗値5を計算します。 \u0026#39; ((area=5*5)); echo \u0026#34;$area\u0026#34;; bashコマンドでファイルを実行します。\n$ bash multiline-comment.sh 25 $ while ループ  whileループの使用\nwhileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成します。\nこの例では、whileループが5回繰り返されます。\ncount変数の値は、各ステップで1ずつ増加します。\ncount変数の値が5になると、whileループは終了します。\n#!/bin/bash  valid=true; count=1 while [ \u0026#34;$valid\u0026#34; ];do echo \u0026#34;$count\u0026#34;; if [ \u0026#34;$count\u0026#34; -eq 5 ];then break; fi ((count++)); done bashコマンドでファイルを実行します。\n$ bash while_example.sh 1 2 3 4 5 $ for ループ  forループの使用\n基本的なforループ宣言を示します。\n\u0026lsquo;for_example.sh\u0026rsquo;という名前のファイルを作成し、forループを使用して、次のスクリプトを追加します。\nここでは、forループは10回繰り返され、変数のすべての値、counterを1行で出力します。\n#!/bin/bash  for((counter=10;counter\u0026gt;0;counter--));do echo -n \u0026#34;$counter\u0026#34;; done printf \u0026#34;\\n\u0026#34; bashコマンドでファイルを実行します。\n$ bash for_example.sh 10 9 8 7 6 5 4 3 2 1 $ 対話型入力  ユーザー入力の取得\n\u0026lsquo;read\u0026rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。\n\u0026lsquo;user_input.sh\u0026rsquo;という名前のファイルを作成し、ユーザーから入力を取得するための次のスクリプトを追加します。\nここでは、1つの文字列値がユーザーから取得され、他の文字列値を組み合わせて値が表示されます。\n#!/bin/bash  echo \u0026#34;あなたの名前を入力して下さい\u0026#34; read name echo \u0026#34;ようこそ $name. ＮＬＰへ\u0026#34; bashコマンドでファイルを実行します。\n$ bash user_input.sh あなたの名前を入力して下さい suzuki ようこそ suzuki。 ＮＬＰへ $ If 文  if文を使う\n単数、または複数の条件でif条件を使用できます。\nこのステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義されます。\n「simple_if.sh」という名前のファイルを作成し、bashでのifステートメントの使用を確認します。\nここでは、変数nに10が割り当てられています。\n$nの値が10未満の場合、出力は「1桁の数値です」になります。\nそれ以外の場合、出力は「2桁の数値です」になります。\n比較のために、ここでは「-lt」を使用しています。\n オプション意味 -eq同　じ（==） -lt小さい（＜） -gt大きい（＞）  数値を比較する場合は、「\u0026lt;」「\u0026gt;」「=」ではなく、\n-eq -lt -gt を使う必要があります。\n文字列を比較する場合は 「==」または 「!=」を使います。\n#!/bin/bash  n=10; if [ $n -lt 10 ];then echo \u0026#34;1桁の数値です\u0026#34;; else echo \u0026#34;2桁の数値です\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash simple_if.sh 2桁の数値です $ and 条件を if 文で使う ANDロジックでifステートメントを使用する：\n2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用できます。\nandロジックを使用してifステートメントで複数の条件を定義する方法を次の例に示します。\n\u0026lsquo;\u0026amp;\u0026amp;\u0026lsquo;は、ifステートメントのandロジックを適用するために使用されます。\n\u0026lsquo;if_with_and.sh\u0026rsquo;という名前のファイルを作成して、次のコードを確認します。\nここで、ユーザー名とパスワードの変数の値はユーザーから取得され、「admin」および「secret」と比較されます。\n両方の値が一致する場合、出力は「有効なユーザー」になります。一致しない場合、出力は「無効なユーザー」になります。\n数値を比較する場合は、「」「=」ではなく、 -eq -lt -gt を使う必要があります。 文字列を比較する場合は 「==」または 「!=」を使います。  #!/bin/bash  echo \u0026#34;名前を入力して下さい\u0026#34; read username echo \u0026#34;パスワードを入力して下さい\u0026#34; read password if [[ (\u0026#34;$username\u0026#34;==\u0026#34;admin\u0026#34; \u0026amp;\u0026amp; \u0026#34;$password\u0026#34;==\u0026#34;secret\u0026#34;) ]];then echo \u0026#34;無効なユーザーです\u0026#34;; else echo \u0026#34;有効なユーザーです\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash if_with_and.sh 名前を入力して下さい suzuki パスワードを入力して下さい password 無効なユーザーです $ 関連記事 【まとめ版】ざっくりわかるシェルスクリプト１」\n【まとめ版】ざっくりわかるシェルスクリプト２」\n【まとめ版】ざっくりわかるシェルスクリプト３」\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/","title":"ざっくりわかる「シェルスクリプト１」"},{"content":"Hugoには様々な機能があり、ブログを作るにはもってこいの静的サイトジェネレータです。\n関連記事も取得できて、検索機能もある「至れり尽くせり」なジェネレータだと思います。\nしかし、1点だけどうしても重要な機能がありません。\nそれは人気記事の表示です。\n人気記事を表示させるとなると、データベースを用意したりサーバのアクセスカウントを行う必要があります。\nそんな面倒なことはしたくありませんよね？\n今回はHugoでも簡単に人気の記事を表示する方法を紹介いたします。\n必要なもの Hugoで人気記事を出すために必要なものは、\n Googleスプレッドシート Googleアナリティクス  以上です。\nそれでは実際の設定やプログラムを行っていきましょう。\nGoogleアナリティクスの設定 Googleアナリティクスをサイトに設定します。\n設定の際にはv4ではなく、v2が必要です。(2022年1月6日現在)\nv4を設定している場合は、同時にv2も設定する必要があります。\n「アカウントを作成」「アカウントの設定」をした後に、「 プロパティの設定 」で「ユニバーサル アナリティクス プロパティの作成」をONにするとv4とv2の両方でアナリティクスを設定することができます。\n ユニバーサル アナリティクス プロパティの作成 \nあとはv4とv2のコードをサイトに貼り付けるだけです。\n貼り付け方法はGoogleに書いてある通りです。\nスプレッドシートの設定 次にスプレッドシートを設定します。\nGoogleドライブで「新規」「Googleスプレッドシート」でシートを作成します。\n作成したシートに適当な名前をつけます。\nその後に、「拡張機能」の「App Script」を押して、GoogleAppScript（GAS）に移動します。\n ユニバーサル アナリティクス プロパティの作成 \nGASのプログラム 日付の取得 日付を計算するために、「daysjs」というライブラリを追加します。\nライブラリの＋をクリックして、以下を検索します。\n1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB 検索して、days.jsが表示されたら追加をします。\n day.jsライブラリの追加 \nこれで日付の検索が可能になります。\n以下が日付のプログラムです。\n今日から1日、1月、1年前なのかという切り替えが可能です。\n year: 今日から1年間の範囲 month: 今日から1ヶ月の範囲 day: 今日から1日の範囲  function getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function test() { let d = getDate(\u0026#39;day\u0026#39;); console.log(d); } ここまでをテスト実行してみましょう。\nデバッグの隣りにあるセレクトを「test」にして、「実行」を押してみます。\n \n正常に終了されれば実行ログに結果と実行完了が表示されるはずです。\nGASとGoogleアナリティクスの連携 GASとアナリティクスの連携にはビューIDが必要です。\nビューIDはv2で取得できるので、v4とv2を設定したのはこのビューIDを取得するためになります。\nGASのプログラムにGoogleアナリティクスの「アカウント」「プロパティ」「ビュー」「ビューの設定」にあるビューIDを設定します。\n設定する際は「ga:ビューID」と ga: を付ける必要があります。\n先程のプログラムの下に、下記のプログラムを記述します。\nfunction getGoogleAnalytics(name) { const id = \u0026#34;ga:[GAビューID]\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } ここでは、ページのパスをキーとしてページビューとセッション、ユーザー数を集計するようにしています。\n並び順はpageviewsの数の降順です。\n必要なデータがあれば各自で編集することをおすすめいたします。\nそして、各項目のラベルを出力するために、\nrows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); として、先頭行のデータにラベル行を追加しています。\nこの部分も各自のデータに合うようにしてください。\nアナリティクスから取得したデータはスプレッドシートのシート名に紐付けるので、\ngetGoogleAnalytics(\u0026#39;month\u0026#39;); の場合は、「month」というシートにデータを反映するということになります。\nサービスの読み込み GASとアナリティクスを連携させるために、サービスを読み込みます。\nサービスのプラスマークをクリックして、「Analytics Reporting API」を選択、追加します。\n以上でサービスの読み込みは終わりです。\n \nそれでは、実行してみましょう。\n実行 まずははスプレッドシートに「month」という名前のシートを作ります。\n \nシートができたら、再度コードエディターに戻ります。\n先程のデバッグの隣りにあるセレクト「test」を「setMonth」にして、実行を押します。\n承認を求められるので、「権限を確認」を押します。\n \n使用するアカウントをクリクで選んで、「詳細」をクリックして、「〜（安全ではないページ）に移動」をクリックします。\nすると、アクセスの許可を求められるので、「許可」を押します。\n \n実行ログに結果と実行完了が表示されるはずです。\nスプレッドシートを確認すると、アナリティクスのデータが反映されているはずです\n \nこれで月間の人気記事の取得ができました。\n同じように日、年も設定しておきましょう。\nfunction setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } まとめ まずがGASとアナリティクスの連携ができました。\n次回はこのデータを使ってHugoとアナリティクスを連携して、人気記事を表示できるようにしたいと思います。\nここまでの全プログラムは下記になります。\nfunction getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function getGoogleAnalytics(name) { const id = \u0026#34;ga:[GAビューID]\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } 書籍の紹介  1週間でGoogleアナリティクス4の基礎が学べる本 (1週間で基礎が学べるシリーズ) 大幅に改訂されたWebマーケティングツール「Googleアナリティクス4」の基礎と活用法を最前線のWebマーケッターたちがやさしく解説! 本書は、WebマーケターのためにGoogleアナリティクス4（GA4・ジーエーフォー）の基礎知識を解説した入門書です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   詳解! Google Apps Script完全入門[第2版] ~GoogleアプリケーションとGoogle Workspaceの最新プログラミングガイド 今や私たちの仕事や生活に無くてはならない存在になったGoogleサービス。これらGoogleサービスの自動化や連携を行うことで、大幅な効率化が図れます。そして、それを可能にするのがGoogle Apps Script(GAS)です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用 ","date":"2022-01-06T16:50:50+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/analytics_huc3037b2e6dc6703167c8466692625b0d_86753_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/","title":"簡単にできるHugoで人気の記事を表示する方法 #1"},{"content":"はじめに ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようというものです。\nhugo コマンドでgithub.ioディレクトリに記事を投稿する場合、以下のコマンドをたたくと思います。\n$ hugo new posts/＜ディレクトリ＞/index.md または\n$ hugo new posts/＜今日の日付＞.md 面倒なんですよね。。。\nディレクトリの指定 通常、記事毎にディレクトリを分けて、アクセスされるファイルをindex.mdにした場合は、以下の通りになりますよね。\n$ hugo new posts/＜今日の日付のディレクトリ＞/index.md ナンバリングの効用 ただ、同日に気分が乗ってきて、もう一つ記事を投稿しようとする場合は、日付の後ろに「-02」とか工夫する必要も出てきたりします。たとえば以下のように\n$ hugo new posts/＜今日の日付のディレクトリ＞-＜ナンバリング02＞/index.md 複数メンバーの投稿を区別する 複数のコラボレーターで投稿するgithub.ioの場合は、投稿者も区別したくなります。例えば\n$ hugo new posts/＜今日の日付のディレクトリ＞-＜作成者＞-＜ナンバリング02＞/index.md ようするに、シェルスクリプトを使って、以下のコマンドを実行したい訳です。\n$ hugo new posts/2022-01-06-01-suzuki/index.md 起動パラメータ と、なると、パラメータは以下の三つとなりますね。\n$today 今日の日付\n$number 記事のナンバリング\n$author 作成者\n実行イメージ # 作成者 suzuki の 01 番目の投稿記事 $ bash mkArticle.sh suzuki 01 $ hugo new posts/$today-$number-$author/index.md 気をつけるところは パラメータを省略したときの挙動 $ bash mkArticle.sh 実行した場合に、「作成者が指定されていないからやりなおしてね」というのもちょっと寂しいものがあります。指定していなければ、都度、聞いてきて欲しいものです。そこで readコマンドで作成者を尋ねてくる感じにします。\nif [ -z \u0026#34;$author\u0026#34; ]; then echo \u0026#34;ユーザー名を半角で入力\u0026#34;; read author; fi 同日ファイルの存在を確認 ２．すでに同日に一つ目の記事を投稿してある。要するに生成しようとしているファイルがすでに存在する場合の挙動です。こちらは、ファイルが存在していれば、１を応用して、別のナンバリングを指定するように尋ねてくれると良さそうです。\nwhile [ true ] ;do if [ -f \u0026#34;content/posts/$today-$number-$author/index.md\u0026#34; ]; then echo \u0026#34;$numberファイルが既に存在します。\u0026#34;; echo \u0026#34;別のナンバリングを指定して下さい 02とか03とか\u0026#34;; read number; else break; fi done ですので、ナンバリングの初期値は「01」としておいて、そのファイルが既に存在する場合は、あらためてユーザーにナンバリングを尋ねてくるという手法としました。\nif [ -z \u0026#34;$number\u0026#34; ]; then number=\u0026#34;01\u0026#34;; fi 実行方法 $ bash mkArticle.sh suzuki 01; 前述のとおり作成者、ナンバリングは省略可能です。 $ bash mkArticle.sh ソース全文 #!/bin/bash  : \u0026#39;使い方 一つ目のパラメーターに作成者を指定します 二つ目のパラメータにナンバリングを指定します 一つ目 01(未指定の場合は01） 二つ目 02 （例) $ bash mkArticle.sh suzuki 01; \u0026#39; # #作成者 無指定であれば入力を促す author=$1; #今日の日付 today=$(date \u0026#34;+%Y-%m-%d%n\u0026#34;); #今日のインデクス 一つ目の投稿であれば01 二つ目の投稿であれば02 number=\u0026#34;$2\u0026#34;; # function getParam(){ if [ -z \u0026#34;$number\u0026#34; ]; then number=\u0026#34;01\u0026#34;; fi # if [ -z \u0026#34;$author\u0026#34; ]; then echo \u0026#34;ユーザー名を半角で入力\u0026#34;; read author; fi # while [ true ] ;do if [ -f \u0026#34;content/posts/$today-$number-$author/index.md\u0026#34; ]; then echo \u0026#34;$numberファイルが既に存在します。\u0026#34;; echo \u0026#34;別のナンバリングを指定して下さい 02とか03とか\u0026#34;; read number; else break; fi done } # function execHugo(){ echo \u0026#34;\u0026#34;; echo \u0026#34;hugoコマンドを実行します\u0026#34;; echo \u0026#34;hugo new posts/$today-$number-$author/index.md\u0026#34; hugo new posts/$today-$number-$author/index.md # 処理終了 echo \u0026#34;ファイルの編集は以下の通りです。\u0026#34; echo \u0026#34;vim content/posts/$today-$number-$author/index.md;\u0026#34; } # # パラメータの取得 getParam; # hugoコマンドの実行 execHugo; exit; # おわりに 日頃、手間を掛けてコマンドを入力している場合は、シェルスクリプトを使って簡便にできる事に加え、さらにカスタマイズを加え、便利に記事投稿ができるとブログも気分もがぜん盛り上がりますね。\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   いちばんやさしいGit\u0026amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ 実際のワークフローをイメージしながら 実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。 前半は、手元のパソコンでファイルを実際にバージョン管理しながら、 Gitの基本的な使い方を解説。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-06T14:21:51+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/","title":"シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし"},{"content":"デザイナーでもできる初めてのHugoの2回目になります。\n前回（デザイナーでもできる初めてのHugo #01）はHugoのインストールから公開の方法までを説明しました。\n今回は前回作成したページをGitHub Pagesを使って公開してみたいと思います。\nGitHub Pages用の設定ファイルを作成 GitHub PagesはGitHubにあるコンテンツを静的ページを公開する機能です。\nSSLまでついているので、非常に便利です。\n公開用のファイルは.github/workflows/gh-pages.ymlというYAML形式のファイルになります。\nname:Hugoon:push:# schedule:# - cron: \u0026#39;*/10 * * * *\u0026#39;jobs:gh-pages:runs-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2with:persist-credentials:falsesubmodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod# https://github.com/marketplace/actions/github-pages-action- name:Setupuses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GITHUB_TOKEN }}publish_branch:gh-pagesnameはGitHubでのActionsに表示される名前になります。\n今回は公開用としてgh-pagesというブランチにわけています。ここおらへんはお好みで設定して下さい。\nhugoでテーマを使っている場合はsubmodules: trueとする必要があります。\nまた、Hugoで更新日をGitの日付と合わせたい場合はfetch-depth: 0として、Gitの履歴を取得するようにしましょう。\nGitHub Pagesの設定 GitHub PagesのURLはhttps://ユーザまたは組織名.github.io/リポジトリ名となります。\nGitHubでリポジトリを作成する際に「ユーザまたは組織名.github.io」とすると「https://ユーザまたは組織名.github.io」とすることができます。\nまずは先程のファイルを含めてサイト全体をGitにアップして、gh-pagesというブランチが作られるのを待ちましょう。\nその後に、setings \u0026gt; Pages にでGitHub Pagesの設定を行います。\n GitHub Pagesの設定 \nYour GitHub Pages site is currently being built from the gh-pages branch\nにあるBranchをgh-pagesに変更します。\n設定は以上です。\nHugoの初期設定であればpublishDir: publicとなっているので、GitHub Pagesではpublicがルートディレクトリとして公開されます。\n.gitignoreに「public」を除外するようにしておきましょう。\n/public /resources 最後に設定したURLにアクセスするとサイトが確認できるはずです。\nまとめ GitHub Pagesを使えば、難しいサーバの設定などをすることなく、無料でSSL付きのサイトを公開することが可能です。\nいくつかの制限はありますが、すごく便利な機能なのでみなさんもぜひ使ってみてはいかがでしょうか。\n公開する際はパスワードなどの情報も一緒にアップしないようにしてください。\n書籍の紹介  いちばんやさしいGit\u0026amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ 実際のワークフローをイメージしながら 実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。 前半は、手元のパソコンでファイルを実際にバージョン管理しながら、 Gitの基本的な使い方を解説。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Web制作者のためのGitHubの教科書 チームの効率を最大化する共同開発ツール そろそろ「プルリ」しませんか?しくみを理解して使えば怖くない。リポジトリの作成から複数デザインの提示、「Pull Request」を使った分担作業まで、Webサイト制作を例に実践的なワークフローを身に付ける。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2021-12-28T12:07:19+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings_hub5e89b620d2afe5c10cf3894738f1203_124480_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/","title":"GitHub Pagesを使って無料でSSL付きのサイトを公開"},{"content":"私のe-Statでのデータマイニングの現在の目的は以下の通りです\n大量の政府公開データの中から\n①面白そうなデータをピックアップする\n②データをわかりやすくサマライズする\n・列情報などを必要な項目に絞り込む\n・前年度比５倍とか急激な変化があった場合をピックアップできるようにする\n最終的にはこれらを自動でできるようにしたいです。\n今回は、まず①面白そうなデータをピックアップすることを目的にe-Statを見てみましょう。\nランキングページを見てみよう e-Statのトップページ（https://www.e-stat.go.jp/）の画面の下の方にランキングという欄があります。\nそのランキングの現在(2021/12/26)３位が「アイスクリーム」なんです。\n ランキング \nアイスクリームが含まれるのはどんなデータか 「アイスクリーム」は柔らかめのキーワードなので面白いデータの予感がします。\n「アイスクリーム」が含まれるデータはどんなデータなんでしょうか？\nちょっと見てみましょう。\nhttps://www.e-stat.go.jp/stat-search?page=1\u0026query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0\u0026layout=dataset\n アイスクリーム \n「アイスクリーム」が含まれるデータは7640件あるみたいです。\nちょっと多いですね。。。\n検索条件なのですが、提供分類、表題を検索　データベース、ファイル内を検索にチェックがついています。\n「検索のしかた」をみてみるとキーワードのOR検索やAND検索もできそうです。\n 検索のしかた \nちなみに検索キーワードでの絞り込みはAPI(統計表情報取得)でももちろんできます。\ncurl \u0026quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?appId=xxxxxxxxxx\u0026amp;searchWord=アイスクリーム\u0026quot; アイスクリームだと数が多すぎるので試しに「ガリガリ君」で検索してみましたが、0件でした。「ハーゲンダッツ」で検索したところ22件引っかかってきました。\n ハーゲンダッツ \n「ハーゲンダッツ」どこに出てくるのかなと思ってAPIを一通り叩いてみたのですがAPIの実行結果からは「ハーゲンダッツ」は見つけられませんでした。\nエクセル表示を見てみたところ、「銘柄」という項目に「バニラアイスクリーム，カップ入り（110mL入り），「ハーゲンダッツ バニラ」」とありました。\nどうも全国のアイスクリームの価格を「ハーゲンダッツ　バニラ」を基準に算出しているみたいです。\n excel \nちなみに、2020年だと１番安いのが長野市の221円で１番高いのが那覇市の300円でした。\n 統計表 \n単にハーゲンダッツの価格ってだけだと少しパンチ力弱いかもしれませんね。。。\n個人的には明治のスーパーカップが１位でジャンボモナカが２位でとかアイスクリーム売れ筋ランキングとかの方が楽しいのですが、政府はそこまで調べてくれないですよね。\n小売統計調査とは 小売物価統計調査はお米の価格から葬儀代まで約８００の小売価格を調査したデータ\n調査結果は、年金等の給付見直しの際の基礎資料や、公共料金の上限値を決める際の資料として、幅広く利用されているそうです。\nアイスクリームは約８００ある中の項目の一つです。\n 銘柄 \n小売物価統計調査をピックアップするとしたら、ここ数年で値段が大きく変化しているものや地域間の差が特に大きいものとかですかね。\n「小売物価統計」でgoogle検索して面白そうな記事を見てみると\n「今年のX’マスケーキは小さくなるか」という記事がありました。\nケーキにもよく使われる小麦や油量種子はとりわけ高騰が目立つ\n→\n小売物価統計調査によると、東京都区部の小売価格で、今年11月の1kgあたりの小麦価格は1年前より約20円上昇した。食用油に至っては1kgあたり約60円と大幅な値上がりで、価格が比較的安定している食品の代名詞ともなってきた鶏卵でさえ、1パックあたり約12円上昇した。\n→\nクリスマスイブにケーキを買って帰る人も多いだろうが、今年は例年と比べて値段がほとんど同じなのにサイズが小さくなっていても不思議ではない。\nこんな感じのものは自動的にピックアップできると理想的なんですけどね。\n今日のところのまとめ 自動的にピックアップするとしたら\n・柔らかめのキーワード\n・ここ数年間で値が急激に変化してるもの\n・地域間の格差が大きいもの\nですかね。データを見ていって判定項目を増やしていきたいと思います。\nその他、アイスクリームでの検索結果には「家計調査」というのもありました。\n家計の４半期での支出額の平均を出したものなのですが、アイスクリームの支出は当然夏が冬の倍くらい多い感じになってます。\nアイスクリームは当たり前ですが、その他季節によって大きく支出が違うものって何なのかは少し興味がありますね。\n毎月や四半期ごとに値があるものについては、期間によって差が大きいものはピックアップしても良いかもしれませんね。\n 家計調査 \n","date":"2021-12-26T21:54:39+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/","title":"e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？"},{"content":"今回は前回登場したデータの内容を調べてみましょう。\n「統計表情報取得」（リスト取得）APIで取得したデータをもとにe-Statのサイト（https://www.e-stat.go.jp/）からデータを見つけてみましょう。\n\u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; データを検索してみよう IDで検索できるのが一番良いのですが、キーワード検索のテキストフィールドに入力して検索してもダメでした。\nしょうが無いので、TITLE全文「形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）」で検索しましたがでダメでした。\n少し削って、「形態別国内家計最終消費支出 年度デフレータ—　前年度比」 だと４０５件。\n多すぎるので、SURVEY_DATE、OPEN_DATEを使って調査年、調査月、公開年月で絞り込むと２件に絞り込めました。\nあとはSTATISTICS_NAMEで特定できました。\n詳細ページに行ってみましょう https://www.e-stat.go.jp/stat-search/database?page=1\u0026query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20\u0026layout=dataset\u0026year=20100\u0026month=23070900\u0026open_date=202004\u0026statdisp_id=0003384123\u0026metadata=1\u0026data=1\n上段が「統計表情報取得」の内容\n 統計表情報 \n下段が「メタ情報取得」の内容見たいです。\n メタ情報取得 \nDBをクリックするとグラフが表示されました。\n グラフ \n行情報が「1981年度、1982年度、1983年度。。。」\n列情報が「家計最終消費支出（再掲）、家計最終消費支出（再掲）_居住者家計の海外での直接購入、。。。」\nなんと、APIクリックすると丁寧にクエリを表示してくれました(API仕様書とか見る必要ないですね)。\n API \nフォーマットもXML,JSON,CSVが選べますね。\n私はCSVの方が扱いやすいのでこれからはCSVでダウンロードすることにします。\nappIdがカラに空になっているので追加してcurlで叩くだけでいいですね。至れり尽くりです。\ncurl \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; \u0026quot;tab_code\u0026quot;,\u0026quot;表章項目\u0026quot;,\u0026quot;cat01_code\u0026quot;,\u0026quot;形態別国内家計最終消費支出\u0026quot;,\u0026quot;time_code\u0026quot;,\u0026quot;時間軸（年度）\u0026quot;,\u0026quot;unit\u0026quot;,\u0026quot;value\u0026quot;,\u0026quot;annotation\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;3.8\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1982100000\u0026quot;,\u0026quot;1982年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;2.3\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1983100000\u0026quot;,\u0026quot;1983年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;\u0026quot; . . . \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;17.6\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1982100000\u0026quot;,\u0026quot;1982年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;15.6\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1983100000\u0026quot;,\u0026quot;1983年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;-1.8\u0026quot;,\u0026quot;\u0026quot; データの見方は？ DBで表示させた「統計表表示」と見比べてみると\n グラフ \n\u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;3.8\u0026quot;,\u0026quot;\u0026quot; が１行目「1981年度」の１列目「家計最終消費支出（再掲）」に該当するみたいですね。\n１セル、１行のデータ構造みたいですね。\n１列目の情報がしばらく続いて、全行終わると次は２列目の情報みたいな構成だということがわかりました。\n国民経済計算って何 このデータは国民経済計算を算出したものということですが、国民経済計算ってなんでしょう？\n内閣府のサイトによると\n国民経済計算は「四半期別ＧＤＰ速報」と「国民経済計算年次推計」の２つからなっている。「四半期別ＧＤＰ速報」は速報性を重視し、ＧＤＰをはじめとする支出側系列等を、年に８回四半期別に作成・公表している。「国民経済計算年次推計」は、生産・分配・支出・資本蓄積といったフロー面や、資産・負債といったストック面も含めて、年に１回作成・公表している。\nGDPを算出するための何かみたいですね。\ngoogleの検索結果を見てみると、国や地方自治体のサイトや経済学の解説サイトがメインで、たまに今年のGDPはどうだったという記事でちょっと書かれてたりしました。\n記事の中でちょっと気になったのは、\n日本では新型コロナウイルスの影響で個人消費が落ち込んでおり、貯蓄が増加傾向にあります。内閣府の国民経済計算によると、2020年に消費されずに貯蓄に回ったお金は、一律10万円の特別定額給付金の影響もあり、35.8兆円に達しました。この額は前年の5倍の水準です。\n所得に対する貯蓄の割合を示す家計貯蓄率は13.1%と19年度（3.7%）から大きく上昇した。\n前年度から比較して急激に大きくなったという部分(5倍も！)。こういうのは是非ピックアップしたいと思いました。\ne-Statでのマイニングの目的は とわ言え「国民経済計算」全般的に堅い感じですね。。。。\n私のe-Statマイニングの目的は大量の政府公開データに埋もれている中から人の興味を引きそうな面白そうなコンテンツをピックアップしてわかりやすくサマリーを表示することなのです。\nキーワードランキングを見てみると「アイスクリーム」「身長・体重の平均値」みたいな面白そうな柔らかめのコンテンツもあるんです。\n ランキング \n次回から、\n・e-Statの森の中から面白いコンテンツを見つけよう\n・うまくサマライズして表示しよう\n興味深い列情報に絞りたい\n前年度から５倍とか急激に変化した部分をピックアップして伝えたい\nという視点からe-Statを調査していきたいと思います。\n","date":"2021-12-25T21:55:55+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/","title":"e-Statのデータの見方"},{"content":"書籍の紹介  UNIXという考え方―その設計思想と哲学 UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  あらすじ UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。\nそもそもUNIXはMulticsという巨大なOSの開発から生まれたものだ。あまりに巨大なMulticsはその複雑さゆえに開発は遅々として進まず、その反省からケン・トンプソンが作ったのがUNIXの初めとされる。その後デニス・リッチーら多数の開発者が携わり、UNIXは発展した。本書はこのUNIXに込められた「思想と哲学」を抽出し、数々のエピソードとともにUNIXの特徴を浮き彫りにしていく。\nたとえば本書で述べられているUNIXの発想のひとつとして「過度の対話式インタフェースを避ける」というものがある。UNIXのシステムは初心者には「不親切」なつくり、つまり親切な対話式のインタフェースはほとんどなく、ユーザーがコマンドを実行しようとするときはオプションをつける形をとっている。この形式はオプションをいちいち覚えねばならず、初心者に決してやさしくない。しかしこれはプログラムを小さく単純なものにし、他のプログラムとの結合性を高くする。そして結果としてUNIXのスケーラビリティと移植性の高さを支えることになっているのだ。このような形式で本書では9つの定理と10の小定理を掲げ、UNIXが何を重視し、何を犠牲にしてきたのかを明快に解説している。\nこのページはなんだ？ 　という前置きはよいとして、心に余裕があれば、ぜひ本書を読んでいただきたい。全てのLinux初心者必携の書だ。そして、このページは何かというと、この本のエッセンスを抜粋した「メモ」という位置づけとしてとらえて欲しい。\n　一度、本を読んで頂ければ、このメモを見ればいつでもほんの情景がフィードバックされるはずだ。とうぜん、本を読まずしてこのメモを見てもいまいちちんぷんかんぷんかとは思う。\n　ただ、エッセンスからでも読み取れることも多い。\n　解決方法は皆さんにお任せする。\n■１．小さいものは美しい 抜粋 小さなプログラムはわかりやすい 小さなプログラムは保守しやすい 小さなプログラムはシステムリソースに易しい 小さなプログラムは他のツールと組み合わせやすい 「伝統的なプログラマは、巨大なアメリカンプログラムによって、 世界中の全ての問題を一つのプログラムで解決しようとする。」 「プログラムの９０％はクズである。 ただしあらゆるものの９０％はクズである。」 パラメータが一行に収まらない メソッドが画面に収まらない コメントを読まないと何をやっているのか思い出せない lsでモジュール名が多すぎて画面の端から消えていってしまう まだ開発中なのにエラーメッセージの意味を思い出せない 整理するためにソースコードを印刷している自分に気がついた エッセンス 　「スモールイズビューティフル」 「伝統的なプログラマは、巨大なアメリカンプログラムによって、 世界中の全ての問題を一つのプログラムで解決しようとする。」 「プログラムの９０％はクズである。 ただしあらゆるものの９０％はクズである。」 ■２．一つのプログラムには一つの事をうまくやらせる 抜粋 b)入力データは特殊フォーマットが必要か。フォーマット変換プログラムがすでにシステム上にないか。 c)出力データは特殊フォーマットが必要か。通常のASCIIファイルではだめか。 d)新しいプログラムを書かずとも似たような機能を持つ他のプログラムがあるのではないか。 「一つの事をうまくやるようにプログラムを作れないのであれば、 おそらく問題をまだ完全に理解していない。」 「しのびよる多機能主義。 プログラマはいつだってプログラムを遅くする方法を見つける。」 一つの事をうまくやるようにアプリケーションを書けば、それは必然的に小さなプログラムになる。 小さなプログラムは単一機能になる傾向があり、単一機能のプログラムは小さくなる傾向がある。 エッセンス 　「わかることは分けること」 「UNIXユーザーは、自分が何をしているのかをわかっている。 何をしているのかわからないのなら、ここにいるべきではない」 「一つの事をうまくやるようにプログラムを作れないのであれば、 おそらく問題をまだ完全に理解していない。」 ■３．出来るだけ早く試作する 抜粋 　「試作によって学ぶ。早い試作はリスクを減らす。 「正しく」やっている時間などない」 「なにができるか」 むしろ重要な事は、「なにができないか」を知る事だ。」 三つのシステム １．第一のシステム 第一のシステムは正しくやっている時間などない。 第一のシステムは追い詰められた人間が作る。 第一のシステムのコンセプトは人々の想像力を刺激する。 第一のシステムは一人かせいぜい数人からなる小さなグループで作られる。 第一のシステムは高い情熱によって推進され開発は急速に進む。 第一のシステムは実に性能がよい。 ２．第二のシステム 第二のシステムは第一のシステムで証明されたアイデアを継承する。 第二のシステムは委員会が設計する。 第二のシステムは委員会によりものごとを全て公開の場で自分自身の正当化のために議論を進める。 第二のシステムは第一のシステムの成功に便乗し分け前にあずかろうとする自称専門家で作られる。 第二のシステムは自称専門家によりリポジトリ、進捗管理ツールが導入され計画は遅延する。 第二のシステムは自称専門家のプログラムにおきかえられ贅肉がつき像のようにゆっくり動く。 第二のシステムは「最初の設計のひどい欠点を見違えるように改善」され多機能となり無知が使う。 第二のシステムは三つのシステムの中で最悪のシステムである。 ３．第三のシステム 第三のシステムはこれまでのシステムへの反抗から生まれる。 第三のシステムの名前が変わり、オリジナルのアイデアはもはや常識となる。 第三のシステムは第一と第二のシステムの最良の特徴を組み合わせる。 第三のシステムは設計者にとってようやく「正しく」やる事が出来る。 第三のシステムはユーザーが実際に使用する機能しか含まれない。 第三のシステムはディスク、メモリ、CPUサイクルなど最適なバランスが実現されている。 第三のシステムは提供される性能レベルも良くバランスがとれている。 第一のシステムとして「試作」を１ナノ秒でも早く作り、 第一のシステムと第二のシステムのサイクルを反復と協調し、 第三のシステムに向かって協力しながら進んでいく。 エッセンス 　「反復と協調」 「試作によって学ぶ。早い試作はリスクを減らす。 「正しく」やっている時間などない」 「なにができるか」 むしろ重要な事は、「なにができないか」を知る事だ。」 ■４．効率より移植性 抜粋 　UNIXにおいてそれはシェルスクリプトしかない。 次のハードウェアはもっと速く走る。だからプログラムを速くするという誘惑に負けない。 わずかな速度を求めてCで書き直さない。それは時間の無駄だ。 シェルスクリプトをあれこれいじる余裕が一瞬でも生じればほとんどのプログラマは a) 新しい機能をいくつか付け加えようとする b) スクリプトそのものを洗練し、実行速度を高めようとする c) その一部、または大部分をCで書き直してパフォーマンスの向上を図ろうとする。 「最も効率の良い方法は、 ほとんどの場合「移植性」に欠ける。」 「移植か死か。優れたソフトウェアは移植され成長し、 それ以外は取り残され捨てられる。」 DQ1カートリッジ(64kb)用のコード 自分のプログラマ人生で最も効率の良い、そして移植の難しいコード」を書いた。 命令をデータとして扱い、データを命令として扱った。 走査線が画面の右端から左端に引き返すまでの間を狙って命令を実行した。 メモリ節約のためありとあらゆる技を駆使した。 こうしてできあがったコードは芸術品と言えるほど見事なものだった。 フォルクスワーゲンのビートルに２０人ほど詰め込むようなものだった。 そして保守担当者にとっては究極の悪夢でもあった。 エッセンス bashとawkとsed 「最も効率の良い方法は、 ほとんどの場合「移植性」に欠ける。」 「移植か死か。優れたソフトウェアは移植され成長し、 それ以外は取り残され捨てられる。」 ■５．出力結果はASCIIフラットファイルに保存する 抜粋 　「動かせないデータは死んだデータだ。」 出力結果はASCIIフラットファイルに保存する。 RDBを使わない。 中間ファイルをはき出さない。 エッセンス 　中間ファイルは作らない　RDBは使わない 「動かせないデータは死んだデータだ。」 ■６．ソフトウェアを梃子として使う　 抜粋 　梃子の支点をいかに自分のほうに近づける事が出来るか 独自技術症候群を避け、すでにあるものにクリエイティブな付加価値をつける 独自技術症候群は創造性を伸ばさない。 「良いプログラマはよいコードを書く。 偉大なプログラマは良いコードを借りてくる。」 エッセンス 　「良いプログラマはよいコードを書く。 偉大なプログラマは良いコードを借りてくる。」 ■７．シェルスクリプトによって梃子の効果と移植性を高める　パイプ 抜粋 　シェルスクリプトには恐ろしいほどの梃子の効果がある シェルスクリプトは梃子の降下で時間も節約する シェルスクリプトはCより移植性が高い 「熟練プログラマはシェルスクリプトを熱心に使う。 あなたもまたそうするべきだ。」 「UNIXの源流は高水準の抽象化モデル「シェルスクリプト」であり、 それは今も普遍である。」 「私は人生で二度しか奇跡を見た事がない。 一つは核融合、もう一つは複利だ 少量のものを繰り返し掛け合わせていく事で、 やがて奇跡的な規模に達する。」アインシュタイン シェルスクリプト一行はおよそ１万倍の複利を生む ```bash echo who | awk '{ print $1 ; }' | sort | uniq | sed -e \u0026quot;s/ /, /g\u0026quot; ; echo 177 who 755 awk 3411 sort 2614 uniq 302 sed 2093 ------------------------- 9.353 処理をパイプでつなぎ処理全体を一行で完結させる。 「ひとつのことをうまくやる」の良い事例だ。 function sh_func_getTitle() { TITLE=$(echo ${URLGETOPT} | \\ 　while read line ;do if echo \u0026#34;$line\u0026#34; | grep -i \u0026#34;title=\u0026#34; \u0026gt; /dev/null; then echo \u0026#34;$line\u0026#34; | \\ 　sed -e \u0026#34;s/^.*title=\\x27//g\u0026#34; \\ 　-e \u0026#34;s/\\x27.*$//g\u0026#34; \\ 　-e \u0026#34;s/\\r//g\u0026#34; \\ 　-e \u0026#34;s/\u0026lt;[^\u0026gt;]*\u0026gt;//g\u0026#34; \\ 　-e \u0026#34;s/^[●○■□△▽]//g\u0026#34;; fi done); } エッセンス 　「私は人生で二度しか奇跡を見た事がない。 一つは核融合、もう一つは複利だ 少量のものを繰り返し掛け合わせていく事で、 やがて奇跡的な規模に達する。」 ■８．全てのプログラムをフィルタとして設計する 抜粋 　メソッド間の入力をstdin、出力はstdoutを使用する\nオンメモリでコマンドフィルタとして稼働する。\nfunction trim(){ if [ -p /dev/stdin ]; then cat - ; else echo -n ; fi | sed -e \u0026#39;s/^ *//g\u0026#39; -e \u0026#39;s/ *$//g\u0026#39; } 実行結果 echo \u0026#34; ほげ \u0026#34; | trim ; ほげ 　以下でも良い。　function trim(){ awk \u0026#39;{ print $1; }\u0026#39; | sed -e \u0026#39;s/^ *//g\u0026#39; -e \u0026#39;s/ *$//g\u0026#39; \u0026lt;/dev/stdin } 実行結果 echo \u0026#34; ほげ \u0026#34; | trim ; ほげ エッセンス メソッド間の入力をstdin、出力はstdoutを使用する ■９．並行して考える 抜粋 　並列処理が可能なメソッドを積極的に書く\nメソッドの並列処理 1 #!/bin/bash 2 cmd() { 3 echo \u0026#34;Hello, $1!\u0026#34;; 4 } 5 function sh_xargs(){ 6 export -f cmd 7 yes | head -1000 | xargs -n1 -P4 -I % bash -c \u0026#34;cmd %\u0026#34; 8 } 9 sh_xargs ; エッセンス 　並列処理が可能なメソッドを積極的に書く ■１０．木を守る 抜粋 　UNIXユーザーは紙のドキュメントを忌み嫌う。不要なドキュメントを印刷して整理する事はしない。 ソースコードが実体であり、高水準のドキュメントとなるようプログラムする。 エッセンス 　UNIXはドキュメントを忌み嫌う ","date":"2021-12-25T09:25:50+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/","title":"「UNIXという考え方―その設計思想と哲学」　メモ"},{"content":"知識ゼロからのe-Statマイニング\n日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-Statという日本の統計が閲覧できる政府統計ポータルサイトを発見しました。\nアイスの売り上げから子供の平均身長まで大量の統計資料が公開されており、しかもAPIまであるすごいサイトです。 このe-Statをマイニングしてみようと思います。\nまずはAPIを叩くところまでやってみます。\nまずはアプリケーションIDを取得しよう APIを叩くにはアプリケーションIDが必要です。\nまずはアプリケーションIDを取得しましょう。\nアプリケーションIDを取得するにはユーザー登録が必要です。以下のURLから手順に従ってユーザー登録してください。\nhttps://www.e-stat.go.jp/mypage/user/preregister\nアプリケーションIDはログイン後マイページ内のAPI機能(アプリケーションID発行)で取得できます。\nhttps://www.e-stat.go.jp/mypage/view/api\n入力項目は名称、URL、概要の３つです。\n名称、概要は適当で大丈夫です。\nURLは、http://localhostだと私はダメだったのでこのサイトのURLを設定しました。\n発行ボタンを押すとappIdにアプリケーションIDが払い出されます。\nAPIを叩いてみよう APIの仕様は以下のURLに記載されています。\nhttps://www.e-stat.go.jp/api/api-info/e-stat-manual3-0\n難しいです。\nなんとなく、「統計表情報取得」でリストを取得して、「メタ情報取得」「統計データ取得」で個別のデータを取得する感じでしょうか？\nまずは叩いてみます。\n統計表情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=xxxxxxxxx\u0026amp;lang=J\u0026amp;searchKind=\u0026amp;searchWord=\u0026quot; \u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; LIST_INF idの「0003384123」」が個別データのidみたいです。これを使ってメタ情報取得、統計情報取得を呼び出します。\n##メタ情報取得\ncurl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=xxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_META_INFO xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetMetaInfo.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:35:07.926+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;METADATA_INF\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;CLASS_INF\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;tab\u0026quot; name=\u0026quot;表章項目\u0026quot; description=\u0026quot;Excelの書式設定で統計表の数値を\u0026amp;quot;-0.0\u0026amp;quot;としている場合、データベース上\u0026amp;quot;0.0\u0026amp;quot;として収録されているため、Excel統計表の数値とは必ずしも一致しない。\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;前年度比\u0026quot; level=\u0026quot;\u0026quot; unit=\u0026quot;％\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;cat01\u0026quot; name=\u0026quot;形態別国内家計最終消費支出\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;11\u0026quot; name=\u0026quot;家計最終消費支出（再掲）\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;12\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;13\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_（控除）非居住者家計の国内での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;14\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;15\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;16\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_半耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_非耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;18\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_サービス\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;time\u0026quot; name=\u0026quot;時間軸（年度）\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;1981100000\u0026quot; name=\u0026quot;1981年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1982100000\u0026quot; name=\u0026quot;1982年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1983100000\u0026quot; name=\u0026quot;1983年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1984100000\u0026quot; name=\u0026quot;1984年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1985100000\u0026quot; name=\u0026quot;1985年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1986100000\u0026quot; name=\u0026quot;1986年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1987100000\u0026quot; name=\u0026quot;1987年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1988100000\u0026quot; name=\u0026quot;1988年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1989100000\u0026quot; name=\u0026quot;1989年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; 上の方がデータ内容の説明なのか？よくわかりません。\n統計情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000\u0026amp;appId=xxxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=N\u0026amp;cntGetFlg=N\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_STATS_DATA xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetStatsData.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:37:22.156+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;DATA_FORMAT\u0026gt;X\u0026lt;/DATA_FORMAT\u0026gt; \u0026lt;START_POSITION\u0026gt;1\u0026lt;/START_POSITION\u0026gt; \u0026lt;LIMIT\u0026gt;10000\u0026lt;/LIMIT\u0026gt; \u0026lt;METAGET_FLG\u0026gt;N\u0026lt;/METAGET_FLG\u0026gt; \u0026lt;CNT_GET_FLG\u0026gt;N\u0026lt;/CNT_GET_FLG\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;STATISTICAL_DATA\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;TOTAL_NUMBER\u0026gt;232\u0026lt;/TOTAL_NUMBER\u0026gt; \u0026lt;FROM_NUMBER\u0026gt;1\u0026lt;/FROM_NUMBER\u0026gt; \u0026lt;TO_NUMBER\u0026gt;232\u0026lt;/TO_NUMBER\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;DATA_INF\u0026gt; \u0026lt;NOTE char=\u0026quot;***\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;NOTE char=\u0026quot;-\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1981100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;3.8\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1982100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.3\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1983100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1984100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1985100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;1.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1986100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.1\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1987100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1988100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1989100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.5\u0026lt;/VALUE\u0026gt; VALUEが値みたいですがどういう列情報になっているのでしょうか？\nとりあえずAPIはお手軽に叩けることがわかりました。\n次回以降はデータの内容を理解していこうと思います。\n","date":"2021-12-24T18:12:54+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/","title":"知識ゼロからのe-Statマイニング"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話 【ssh/bash】ssh/Bashでサーバーへログイン・実行・ログアウトの一連自動化処理を作ってみようって話  やりたいこと sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトしてローカルに何事もなかったかのようにもどってくる最も簡単な方法ってなにかないでしょうか。\nイメージ 従来の方法\nローカルＰＣのターミナル ↓ Linuxサーバーにログイン $df $uptime などを実行 ↓ Linuxサーバーをログアウト ローカルＰＣにもどる これからつくるBash/ssh\nローカルＰＣのターミナル ↓ Linuxサーバーにログイン $df $uptime などを実行 Linuxサーバーをログアウト ↓ ローカルＰＣのターミナルにもどる わかりにくいですか？\nまず、メリットとしてサーバーでコマンドからログアウトする必要がありません。\nこれができれば、一台一台サーバーのヘルスチェックをせずとも、数十台のサーバーを\n順番に訪ね歩きファイルに出力する事も可能です。\n以下、ソースです。\n#!/usr/bin/bash  ############################################## # sshでサーバーにログインして、なんらかのコマンドを # 実行しターミナルに表示、ミッション終了後、ターミ # ナルを自動的にログアウトしてローカルに何事もなか # ったかのようにもどってくる最も簡単シェルスクリプト ############################################## # # サーバーのＩＰアドレスとか SERVER=\u0026#34;centos@xx.xx.xx.xxx\u0026#34; # 実行したいコマンドを \u0026amp;\u0026amp; でつなぐ COMMAND=\u0026#34;uptime \u0026amp;\u0026amp; df -h\u0026#34;; echo \u0026#34;centosサーバーログイン\u0026#34;; # ポイントは -t です。 ssh $SERVER -t $COMMAND; echo \u0026#34;centosサーバーログアウト\u0026#34;; exit; たったこれだけですが、この工夫により多くのサーバーを\nスクリプトで一括回遊することができます。 お試しあれ。\n","date":"2021-12-24T11:55:21+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/","title":"【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法"},{"content":"hugoでscssやsassを含んだファイルををGitHubに公開、Git Actionで自動ビルドしようとした際に、見慣れないエラーが表示された\nRun hugo --minify Error: Error building site: TOCSS: failed to transform \u0026quot;scss/style.scss\u0026quot; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS. : this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information ... Total in 148 ms Error: Process completed with exit code 255. はて？なにか悪いことでもしたのだろうか。\nそれとも変な記述をしてしまったのだろうか。\nエラーの内容 こういうときは、落ち着いてエラーを見てみよう。\n大抵のことはちゃんと教えてくれているはずだ。\nCheck your Hugo installation; you need the extended version なるほど、extended を使えと行っている。\nextended とはなんだろう。\nエラーの対応 さらに落ち着いて設定ファイルを確認することをおすすめする。\n.github/workflow/gh-pages.yml\n- name:Setupuses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.87.0\u0026#39;#extended: true設定の extended が思いっきりコメントアウトされていました\nコメントを外して、再度Gitにpushしたところ、正常にビルドされて公開できました。\nまとめ scssやsassを含んだファイルをhugoをgitに公開しようとした際に、ビルドできない場合は設定を確認することをおすすめする。\n","date":"2021-12-24T09:43:41+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/af7ef3c0-44c1-4f2f-aad8-1a0664724558_huf3902e4d08fb0294f3a250034e0748e3_207097_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/","title":"SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  プログレスバー ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。\n処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。\nシェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい\n使い方 処理のループ中に以下の1行を追記します。\nprogress \u0026#34;$#\u0026#34; \u0026#34;$MAX\u0026#34;; set - \u0026#34;$@\u0026#34; count ; 実行手順 以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。\n$ :\u0026gt; Progress.sh $ vim Progress.sh # vimで以下のソースコードを貼り付けて保存 # ソースコードのファイルエンコードをUTF-8に変更します。 $ nkf -wLu Progress.sh \u0026gt; Progress.sh.utf8 # ファイルエンコードを変更したファイルを元のファイル名にリネームします。 $ mv Progress.sh.utf8 Progress.sh # 実行権限を付与します $ chmod +x Progress.sh # 実行 $ ./Progress.sh ソースコード #! /bin/bash  ####################################### # 進捗を表示するプログレスバー #  ####################################### # # # percent $1  # GT $2 progress(){ percent=$1; GT=$2; column=`expr 71 \\* \u0026#34;$percent\u0026#34; / $GT`; nspace=`expr 71 - \u0026#34;$column\u0026#34;`; #プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入 bar=\u0026#39;\\r[\u0026#39;; #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026#34;$column\u0026#34; ];do bar=$bar\u0026#39;=\u0026#39;; # barに=を追加 set - \u0026#34;$@\u0026#34; dummy; # $#をインクリメント done bar=$bar\u0026#39;\u0026gt;\u0026#39;; #barの先端に\u0026gt;を追加 #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026#34;$nspace\u0026#34; ]; do bar=$bar\u0026#39; \u0026#39;; set - \u0026#34;$@\u0026#34; dummy; done bar=$bar\u0026#39;]\u0026#39;$percent/$GT\u0026#39;\\c\u0026#39;; # barに]と１行分のプログレスバーを表示 echo -e \u0026#34;$bar\u0026#34;; } ####################################### # メイン処理 # set count ; MAX=100 ; #最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。 # for (( i=0; i\u0026lt;$MAX; i++)){ # ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。 progress \u0026#34;$#\u0026#34; \u0026#34;$MAX\u0026#34;; set - \u0026#34;$@\u0026#34; count ; } echo \u0026#34;\u0026#34;; # #終了 exit ; 使い方 シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。\n自作ソースの中のループ処理の関数の頭に以下を追記します。\nMAX=100; は、処理の最大値を指定します。\n処理のループ最大数が150回であれば、以下の通りに修正します。\nset count; MAX=150; forやwhileループ処理の中に以下を埋め込みます。\nprogress \u0026#34;$#\u0026#34; \u0026#34;$MAX\u0026#34;; set - \u0026#34;$@\u0026#34; count ; 最後にforまたはwhileループを抜けた後に\necho \u0026#34;\u0026#34;; を追加します。これだけです。\n実行結果  \n","date":"2021-12-23T16:10:20+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/","title":"【プログレスバー】Bashでプログレスバーを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。\n圧縮ファイルと実行コマンド、パラメータ一覧 拡張子 パラメータ tgz | tar.gz tar zxvf tar.Z gunzip tar.bz2 tar xvfj tar tar xvfz gz gunzip Z gunzip bz2 bunzip2 zip unzip こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。\n実行例 # 圧縮ファイルを解凍する便利な unCompコマンド $ unComp comp.tar.gz2 作成 まずファイルを作ります。ファイル名は unComp とします\n# unComp というファイルを作成 $ :\u0026gt; unComp # vim で unComp を開く $ vim unComp unCompファイルに以下の内容を貼り付ける\n#!/bin/bash # #圧縮されているファイルを解凍する # unComp を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # # cp unComp /usr/local/bin/unComp # # 実行例 # $ unComp filename(圧縮ファイル) # if [ $# -ne 1 ]; then echo \u0026#34;\u0026#34; exit ; fi # case $1 in *.tgz | *.tar.gz) tar zxvf $1 ;; *.tar.Z) gunzip $1 tar xvf $( echo \u0026#34;$1\u0026#34; | sed \u0026#39;s/\\.Z$//\u0026#39;) ;; *.tar.bz2) tar xvfj $1;; *.tar) tar xvfz $1;; *.gz) gunzip $1;; *.Z) gunzip $1;; *.bz2) bunzip2 $1;; *.zip) unzip $1;; *) echo \u0026#34;ファイルの拡張子が対応していません:$1\u0026#34; esac exit ; 作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。\nwLuをつかってUTF-8に変換するとさらに便利です。\n# unComp ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu unComp \u0026gt; unComp.txt # unComp.txtをunCompにリネームします $ mv unComp.txt unComp # 作成したunCompコマンドファイルを/usr/local/bin にコピーします $ sudo unComp /usr/local/bin/ # コマンドが配置されたかを確認 $ which unComp $ /usr/local/bin/unComp 使い方 # 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する # 実行 $ unComp sample.zip 圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。\n便利ですね。\n","date":"2021-12-23T13:11:13+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/","title":"【unComp】Bashで便利なコマンドを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  必要なもの ネットワーク漢字フィルター nkf\n※macの場合、Homebrew が必要になります。\nnkf インストールの手順 まず、nkfがインストールされているかを確認します。\n$ which nkf /usr/local/bin/nkf インストールされていない場合、macの場合はbrewでインストールします。\n$ brew install nkf インストールしようとすると以下のエラーが出ることがあります\nError: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink share/man/ja/man1/nkf.1 /usr/local/share/man/ja/man1 is not writable. 権限周りを下記のコマンドを打って変更します。\nsudo chmod 775 /usr/local/share/man/ja/man1 sudo chown \u0026lt;ユーザ名\u0026gt;:admin /usr/local/share/man/ja/man1 下記のページを参考にさせていただきました\n\nコマンドを確認します。\n$ nkf -v Network Kanji Filter Version 2.1.5 (2018-12-15) Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa). Copyright (C) 1996-2018, The nkf Project. 使い方 nkfコマンドとは？\n「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。\nnkfコマンドの書式\nnkf オプション ファイル名\nUTF-8に変換する場合は、オプションに wLu をつけて変換します。\n$ nkf -wLu isofile.txt \u0026gt; utf8.txt 変換の流れ（手動編） 元ファイル moto.txt (UTF-8以外のファイルエンコード、改行コード）\n↓\n変換後のファイル ato.txt(UTF-8に変換したファイル）\n↓\n変換後のファイルをリネームする\n# UTF-8に変換 $ nkf -wLu moto.txt \u0026gt; ato.txt # 変換後のファイルを元のファイル名にリネームする $ mv ato.txt moto.txt # vimiでファイルエンコードを確認する $ vim moto.txt 面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。\n変換の流れ（自動編） # UTF-8に変換 wLu コマンドをこれから自作します $ wLu moto.txt $ vim moto.txt ← UTF-8 に変換されている！ コマンドの内容 まずファイルを作ります。ファイル名は wLu とします\n# wLu というファイルを作成 $ :\u0026gt; wLu # vim で wLu を開く $ vim wLu 以下の内容をファイルに貼り付ける\n#!/bin/bash  ################################################# # パラメータで渡されたファイル名をutf8に変換する # # 使い方 # wLu UTF-8に変換したいファイル名 # wLu を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # ################################################# # filename=\u0026#34;$1\u0026#34; ; # function wLu(){ if [ -f \u0026#34;$filename\u0026#34; ]; then cat \u0026#34;$filename\u0026#34; | nkf -wLu \u0026gt; \u0026#34;$filename\u0026#34;.u ; mv \u0026#34;$filename\u0026#34;.u \u0026#34;$filename\u0026#34; ; fi } # if ! which nkf \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then echo \u0026#34;nkf がありません\u0026#34; ; echo \u0026#34;nkf をインストールして下さい\u0026#34; ; exit ; fi # if [ -z \u0026#34;$filename\u0026#34; ] ; then echo \u0026#34;第一引数にファイル名を指定して下さい\u0026#34; echo \u0026#34;実行例： wLu filename\u0026#34; ; exit ; fi # 実行 wLu ; # 終了 exit ; 作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。\n# wLu ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu wLu \u0026gt; wLu.txt # wLu.txtをwLuにリネームします $ mv wLu.txt wLu # 作成したwLuコマンドファイルを/usr/local/bin にコピーします $ sudo wLu /usr/local/bin/ # コマンドが配置されたかを確認 $ which wLu $ /usr/local/bin/wLu 使い方 # UTF-8以外のファイルエンコードファイル $ cat moto.txt $ wLu moto.txt 変換結果を一時ファイルにし、リネームする手間が省けます。\n便利ですね。\n","date":"2021-12-23T10:27:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/","title":"【wLu】Bashで便利なコマンドを作ってみようって話"},{"content":"エラーの内容 記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について\nhugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。\nStart building sites …\nTotal in 10 ms\nError: Error building site: \u0026ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1\u0026rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed\n原因 このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。\nvim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？\n対応 この場合ファイルの文字コードをUTF8に変更してみましょう。\nnkf -wLu ファイル名 \u0026gt;一時保存ファイル名; mv 一時保存ファイル名 ファイル名 一時保存した後にmvで戻したり面倒ですよね。\n面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。\nhttps://github.com/suzukiiichiro/linuxConfig/blob/master/wLu\nhugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。\n","date":"2021-12-22T21:22:23+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-03/error_hu7e39d96c0286759ff592e45a50a24444_91990_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-03/","title":"hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー"},{"content":"github pagesでもgoogle adsenseの審査に通過したい！\nということで色々先人の方達のサイトをみさせていただいたところ\ngoogle adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。\n内容はとりあえずコピペで行こう まずはコピペOKの親切な方のサイトを探します。\n内容については以下のサイトを参考にさせていただきました。\nhttp://liberty-life-blog.com/wordpress/privacy-policy/\n設定 以下のコマンドでhugoでページを作成します。\nhugo new page/privacy.md コンテンツの構成を以下のように管理しているのでpage以下に保存しました。\ncontent/posts \u0026ndash; 記事\n/page \u0026ndash; about usページなど\n/assetes \u0026ndash; 画像など\nvim content/page/privacy.md --- title: \u0026quot;Privacy\u0026quot; date: 2021-12-22T17:16:15+09:00 draft: false --- ページの内容を２個目の\u0026mdash;以下に貼り付けます\ndraft: true に変更します\nhugo ビルドします\nフッターにリンクを置こう フッターの内容を修正してプライバシーポリシーのリンクを設置します。\nthemes以下にあるファイルを直接書き換えるのではなく\nlayoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。\nlayouts/partial/footer/footer.html\u0026lt;\u0026ndash;優先順位高い\nthemes/テーマ名/layouts/partial/footer/footer.html\nlayouts/partial/footer/footer.html を新規に作成して\n以下の内容を入力\n\u0026lt;footer class=\u0026quot;site-footer\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;{{ .Site.BaseURL }}privacy/\u0026quot;\u0026gt;プライバシーポリシー\u0026lt;/a\u0026gt; \u0026lt;section class=\u0026quot;copyright\u0026quot;\u0026gt; \u0026amp;copy; {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026quot;2006\u0026quot;))) }} {{ .Site.Params.footer.since }} - {{ end }} {{ now.Format \u0026quot;2006\u0026quot; }} {{ .Site.Title }} \u0026lt;/section\u0026gt; \u0026lt;/footer\u0026gt; リンクの書き方が\n{{ .Site.BaseURL }}privacy/\nのは注意\n","date":"2021-12-22T17:40:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-02/privacy_hu6d356af4ff9900abfdb99df6dc97252e_302641_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-02/","title":"プライバシーポリシーページを設置する"},{"content":"CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。\nWordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。\n色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。\n無料で、httpsも設定できるので非常に便利です。\nHugoのインストール Hugoを使うためにはhugoをインストールする必要があります。\nインストールは簡単です。\n※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。\nHomebrew が必要になります。\nbrew install hugo 設定 hugoのインストールが終わったら、サイトを作成します。\nhugo new site ＜作成するディレクトリ＞ 色々表示されているかと思いますが、気にしないで大丈夫です。\n設定ファイル hugoの設定はTOMLという形式で記述します。\nTOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。\nその場合はconfig.tomlを削除して下さい。\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot;  baseURL: サイトの公開URL languageCode: HTMLのlang部分 title: サイトの名前  記事の投稿 記事を作成するにはコマンドを打つ必要があります\nhugo new posts/helloworld.md このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます\nテーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。\n下書きから公開へ 作成されたファイルはmarkdown形式で記述されています。\n--- title: \u0026quot;helloworld\u0026quot; date: 2021-12-22T11:23:09Z draft: true --- draft の部分が下書き状態を表しています。\ntrueにすることで公開となり表示されます。\n確認 サイトの確認を行うには\nhugoをインストールしたディレクトリで\nhugo server を実行します。\nこの場合は公開されている記事のみを表示した状態のサーバが立ち上がります。\n未公開も含めたい場合は\nhugo server -D とすることで表示できます。\n公開 公開をするにはサイト全体を構築し直す必要があります。\nhugo このコマンドでサイト全体が自動的に生成されます。\n作成されたサイトは初期状態ではpublicディレクトリに展開されます。\nconfigのpublicDirに任意のディレクトリを設定することも可能です\npublicDir = 'docs' この場合はdocsディレクトリに公開ファイルが展開されます。\n終わりに 駆け足でしたが、hugoの簡単な使い方になります。\n大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。\nみなさんもぜひ、hugoを試してみて下さい。\n","date":"2021-12-22T13:07:49+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/2021-12-22-hugo-01_hub5e89b620d2afe5c10cf3894738f1203_83896_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/","title":"デザイナーでもできる初めてのHugo #01"},{"content":"Hugoでテーマが反映されない（画面が真っ白のまま）\n$ git submodule update --init --recursive ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21/2021-12-21_hud06831bf5e2aede9b7d29f34463c4a46_63839_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21/","title":"Hugoでテーマが反映されない（画面が真っ白のまま）"},{"content":"$ hugo new posts/[ファイル名].md $ vim content/posts/2021-12-21.md draft: false にする事でドラフトを公開にすることができる\nビルドする\n$ hugo ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-01/2021-12-21-1_hubb580b3412968a99eba9faea3f838cef_148014_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-01/","title":"Hugoで記事の投稿の仕方"}]