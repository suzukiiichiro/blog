[{"content":"簡単にできるHugoで人気の記事を表示する方法の2回目になります。\n前回（簡単にできるHugoで人気の記事を表示する方法 #01）ではGAS（Google App Scripts）を使ってアナリティクスのデータをスプレッドシートに反映するところまで説明しました。\n今回は前回作成したスプレッドシートからデータを取得して、Hugoと連携するところまでやっていきましょう。\nスプレッドシートのデータをJSONで取得 Hugoやjsなどとの連携を簡単にするために、スプレッドシートのデータをjsonで取得できるようにします。\n前回作成したプログラムを開きます。\n開き方は前回の「簡単にできるHugoで人気の記事を表示する方法 #01」にある「スプレッドシートの設定」を確認してください。\nスプレッドシートのデータをjsonで取得するためには、APIを使用するケースもありますが、今回はAPIを使用しないで取得します。\nプログラムの内容は下記になります。\nスプレッドシートのIDはスプレッドシートのURL部分の\ndocs.google.com/spreadsheets/d/ スプレッドシートのID /edit#gid=0\nといったように docs.google.com/spreadsheets/d/ と edit に囲まれた部分になります。\nfunction getData(sheetName) { const sheet = SpreadsheetApp.openById(\u0026#34;スプレッドシートのID\u0026#34;).getSheetByName(sheetName); const rows = sheet.getDataRange().getValues(); const keys = rows.splice(0, 1)[0]; return rows.map(row =\u0026gt; { let obj = {}; row.map((item, index) =\u0026gt; obj[keys[index]] = item); return obj; }); } function doGet(e) { let data = getData(e.parameter.sheetname); return ContentService.createTextOutput(JSON.stringify(data, null, 2)).setMimeType(ContentService.MimeType.JSON); } プログラムの説明 doGetってなに？ doGet(e) はこのプログラムをURLから実行できるようにした際にパラメータの値を取得して処理を行う関数です。\nここでは getData()という関数に、クエリパラメータsheetnameを渡しております。\nURLにすると、https://〜/exec?sheetname=パラメータ\nとなります。\nこのパラメータ部分にスプレッドシートのシート名を渡すことで、該当するスプレッドシートのデータを表示できるようになるというわけです。\ngetDataでやってること getData(sheetName) では先程のクエリパラメータsheetnameの値を使って、シートから情報を取得してjsonに格納している部分です。\n指定したシートIDの値がある範囲からから値を取得するのが下記のプログラムです。\nconst rows = sheet.getDataRange().getValues(); その取得した値からタイトル、jsonのキーとなる部分を keys として格納します。\nそしたら先程取得した rows の値をループで取得しながらjson形式のデータに加工します。\nすると、\n[ [リンク, pv数, session数, users数], [リンク, pv数, session数, users数] ] というデータが\n[ {link: リンク, pv: pv数, session: session数, users: users数}, {link: リンク, pv: pv数, session: session数, users: users数} ] というjson形式に加工することができました。\nここまでを保存しておきます。\nこのプログラムを公開してURLでアクセスできるようにしましょう。\nGASのプログラムをデプロイして公開 それではここまでのファイルをデプロイして、Webでアクセスできるようにしましょう。\n右上にある「デプロイ」を押して、新しいデプロイをクリックします。\nすると、「新しいデプロイ」となるので、歯車のマーク「デプロイを有効にする」をおして、「ウェブアプリ」を選択します。\n \n設定の画面になるので、説明などを入力します。\n「次のユーザーとして実行」は自身のアドレスでかまいません。\n「アクセスできるよユーザー」部分は「 全員 」とします。\nこれによって、Hugoから呼び出した際に実行できるようになります。\n \nここまで設定できたら「デプロイ」を押して、プログラムを公開します。\n表示されたウェブアプリのURLが表示されるので、コピーしておきます。\n先程コピーしたURLの末尾に?sheetname=monthを追加してアクセスしてみましょう。\nhttps://script.google.com/macros/s/〜/exec?sheetname=month\nURLはこのような形になります。\n正常にアクセスできていれば\n \nとjson形式のデータが表示されるはずです。\nエラーが出た場合 TypeError: Cannot read property 'getDataRange' of null（行 3、ファイル「コード」） というエラーが出た場合はパラメータが記述されていないだけなので、パラメータを記述することで正常に取得できます。\nそれ以外の場合は、「デバッグ」を使ってエラーを特定していく必要があります。\nデバッグではdoGetはクエリ取得できないので、e.parameter.sheetname部分を\u0026quot;month\u0026quot;と直書きしてデバッグを実行します。\nデプロイには注意 デプロイで「新しいデプロイ」を選択するとURLが変わる点に注意です。\nGASでウェブアプリのURLを固定するための方法は、「デプロイを管理」から更新をするようにします。\n 「デプロイ」の「デプロイを管理」を押します。 そして、右にある鉛筆マークの「編集」を押します。\nすると、編集画面になり、バージョンや説明を修正することができます。 バージョン部分を「新しいバージョン」として、説明に「最新版」とでも打っておきましょう。 この状態で「デプロイ」をクリックします。  上記の作業で、URLを固定したままウェブアプリを公開することができます。\n \nHugoと連携して人気の記事を表示する アナリティクスとスプレッドシートを使って人気の記事をjsonで取得する事ができるようになったので、Hugoと連携します。\nHugoにはjsonを取得する機能がついているので、その機能を使ってデータを取得します。\n{{ $json := getJSON \u0026#34;https://script.google.com/macros/s/〜/exec?sheetname=month\u0026#34; }} \u0026lt;aside class=\u0026#34;widget archives sidearticle-contents--wrapper\u0026#34; id=\u0026#34;popular-articles--month\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contents-area\u0026#34;\u0026gt; \u0026lt;header\u0026gt;\u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;人気の記事（1ヶ月以内）\u0026lt;/h2\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;sidearticle-contents\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex article-list--tile\u0026#34;\u0026gt; {{ $page := .Site.Pages }} {{ range first .Site.Params.widgets.populerArticles.limit $json }} {{ $article := index (where $page \u0026#34;.RelPermalink\u0026#34; \u0026#34;eq\u0026#34; .link ) 0 }} {{ if $article }} \u0026lt;article\u0026gt; \u0026lt;h3 class=\u0026#34;article-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ $article.RelPermalink }}\u0026#34;\u0026gt;{{- $article.Title -}}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;/article\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; getJSON のURLは先ほど作成したGASのウェブアプリURLになります。\n今回は月間の人気記事を取得したいので、?sheetname=monthとしてあります。\n年の場合はyear日の場合はdayなどとすることで必要な情報を取得できます。\n使用しているテンプレートにも夜と思いますが、layouts/partials/widget/popularArticlesMonth.html として保存しておきましょう。\nこのファイルをHugoで読み込むことで人気の記事を表示する事ができるようになります。\n取得する人気の記事件数はconfig.yamlなどのhugoの設定ファイル内のwidhetsにpopulerArticlesを追加して記述しておきます。\nwidgets:enabled:- popular-articlespopulerArticles:limit:10人気の記事を表示するプログラムの解説 まずはサイト全体の記事を取得しておきます。\n{{ $page := .Site.Pages }} 次に、取得したjsonのデータを設定で指定した範囲で取得します。\n{{ range first .Site.Params.widgets.populerArticles.limit $json }} ... {{ end }} 取得したデータからリンクに一致する記事を探します。\n配列のデータで検索されているので、indexを使って0番目の記事を取得しています。\nあとは通常の記事と同じように扱えます。\n{{ $article := index (where $page \u0026quot;.RelPermalink\u0026quot; \u0026quot;eq\u0026quot; .link ) 0 }} 今回は画像無しでタイトルのみの表示となりますが、データ自体は他の記事と同じなので画像やカテゴリ、本文などにもアクセス可能です。\n自動更新の設定 サイトに人気の記事を表示させることができました。\n今の設定だと人気の記事が更新されないので、GASの「トリガー」を使って定期的にアナリティクスのデータをjsonに反映するようにしておきます。\nfunction setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } function all() { setDay(); setMonth(); setYear(); } 月だけでなく、日、年のデータも取得する夜にしておきます。\nそして、それらをすべて実行する関数「all」も追加しておきましょう。ここで保存しておきます。\nこれで準備ができました。\n左袖にあるストップウォッチアイコンを押して、「トリガー」を追加します。\n \n 「トリガーを追加」を押して、「実行する関数」で実行したい関数を選びます。今回は月間のデータを取得したいので「setMonth」を選択します。 「実行するデプロイを選択」は「Head」のままで構いません。 「イベントのソースを選択」は「時間主導型」に変更して、時間で実行するようにしておきます。 「時間ベースのトリガーのタイプを選択」を更新したい頻度で選択します。月間のデータなので1日おきくらいに更新でもいいかもしれません。「日付ベースのタイマー」を選択します。\n一日おきではなく、毎時で更新したい場合は「時間ベースのタイマー」など各自にあったタイマーを選択してください。 「時刻を選択」で更新したい時間を選びます。とりあえず「午前4時〜5時」くらいに更新するようにしておきます。 「エラー通知設定」は各自で好きなタイミングで受信するようにしてください。私はいっぱい来ると嫌なので、「1週間おきに通知を受け取る」にしてあります。\n以上で設定が終わりました。下にある「保存」を押して保存します。\n   これで定期的にアナリティクスのデータがスプレッドシートに反映されるようになりました。\nまとめ Hugoで人気の記事を表示するには\n Googleアナリティクスの連携 スプレッドシートを使ってjsonを作成  上記の2つを使うことで簡単に導入可能です。\nHugoを使って人気の記事を作成するにはサイトや投稿を公開した際になりますが、GitHub Actionsなどを使えばcron処理で定期的に再構築をかけることが可能なので、数十分おきに人気の記事を更新したり、スプレッドシートとgasのレン系の際にjsonを作成したので、javascriptでjsonを読み取って表示するといったことも可能です。\nソース 前回と今回で作成したソースになります。\nGASとスプレッドシートを使ってHugoに人気の記事を表示する function getData(sheetName) { const sheet = SpreadsheetApp.openById(\u0026#34;シートID\u0026#34;).getSheetByName(sheetName); const rows = sheet.getDataRange().getValues(); const keys = rows.splice(0, 1)[0]; return rows.map(row =\u0026gt; { let obj = {}; row.map((item, index) =\u0026gt; obj[keys[index]] = item); return obj; }); } function doGet(e) { let data = getData(e.parameter.sheetname); return ContentService.createTextOutput(JSON.stringify(data, null, 2)).setMimeType(ContentService.MimeType.JSON); } function getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function getGoogleAnalytics(name) { const id = \u0026#34;ga:ビューID\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } function all() { setDay(); setMonth(); setYear(); } Hugoで人気の記事を表示する \u0026lt;aside class=\u0026#34;widget archives sidearticle-contents--wrapper\u0026#34; id=\u0026#34;popular-articles--month\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contents-area\u0026#34;\u0026gt; \u0026lt;header\u0026gt;\u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;人気の記事（1ヶ月以内）\u0026lt;/h2\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;sidearticle-contents\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex article-list--tile\u0026#34;\u0026gt; {{ $page := .Site.Pages }} {{ range first .Site.Params.widgets.populerArticles.limit $json }} {{ $article := index (where $page \u0026#34;.RelPermalink\u0026#34; \u0026#34;eq\u0026#34; .link ) 0 }} {{ if $article }} \u0026lt;article\u0026gt; \u0026lt;h3 class=\u0026#34;article-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ .context.RelPermalink }}\u0026#34;\u0026gt;{{- .context.Title -}}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;/article\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; 書籍の紹介  Googleアナリティクス プロフェッショナル　～分析・施策のアイデアを生む最強リファレンス  ウェブ制作者から、マーケター、ウェブアナリストまで必携の1冊 「Googleアナリティクスはどこへ向かうのか?進化し続けるツールのポテンシャルを最大限に引き出したときに、新しい分析や施策のアイディアが生まれる」\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Google Apps Script目的別リファレンス 実践サンプルコード付き Excelのマクロに似た「スクリプト」を書けば、Gmailや「スプレッドシート」などのGoogleサービスを更に効率的に、思うように使えます。そのスクリプトを書いて実行するプログラミング環境が、Google Apps Script(GAS)。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用 ","date":"2022-01-07T11:54:15+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/analytics_huc3037b2e6dc6703167c8466692625b0d_86753_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/","title":"GASとアナリティクスを使って、Hugoに人気記事を表示させる - 簡単にできるHugoで人気の記事を表示する方法 #2"},{"content":"はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな目的に使用できます。したがって、bashプログラミングの基本に関する知識はすべてのLinuxユーザーにとって重要です。この記事は、bashプログラミングの基本的な考え方を理解するのに役立ちます。ここでは、bashスクリプトの一般的な操作のほとんどを、非常に簡単な例で説明します。\nこの記事では、bashプログラミングの次のトピックについて説明します。\nHello World はじめてのbashコマンド「echo」\nターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, World」になります。\n$ echo \u0026quot;Hello, World\u0026quot; Hello, World $ はじめてのbashスクリプト「vim」\n$ vim HelloWorld.sh ＜空のvim HelloWorld.sh が開きます＞ vimで開いたHelloWorld.shを編集します。\n#!/bin/bash  echo \u0026#34;Hello World\u0026#34;; はじめての実行権限「chmod」\nbashファイルは2つの方法で実行できます。\n１．bashコマンドを使用する方法、\n２．bashファイルに実行権限を設定し、ファイルを実行する方法\n一つ目の方法「bashコマンドを使用する」\n$ bash HelloWorld.sh もう一つの方法「chmodで実行権限を付与する」\n# +x で実行権限を付与 $ chmod +x HelloWorld.sh # ドット　スラッシュをつけて実行 $ ./HelloWorld.sh 考え方ですが、bashコマンドで実行する場合のメリットは、ファイルに闇雲に実行権限を与える必要がないことです。実行権限を与える方法は、一般的ではありますが注意も必要です。\nchmod の実行権限には +x で実行権限を付与する方法の他、0755 などの数字で付与する場合もあります。\nこれらをパーミッションと言います。\nパーミッションの確認\nターミナルのコマンドでカレントディレクトリ内のファイルやディレクトリの情報を確認します。\n$ls -l 上記のコマンドを実行すると、以下のような一覧が表示されるかと思います。\n-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt drwxr-xr-x 6 user group 20480 1月 1 00:00 ダウンロード パーミッションの読み方\n「-rw-r\u0026ndash;r\u0026ndash;」や「drwxr-xr-x」の先頭の謎の10文字についてですが、\n最初の１文字目はファイル種別を表しています。\n-rw-r\u0026ndash;r\u0026ndash;\n 種別意味 -ファイル dディレクトリ lシンボリックリンク  2文字目から4文字目はファイルの所有者に対する権限を表し、\n5文字目から7文字目はファイルの所有グループに対する権限を表し、\n8文字目から10文字目はその他に対する権限を表しています\n上記から-rw-r\u0026ndash;r\u0026ndash;は、\n「ファイル種別」が「ファイル」であり、\n「所有者」に「読み取り」と「書き込み」の権限があり、\n「所有グループ」に「読み取り」の権限があり、\n「その他」に「読み取り」の権限があることを示しています。\ndrwxr-xr-xは、\n「ファイル種別」が「ディレクトリ」であり、\n「所有者」に「読み取り」と「書き込み」と「実行」の権限があり、\n「所有グループ」に「読み取り」と「実行」の権限があり、\n「その他」に「読み取り」と「実行」の権限があることを示しています。\nアクセス権限の変更\nアクセス権限を変更する方法について記載します。\nパーミッションの変更には chmodコマンドを使用します。\n数値で指定する\n$ ls -l　-rw-r--r-- 1 user group 9 1月 1 00:00 hoge.txt $ chmod 764 hoge.txt $ ls -l -rwxrw-r-- 1 user group 9 1月 1 00:00 hoge.txt 上記のコマンドはhoge.txtに対してパーミッションの確認→変更→確認を行っています。\n$ chmod 764 hoge.txt に関して説明していきます。\nファイルのパーミッションの変更は以下の通りコマンドを実行すれば可能です。\nchmod モード 対象ファイル名 モードの数字について\n モード(数字)モード(アルファベット)権限 4r読み取り 2w書き込み 1x実行  上記の合計値を「所有者」「所有グループ」「その他」の順で入力することでパーミッションを変更することができます。 要するに上記の「764」は 「所有者」に対して「読み取り」「書き込み」「実行」を、 「所有グループ」に対して「読み取り」「書き込み」を、 「その他」に「読み取り」を付与しています。 詳しくはこちら\nhttps://qiita.com/shisama/items/5f4c4fa768642aad9e06\necho コマンド echoコマンドの使用：\nさまざまなオプションでechoコマンドを使用できます。\n次の例では、いくつかの便利なオプションについて説明します。\nオプションなしで「echo」コマンドを使用すると、デフォルトで改行が追加されます。\n\u0026lsquo;-n\u0026rsquo;オプションは、改行なしでテキストを印刷するために使用され、'-e\u0026rsquo;オプションは、出力からバックスラッシュ文字を削除するために使用されます。\n\u0026lsquo;echo_example.sh\u0026rsquo;という名前の新しいbashファイルを作成し、次のスクリプトを追加します。\n#!/bin/bash  echo \u0026#34;改行付きのテキストの印刷\u0026#34;; echo -n \u0026#34;改行なしのテキストの印刷\u0026#34;; echo -e \u0026#34;\\n削除\\tバックスラッシュ\\t文字\\n\u0026#34;; bashコマンドでファイルを実行します。\n$ bash echo_example.sh 改行付きのテキストの印刷 改行なしのテキストの印刷 削除\tバックスラッシュ\t文字 $ コメント コメントの使用\n「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。\n\u0026lsquo;comment_example.sh\u0026rsquo;という名前の新しいファイルを作成し、1行コメント付きの次のスクリプトを追加します。\n#!/bin/bash  #2つの数値をsumに追加します ((sum=25+35)); #結果を出力します echo \u0026#34;$sum\u0026#34;; bashコマンドでファイルを実行します。\n$ bash comment_example.sh 60 $ マルチラインコメント 複数行コメントの使用\nbashではさまざまな方法で複数行コメントを使用できます。\n次の例に簡単な方法を示します。\n\u0026lsquo;multiline-comment.sh\u0026rsquo;という名前の新しいbashを作成し、次のスクリプトを追加します。\nここでは、「:」と「'」でbashで複数行コメントを実現しています。\n次のスクリプトは、5の2乗を計算します。\n#!/bin/bash  : \u0026#39; 次のスクリプトは、 数値の2乗値5を計算します。 \u0026#39; ((area=5*5)); echo \u0026#34;$area\u0026#34;; bashコマンドでファイルを実行します。\n$ bash multiline-comment.sh 25 $ while ループ whileループの使用\nwhileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成します。\nこの例では、whileループが5回繰り返されます。\ncount変数の値は、各ステップで1ずつ増加します。\ncount変数の値が5になると、whileループは終了します。\n#!/bin/bash  valid=true; count=1 while [ \u0026#34;$valid\u0026#34; ];do echo \u0026#34;$count\u0026#34;; if [ \u0026#34;$count\u0026#34; -eq 5 ];then break; fi ((count++)); done bashコマンドでファイルを実行します。\n$ bash while_example.sh 1 2 3 4 5 $ for ループ forループの使用\n基本的なforループ宣言を示します。\n\u0026lsquo;for_example.sh\u0026rsquo;という名前のファイルを作成し、forループを使用して、次のスクリプトを追加します。\nここでは、forループは10回繰り返され、変数のすべての値、counterを1行で出力します。\n#!/bin/bash  for((counter=10;counter\u0026gt;0;counter--));do echo -n \u0026#34;$counter\u0026#34;; done printf \u0026#34;\\n\u0026#34; bashコマンドでファイルを実行します。\n$ bash for_example.sh 10 9 8 7 6 5 4 3 2 1 $ 対話型入力 ユーザー入力の取得\n\u0026lsquo;read\u0026rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。\n\u0026lsquo;user_input.sh\u0026rsquo;という名前のファイルを作成し、ユーザーから入力を取得するための次のスクリプトを追加します。\nここでは、1つの文字列値がユーザーから取得され、他の文字列値を組み合わせて値が表示されます。\n#!/bin/bash  echo \u0026#34;あなたの名前を入力して下さい\u0026#34; read name echo \u0026#34;ようこそ $name. ＮＬＰへ\u0026#34; bashコマンドでファイルを実行します。\n$ bash user_input.sh あなたの名前を入力して下さい suzuki ようこそ suzuki。 ＮＬＰへ $ If 文 if文を使う\n単数、または複数の条件でif条件を使用できます。\nこのステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義されます。\n「simple_if.sh」という名前のファイルを作成し、bashでのifステートメントの使用を確認します。\nここでは、変数nに10が割り当てられています。\n$nの値が10未満の場合、出力は「1桁の数値です」になります。\nそれ以外の場合、出力は「2桁の数値です」になります。\n比較のために、ここでは「-lt」を使用しています。\n オプション意味 -eq同　じ（==） -lt小さい（＜） -gt大きい（＞）  数値を比較する場合は、「\u0026lt;」「\u0026gt;」「=」ではなく、\n-eq -lt -gt を使う必要があります。\n文字列を比較する場合は 「==」または 「!=」を使います。\n#!/bin/bash  n=10; if [ $n -lt 10 ];then echo \u0026#34;1桁の数値です\u0026#34;; else echo \u0026#34;2桁の数値です\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash simple_if.sh 2桁の数値です $ ９．and 条件を if 文で使う 2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用できます。\nandロジックを使用してifステートメントで複数の条件を定義する方法を次の例に示します。\n\u0026lsquo;\u0026amp;\u0026amp;\u0026lsquo;は、ifステートメントのandロジックを適用するために使用されます。\n\u0026lsquo;if_with_and.sh\u0026rsquo;という名前のファイルを作成して、次のコードを確認します。\nここで、ユーザー名とパスワードの変数の値はユーザーから取得され、「admin」および「secret」と比較されます。\n両方の値が一致する場合、出力は「有効なユーザー」になります。一致しない場合、出力は「無効なユーザー」になります。\n数値を比較する場合は、「」「=」ではなく、 -eq -lt -gt を使う必要があります。 文字列を比較する場合は 「==」または 「!=」を使います。  #!/bin/bash  echo \u0026#34;名前を入力して下さい\u0026#34; read username echo \u0026#34;パスワードを入力して下さい\u0026#34; read password if [[ (\u0026#34;$username\u0026#34;==\u0026#34;admin\u0026#34; \u0026amp;\u0026amp; \u0026#34;$password\u0026#34;==\u0026#34;secret\u0026#34;) ]];then echo \u0026#34;無効なユーザーです\u0026#34;; else echo \u0026#34;有効なユーザーです\u0026#34;; fi bashコマンドでファイルを実行します。\n$ bash if_with_and.sh 名前を入力して下さい suzuki パスワードを入力して下さい password 無効なユーザーです $ 書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   UNIXシェルスクリプト マスターピース132 すべてのUNIXエンジニア必携!! サーバー管理、ネットワーク管理など、現場で使えるテクニックを豊富にちりばめたシェルスクリプトサンプル集の決定版。\n知りたいことがきっと見つかる秘密の道具箱。Linux、FreeBSD、MacOS対応。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-07T10:03:12+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/","title":"ざっくりわかる「シェルスクリプト」"},{"content":"Hugoには様々な機能があり、ブログを作るにはもってこいの静的サイトジェネレータです。\n関連記事も取得できて、検索機能もある「至れり尽くせり」なジェネレータだと思います。\nしかし、1点だけどうしても重要な機能がありません。\nそれは人気記事の表示です。\n人気記事を表示させるとなると、データベースを用意したりサーバのアクセスカウントを行う必要があります。\nそんな面倒なことはしたくありませんよね？\n今回はHugoでも簡単に人気の記事を表示する方法を紹介いたします。\n必要なもの Hugoで人気記事を出すために必要なものは、\n Googleスプレッドシート Googleアナリティクス  以上です。\nそれでは実際の設定やプログラムを行っていきましょう。\nGoogleアナリティクスの設定 Googleアナリティクスをサイトに設定します。\n設定の際にはv4ではなく、v2が必要です。(2022年1月6日現在)\nv4を設定している場合は、同時にv2も設定する必要があります。\n「アカウントを作成」「アカウントの設定」をした後に、「 プロパティの設定 」で「ユニバーサル アナリティクス プロパティの作成」をONにするとv4とv2の両方でアナリティクスを設定することができます。\n ユニバーサル アナリティクス プロパティの作成 \nあとはv4とv2のコードをサイトに貼り付けるだけです。\n貼り付け方法はGoogleに書いてある通りです。\nスプレッドシートの設定 次にスプレッドシートを設定します。\nGoogleドライブで「新規」「Googleスプレッドシート」でシートを作成します。\n作成したシートに適当な名前をつけます。\nその後に、「拡張機能」の「App Script」を押して、GoogleAppScript（GAS）に移動します。\n ユニバーサル アナリティクス プロパティの作成 \nGASのプログラム 日付の取得 日付を計算するために、「daysjs」というライブラリを追加します。\nライブラリの＋をクリックして、以下を検索します。\n1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB 検索して、days.jsが表示されたら追加をします。\n day.jsライブラリの追加 \nこれで日付の検索が可能になります。\n以下が日付のプログラムです。\n今日から1日、1月、1年前なのかという切り替えが可能です。\n year: 今日から1年間の範囲 month: 今日から1ヶ月の範囲 day: 今日から1日の範囲  function getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function test() { let d = getDate(\u0026#39;day\u0026#39;); console.log(d); } ここまでをテスト実行してみましょう。\nデバッグの隣りにあるセレクトを「test」にして、「実行」を押してみます。\n \n正常に終了されれば実行ログに結果と実行完了が表示されるはずです。\nGASとGoogleアナリティクスの連携 GASとアナリティクスの連携にはビューIDが必要です。\nビューIDはv2で取得できるので、v4とv2を設定したのはこのビューIDを取得するためになります。\nGASのプログラムにGoogleアナリティクスの「アカウント」「プロパティ」「ビュー」「ビューの設定」にあるビューIDを設定します。\n設定する際は「ga:ビューID」と ga: を付ける必要があります。\n先程のプログラムの下に、下記のプログラムを記述します。\nfunction getGoogleAnalytics(name) { const id = \u0026#34;ga:[GAビューID]\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } ここでは、ページのパスをキーとしてページビューとセッション、ユーザー数を集計するようにしています。\n並び順はpageviewsの数の降順です。\n必要なデータがあれば各自で編集することをおすすめいたします。\nそして、各項目のラベルを出力するために、\nrows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); として、先頭行のデータにラベル行を追加しています。\nこの部分も各自のデータに合うようにしてください。\nアナリティクスから取得したデータはスプレッドシートのシート名に紐付けるので、\ngetGoogleAnalytics(\u0026#39;month\u0026#39;); の場合は、「month」というシートにデータを反映するということになります。\nサービスの読み込み GASとアナリティクスを連携させるために、サービスを読み込みます。\nサービスのプラスマークをクリックして、「Analytics Reporting API」を選択、追加します。\n以上でサービスの読み込みは終わりです。\n \nそれでは、実行してみましょう。\n実行 まずははスプレッドシートに「month」という名前のシートを作ります。\n \nシートができたら、再度コードエディターに戻ります。\n先程のデバッグの隣りにあるセレクト「test」を「setMonth」にして、実行を押します。\n承認を求められるので、「権限を確認」を押します。\n \n使用するアカウントをクリクで選んで、「詳細」をクリックして、「〜（安全ではないページ）に移動」をクリックします。\nすると、アクセスの許可を求められるので、「許可」を押します。\n \n実行ログに結果と実行完了が表示されるはずです。\nスプレッドシートを確認すると、アナリティクスのデータが反映されているはずです\n \nこれで月間の人気記事の取得ができました。\n同じように日、年も設定しておきましょう。\nfunction setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } まとめ まずがGASとアナリティクスの連携ができました。\n次回はこのデータを使ってHugoとアナリティクスを連携して、人気記事を表示できるようにしたいと思います。\nここまでの全プログラムは下記になります。\nfunction getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function getGoogleAnalytics(name) { const id = \u0026#34;ga:[GAビューID]\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } 書籍の紹介  1週間でGoogleアナリティクス4の基礎が学べる本 (1週間で基礎が学べるシリーズ) 大幅に改訂されたWebマーケティングツール「Googleアナリティクス4」の基礎と活用法を最前線のWebマーケッターたちがやさしく解説! 本書は、WebマーケターのためにGoogleアナリティクス4（GA4・ジーエーフォー）の基礎知識を解説した入門書です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   詳解! Google Apps Script完全入門[第2版] ~GoogleアプリケーションとGoogle Workspaceの最新プログラミングガイド 今や私たちの仕事や生活に無くてはならない存在になったGoogleサービス。これらGoogleサービスの自動化や連携を行うことで、大幅な効率化が図れます。そして、それを可能にするのがGoogle Apps Script(GAS)です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用 ","date":"2022-01-06T16:50:50+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/analytics_huc3037b2e6dc6703167c8466692625b0d_86753_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/","title":"簡単にできるHugoで人気の記事を表示する方法 #1"},{"content":"はじめに ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようというものです。\nhugo コマンドでgithub.ioディレクトリに記事を投稿する場合、以下のコマンドをたたくと思います。\n$ hugo new posts/＜ディレクトリ＞/index.md または\n$ hugo new posts/＜今日の日付＞.md 面倒なんですよね。。。\nディレクトリの指定 通常、記事毎にディレクトリを分けて、アクセスされるファイルをindex.mdにした場合は、以下の通りになりますよね。\n$ hugo new posts/＜今日の日付のディレクトリ＞/index.md ナンバリングの効用 ただ、同日に気分が乗ってきて、もう一つ記事を投稿しようとする場合は、日付の後ろに「-02」とか工夫する必要も出てきたりします。たとえば以下のように\n$ hugo new posts/＜今日の日付のディレクトリ＞-＜ナンバリング02＞/index.md 複数メンバーの投稿を区別する 複数のコラボレーターで投稿するgithub.ioの場合は、投稿者も区別したくなります。例えば\n$ hugo new posts/＜今日の日付のディレクトリ＞-＜作成者＞-＜ナンバリング02＞/index.md ようするに、シェルスクリプトを使って、以下のコマンドを実行したい訳です。\n$ hugo new posts/2022-01-06-01-suzuki/index.md 起動パラメータ と、なると、パラメータは以下の三つとなりますね。\n$today 今日の日付\n$number 記事のナンバリング\n$author 作成者\n実行イメージ # 作成者 suzuki の 01 番目の投稿記事 $ bash mkArticle.sh suzuki 01 $ hugo new posts/$today-$number-$author/index.md 気をつけるところは パラメータを省略したときの挙動 $ bash mkArticle.sh 実行した場合に、「作成者が指定されていないからやりなおしてね」というのもちょっと寂しいものがあります。指定していなければ、都度、聞いてきて欲しいものです。そこで readコマンドで作成者を尋ねてくる感じにします。\nif [ -z \u0026#34;$author\u0026#34; ]; then echo \u0026#34;ユーザー名を半角で入力\u0026#34;; read author; fi 同日ファイルの存在を確認 ２．すでに同日に一つ目の記事を投稿してある。要するに生成しようとしているファイルがすでに存在する場合の挙動です。こちらは、ファイルが存在していれば、１を応用して、別のナンバリングを指定するように尋ねてくれると良さそうです。\nwhile [ true ] ;do if [ -f \u0026#34;content/posts/$today-$number-$author/index.md\u0026#34; ]; then echo \u0026#34;$numberファイルが既に存在します。\u0026#34;; echo \u0026#34;別のナンバリングを指定して下さい 02とか03とか\u0026#34;; read number; else break; fi done ですので、ナンバリングの初期値は「01」としておいて、そのファイルが既に存在する場合は、あらためてユーザーにナンバリングを尋ねてくるという手法としました。\nif [ -z \u0026#34;$number\u0026#34; ]; then number=\u0026#34;01\u0026#34;; fi 実行方法 $ bash mkArticle.sh suzuki 01; 前述のとおり作成者、ナンバリングは省略可能です。 $ bash mkArticle.sh ソース全文 #!/bin/bash  : \u0026#39;使い方 一つ目のパラメーターに作成者を指定します 二つ目のパラメータにナンバリングを指定します 一つ目 01(未指定の場合は01） 二つ目 02 （例) $ bash mkArticle.sh suzuki 01; \u0026#39; # #作成者 無指定であれば入力を促す author=$1; #今日の日付 today=$(date \u0026#34;+%Y-%m-%d%n\u0026#34;); #今日のインデクス 一つ目の投稿であれば01 二つ目の投稿であれば02 number=\u0026#34;$2\u0026#34;; # function getParam(){ if [ -z \u0026#34;$number\u0026#34; ]; then number=\u0026#34;01\u0026#34;; fi # if [ -z \u0026#34;$author\u0026#34; ]; then echo \u0026#34;ユーザー名を半角で入力\u0026#34;; read author; fi # while [ true ] ;do if [ -f \u0026#34;content/posts/$today-$number-$author/index.md\u0026#34; ]; then echo \u0026#34;$numberファイルが既に存在します。\u0026#34;; echo \u0026#34;別のナンバリングを指定して下さい 02とか03とか\u0026#34;; read number; else break; fi done } # function execHugo(){ echo \u0026#34;\u0026#34;; echo \u0026#34;hugoコマンドを実行します\u0026#34;; echo \u0026#34;hugo new posts/$today-$number-$author/index.md\u0026#34; hugo new posts/$today-$number-$author/index.md # 処理終了 echo \u0026#34;ファイルの編集は以下の通りです。\u0026#34; echo \u0026#34;vim content/posts/$today-$number-$author/index.md;\u0026#34; } # # パラメータの取得 getParam; # hugoコマンドの実行 execHugo; exit; # おわりに 日頃、手間を掛けてコマンドを入力している場合は、シェルスクリプトを使って簡便にできる事に加え、さらにカスタマイズを加え、便利に記事投稿ができるとブログも気分もがぜん盛り上がりますね。\n書籍の紹介  [改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB\u0026#43;DB PRESS plus) 単行本（ソフトカバー） – 2017/1/20 定番の1冊『シェルスクリプト基本リファレンス』の改訂第3版。 シェルスクリプトの知識は、プログラマにとって長く役立つ知識です。 本書では、複数のプラットフォームに対応できる移植性の高いシェルスクリプト作成に主眼を置き、 基本から丁寧に解説。 第3版では最新のLinux/FreeBSD/Solarisに加え、組み込み分野等で注目度の高いBusyBoxもサポート。 合わせて、全収録スクリプトに関してWindowsおよびmacOS環境でのbashの動作確認も行い、さらなる移植性の高さを追求。 ますますパワーアップした改訂版をお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   いちばんやさしいGit\u0026amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ 実際のワークフローをイメージしながら 実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。 前半は、手元のパソコンでファイルを実際にバージョン管理しながら、 Gitの基本的な使い方を解説。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-06T14:21:51+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/","title":"シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし"},{"content":"デザイナーでもできる初めてのHugoの2回目になります。\n前回（デザイナーでもできる初めてのHugo #01）はHugoのインストールから公開の方法までを説明しました。\n今回は前回作成したページをGitHub Pagesを使って公開してみたいと思います。\nGitHub Pages用の設定ファイルを作成 GitHub PagesはGitHubにあるコンテンツを静的ページを公開する機能です。\nSSLまでついているので、非常に便利です。\n公開用のファイルは.github/workflows/gh-pages.ymlというYAML形式のファイルになります。\nname:Hugoon:push:# schedule:# - cron: \u0026#39;*/10 * * * *\u0026#39;jobs:gh-pages:runs-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2with:persist-credentials:falsesubmodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod# https://github.com/marketplace/actions/github-pages-action- name:Setupuses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GITHUB_TOKEN }}publish_branch:gh-pagesnameはGitHubでのActionsに表示される名前になります。\n今回は公開用としてgh-pagesというブランチにわけています。ここおらへんはお好みで設定して下さい。\nhugoでテーマを使っている場合はsubmodules: trueとする必要があります。\nまた、Hugoで更新日をGitの日付と合わせたい場合はfetch-depth: 0として、Gitの履歴を取得するようにしましょう。\nGitHub Pagesの設定 GitHub PagesのURLはhttps://ユーザまたは組織名.github.io/リポジトリ名となります。\nGitHubでリポジトリを作成する際に「ユーザまたは組織名.github.io」とすると「https://ユーザまたは組織名.github.io」とすることができます。\nまずは先程のファイルを含めてサイト全体をGitにアップして、gh-pagesというブランチが作られるのを待ちましょう。\nその後に、setings \u0026gt; Pages にでGitHub Pagesの設定を行います。\n GitHub Pagesの設定 \nYour GitHub Pages site is currently being built from the gh-pages branch\nにあるBranchをgh-pagesに変更します。\n設定は以上です。\nHugoの初期設定であればpublishDir: publicとなっているので、GitHub Pagesではpublicがルートディレクトリとして公開されます。\n.gitignoreに「public」を除外するようにしておきましょう。\n/public /resources 最後に設定したURLにアクセスするとサイトが確認できるはずです。\nまとめ GitHub Pagesを使えば、難しいサーバの設定などをすることなく、無料でSSL付きのサイトを公開することが可能です。\nいくつかの制限はありますが、すごく便利な機能なのでみなさんもぜひ使ってみてはいかがでしょうか。\n公開する際はパスワードなどの情報も一緒にアップしないようにしてください。\n書籍の紹介  いちばんやさしいGit\u0026amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ 実際のワークフローをイメージしながら 実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。 前半は、手元のパソコンでファイルを実際にバージョン管理しながら、 Gitの基本的な使い方を解説。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Web制作者のためのGitHubの教科書 チームの効率を最大化する共同開発ツール そろそろ「プルリ」しませんか?しくみを理解して使えば怖くない。リポジトリの作成から複数デザインの提示、「Pull Request」を使った分担作業まで、Webサイト制作を例に実践的なワークフローを身に付ける。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用 ","date":"2021-12-28T12:07:19+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings_hub5e89b620d2afe5c10cf3894738f1203_124480_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/","title":"GitHub Pagesを使って無料でSSL付きのサイトを公開"},{"content":"私のe-Statでのデータマイニングの現在の目的は以下の通りです\n大量の政府公開データの中から\n①面白そうなデータをピックアップする\n②データをわかりやすくサマライズする\n・列情報などを必要な項目に絞り込む\n・前年度比５倍とか急激な変化があった場合をピックアップできるようにする\n最終的にはこれらを自動でできるようにしたいです。\n今回は、まず①面白そうなデータをピックアップすることを目的にe-Statを見てみましょう。\nランキングページを見てみよう e-Statのトップページ（https://www.e-stat.go.jp/）の画面の下の方にランキングという欄があります。\nそのランキングの現在(2021/12/26)３位が「アイスクリーム」なんです。\n ランキング \nアイスクリームが含まれるのはどんなデータか 「アイスクリーム」は柔らかめのキーワードなので面白いデータの予感がします。\n「アイスクリーム」が含まれるデータはどんなデータなんでしょうか？\nちょっと見てみましょう。\nhttps://www.e-stat.go.jp/stat-search?page=1\u0026query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0\u0026layout=dataset\n アイスクリーム \n「アイスクリーム」が含まれるデータは7640件あるみたいです。\nちょっと多いですね。。。\n検索条件なのですが、提供分類、表題を検索　データベース、ファイル内を検索にチェックがついています。\n「検索のしかた」をみてみるとキーワードのOR検索やAND検索もできそうです。\n 検索のしかた \nちなみに検索キーワードでの絞り込みはAPI(統計表情報取得)でももちろんできます。\ncurl \u0026quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?appId=xxxxxxxxxx\u0026amp;searchWord=アイスクリーム\u0026quot; アイスクリームだと数が多すぎるので試しに「ガリガリ君」で検索してみましたが、0件でした。「ハーゲンダッツ」で検索したところ22件引っかかってきました。\n ハーゲンダッツ \n「ハーゲンダッツ」どこに出てくるのかなと思ってAPIを一通り叩いてみたのですがAPIの実行結果からは「ハーゲンダッツ」は見つけられませんでした。\nエクセル表示を見てみたところ、「銘柄」という項目に「バニラアイスクリーム，カップ入り（110mL入り），「ハーゲンダッツ バニラ」」とありました。\nどうも全国のアイスクリームの価格を「ハーゲンダッツ　バニラ」を基準に算出しているみたいです。\n excel \nちなみに、2020年だと１番安いのが長野市の221円で１番高いのが那覇市の300円でした。\n 統計表 \n単にハーゲンダッツの価格ってだけだと少しパンチ力弱いかもしれませんね。。。\n個人的には明治のスーパーカップが１位でジャンボモナカが２位でとかアイスクリーム売れ筋ランキングとかの方が楽しいのですが、政府はそこまで調べてくれないですよね。\n小売統計調査とは 小売物価統計調査はお米の価格から葬儀代まで約８００の小売価格を調査したデータ\n調査結果は、年金等の給付見直しの際の基礎資料や、公共料金の上限値を決める際の資料として、幅広く利用されているそうです。\nアイスクリームは約８００ある中の項目の一つです。\n 銘柄 \n小売物価統計調査をピックアップするとしたら、ここ数年で値段が大きく変化しているものや地域間の差が特に大きいものとかですかね。\n「小売物価統計」でgoogle検索して面白そうな記事を見てみると\n「今年のX’マスケーキは小さくなるか」という記事がありました。\nケーキにもよく使われる小麦や油量種子はとりわけ高騰が目立つ\n→\n小売物価統計調査によると、東京都区部の小売価格で、今年11月の1kgあたりの小麦価格は1年前より約20円上昇した。食用油に至っては1kgあたり約60円と大幅な値上がりで、価格が比較的安定している食品の代名詞ともなってきた鶏卵でさえ、1パックあたり約12円上昇した。\n→\nクリスマスイブにケーキを買って帰る人も多いだろうが、今年は例年と比べて値段がほとんど同じなのにサイズが小さくなっていても不思議ではない。\nこんな感じのものは自動的にピックアップできると理想的なんですけどね。\n今日のところのまとめ 自動的にピックアップするとしたら\n・柔らかめのキーワード\n・ここ数年間で値が急激に変化してるもの\n・地域間の格差が大きいもの\nですかね。データを見ていって判定項目を増やしていきたいと思います。\nその他、アイスクリームでの検索結果には「家計調査」というのもありました。\n家計の４半期での支出額の平均を出したものなのですが、アイスクリームの支出は当然夏が冬の倍くらい多い感じになってます。\nアイスクリームは当たり前ですが、その他季節によって大きく支出が違うものって何なのかは少し興味がありますね。\n毎月や四半期ごとに値があるものについては、期間によって差が大きいものはピックアップしても良いかもしれませんね。\n 家計調査 \n","date":"2021-12-26T21:54:39+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/","title":"e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？"},{"content":"今回は前回登場したデータの内容を調べてみましょう。\n「統計表情報取得」（リスト取得）APIで取得したデータをもとにe-Statのサイト（https://www.e-stat.go.jp/）からデータを見つけてみましょう。\n\u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; データを検索してみよう IDで検索できるのが一番良いのですが、キーワード検索のテキストフィールドに入力して検索してもダメでした。\nしょうが無いので、TITLE全文「形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）」で検索しましたがでダメでした。\n少し削って、「形態別国内家計最終消費支出 年度デフレータ—　前年度比」 だと４０５件。\n多すぎるので、SURVEY_DATE、OPEN_DATEを使って調査年、調査月、公開年月で絞り込むと２件に絞り込めました。\nあとはSTATISTICS_NAMEで特定できました。\n詳細ページに行ってみましょう https://www.e-stat.go.jp/stat-search/database?page=1\u0026query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20\u0026layout=dataset\u0026year=20100\u0026month=23070900\u0026open_date=202004\u0026statdisp_id=0003384123\u0026metadata=1\u0026data=1\n上段が「統計表情報取得」の内容\n 統計表情報 \n下段が「メタ情報取得」の内容見たいです。\n メタ情報取得 \nDBをクリックするとグラフが表示されました。\n グラフ \n行情報が「1981年度、1982年度、1983年度。。。」\n列情報が「家計最終消費支出（再掲）、家計最終消費支出（再掲）_居住者家計の海外での直接購入、。。。」\nなんと、APIクリックすると丁寧にクエリを表示してくれました(API仕様書とか見る必要ないですね)。\n API \nフォーマットもXML,JSON,CSVが選べますね。\n私はCSVの方が扱いやすいのでこれからはCSVでダウンロードすることにします。\nappIdがカラに空になっているので追加してcurlで叩くだけでいいですね。至れり尽くりです。\ncurl \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; \u0026quot;tab_code\u0026quot;,\u0026quot;表章項目\u0026quot;,\u0026quot;cat01_code\u0026quot;,\u0026quot;形態別国内家計最終消費支出\u0026quot;,\u0026quot;time_code\u0026quot;,\u0026quot;時間軸（年度）\u0026quot;,\u0026quot;unit\u0026quot;,\u0026quot;value\u0026quot;,\u0026quot;annotation\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;3.8\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1982100000\u0026quot;,\u0026quot;1982年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;2.3\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1983100000\u0026quot;,\u0026quot;1983年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;\u0026quot; . . . \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;17.6\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1982100000\u0026quot;,\u0026quot;1982年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;15.6\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1983100000\u0026quot;,\u0026quot;1983年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;-1.8\u0026quot;,\u0026quot;\u0026quot; データの見方は？ DBで表示させた「統計表表示」と見比べてみると\n グラフ \n\u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;3.8\u0026quot;,\u0026quot;\u0026quot; が１行目「1981年度」の１列目「家計最終消費支出（再掲）」に該当するみたいですね。\n１セル、１行のデータ構造みたいですね。\n１列目の情報がしばらく続いて、全行終わると次は２列目の情報みたいな構成だということがわかりました。\n国民経済計算って何 このデータは国民経済計算を算出したものということですが、国民経済計算ってなんでしょう？\n内閣府のサイトによると\n国民経済計算は「四半期別ＧＤＰ速報」と「国民経済計算年次推計」の２つからなっている。「四半期別ＧＤＰ速報」は速報性を重視し、ＧＤＰをはじめとする支出側系列等を、年に８回四半期別に作成・公表している。「国民経済計算年次推計」は、生産・分配・支出・資本蓄積といったフロー面や、資産・負債といったストック面も含めて、年に１回作成・公表している。\nGDPを算出するための何かみたいですね。\ngoogleの検索結果を見てみると、国や地方自治体のサイトや経済学の解説サイトがメインで、たまに今年のGDPはどうだったという記事でちょっと書かれてたりしました。\n記事の中でちょっと気になったのは、\n日本では新型コロナウイルスの影響で個人消費が落ち込んでおり、貯蓄が増加傾向にあります。内閣府の国民経済計算によると、2020年に消費されずに貯蓄に回ったお金は、一律10万円の特別定額給付金の影響もあり、35.8兆円に達しました。この額は前年の5倍の水準です。\n所得に対する貯蓄の割合を示す家計貯蓄率は13.1%と19年度（3.7%）から大きく上昇した。\n前年度から比較して急激に大きくなったという部分(5倍も！)。こういうのは是非ピックアップしたいと思いました。\ne-Statでのマイニングの目的は とわ言え「国民経済計算」全般的に堅い感じですね。。。。\n私のe-Statマイニングの目的は大量の政府公開データに埋もれている中から人の興味を引きそうな面白そうなコンテンツをピックアップしてわかりやすくサマリーを表示することなのです。\nキーワードランキングを見てみると「アイスクリーム」「身長・体重の平均値」みたいな面白そうな柔らかめのコンテンツもあるんです。\n ランキング \n次回から、\n・e-Statの森の中から面白いコンテンツを見つけよう\n・うまくサマライズして表示しよう\n興味深い列情報に絞りたい\n前年度から５倍とか急激に変化した部分をピックアップして伝えたい\nという視点からe-Statを調査していきたいと思います。\n","date":"2021-12-25T21:55:55+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/","title":"e-Statのデータの見方"},{"content":"書籍の紹介  UNIXという考え方―その設計思想と哲学 UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  あらすじ UNIX系のOSは世界で広く使われている。UNIX、Linux、FreeBSD、Solarisなど、商用、非商用を問わず最も普及したOSのひとつであろう。そしてこのOSは30年にわたって使用され続けているものでもある。なぜこれほど長い間使われてきたのか？ その秘密はUNIXに込められた数々の哲学や思想が握っている。\nそもそもUNIXはMulticsという巨大なOSの開発から生まれたものだ。あまりに巨大なMulticsはその複雑さゆえに開発は遅々として進まず、その反省からケン・トンプソンが作ったのがUNIXの初めとされる。その後デニス・リッチーら多数の開発者が携わり、UNIXは発展した。本書はこのUNIXに込められた「思想と哲学」を抽出し、数々のエピソードとともにUNIXの特徴を浮き彫りにしていく。\nたとえば本書で述べられているUNIXの発想のひとつとして「過度の対話式インタフェースを避ける」というものがある。UNIXのシステムは初心者には「不親切」なつくり、つまり親切な対話式のインタフェースはほとんどなく、ユーザーがコマンドを実行しようとするときはオプションをつける形をとっている。この形式はオプションをいちいち覚えねばならず、初心者に決してやさしくない。しかしこれはプログラムを小さく単純なものにし、他のプログラムとの結合性を高くする。そして結果としてUNIXのスケーラビリティと移植性の高さを支えることになっているのだ。このような形式で本書では9つの定理と10の小定理を掲げ、UNIXが何を重視し、何を犠牲にしてきたのかを明快に解説している。\nこのページはなんだ？ 　という前置きはよいとして、心に余裕があれば、ぜひ本書を読んでいただきたい。全てのLinux初心者必携の書だ。そして、このページは何かというと、この本のエッセンスを抜粋した「メモ」という位置づけとしてとらえて欲しい。\n　一度、本を読んで頂ければ、このメモを見ればいつでもほんの情景がフィードバックされるはずだ。とうぜん、本を読まずしてこのメモを見てもいまいちちんぷんかんぷんかとは思う。\n　ただ、エッセンスからでも読み取れることも多い。\n　解決方法は皆さんにお任せする。\n■１．小さいものは美しい 抜粋 小さなプログラムはわかりやすい 小さなプログラムは保守しやすい 小さなプログラムはシステムリソースに易しい 小さなプログラムは他のツールと組み合わせやすい 「伝統的なプログラマは、巨大なアメリカンプログラムによって、 世界中の全ての問題を一つのプログラムで解決しようとする。」 「プログラムの９０％はクズである。 ただしあらゆるものの９０％はクズである。」 パラメータが一行に収まらない メソッドが画面に収まらない コメントを読まないと何をやっているのか思い出せない lsでモジュール名が多すぎて画面の端から消えていってしまう まだ開発中なのにエラーメッセージの意味を思い出せない 整理するためにソースコードを印刷している自分に気がついた エッセンス 　「スモールイズビューティフル」 「伝統的なプログラマは、巨大なアメリカンプログラムによって、 世界中の全ての問題を一つのプログラムで解決しようとする。」 「プログラムの９０％はクズである。 ただしあらゆるものの９０％はクズである。」 ■２．一つのプログラムには一つの事をうまくやらせる 抜粋 b)入力データは特殊フォーマットが必要か。フォーマット変換プログラムがすでにシステム上にないか。 c)出力データは特殊フォーマットが必要か。通常のASCIIファイルではだめか。 d)新しいプログラムを書かずとも似たような機能を持つ他のプログラムがあるのではないか。 「一つの事をうまくやるようにプログラムを作れないのであれば、 おそらく問題をまだ完全に理解していない。」 「しのびよる多機能主義。 プログラマはいつだってプログラムを遅くする方法を見つける。」 一つの事をうまくやるようにアプリケーションを書けば、それは必然的に小さなプログラムになる。 小さなプログラムは単一機能になる傾向があり、単一機能のプログラムは小さくなる傾向がある。 エッセンス 　「わかることは分けること」 「UNIXユーザーは、自分が何をしているのかをわかっている。 何をしているのかわからないのなら、ここにいるべきではない」 「一つの事をうまくやるようにプログラムを作れないのであれば、 おそらく問題をまだ完全に理解していない。」 ■３．出来るだけ早く試作する 抜粋 　「試作によって学ぶ。早い試作はリスクを減らす。 「正しく」やっている時間などない」 「なにができるか」 むしろ重要な事は、「なにができないか」を知る事だ。」 三つのシステム １．第一のシステム 第一のシステムは正しくやっている時間などない。 第一のシステムは追い詰められた人間が作る。 第一のシステムのコンセプトは人々の想像力を刺激する。 第一のシステムは一人かせいぜい数人からなる小さなグループで作られる。 第一のシステムは高い情熱によって推進され開発は急速に進む。 第一のシステムは実に性能がよい。 ２．第二のシステム 第二のシステムは第一のシステムで証明されたアイデアを継承する。 第二のシステムは委員会が設計する。 第二のシステムは委員会によりものごとを全て公開の場で自分自身の正当化のために議論を進める。 第二のシステムは第一のシステムの成功に便乗し分け前にあずかろうとする自称専門家で作られる。 第二のシステムは自称専門家によりリポジトリ、進捗管理ツールが導入され計画は遅延する。 第二のシステムは自称専門家のプログラムにおきかえられ贅肉がつき像のようにゆっくり動く。 第二のシステムは「最初の設計のひどい欠点を見違えるように改善」され多機能となり無知が使う。 第二のシステムは三つのシステムの中で最悪のシステムである。 ３．第三のシステム 第三のシステムはこれまでのシステムへの反抗から生まれる。 第三のシステムの名前が変わり、オリジナルのアイデアはもはや常識となる。 第三のシステムは第一と第二のシステムの最良の特徴を組み合わせる。 第三のシステムは設計者にとってようやく「正しく」やる事が出来る。 第三のシステムはユーザーが実際に使用する機能しか含まれない。 第三のシステムはディスク、メモリ、CPUサイクルなど最適なバランスが実現されている。 第三のシステムは提供される性能レベルも良くバランスがとれている。 第一のシステムとして「試作」を１ナノ秒でも早く作り、 第一のシステムと第二のシステムのサイクルを反復と協調し、 第三のシステムに向かって協力しながら進んでいく。 エッセンス 　「反復と協調」 「試作によって学ぶ。早い試作はリスクを減らす。 「正しく」やっている時間などない」 「なにができるか」 むしろ重要な事は、「なにができないか」を知る事だ。」 ■４．効率より移植性 抜粋 　UNIXにおいてそれはシェルスクリプトしかない。 次のハードウェアはもっと速く走る。だからプログラムを速くするという誘惑に負けない。 わずかな速度を求めてCで書き直さない。それは時間の無駄だ。 シェルスクリプトをあれこれいじる余裕が一瞬でも生じればほとんどのプログラマは a) 新しい機能をいくつか付け加えようとする b) スクリプトそのものを洗練し、実行速度を高めようとする c) その一部、または大部分をCで書き直してパフォーマンスの向上を図ろうとする。 「最も効率の良い方法は、 ほとんどの場合「移植性」に欠ける。」 「移植か死か。優れたソフトウェアは移植され成長し、 それ以外は取り残され捨てられる。」 DQ1カートリッジ(64kb)用のコード 自分のプログラマ人生で最も効率の良い、そして移植の難しいコード」を書いた。 命令をデータとして扱い、データを命令として扱った。 走査線が画面の右端から左端に引き返すまでの間を狙って命令を実行した。 メモリ節約のためありとあらゆる技を駆使した。 こうしてできあがったコードは芸術品と言えるほど見事なものだった。 フォルクスワーゲンのビートルに２０人ほど詰め込むようなものだった。 そして保守担当者にとっては究極の悪夢でもあった。 エッセンス bashとawkとsed 「最も効率の良い方法は、 ほとんどの場合「移植性」に欠ける。」 「移植か死か。優れたソフトウェアは移植され成長し、 それ以外は取り残され捨てられる。」 ■５．出力結果はASCIIフラットファイルに保存する 抜粋 　「動かせないデータは死んだデータだ。」 出力結果はASCIIフラットファイルに保存する。 RDBを使わない。 中間ファイルをはき出さない。 エッセンス 　中間ファイルは作らない　RDBは使わない 「動かせないデータは死んだデータだ。」 ■６．ソフトウェアを梃子として使う　 抜粋 　梃子の支点をいかに自分のほうに近づける事が出来るか 独自技術症候群を避け、すでにあるものにクリエイティブな付加価値をつける 独自技術症候群は創造性を伸ばさない。 「良いプログラマはよいコードを書く。 偉大なプログラマは良いコードを借りてくる。」 エッセンス 　「良いプログラマはよいコードを書く。 偉大なプログラマは良いコードを借りてくる。」 ■７．シェルスクリプトによって梃子の効果と移植性を高める　パイプ 抜粋 　シェルスクリプトには恐ろしいほどの梃子の効果がある シェルスクリプトは梃子の降下で時間も節約する シェルスクリプトはCより移植性が高い 「熟練プログラマはシェルスクリプトを熱心に使う。 あなたもまたそうするべきだ。」 「UNIXの源流は高水準の抽象化モデル「シェルスクリプト」であり、 それは今も普遍である。」 「私は人生で二度しか奇跡を見た事がない。 一つは核融合、もう一つは複利だ 少量のものを繰り返し掛け合わせていく事で、 やがて奇跡的な規模に達する。」アインシュタイン シェルスクリプト一行はおよそ１万倍の複利を生む ```bash echo who | awk '{ print $1 ; }' | sort | uniq | sed -e \u0026quot;s/ /, /g\u0026quot; ; echo 177 who 755 awk 3411 sort 2614 uniq 302 sed 2093 ------------------------- 9.353 処理をパイプでつなぎ処理全体を一行で完結させる。 「ひとつのことをうまくやる」の良い事例だ。 function sh_func_getTitle() { TITLE=$(echo ${URLGETOPT} | \\ 　while read line ;do if echo \u0026#34;$line\u0026#34; | grep -i \u0026#34;title=\u0026#34; \u0026gt; /dev/null; then echo \u0026#34;$line\u0026#34; | \\ 　sed -e \u0026#34;s/^.*title=\\x27//g\u0026#34; \\ 　-e \u0026#34;s/\\x27.*$//g\u0026#34; \\ 　-e \u0026#34;s/\\r//g\u0026#34; \\ 　-e \u0026#34;s/\u0026lt;[^\u0026gt;]*\u0026gt;//g\u0026#34; \\ 　-e \u0026#34;s/^[●○■□△▽]//g\u0026#34;; fi done); } エッセンス 　「私は人生で二度しか奇跡を見た事がない。 一つは核融合、もう一つは複利だ 少量のものを繰り返し掛け合わせていく事で、 やがて奇跡的な規模に達する。」 ■８．全てのプログラムをフィルタとして設計する 抜粋 　メソッド間の入力をstdin、出力はstdoutを使用する\nオンメモリでコマンドフィルタとして稼働する。\nfunction trim(){ if [ -p /dev/stdin ]; then cat - ; else echo -n ; fi | sed -e \u0026#39;s/^ *//g\u0026#39; -e \u0026#39;s/ *$//g\u0026#39; } 実行結果 echo \u0026#34; ほげ \u0026#34; | trim ; ほげ 　以下でも良い。　function trim(){ awk \u0026#39;{ print $1; }\u0026#39; | sed -e \u0026#39;s/^ *//g\u0026#39; -e \u0026#39;s/ *$//g\u0026#39; \u0026lt;/dev/stdin } 実行結果 echo \u0026#34; ほげ \u0026#34; | trim ; ほげ エッセンス メソッド間の入力をstdin、出力はstdoutを使用する ■９．並行して考える 抜粋 　並列処理が可能なメソッドを積極的に書く\nメソッドの並列処理 1 #!/bin/bash 2 cmd() { 3 echo \u0026#34;Hello, $1!\u0026#34;; 4 } 5 function sh_xargs(){ 6 export -f cmd 7 yes | head -1000 | xargs -n1 -P4 -I % bash -c \u0026#34;cmd %\u0026#34; 8 } 9 sh_xargs ; エッセンス 　並列処理が可能なメソッドを積極的に書く ■１０．木を守る 抜粋 　UNIXユーザーは紙のドキュメントを忌み嫌う。不要なドキュメントを印刷して整理する事はしない。 ソースコードが実体であり、高水準のドキュメントとなるようプログラムする。 エッセンス 　UNIXはドキュメントを忌み嫌う ","date":"2021-12-25T09:25:50+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/","title":"「UNIXという考え方―その設計思想と哲学」　メモ"},{"content":"知識ゼロからのe-Statマイニング\n日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-Statという日本の統計が閲覧できる政府統計ポータルサイトを発見しました。\nアイスの売り上げから子供の平均身長まで大量の統計資料が公開されており、しかもAPIまであるすごいサイトです。 このe-Statをマイニングしてみようと思います。\nまずはAPIを叩くところまでやってみます。\nまずはアプリケーションIDを取得しよう APIを叩くにはアプリケーションIDが必要です。\nまずはアプリケーションIDを取得しましょう。\nアプリケーションIDを取得するにはユーザー登録が必要です。以下のURLから手順に従ってユーザー登録してください。\nhttps://www.e-stat.go.jp/mypage/user/preregister\nアプリケーションIDはログイン後マイページ内のAPI機能(アプリケーションID発行)で取得できます。\nhttps://www.e-stat.go.jp/mypage/view/api\n入力項目は名称、URL、概要の３つです。\n名称、概要は適当で大丈夫です。\nURLは、http://localhostだと私はダメだったのでこのサイトのURLを設定しました。\n発行ボタンを押すとappIdにアプリケーションIDが払い出されます。\nAPIを叩いてみよう APIの仕様は以下のURLに記載されています。\nhttps://www.e-stat.go.jp/api/api-info/e-stat-manual3-0\n難しいです。\nなんとなく、「統計表情報取得」でリストを取得して、「メタ情報取得」「統計データ取得」で個別のデータを取得する感じでしょうか？\nまずは叩いてみます。\n統計表情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=xxxxxxxxx\u0026amp;lang=J\u0026amp;searchKind=\u0026amp;searchWord=\u0026quot; \u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; LIST_INF idの「0003384123」」が個別データのidみたいです。これを使ってメタ情報取得、統計情報取得を呼び出します。\n##メタ情報取得\ncurl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=xxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_META_INFO xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetMetaInfo.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:35:07.926+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;METADATA_INF\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;CLASS_INF\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;tab\u0026quot; name=\u0026quot;表章項目\u0026quot; description=\u0026quot;Excelの書式設定で統計表の数値を\u0026amp;quot;-0.0\u0026amp;quot;としている場合、データベース上\u0026amp;quot;0.0\u0026amp;quot;として収録されているため、Excel統計表の数値とは必ずしも一致しない。\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;前年度比\u0026quot; level=\u0026quot;\u0026quot; unit=\u0026quot;％\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;cat01\u0026quot; name=\u0026quot;形態別国内家計最終消費支出\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;11\u0026quot; name=\u0026quot;家計最終消費支出（再掲）\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;12\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;13\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_（控除）非居住者家計の国内での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;14\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;15\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;16\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_半耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_非耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;18\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_サービス\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;time\u0026quot; name=\u0026quot;時間軸（年度）\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;1981100000\u0026quot; name=\u0026quot;1981年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1982100000\u0026quot; name=\u0026quot;1982年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1983100000\u0026quot; name=\u0026quot;1983年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1984100000\u0026quot; name=\u0026quot;1984年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1985100000\u0026quot; name=\u0026quot;1985年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1986100000\u0026quot; name=\u0026quot;1986年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1987100000\u0026quot; name=\u0026quot;1987年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1988100000\u0026quot; name=\u0026quot;1988年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1989100000\u0026quot; name=\u0026quot;1989年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; 上の方がデータ内容の説明なのか？よくわかりません。\n統計情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000\u0026amp;appId=xxxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=N\u0026amp;cntGetFlg=N\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_STATS_DATA xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetStatsData.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:37:22.156+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;DATA_FORMAT\u0026gt;X\u0026lt;/DATA_FORMAT\u0026gt; \u0026lt;START_POSITION\u0026gt;1\u0026lt;/START_POSITION\u0026gt; \u0026lt;LIMIT\u0026gt;10000\u0026lt;/LIMIT\u0026gt; \u0026lt;METAGET_FLG\u0026gt;N\u0026lt;/METAGET_FLG\u0026gt; \u0026lt;CNT_GET_FLG\u0026gt;N\u0026lt;/CNT_GET_FLG\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;STATISTICAL_DATA\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;TOTAL_NUMBER\u0026gt;232\u0026lt;/TOTAL_NUMBER\u0026gt; \u0026lt;FROM_NUMBER\u0026gt;1\u0026lt;/FROM_NUMBER\u0026gt; \u0026lt;TO_NUMBER\u0026gt;232\u0026lt;/TO_NUMBER\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;DATA_INF\u0026gt; \u0026lt;NOTE char=\u0026quot;***\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;NOTE char=\u0026quot;-\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1981100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;3.8\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1982100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.3\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1983100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1984100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1985100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;1.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1986100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.1\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1987100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1988100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1989100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.5\u0026lt;/VALUE\u0026gt; VALUEが値みたいですがどういう列情報になっているのでしょうか？\nとりあえずAPIはお手軽に叩けることがわかりました。\n次回以降はデータの内容を理解していこうと思います。\n","date":"2021-12-24T18:12:54+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/","title":"知識ゼロからのe-Statマイニング"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話 【ssh/bash】ssh/Bashでサーバーへログイン・実行・ログアウトの一連自動化処理を作ってみようって話  やりたいこと sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトしてローカルに何事もなかったかのようにもどってくる最も簡単な方法ってなにかないでしょうか。\nイメージ 従来の方法\nローカルＰＣのターミナル ↓ Linuxサーバーにログイン $df $uptime などを実行 ↓ Linuxサーバーをログアウト ローカルＰＣにもどる これからつくるBash/ssh\nローカルＰＣのターミナル ↓ Linuxサーバーにログイン $df $uptime などを実行 Linuxサーバーをログアウト ↓ ローカルＰＣのターミナルにもどる わかりにくいですか？\nまず、メリットとしてサーバーでコマンドからログアウトする必要がありません。\nこれができれば、一台一台サーバーのヘルスチェックをせずとも、数十台のサーバーを\n順番に訪ね歩きファイルに出力する事も可能です。\n以下、ソースです。\n#!/usr/bin/bash ############################################## # sshでサーバーにログインして、なんらかのコマンドを # 実行しターミナルに表示、ミッション終了後、ターミ # ナルを自動的にログアウトしてローカルに何事もなか # ったかのようにもどってくる最も簡単シェルスクリプト ############################################## # # サーバーのＩＰアドレスとか SERVER=\u0026quot;centos@xx.xx.xx.xxx\u0026quot; # 実行したいコマンドを \u0026amp;\u0026amp; でつなぐ COMMAND=\u0026quot;uptime \u0026amp;\u0026amp; df -h\u0026quot;; echo \u0026quot;centosサーバーログイン\u0026quot;; # ポイントは -t です。 ssh $SERVER -t $COMMAND; echo \u0026quot;centosサーバーログアウト\u0026quot;; exit; たったこれだけですが、この工夫により多くのサーバーを\nスクリプトで一括回遊することができます。 お試しあれ。\n","date":"2021-12-24T11:55:21+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/","title":"【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法"},{"content":"hugoでscssやsassを含んだファイルををGitHubに公開、Git Actionで自動ビルドしようとした際に、見慣れないエラーが表示された\nRun hugo --minify Error: Error building site: TOCSS: failed to transform \u0026quot;scss/style.scss\u0026quot; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS. : this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information ... Total in 148 ms Error: Process completed with exit code 255. はて？なにか悪いことでもしたのだろうか。\nそれとも変な記述をしてしまったのだろうか。\nエラーの内容 こういうときは、落ち着いてエラーを見てみよう。\n大抵のことはちゃんと教えてくれているはずだ。\nCheck your Hugo installation; you need the extended version なるほど、extended を使えと行っている。\nextended とはなんだろう。\nエラーの対応 さらに落ち着いて設定ファイルを確認することをおすすめする。\n.github/workflow/gh-pages.yml\n- name:Setupuses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.87.0\u0026#39;#extended: true設定の extended が思いっきりコメントアウトされていました\nコメントを外して、再度Gitにpushしたところ、正常にビルドされて公開できました。\nまとめ scssやsassを含んだファイルをhugoをgitに公開しようとした際に、ビルドできない場合は設定を確認することをおすすめする。\n","date":"2021-12-24T09:43:41+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/af7ef3c0-44c1-4f2f-aad8-1a0664724558_huf3902e4d08fb0294f3a250034e0748e3_207097_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/","title":"SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  プログレスバー ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。\n処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。\nシェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい\n使い方 処理のループ中に以下の1行を追記します。\nprogress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; 実行手順 以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。\n$ :\u0026gt; Progress.sh $ vim Progress.sh # vimで以下のソースコードを貼り付けて保存 # ソースコードのファイルエンコードをUTF-8に変更します。 $ nkf -wLu Progress.sh \u0026gt; Progress.sh.utf8 # ファイルエンコードを変更したファイルを元のファイル名にリネームします。 $ mv Progress.sh.utf8 Progress.sh # 実行権限を付与します $ chmod +x Progress.sh # 実行 $ ./Progress.sh ソースコード #! /bin/bash  ####################################### # 進捗を表示するプログレスバー #  ####################################### # # # percent $1  # GT $2 progress(){ percent=$1; GT=$2; column=`expr 71 \\* \u0026#34;$percent\u0026#34; / $GT`; nspace=`expr 71 - \u0026#34;$column\u0026#34;`; #プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入 bar=\u0026#39;\\r[\u0026#39;; #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026#34;$column\u0026#34; ];do bar=$bar\u0026#39;=\u0026#39;; # barに=を追加 set - \u0026#34;$@\u0026#34; dummy; # $#をインクリメント done bar=$bar\u0026#39;\u0026gt;\u0026#39;; #barの先端に\u0026gt;を追加 #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026#34;$nspace\u0026#34; ]; do bar=$bar\u0026#39; \u0026#39;; set - \u0026#34;$@\u0026#34; dummy; done bar=$bar\u0026#39;]\u0026#39;$percent/$GT\u0026#39;\\c\u0026#39;; # barに]と１行分のプログレスバーを表示 echo -e \u0026#34;$bar\u0026#34;; } ####################################### # メイン処理 # set count ; MAX=100 ; #最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。 # for (( i=0; i\u0026lt;$MAX; i++)){ # ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。 progress \u0026#34;$#\u0026#34; \u0026#34;$MAX\u0026#34;; set - \u0026#34;$@\u0026#34; count ; } echo \u0026#34;\u0026#34;; # #終了 exit ; 使い方 シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。\n自作ソースの中のループ処理の関数の頭に以下を追記します。\nMAX=100; は、処理の最大値を指定します。\n処理のループ最大数が150回であれば、以下の通りに修正します。\nset count; MAX=150; forやwhileループ処理の中に以下を埋め込みます。\nprogress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; 最後にforまたはwhileループを抜けた後に\necho \u0026quot;\u0026quot;; を追加します。これだけです。\n実行結果  \n","date":"2021-12-23T16:10:20+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/","title":"【プログレスバー】Bashでプログレスバーを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。\n圧縮ファイルと実行コマンド、パラメータ一覧  拡張子 パラメータ tgz | tar.gz tar zxvf tar.Z gunzip tar.bz2 tar xvfj tar tar xvfz gz gunzip Z gunzip bz2 bunzip2 zip unzip こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。\n実行例 # 圧縮ファイルを解凍する便利な unCompコマンド $ unComp comp.tar.gz2 作成 まずファイルを作ります。ファイル名は unComp とします\n# unComp というファイルを作成 $ :\u0026gt; unComp # vim で unComp を開く $ vim unComp unCompファイルに以下の内容を貼り付ける\n#!/bin/bash # #圧縮されているファイルを解凍する # unComp を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # # cp unComp /usr/local/bin/unComp # # 実行例 # $ unComp filename(圧縮ファイル) # if [ $# -ne 1 ]; then echo \u0026quot;\u0026quot; exit ; fi # case $1 in *.tgz | *.tar.gz) tar zxvf $1 ;; *.tar.Z) gunzip $1 tar xvf $( echo \u0026quot;$1\u0026quot; | sed 's/\\.Z$//') ;; *.tar.bz2) tar xvfj $1;; *.tar) tar xvfz $1;; *.gz) gunzip $1;; *.Z) gunzip $1;; *.bz2) bunzip2 $1;; *.zip) unzip $1;; *) echo \u0026quot;ファイルの拡張子が対応していません:$1\u0026quot; esac exit ; 作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。\nwLuをつかってUTF-8に変換するとさらに便利です。\n# unComp ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu unComp \u0026gt; unComp.txt # unComp.txtをunCompにリネームします $ mv unComp.txt unComp # 作成したunCompコマンドファイルを/usr/local/bin にコピーします $ sudo unComp /usr/local/bin/ # コマンドが配置されたかを確認 $ which unComp $ /usr/local/bin/unComp 使い方 # 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する # 実行 $ unComp sample.zip 圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。\n便利ですね。\n","date":"2021-12-23T13:11:13+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/","title":"【unComp】Bashで便利なコマンドを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  必要なもの ネットワーク漢字フィルター nkf\n※macの場合、Homebrew が必要になります。\nnkf インストールの手順 まず、nkfがインストールされているかを確認します。\n$ which nkf /usr/local/bin/nkf インストールされていない場合、macの場合はbrewでインストールします。\n$ brew install nkf インストールしようとすると以下のエラーが出ることがあります\nError: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink share/man/ja/man1/nkf.1 /usr/local/share/man/ja/man1 is not writable. 権限周りを下記のコマンドを打って変更します。\nsudo chmod 775 /usr/local/share/man/ja/man1 sudo chown \u0026lt;ユーザ名\u0026gt;:admin /usr/local/share/man/ja/man1 下記のページを参考にさせていただきました\n\nコマンドを確認します。\n$ nkf -v Network Kanji Filter Version 2.1.5 (2018-12-15) Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa). Copyright (C) 1996-2018, The nkf Project. 使い方 nkfコマンドとは？\n「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。\nnkfコマンドの書式\nnkf オプション ファイル名\nUTF-8に変換する場合は、オプションに wLu をつけて変換します。\n$ nkf -wLu isofile.txt \u0026gt; utf8.txt 変換の流れ（手動編） 元ファイル moto.txt (UTF-8以外のファイルエンコード、改行コード）\n↓\n変換後のファイル ato.txt(UTF-8に変換したファイル）\n↓\n変換後のファイルをリネームする\n# UTF-8に変換 $ nkf -wLu moto.txt \u0026gt; ato.txt # 変換後のファイルを元のファイル名にリネームする $ mv ato.txt moto.txt # vimiでファイルエンコードを確認する $ vim moto.txt 面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。\n変換の流れ（自動編） # UTF-8に変換 wLu コマンドをこれから自作します $ wLu moto.txt $ vim moto.txt ← UTF-8 に変換されている！ コマンドの内容 まずファイルを作ります。ファイル名は wLu とします\n# wLu というファイルを作成 $ :\u0026gt; wLu # vim で wLu を開く $ vim wLu 以下の内容をファイルに貼り付ける\n#!/bin/bash ################################################# # パラメータで渡されたファイル名をutf8に変換する # # 使い方 # wLu UTF-8に変換したいファイル名 # wLu を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # ################################################# # filename=\u0026quot;$1\u0026quot; ; # function wLu(){ if [ -f \u0026quot;$filename\u0026quot; ]; then cat \u0026quot;$filename\u0026quot; | nkf -wLu \u0026gt; \u0026quot;$filename\u0026quot;.u ; mv \u0026quot;$filename\u0026quot;.u \u0026quot;$filename\u0026quot; ; fi } # if ! which nkf \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then echo \u0026quot;nkf がありません\u0026quot; ; echo \u0026quot;nkf をインストールして下さい\u0026quot; ; exit ; fi # if [ -z \u0026quot;$filename\u0026quot; ] ; then echo \u0026quot;第一引数にファイル名を指定して下さい\u0026quot; echo \u0026quot;実行例： wLu filename\u0026quot; ; exit ; fi # 実行 wLu ; # 終了 exit ; 作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。\n# wLu ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu wLu \u0026gt; wLu.txt # wLu.txtをwLuにリネームします $ mv wLu.txt wLu # 作成したwLuコマンドファイルを/usr/local/bin にコピーします $ sudo wLu /usr/local/bin/ # コマンドが配置されたかを確認 $ which wLu $ /usr/local/bin/wLu 使い方 # UTF-8以外のファイルエンコードファイル $ cat moto.txt $ wLu moto.txt 変換結果を一時ファイルにし、リネームする手間が省けます。\n便利ですね。\n","date":"2021-12-23T10:27:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/","title":"【wLu】Bashで便利なコマンドを作ってみようって話"},{"content":"エラーの内容 記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について\nhugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。\nStart building sites …\nTotal in 10 ms\nError: Error building site: \u0026ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1\u0026rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed\n原因 このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。\nvim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？\n対応 この場合ファイルの文字コードをUTF8に変更してみましょう。\nnkf -wLu ファイル名 \u0026gt;一時保存ファイル名; mv 一時保存ファイル名 ファイル名 一時保存した後にmvで戻したり面倒ですよね。\n面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。\nhttps://github.com/suzukiiichiro/linuxConfig/blob/master/wLu\nhugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。\n","date":"2021-12-22T21:22:23+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-03/error_hu7e39d96c0286759ff592e45a50a24444_91990_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-03/","title":"hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー"},{"content":"github pagesでもgoogle adsenseの審査に通過したい！\nということで色々先人の方達のサイトをみさせていただいたところ\ngoogle adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。\n内容はとりあえずコピペで行こう まずはコピペOKの親切な方のサイトを探します。\n内容については以下のサイトを参考にさせていただきました。\nhttp://liberty-life-blog.com/wordpress/privacy-policy/\n設定 以下のコマンドでhugoでページを作成します。\nhugo new page/privacy.md コンテンツの構成を以下のように管理しているのでpage以下に保存しました。\ncontent/posts \u0026ndash; 記事\n/page \u0026ndash; about usページなど\n/assetes \u0026ndash; 画像など\nvim content/page/privacy.md --- title: \u0026quot;Privacy\u0026quot; date: 2021-12-22T17:16:15+09:00 draft: false --- ページの内容を２個目の\u0026mdash;以下に貼り付けます\ndraft: true に変更します\nhugo ビルドします\nフッターにリンクを置こう フッターの内容を修正してプライバシーポリシーのリンクを設置します。\nthemes以下にあるファイルを直接書き換えるのではなく\nlayoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。\nlayouts/partial/footer/footer.html\u0026lt;\u0026ndash;優先順位高い\nthemes/テーマ名/layouts/partial/footer/footer.html\nlayouts/partial/footer/footer.html を新規に作成して\n以下の内容を入力\n\u0026lt;footer class=\u0026quot;site-footer\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;{{ .Site.BaseURL }}privacy/\u0026quot;\u0026gt;プライバシーポリシー\u0026lt;/a\u0026gt; \u0026lt;section class=\u0026quot;copyright\u0026quot;\u0026gt; \u0026amp;copy; {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026quot;2006\u0026quot;))) }} {{ .Site.Params.footer.since }} - {{ end }} {{ now.Format \u0026quot;2006\u0026quot; }} {{ .Site.Title }} \u0026lt;/section\u0026gt; \u0026lt;/footer\u0026gt; リンクの書き方が\n{{ .Site.BaseURL }}privacy/\nのは注意\n","date":"2021-12-22T17:40:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-02/privacy_hu6d356af4ff9900abfdb99df6dc97252e_302641_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-02/","title":"プライバシーポリシーページを設置する"},{"content":"CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。\nWordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。\n色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。\n無料で、httpsも設定できるので非常に便利です。\nHugoのインストール Hugoを使うためにはhugoをインストールする必要があります。\nインストールは簡単です。\n※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。\nHomebrew が必要になります。\nbrew install hugo 設定 hugoのインストールが終わったら、サイトを作成します。\nhugo new site ＜作成するディレクトリ＞ 色々表示されているかと思いますが、気にしないで大丈夫です。\n設定ファイル hugoの設定はTOMLという形式で記述します。\nTOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。\nその場合はconfig.tomlを削除して下さい。\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot;  baseURL: サイトの公開URL languageCode: HTMLのlang部分 title: サイトの名前  記事の投稿 記事を作成するにはコマンドを打つ必要があります\nhugo new posts/helloworld.md このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます\nテーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。\n下書きから公開へ 作成されたファイルはmarkdown形式で記述されています。\n--- title: \u0026quot;helloworld\u0026quot; date: 2021-12-22T11:23:09Z draft: true --- draft の部分が下書き状態を表しています。\ntrueにすることで公開となり表示されます。\n確認 サイトの確認を行うには\nhugoをインストールしたディレクトリで\nhugo server を実行します。\nこの場合は公開されている記事のみを表示した状態のサーバが立ち上がります。\n未公開も含めたい場合は\nhugo server -D とすることで表示できます。\n公開 公開をするにはサイト全体を構築し直す必要があります。\nhugo このコマンドでサイト全体が自動的に生成されます。\n作成されたサイトは初期状態ではpublicディレクトリに展開されます。\nconfigのpublicDirに任意のディレクトリを設定することも可能です\npublicDir = 'docs' この場合はdocsディレクトリに公開ファイルが展開されます。\n終わりに 駆け足でしたが、hugoの簡単な使い方になります。\n大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。\nみなさんもぜひ、hugoを試してみて下さい。\n","date":"2021-12-22T13:07:49+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/2021-12-22-hugo-01_hub5e89b620d2afe5c10cf3894738f1203_83896_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/","title":"デザイナーでもできる初めてのHugo #01"},{"content":"Hugoでテーマが反映されない（画面が真っ白のまま）\n$ git submodule update --init --recursive ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21/2021-12-21_hud06831bf5e2aede9b7d29f34463c4a46_63839_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21/","title":"Hugoでテーマが反映されない（画面が真っ白のまま）"},{"content":"$ hugo new posts/[ファイル名].md $ vim content/posts/2021-12-21.md draft: false にする事でドラフトを公開にすることができる\nビルドする\n$ hugo ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-01/2021-12-21-1_hubb580b3412968a99eba9faea3f838cef_148014_400x250_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-01/","title":"Hugoで記事の投稿の仕方"}]