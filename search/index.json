[{"content":"知識ゼロからのe-Statマイニング\n日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-Statという日本の統計が閲覧できる政府統計ポータルサイトを発見しました。\nアイスの売り上げから子供の平均身長まで大量の統計資料が公開されており、しかもAPIまであるすごいサイトです。 このe-Statをマイニングしてみようと思います。 まずはAPIを叩くところまでやってみます。\nまずはアプリケーションIDを取得しよう APIを叩くにはアプリケーションIDが必要です。 まずはアプリケーションIDを取得しましょう。\nアプリケーションIDを取得するにはユーザー登録が必要です。以下のURLから手順に従ってユーザー登録してください。\nhttps://www.e-stat.go.jp/mypage/user/preregister\nアプリケーションIDはログイン後マイページ内のAPI機能(アプリケーションID発行)で取得できます。\nhttps://www.e-stat.go.jp/mypage/view/api\n入力項目は名称、URL、概要の３つです。\n名称、概要は適当で大丈夫です。\nURLは、http://localhostだと私はダメだったのでこのサイトのURLを設定しました。\n発行ボタンを押すとappIdにアプリケーションIDが払い出されます。\nAPIを叩いてみよう APIの仕様は以下のURLに記載されています。\nhttps://www.e-stat.go.jp/api/api-info/e-stat-manual3-0\n難しいです。\nなんとなく、「統計表情報取得」でリストを取得して、「メタ情報取得」「統計データ取得」で個別のデータを取得する感じでしょうか？\nまずは叩いてみます。\n統計表情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=xxxxxxxxx\u0026amp;lang=J\u0026amp;searchKind=\u0026amp;searchWord=\u0026quot; \u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; LIST_INF idの「0003384123」」が個別データのidみたいです。これを使ってメタ情報取得、統計情報取得を呼び出します。\n##メタ情報取得\ncurl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=xxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_META_INFO xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetMetaInfo.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:35:07.926+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;METADATA_INF\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;CLASS_INF\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;tab\u0026quot; name=\u0026quot;表章項目\u0026quot; description=\u0026quot;Excelの書式設定で統計表の数値を\u0026amp;quot;-0.0\u0026amp;quot;としている場合、データベース上\u0026amp;quot;0.0\u0026amp;quot;として収録されているため、Excel統計表の数値とは必ずしも一致しない。\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;前年度比\u0026quot; level=\u0026quot;\u0026quot; unit=\u0026quot;％\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;cat01\u0026quot; name=\u0026quot;形態別国内家計最終消費支出\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;11\u0026quot; name=\u0026quot;家計最終消費支出（再掲）\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;12\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;13\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_（控除）非居住者家計の国内での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;14\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;15\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;16\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_半耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_非耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;18\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_サービス\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;time\u0026quot; name=\u0026quot;時間軸（年度）\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;1981100000\u0026quot; name=\u0026quot;1981年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1982100000\u0026quot; name=\u0026quot;1982年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1983100000\u0026quot; name=\u0026quot;1983年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1984100000\u0026quot; name=\u0026quot;1984年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1985100000\u0026quot; name=\u0026quot;1985年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1986100000\u0026quot; name=\u0026quot;1986年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1987100000\u0026quot; name=\u0026quot;1987年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1988100000\u0026quot; name=\u0026quot;1988年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1989100000\u0026quot; name=\u0026quot;1989年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; 上の方がデータ内容の説明なのか？よくわかりません。\n統計情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000\u0026amp;appId=xxxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=N\u0026amp;cntGetFlg=N\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_STATS_DATA xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetStatsData.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:37:22.156+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;DATA_FORMAT\u0026gt;X\u0026lt;/DATA_FORMAT\u0026gt; \u0026lt;START_POSITION\u0026gt;1\u0026lt;/START_POSITION\u0026gt; \u0026lt;LIMIT\u0026gt;10000\u0026lt;/LIMIT\u0026gt; \u0026lt;METAGET_FLG\u0026gt;N\u0026lt;/METAGET_FLG\u0026gt; \u0026lt;CNT_GET_FLG\u0026gt;N\u0026lt;/CNT_GET_FLG\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;STATISTICAL_DATA\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;TOTAL_NUMBER\u0026gt;232\u0026lt;/TOTAL_NUMBER\u0026gt; \u0026lt;FROM_NUMBER\u0026gt;1\u0026lt;/FROM_NUMBER\u0026gt; \u0026lt;TO_NUMBER\u0026gt;232\u0026lt;/TO_NUMBER\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;DATA_INF\u0026gt; \u0026lt;NOTE char=\u0026quot;***\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;NOTE char=\u0026quot;-\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1981100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;3.8\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1982100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.3\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1983100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1984100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1985100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;1.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1986100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.1\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1987100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1988100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1989100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.5\u0026lt;/VALUE\u0026gt; VALUEが値みたいですがどういう列情報になっているのでしょうか？\nとりあえずAPIはお手軽に叩けることがわかりました。\n次回以降はデータの内容を理解していこうと思います。\n","date":"2021-12-24T18:12:54+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/","title":"知識ゼロからのe-Statマイニング"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話 【ssh/bash】ssh/Bashでサーバーへログイン・実行・ログアウトの一連自動化処理を作ってみようって話  やりたいこと sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトしてローカルに何事もなかったかのようにもどってくる最も簡単な方法ってなにかないでしょうか。\nイメージ 従来の方法\nローカルＰＣのターミナル ↓ Linuxサーバーにログイン $df $uptime などを実行 ↓ Linuxサーバーをログアウト ローカルＰＣにもどる これからつくるBash/ssh\nローカルＰＣのターミナル ↓ Linuxサーバーにログイン $df $uptime などを実行 Linuxサーバーをログアウト ↓ ローカルＰＣのターミナルにもどる わかりにくいですか？ まず、メリットとしてサーバーでコマンドからログアウトする必要がありません。 これができれば、一台一台サーバーのヘルスチェックをせずとも、数十台のサーバーを 順番に訪ね歩きファイルに出力する事も可能です。\n以下、ソースです。\n#!/usr/bin/bash ############################################## # sshでサーバーにログインして、なんらかのコマンドを # 実行しターミナルに表示、ミッション終了後、ターミ # ナルを自動的にログアウトしてローカルに何事もなか # ったかのようにもどってくる最も簡単シェルスクリプト ############################################## # # サーバーのＩＰアドレスとか SERVER=\u0026quot;centos@xx.xx.xx.xxx\u0026quot; # 実行したいコマンドを \u0026amp;\u0026amp; でつなぐ COMMAND=\u0026quot;uptime \u0026amp;\u0026amp; df -h\u0026quot;; echo \u0026quot;centosサーバーログイン\u0026quot;; # ポイントは -t です。 ssh $SERVER -t $COMMAND; echo \u0026quot;centosサーバーログアウト\u0026quot;; exit; たったこれだけですが、この工夫により多くのサーバーを スクリプトで一括回遊することができます。 お試しあれ。\n","date":"2021-12-24T11:55:21+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/","title":"【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法"},{"content":"hugoでscssやsassを含んだファイルををGitHubに公開、Git Actionで自動ビルドしようとした際に、見慣れないエラーが表示された\nRun hugo --minify Error: Error building site: TOCSS: failed to transform \u0026quot;scss/style.scss\u0026quot; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS. : this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information ... Total in 148 ms Error: Process completed with exit code 255. はて？なにか悪いことでもしたのだろうか。 それとも変な記述をしてしまったのだろうか。\nエラーの内容 こういうときは、落ち着いてエラーを見てみよう。 大抵のことはちゃんと教えてくれているはずだ。\nCheck your Hugo installation; you need the extended version なるほど、extended を使えと行っている。 extended とはなんだろう。\nエラーの対応 さらに落ち着いて設定ファイルを確認することをおすすめする。 .github/workflow/gh-pages.yml\n- name: Setup uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.87.0\u0026#39; #extended: true 設定の extended が思いっきりコメントアウトされていました\nコメントを外して、再度Gitにpushしたところ、正常にビルドされて公開できました。\nまとめ scssやsassを含んだファイルをhugoをgitに公開しようとした際に、ビルドできない場合は設定を確認することをおすすめする。\n","date":"2021-12-24T09:43:41+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/af7ef3c0-44c1-4f2f-aad8-1a0664724558_huf3902e4d08fb0294f3a250034e0748e3_207097_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/","title":"SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  プログレスバー ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。 処理が進むにつれて、ジリジリとメーターが右に増えていくあれです。 シェルスクリプトでも作れないものかとチャレンジしたので参考にして下さい\n使い方 処理のループ中に以下の1行を追記します。\nprogress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; 実行手順 以下のソースコードを適当なファイル名で保存して下さい。ここではProgress.shとします。\n$ :\u0026gt; Progress.sh $ vim Progress.sh # vimで以下のソースコードを貼り付けて保存 # ソースコードのファイルエンコードをUTF-8に変更します。 $ nkf -wLu Progress.sh \u0026gt; Progress.sh.utf8 # ファイルエンコードを変更したファイルを元のファイル名にリネームします。 $ mv Progress.sh.utf8 Progress.sh # 実行権限を付与します $ chmod +x Progress.sh # 実行 $ ./Progress.sh ソースコード #! /bin/bash  ####################################### # 進捗を表示するプログレスバー #  ####################################### # # # percent $1  # GT $2 progress(){ percent=$1; GT=$2; column=`expr 71 \\* \u0026#34;$percent\u0026#34; / $GT`; nspace=`expr 71 - \u0026#34;$column\u0026#34;`; #プログレスバーのカーソルを左端に戻すリターンコードと[の文字をbarに代入 bar=\u0026#39;\\r[\u0026#39;; #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026#34;$column\u0026#34; ];do bar=$bar\u0026#39;=\u0026#39;; # barに=を追加 set - \u0026#34;$@\u0026#34; dummy; # $#をインクリメント done bar=$bar\u0026#39;\u0026gt;\u0026#39;; #barの先端に\u0026gt;を追加 #位置パラメータの数($#)を１にリセット（カウンタとして流用） set dummy ; while [ $# -le \u0026#34;$nspace\u0026#34; ]; do bar=$bar\u0026#39; \u0026#39;; set - \u0026#34;$@\u0026#34; dummy; done bar=$bar\u0026#39;]\u0026#39;$percent/$GT\u0026#39;\\c\u0026#39;; # barに]と１行分のプログレスバーを表示 echo -e \u0026#34;$bar\u0026#34;; } ####################################### # メイン処理 # set count ; MAX=100 ; #最大値を100とする。実際に掛かる処理数の最大値を入れて下さい。 # for (( i=0; i\u0026lt;$MAX; i++)){ # ループする処理に以下の一行を埋め込めばプログレスバーが表示されます。 progress \u0026#34;$#\u0026#34; \u0026#34;$MAX\u0026#34;; set - \u0026#34;$@\u0026#34; count ; } echo \u0026#34;\u0026#34;; # #終了 exit ; 使い方 シェルスクリプトで自作したなんらかの処理ファイルにprogress()関数を貼り付けます。\n自作ソースの中のループ処理の関数の頭に以下を追記します。 MAX=100; は、処理の最大値を指定します。 処理のループ最大数が150回であれば、以下の通りに修正します。\nset count; MAX=150; forやwhileループ処理の中に以下を埋め込みます。\nprogress \u0026quot;$#\u0026quot; \u0026quot;$MAX\u0026quot;; set - \u0026quot;$@\u0026quot; count ; 最後にforまたはwhileループを抜けた後に\necho \u0026quot;\u0026quot;; を追加します。これだけです。\n実行結果  \n","date":"2021-12-23T16:10:20+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/","title":"【プログレスバー】Bashでプログレスバーを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断して自動的に解凍するシェルスクリプトを作成してみます。\n圧縮ファイルと実行コマンド、パラメータ一覧  拡張子 パラメータ tgz | tar.gz tar zxvf tar.Z gunzip tar.bz2 tar xvfj tar tar xvfz gz gunzip Z gunzip bz2 bunzip2 zip unzip こうしたコマンドやパラメータを覚えておくことは大切ですが、頭の経年劣化とともに、つい思い出すことができず、Googleで検索して調べると言ったことは、往々にしてあることです。\n実行例 # 圧縮ファイルを解凍する便利な unCompコマンド $ unComp comp.tar.gz2 作成 まずファイルを作ります。ファイル名は unComp とします\n# unComp というファイルを作成 $ :\u0026gt; unComp # vim で unComp を開く $ vim unComp unCompファイルに以下の内容を貼り付ける\n#!/bin/bash # #圧縮されているファイルを解凍する # unComp を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # # cp unComp /usr/local/bin/unComp # # 実行例 # $ unComp filename(圧縮ファイル) # if [ $# -ne 1 ]; then echo \u0026quot;\u0026quot; exit ; fi # case $1 in *.tgz | *.tar.gz) tar zxvf $1 ;; *.tar.Z) gunzip $1 tar xvf $( echo \u0026quot;$1\u0026quot; | sed 's/\\.Z$//') ;; *.tar.bz2) tar xvfj $1;; *.tar) tar xvfz $1;; *.gz) gunzip $1;; *.Z) gunzip $1;; *.bz2) bunzip2 $1;; *.zip) unzip $1;; *) echo \u0026quot;ファイルの拡張子が対応していません:$1\u0026quot; esac exit ; 作成したファイルには日本語が含まれているため、unCompファイルを UTF-8に変換しておきます。 wLuをつかってUTF-8に変換するとさらに便利です。\n# unComp ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu unComp \u0026gt; unComp.txt # unComp.txtをunCompにリネームします $ mv unComp.txt unComp # 作成したunCompコマンドファイルを/usr/local/bin にコピーします $ sudo unComp /usr/local/bin/ # コマンドが配置されたかを確認 $ which unComp $ /usr/local/bin/unComp 使い方 # 圧縮ファイルの拡張子を気にせずをコマンド一発で解凍する # 実行 $ unComp sample.zip 圧縮ファイルの拡張子に併せたコマンドを思い出したり、さらにはコマンドのパラメータをGoogleで調べたりする必要が減ります。必要に応じて、ソースにコマンドやパラメータを追加すれば、さらに拡張できます。 便利ですね。\n","date":"2021-12-23T13:11:13+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/","title":"【unComp】Bashで便利なコマンドを作ってみようって話"},{"content":"関連記事  【wLu】Bashで便利なコマンドを作ってみようって話 【unComp】Bashで便利なコマンドを作ってみようって話 【プログレスバー】Bashでプログレスバーを作ってみようって話  必要なもの ネットワーク漢字フィルター nkf ※macの場合、Homebrew が必要になります。\nnkf インストールの手順 まず、nkfがインストールされているかを確認します。\n$ which nkf /usr/local/bin/nkf インストールされていない場合、macの場合はbrewでインストールします。\n$ brew install nkf インストールしようとすると以下のエラーが出ることがあります\nError: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink share/man/ja/man1/nkf.1 /usr/local/share/man/ja/man1 is not writable. 権限周りを下記のコマンドを打って変更します。\nsudo chmod 775 /usr/local/share/man/ja/man1 sudo chown \u0026lt;ユーザ名\u0026gt;:admin /usr/local/share/man/ja/man1 下記のページを参考にさせていただきました\nコマンドを確認します。\n$ nkf -v Network Kanji Filter Version 2.1.5 (2018-12-15) Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa). Copyright (C) 1996-2018, The nkf Project. 使い方 nkfコマンドとは？ 「nkf」は「Network Kanji Filter」の略で、LinuxとWindowsなど、異なるOS間でテキストデータを交換する際に問題となる文字コードと改行コードを変換するためのコマンドです。\nnkfコマンドの書式 nkf オプション ファイル名\nUTF-8に変換する場合は、オプションに wLu をつけて変換します。\n$ nkf -wLu isofile.txt \u0026gt; utf8.txt 変換の流れ（手動編） 元ファイル moto.txt (UTF-8以外のファイルエンコード、改行コード） ↓ 変換後のファイル ato.txt(UTF-8に変換したファイル） ↓ 変換後のファイルをリネームする\n# UTF-8に変換 $ nkf -wLu moto.txt \u0026gt; ato.txt # 変換後のファイルを元のファイル名にリネームする $ mv ato.txt moto.txt # vimiでファイルエンコードを確認する $ vim moto.txt 面倒ですね。ここで、一発でUTF-8に変換するコマンドを作成してみます。\n変換の流れ（自動編） # UTF-8に変換 wLu コマンドをこれから自作します $ wLu moto.txt $ vim moto.txt ← UTF-8 に変換されている！ コマンドの内容 まずファイルを作ります。ファイル名は wLu とします\n# wLu というファイルを作成 $ :\u0026gt; wLu # vim で wLu を開く $ vim wLu 以下の内容をファイルに貼り付ける\n#!/bin/bash ################################################# # パラメータで渡されたファイル名をutf8に変換する # # 使い方 # wLu UTF-8に変換したいファイル名 # wLu を /usr/local/bin/にコピーすると # 通常のコマンドとして本実行ファイルを利用する事が出来ます。 # ################################################# # filename=\u0026quot;$1\u0026quot; ; # function wLu(){ if [ -f \u0026quot;$filename\u0026quot; ]; then cat \u0026quot;$filename\u0026quot; | nkf -wLu \u0026gt; \u0026quot;$filename\u0026quot;.u ; mv \u0026quot;$filename\u0026quot;.u \u0026quot;$filename\u0026quot; ; fi } # if ! which nkf \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then echo \u0026quot;nkf がありません\u0026quot; ; echo \u0026quot;nkf をインストールして下さい\u0026quot; ; exit ; fi # if [ -z \u0026quot;$filename\u0026quot; ] ; then echo \u0026quot;第一引数にファイル名を指定して下さい\u0026quot; echo \u0026quot;実行例： wLu filename\u0026quot; ; exit ; fi # 実行 wLu ; # 終了 exit ; 作成したファイルには日本語が含まれているため、wLuファイルを UTF-8に変換しておきます。\n# wLu ファイルをnkf -wLu でUTF-8に変換 $ nkf -wLu wLu \u0026gt; wLu.txt # wLu.txtをwLuにリネームします $ mv wLu.txt wLu # 作成したwLuコマンドファイルを/usr/local/bin にコピーします $ sudo wLu /usr/local/bin/ # コマンドが配置されたかを確認 $ which wLu $ /usr/local/bin/wLu 使い方 # UTF-8以外のファイルエンコードファイル $ cat moto.txt $ wLu moto.txt 変換結果を一時ファイルにし、リネームする手間が省けます。 便利ですね。\n","date":"2021-12-23T10:27:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/2021-12-23-bash_hu3f93fa107d6ed2da910fda4d86a52d3c_22108_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/","title":"【wLu】Bashで便利なコマンドを作ってみようって話"},{"content":"エラーの内容 記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について\nhugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。\nStart building sites … Total in 10 ms Error: Error building site: \u0026ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1\u0026rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed\n原因 このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。\nvim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？\n対応 この場合ファイルの文字コードをUTF8に変更してみましょう。\nnkf -wLu ファイル名 \u0026gt;一時保存ファイル名; mv 一時保存ファイル名 ファイル名 一時保存した後にmvで戻したり面倒ですよね。 面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。\nhttps://github.com/suzukiiichiro/linuxConfig/blob/master/wLu\nhugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。\n","date":"2021-12-22T21:22:23+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-03/error_hu7e39d96c0286759ff592e45a50a24444_91990_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-03/","title":"hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー"},{"content":"github pagesでもgoogle adsenseの審査に通過したい！\nということで色々先人の方達のサイトをみさせていただいたところ\ngoogle adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。\n内容はとりあえずコピペで行こう まずはコピペOKの親切な方のサイトを探します。\n内容については以下のサイトを参考にさせていただきました。\nhttp://liberty-life-blog.com/wordpress/privacy-policy/\n設定 以下のコマンドでhugoでページを作成します。\nhugo new page/privacy.md コンテンツの構成を以下のように管理しているのでpage以下に保存しました。 content/posts \u0026ndash; 記事 /page \u0026ndash; about usページなど /assetes \u0026ndash; 画像など\nvim content/page/privacy.md --- title: \u0026quot;Privacy\u0026quot; date: 2021-12-22T17:16:15+09:00 draft: false --- ページの内容を２個目の\u0026mdash;以下に貼り付けます draft: true に変更します\nhugo ビルドします\nフッターにリンクを置こう フッターの内容を修正してプライバシーポリシーのリンクを設置します。\nthemes以下にあるファイルを直接書き換えるのではなく\nlayoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。\nlayouts/partial/footer/footer.html\u0026lt;\u0026ndash;優先順位高い\nthemes/テーマ名/layouts/partial/footer/footer.html\nlayouts/partial/footer/footer.html を新規に作成して 以下の内容を入力\n\u0026lt;footer class=\u0026quot;site-footer\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;{{ .Site.BaseURL }}privacy/\u0026quot;\u0026gt;プライバシーポリシー\u0026lt;/a\u0026gt; \u0026lt;section class=\u0026quot;copyright\u0026quot;\u0026gt; \u0026amp;copy; {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026quot;2006\u0026quot;))) }} {{ .Site.Params.footer.since }} - {{ end }} {{ now.Format \u0026quot;2006\u0026quot; }} {{ .Site.Title }} \u0026lt;/section\u0026gt; \u0026lt;/footer\u0026gt; リンクの書き方が\n{{ .Site.BaseURL }}privacy/\nのは注意\n","date":"2021-12-22T17:40:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-02/privacy_hu6d356af4ff9900abfdb99df6dc97252e_302641_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-02/","title":"プライバシーポリシーページを設置する"},{"content":"CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。 Wordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。 色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。 無料で、httpsも設定できるので非常に便利です。\nHugoのインストール Hugoを使うためにはhugoをインストールする必要があります。 インストールは簡単です。\n※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。Homebrew が必要になります。\nbrew install hugo 設定 hugoのインストールが終わったら、サイトを作成します。\nhugo new site ＜作成するディレクトリ＞ 色々表示されているかと思いますが、気にしないで大丈夫です。\n設定ファイル hugoの設定はTOMLという形式で記述します。 TOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。 その場合はconfig.tomlを削除して下さい。\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot;  baseURL: サイトの公開URL languageCode: HTMLのlang部分 title: サイトの名前  記事の投稿 記事を作成するにはコマンドを打つ必要があります\nhugo new posts/helloworld.md このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます テーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。\n下書きから公開へ 作成されたファイルはmarkdown形式で記述されています。\n--- title: \u0026quot;helloworld\u0026quot; date: 2021-12-22T11:23:09Z draft: true --- draft の部分が下書き状態を表しています。 trueにすることで公開となり表示されます。\n確認 サイトの確認を行うには hugoをインストールしたディレクトリで\nhugo server を実行します。 この場合は公開されている記事のみを表示した状態のサーバが立ち上がります。 未公開も含めたい場合は\nhugo server -D とすることで表示できます。\n公開 公開をするにはサイト全体を構築し直す必要があります。\nhugo このコマンドでサイト全体が自動的に生成されます。 作成されたサイトは初期状態ではpublicディレクトリに展開されます。 configのpublicDirに任意のディレクトリを設定することも可能です\npublicDir = 'docs' この場合はdocsディレクトリに公開ファイルが展開されます。\n終わりに 駆け足でしたが、hugoの簡単な使い方になります。 大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。 みなさんもぜひ、hugoを試してみて下さい。\n","date":"2021-12-22T13:07:49+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/2021-12-22-hugo-01_hub5e89b620d2afe5c10cf3894738f1203_83896_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/","title":"デザイナーでもできる初めてのHugo #01"},{"content":"Hugoでテーマが反映されない（画面が真っ白のまま）\n$ git submodule update --init --recursive ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21/2021-12-21_hud06831bf5e2aede9b7d29f34463c4a46_63839_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21/","title":"Hugoでテーマが反映されない（画面が真っ白のまま）"},{"content":"$ hugo new posts/[ファイル名].md $ vim content/posts/2021-12-21.md draft: false にする事でドラフトを公開にすることができる\nビルドする\n$ hugo ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-01/2021-12-21-1_hubb580b3412968a99eba9faea3f838cef_148014_120x120_fill_q75_box_smart1.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-01/","title":"Hugoで記事の投稿の仕方"}]