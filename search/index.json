[{"content":"グローバル変数 今回は、前回からの引き続きでブルートフォース力任せ探索のプログラムの詳細部分を説明します。\nプログラムのソースは以下のURLをご覧ください。\nhttps://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py01_nqueen.py\nまず、グローバル変数を見ていきましょう。\n417~420行目で設定しています。\n417行目 MAX、418行目 SIZEでNの数を指定します。\nプログラムは8ですが、動作を説明するために4に変更してみてください。\nMAX = 4 SIZE = 4 以降はN=4の問題として説明します。\n419行目 ABOARDという配列を宣言しクイーンを置いていきます。\nABOARD = [0 for i in range(MAX)]で4個の要素を0で初期化しています。\nABOARD = [0,0,0,0] と同じです。\nABOARD[0]は1行目のクイーンを置く位置です0から3までの数字が入ります。\nABOARD[0]が3だと右から4番目にクイーンを置く感じになります。\n420行目 COUNT=0 でCOUNTを初期化しています。\nnqueenメソッド グローバル変数の宣言が終わったら441行目でnqueenメソッドが呼び出されます。\n439行目でnqueenメソッドを再帰的に呼び出しているのが最も特徴的です。\n全体の動作については次の「再帰について」で図を交えて説明しますが前提として各行が何をしているか押さえましょう。\n global ABOARD 433行目で global ABOARDとして変数宣言しています。\n関数内でグローバル変数に値を代入したい場合は、変数宣言時にglobalをつける必要があります。\nglobalをつけないとローカル変数として扱われます。\nちなみに、私は試しに433行目を削除して実行してみたのですがエラーになりました。\n if row is SIZE: printout() 434行目 if row is SIZE: はrowイコールSIZEという意味です。\nif row == SIZE: としても今回は同じ動きになります。\n434-435行でやっていることは434行目のif文で最終行までクイーンを置き終わっているかどうかを判定し置き終わっていたらprintoutメソッドを呼び出してCOUNT数と各行のクイーンの設置場所を出力します。\n for i in range(SIZE) 437行目 for i in range(SIZE) は0からスタートしてSIZEの回数分0,1,2,3と1ずつインクリメントしながらfor文を回します。\nやっていることは各行にクイーンを設置する場所を右から左に1個ずつずらしています。1番左端までいったらfor文を抜けます。\n ABOARD[row] = i 438行目のABOARD[row]=iでクイーンを設置しています。\nrowは行を意味します。0からスタートして0,1,2,3まであります。\n例えば、0だと1行目、3だと4行目となります。\niはクイーンを設置する列になります。\n0からスタートして0,1,2,3まであります。\n例えば、0だと右から1列目、3だと右から4列目となります。\n例えばABOARD[2]=3 の場合は\n3行目は右から4列目にクイーンを置くことになります。\n nqueen(row+1) 439行目のnqueen(row+1)で再帰的にnqueenメソッドを呼び出しています。\nやっていることは次の行への移動です。\n再帰の動きについて 再帰の基本的な動作で押さえたいのは以下の2つです。\n・再帰を呼び出した時の動作\n通常のメソッド呼び出しと同じです。メソッドの先頭に移動します。引数に渡された値が反映されます。\n・再帰から抜ける時の動作\n再帰から抜けると1階層前に戻り再帰を呼び出した場所の次の行に移動します。\n変数の状態は再帰を呼び出す直前の状態に戻ります。\n再帰の呼び出しが実際にどういう動きになっているかは頭で考えても難しいので図を見ながら説明します。\n444行目でnqueenを0を渡して呼び出します(1階層目)。\n432行目からスタートして\nrow=0なので436行目のelse:に行きそのまま437行目のfor文に入ります\n最初のfor文なのでi=0です。\nrow=0なので\nABOARD[0]=0\nで\n1行目の右端にクイーンを置きます。\n 図 \n439行目で再帰的にnqueenを呼び出します。\nrow=0 row+1=1なので\nnqueenを引数1を渡して呼び出します(2階層目)\n432行目からスタートして\nrow=1なので436行目のelse:に行きそのまま437行目のfor文に入ります\n最初のfor文なのでi=0です。\nさっきもfor文が出てきましたが再帰は階層ごとにローカル変数を別に考える必要があります。\nrow=1なので\nABOARD[1]=0\nで\n2行目の右端にクイーンを置きます。\n 図 \n439行目で再帰的にnqueenを引数2を渡して呼び出します(3階層目)。\n同様にfor文に入り、i=0 row=2なので\nABOARD[2]=0\nで\n3行目の右端にクイーンを置きます。\n 図 \n439行目で再帰的にnqueenを引数3を渡して呼び出します(4階層目)。\n同様にfor文に入り、i=0 row=3なので\nABOARD[3]=0\nで\n4行目の右端にクイーンを置きます。\n 図 \n439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。\nrow=4なのでif row is SIZE:でprintout()メソッドを呼び出してCOUNTと各行のクイーンの位置を出力します。\nprintout()後再帰から抜けて4階層目の439行目の後ろに移動します。\n変数は再帰を呼び出す直前のものに戻るのでrowは3 iは0になります。\nfor文の中にあるのでiを1インクリメントしてiは1になり次のfor文に移動します。\n_\nABOARD[3]=1\nで\n4行目の右から2番目にクイーンを置きます。\n 図 \n439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。\nrow=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。\nfor文の中にあるのでiを1インクリメントしてiは2になり次のfor文に移動します。\n_\nABOARD[3]=2\nで\n4行目の右から3番目にクイーンを置きます。\n 図 \n439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。\nrow=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。\nfor文の中にあるのでiを1インクリメントしてiは3になり次のfor文に移動します。\n_\nABOARD[3]=3\nで\n4行目の右から4番目にクイーンを置きます。\n 図 \n439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。\nrow=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。\nfor文でiを1インクリメントすると4ですがrange(4)だと0,1,2,3までなのでここでfor文を抜けます。\nfor文を抜けると439行目には移動しないので再帰から抜けて3階層目の439行目に移動します。\n3階層目ではrow=2 iは0です。\nfor文の中にあるのでiを1インクリメントしてiは1になり次のfor文に移動します。\nABOARD[2]=1\n 図 \n439行目で再帰的にnqueenを引数3を渡して呼び出します(4階層目)。\nrow=3なので436行目のelse:に行きそのまま437行目のfor文に入ります\n最初のfor文なのでi=0です。\nABOARD[3]=0\n 図 \n439行目で再帰的にnqueenを引数4を渡して呼び出します(5階層目)。\nrow=4 なのでprintout()して再帰から抜けて4階層目の439行目の後ろに移動します。\nという感じで下の階層からfor文でぐるぐる回転しながらうごいてゆきます。\n","date":"2022-02-01T15:55:55+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/chess_hub5f46a8b8fc9e255d0122f98accfe16c_94129_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-31-01-ani/","title":"pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（２）"},{"content":"Javascript で重い処理を書く際や for や while などのループを記述する際に気をつけないといけないのがUIロックです。\n特に重い処理を行うと、js の処理に力を使ってしまって画面が固まってUIなどの操作性が格段に落ちてしまい、ブラウザなどからは応答に時間がかかっておりますといったアラートが表示される原因になります。\nそういったときは Worker を使って重い処理を別タスクとして実行することで、画面上の処理と、重い処理を分けることができ、その結果画面をロックすることなく表示させることが可能になります。\n今回はその方法を説明していきます。\nUIをロックしてしまうループ処理 まずは画面をロックしてしまうような記述です。\n下記のような HTML があったとしましょう。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; #animation:before { content: \u0026#34;\u0026#34;; width: 5em; height: 5em; display: block; border: 2px solid black; margin: 50px auto; } @keyframes rotation { 0%{ transform: rotate(0);} 100%{ transform: rotate(360deg); } } .run #animation:before { animation: 2s linear infinite rotation; } .run button { background-color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;animation\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onClick=\u0026#34;run()\u0026#34;\u0026gt;Run\u0026lt;/button\u0026gt; \u0026lt;h1 id=\u0026#34;counter\u0026#34;\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h2 id=\u0026#34;time\u0026#34;\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; この HTML は counter 部分 に文字を出力できるようにしてあります。\nそして、実行時間を time 部分に出力できるようにしてあります。\nそれでは、ここに for 文を使って、文字を追加していってみます。\nconst run = () =\u0026gt; { document.body.classList.add(\u0026#39;run\u0026#39;); const start = Date.now(); const elem = document.querySelector(\u0026#34;#counter\u0026#34;); for(let i = 0; i \u0026lt; 100000; i++) { elem.textContent = i; } document.querySelector(\u0026#34;#time\u0026#34;).textContent = Date.now() - start; document.body.classList.remove(\u0026#39;run\u0026#39;); }; 上のようなfor文で記述したスクリプトを作ってみました。\niの値をcounterに反映していくだけのものです。\nまずはiの最大値を 100000 くらいで実行してみましょう。\n実行したところ、999999 と表示され、time部分の処理は 569 ミリ秒ということになります。\n \nここで注目してほしいのが、counter の文字を変化させているにも関わらず、その文字が反映されていないという点です。\nChrome の Developper tool で確認しても、変化しているようではありますが、画面上では反映されていません。\n重い処理を行う場合をフロントで行うと、 UX の低下につながってしまいます。\nそこで使うのが、 Worker 処理ということになります。\nWorkerとは Worker とはバックグランド、つまり、裏の方で処理を行ってその結果をフロントに返却するということができる仕組みになります。\nフロントで処理を行わないので、画面ロックを発生させることなく重い処理を実行できます。\nWorker を使用するには実行したいファイル名を指定して呼びします。\nそして、対象のワーカーに値などを postMessage で値を渡します。\npostMessage 部分は配列や連想配列のデータでも構いません。\nそして、対象のWorker側でpostされたデータを受信するように設定します。\n受信の際はフロントであれば worker.addEventListener('message', (e) =\u0026gt; {}) を、Workerであれば self.addEventListener('message', (e) =\u0026gt; {}) を使用します。\n処理内容を返却する際は、先ほどと同じように postMessage を使います。\nconst worker = new Worker(this.fileName); const run = () =\u0026gt; { worker.postMessage(\u0026#34;run\u0026#34;); }; worker.addEventListener(\u0026#39;message\u0026#39;, (e) =\u0026gt; { console.log(e.data); }, false); self.addEventListener(\u0026#39;message\u0026#39;, (e) =\u0026gt; { //処理内容  //処理結果を送信  self.postMessage(e.data); }, false); UIをロックしないで行えるループ それでは、先ほどロックしてしまったjsをworkerにしてみましょう。\nconst worker = new Worker(\u0026#34;worker.js\u0026#34;); const run = () =\u0026gt; { document.body.classList.add(\u0026#39;run\u0026#39;); const start = Date.now(); const elem = document.querySelector(\u0026#34;#counter\u0026#34;); worker.postMessage(\u0026#34;run\u0026#34;); worker.addEventListener(\u0026#39;message\u0026#39;, (e) =\u0026gt; { if(e.data.mode === \u0026#39;end\u0026#39;) { document.querySelector(\u0026#34;#time\u0026#34;).textContent = Date.now() - start; document.body.classList.remove(\u0026#39;run\u0026#39;); } else { document.querySelector(\u0026#34;#counter\u0026#34;).textContent = e.data.value; } console.log(); }, false); }; 続いて、Worker部分の処理になります。\nworker部分ではフロントの worker_main.js から実行されたタイミングで動作を開始して、ループの値をフロントに戻すようにしてあります。\nループが終了すると、mode: end と終わったことを通知するようにしました。\nself.addEventListener(\u0026#39;message\u0026#39;, (e) =\u0026gt; { //処理内容  for(let i = 0; i \u0026lt; 100000; i++) { console.log(i); self.postMessage({value: i}); } self.postMessage({mode: \u0026#39;end\u0026#39;}); //処理結果を送信 }, false); それでは実行してみましょう。\n \n実行すると、先ほどと全く違うUIになっているかと思います。\n実はRunを押したタイミングで、ボタンを赤くして、上の四角が回転するようにしてありました。\nWorkerなしの処理ではJavascriptの処理が詰まってしまい、その部分の処理が正しく表示されていなかったということになります。\nsetTimeoutでもできるけど、おすすめはしない UIのロックを防ぐ方法として、setTimeoutを使う方法もあります。\nこの方法はworkerを使っていないのですが、setTimeoutを使用することで別タスクとして処理させることができます。\nconst run = () =\u0026gt; { document.body.classList.add(\u0026#39;run\u0026#39;); const start = Date.now(); const elem = document.querySelector(\u0026#34;#counter\u0026#34;); for(let i = 0; i \u0026lt; 100000; i++) { setTimeout(()=\u0026gt;{ console.log(i); elem.textContent = i; }, 0); } document.querySelector(\u0026#34;#time\u0026#34;).textContent = Date.now() - start; document.body.classList.remove(\u0026#39;run\u0026#39;); }; 数字部分は変化しますが、先程のようにアニメーションは行われません。\nforの処理が先に終了してしまうため、cssのアニメーションが一瞬で終了してしまうのです。\n \nまとめ Javascriptを使っていると思い処理も当然行う場合があります。そうしたときに、フロントで処理をしてしまうとローディングなどのアニメーションが正しく行われなかったりする原因になってしまいます。\nWorker を使って、処理を別タスクとしてやることで正しくローディングなどを表示させることが可能です。\n重い処理を行う際は、Workerを使って別タスクで行ってユーザーにストレスを与えないサイトを作っていきましょう。\nおすすめの書籍  ゲームで学ぶJavaScript入門 HTML5\u0026amp;CSSも身に付く!   「JavaScriptでココまでできる!」 中学生、高校生のための、ゲームプログラミング入門書の決定版! JavaScriptを使用したWebブラウザゲームの製作ノウハウを解説する入門書です。 Webページをまったく作ったことはないが、現在主流となっているブラウザゲームに興味があり、 「自分でもゲームプログラミングに挑戦してみたい!」と考えている初心者、とくに中・高校生に最適です。 本書では「より面白く」「見栄え良く」をモットーに、13本のサンプルゲームを紹介しています。 ゲームを作りながら、JavaScriptだけでなくHTML5やCSSといったWeb技術の基本もしっかり学習できます。 最後までラクに読めて、感覚的に仕組みを理解できるように、 「楽しさ」が感じられて「飽きさせない」ことを重視した構成になっています。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   確かな力が身につくJavaScript「超」入門 第2版   ◎ 3万部突破のベストセラーが充実のアップデート! JavaScriptをこれから始める人にも、前に挫折したことのある人にも。 手を動かしてサンプルをひとつずつ作っていくことで、知識だけでなく、 現場で活きる、応用・実践につながる基礎力が「この一冊で」身につきます。 ポイント1「サンプルが楽しい。」 よくある“勉強のためのサンプル\u0026#34;を可能な限り排除し、「こういうの見たことある! 」「こういうのが作ってみたかった! 」というような、実際に仕事に使えそうなサンプルを集めました。なので、最初の「やるぞ! 」というモチベーションを維持したまま、最後のページまで読み進めることができます。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-02-01T14:19:43+09:00","image":"https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/catch_hu76eecea6b0108d716a0248cfde205ca5_73592_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-02-01-01-wyoshi/","title":"Javascriptで画面ロックが発生する場合は、Workerを使ってみよう。"},{"content":"iPhoneやiPadなどのスマホ、タブレットは持ち運びに非常に便利です。パソコンよりも軽く、パソコンと同等の機能を備えてます。\nそうした端末を使って記事が投稿できたら、スタバやドトールなどのカフェでコーヒーを飲みながら記事を書くことができてしまいます。\n今回は、AmazonのEC2上にあるHugoのブログをiPadを使って更新して見たいと思います。\niPhoneやiPadでターミナルを使う iPhoneやiPadにも数多くの素晴らしいターミナルアプリがあります。\nその中でも私が使っているのはTermius: Terminal \u0026amp; SSH clientというアプリです。\nこのアプリはターミナルの機能を持っており、SSHでのサーバ接続も可能です。もちろんログインの際にpemファイルなどを使用することも可能です。\n基本的な機能は無料で使用できるので、まずはインストールをしてみましょう。\n初期設定 起動すると、アカウントの登録が必要かと思いますが、必要ありません。\n \n下にある「Learn more」を押して、「Continue without account」にてログイン無しで使えます。\n \n課金すると様々な機能を使えるようになるので、そういった機能でより便利に使いたい人は是非、課金してください。\n \nインストールが終わったら「New Hosts」をタプして、ログインしたいサーバを追加するか、「Hosts」メニューの右上にある「＋」ボタンを押してサーバを追加します。\nAlias には自分がわかりやすい名前をつけます。\nHostname にはサーバのドメイン名やIPアドレスを入力します。\nPort はSSHを使うときのポートです。\nそして、ユーザー名とパスワードを使っている人はパスワードを入力します。\n \npemファイルを使っている人は、pemの内容をコピーして貼り付けるか、パソコンからpemを送信します。\n送信はパソコンでiPadなどを接続して、ファイルタブから贈りたいpemファイルをドラッグ・アンド・ドロップします。\n \npemファイルをiPadに送り終わったら、Keyを押して、左上の「+」「Import Key」にて先程送ったファイルを選択します。\nこれでキーが設定されました。\n \nここまで設定できたら、左上の「Save」にて保存しましょう。\n以上でサーバに接続する準備ができました。\nサーバに接続 Alias に設定した名前でアイコンが作成されているかと思います。\nそのアイコンを押すと、know hostsに登録するかどうか聞かれるので、「Continue」を押して追加します。\nうまく設定できていたらサーバに接続できると思います。\nできない場合は、アイコンを長押しして、「Edit」にて情報を正しいものに修正しましょう。\nTabはどうするの？ SSHではtabコマンドで入力の補完を設定しているケースがあるともいます。\niPadにはタブというキーがありません。さて……どうしたものでしょうか。Termius はそこもよく考えられていて、通常であれば画面をタブルタップすると「Tab」と一瞬表示されてタブキーを押したときと同様のことが行なえます。\n \nその他にも、キーボードの上にある「…」マークを押して、「ギアーアイコン」を押すと初期のキーボード上部のボタンを変更することが可能です。\n \nTabキーやコントロールキーが使えるとiPadでも十分使えますね。\nhugoで記事を書いて確認する hugoで記事を書くやり方はデザイナーでもできる初めてのHUGO #01を参照してください。\nEC2で記事を書いて、確認しようとするとある疑問を持ってしまいます。それは確認用のサーバはどうしたら良いのかということです。\n通常であれば「localhost:1313」などのURLで確認できます。しかし、EC2ではlocalhostとしてもEC2本体のアドレスではないので、確認できません。\nhugoにはIPを指定してサーバを起動する機能があります。\nhugo server --baseURL=[URL] 上記のコマンドでアクセスできるかというと、まだ駄目です。\n最終的なコマンドは\n$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート] となります。\nここで重要なのが--bind=0.0.0.0になります。\nここまできたら、ほぼほぼ確認できるようになっています。\nEC2でファイヤーウォールを設定している場合 EC2を使用している場合、ALBやELBを設定していることが多いと思います。\n先程指定したポートが空いているか確認して、空いていない場合は、EC2の設定で開けましょう。\nEC2のインバウンドルールに開けたいポートを追加します。\nセキュリティーグループを使用している場合は、「インバウンドのルールを編集」をクリックして追加します。\n \n下にある「ルールを追加」を押して、「カスタムTCP」にします。\n次に、ポート範囲に開けたいポートを入力して、CIDR ブロックにインターネットゲートウェイを指すすべての IPv4 トラフィック (0.0.0.0/0) のルートを追加します。\nIPv6の場合も追加したいので、もう一度「ルールを追加」を押して、ポートを入力し、IPv6 トラフィック (::/0) のルートを入力します。\n設定が終わったら、保存しましょう。\nこれでポートの設定が完了しました。\n \niPadで確認しながら更新をする サーバにログインして、先程の\n$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート] でサーバを立ち上げます。\nこのとき、下書きの記事を表示したいときは\n$ hugo server --baseURL=http://[EC2のURL] --bind=0.0.0.0 --port=[ポート] -D として下書きも表示するようにしましょう。\nまた、サーバのアドレスがわからない場合は\n$ curl -s ifconfig.me とすればIPアドレスがわかります。\niPadにはSplitビューがついているので、片方でブログを書きながら、　もう片方でSafariなどを立ち上げて立ち上げて記事を確認しながら記述することが可能です。\n \n構築が終わったらiPadに開発環境を構築してみるテストを参考にして、EC2内での詳細な設定をしてみましょう。\nまとめ iPadを使うとどこでも、重いパソコンを持たなくても簡単にブログを更新することができるようになります。是非オススメなので、みなさんも試してみてください。\nおすすめの書籍  iPad完全マニュアル2022(全機種対応/基本操作から活用技まで詳細解説)   iPadをしっかり使いこなすための決定版ガイドブック。 iPadOS 15に対応した最新版です。 2021年発売の最新モデルはもちろん、すべてのiPad Pro、iPad Air、iPad、iPad miniの全モデル ホームボタン搭載/非搭載含めすべての機種に対応します。 Amazonで詳細を見る   Amazon.co.jpアソシエイトを使用   AWSではじめるインフラ構築入門 安全で堅牢な本番環境のつくり方   AWSのネイティブ機能を組み合わせて 安全かつ堅牢なインフラを構築・運用 本書は、AWS(Amazon Web Services)を利用して、 インフラを構築/運用する方法を解説する入門書です。 クラウドでネットワーク\u0026amp;サーバー構築を行うために必要な基礎知識や、 AWSのネイティブ機能を組み合わせて安全かつ堅牢なインフラを構築/運用 するための設定方法やノウハウを解説します。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-28T15:35:18+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/img11_hu8396314a3cdd13cc5226bcfe8e9969d2_456825_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-28-01-wyoshi/","title":"パソコンは不要。iPhoneやiPadなどのスマホ、タブレットでできるブログ投稿"},{"content":"Nクイーン問題とは Nクイーン問題とは、チェスの盤面にクイーンを１行に１個ずつ効き筋に当たらないように置いていこうという問題です。\nhttps://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%A4%E3%83%88%E3%83%BB%E3%82%AF%E3%82%A4%E3%83%BC%E3%83%B3\nNクイーンのNは盤面の行・列の数です８クイーンだと８x８です。\nおける場所の数を算出する法則はないのでプログラムを組んでクイーンを配置していくしかないのですが、\nNの数が増えれば置ける場所の候補が爆発的に増えていきプログラムでも何年経っても終わらないようなものになります。\n現在最大のNは２７クイーンです。\nNクイーンを早く解く方法はいくつかあって、\n①アルゴリズムを使って探索を効率化する\n②ビット計算で計算速度を上げる\n③GPUなどを使って並列計算をする\nなどがあります。\nPythonで頑張る Python は最近すっかりメジャーになり、プログラミング教育が小学校で必修化され最初に学ぶのがPythonだという話もあります。\nライブラリも非常に充実しています。\nそこで勉強を兼ねてPythonを使ってNクイーン問題を解いていこうと思います。\nアルゴリズムなしでNクイーン問題を解こうとすると。。。 Nクイーンはアルゴリズムを使うとどのくらい早くなるのでしょうか。\nそれを体感するために今回はまったくアルゴリズムを使わないでプログラムにNクイーン問題に取り組ませてみましょう。\nまったくアルゴリズムを使わない方法は「ブルートフォース　力任せ探索」と呼ばれるものです。\nN4だと4の4乗で256パターン\n私のPCだと0m0.042sで終了しますが\nN8だと8の8乗で16777216パターン\n3m7.321sもかかってしまいます。\nちなみに今後やる検索効率化アルゴリズム「バックトラック」だと\nN8でと0m0.03sで完了します（もっと早いアルゴリズムも出てきます。）。\nここでは触って動かしてみていただいて時間かかるなあと思っていただければ良いです。\nプログラムについて プログラムは以下のgitにあります。\nhttps://github.com/suzukiiichiro/N-Queens/blob/master/03Python/py01_nqueen.py\nこのプログラムは鈴木維一郎先生が作成したものです。\n私はこのプログラムを初めてみながらpythonだとこう書くんだと思いながら\npythonの勉強させてもらいながらコメントしていく感じになります。\nプログラムのダウンロード方法は以下です。\ngit clone https://github.com/suzukiiichiro/N-Queens/\n実行方法は\nN-Queens/03Pythonに移動して\npython py01_nqueen.py\nです。\nプログラム概要 このプログラムでやりたいことはエイトクイーン(N=8)の時に全ての可能性のある解の候補を体系的に数え上げます。\n利き筋などは全く考えず1行に1個ずつクイーンを置いていきます。\nパターン数はNxNになるのでエイトクイーン(N=8)だと8の8乗16777216パターンクイーンを配置します。\nプログラムがやるのはここまでです。これが正解かどうかはプログラムではチェックしません。\nプログラムが列挙したパターンから人力でどれが正解かをチェックしようと思ったらエイトクイーン(N=8)でも相当の年月がかかりますね。\n出力はパターンのカウント数と各行にクイーンが置かれた場所になります。\n1: 00000000 2: 00000001 3: 00000002 4: 00000003 . . . 163100: 00476433 163101: 00476434 163102: 00476435 163103: 00476436 . . . 16777213: 77777774 16777214: 77777775 16777215: 77777776 16777216: 77777777 例えば\n163101: 00476434\nだと\n163101はカウント数です。163101番目のパターンという意味です。\n00476434はクイーンが置かれた場所です\n左端が1行目で左から右へ行数が増えていきます。\nクイーンの位置が\n0:1行目は0なので右から1番目\n0:2行目は0なので右から1番目\n4:3行目は4なので右から5番目\n7:4行目は7なので右から8番目\n6:5行目は6なので右から7番目\n4:6行目は4なので右から5番目\n3:7行目は3なので右から4番目\n4:8行目は4なので右から5番目\nに置かれたということを表現しています。\n図にすると以下になります\n 図 \nこの例だと2行目に1行目と同じ列にクイーンを配置しているので、2行目の段階で1行目の下の効き筋に引っかかっているので解にはなりません。\n次回はプログラム詳細について説明していきたいと思います。\n","date":"2022-01-27T15:55:55+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/chess_hub5f46a8b8fc9e255d0122f98accfe16c_94129_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-27-01-ani/","title":"pythonでNQueen（エイトクイーン）ブルートフォース　力任せ探索（１）"},{"content":"HugoをGitHub Pagesで展開していたのですが、今回はGitHub Pagesではなく、Amazon EC2にHugoをインストールしてみたいと思います。\nGO言語をCentOS7にインストール Hugoを利用するためにGo言語をインストールするのですが、yumでインストールすると様々ななエラーが出る場合があるので、今回はtarファイルを解凍して配置します。\nbrewがすでにインストールされている場合はbrewでのインストールが早いです。\nGO言語をインストール まずは、GO言語のファイルをダウンロードして、解凍、インストールする場所に配置してやりましょう。\n$ wget https://golang.org/dl/go1.16.linux-amd64.tar.gz $ sudo tar zxf go1.16.linux-amd64.tar.gz -C /usr/local/ $ export PATH=$PATH:/usr/local/go/bin インストールされたGoのバージョンを確認します\n$ go version インストールが成功していれば、下記のようなバージョンが表示されます。\ngo version go1.15.14 linux/amd64 GOROOTも確認しておきます\n$ go env|grep GOROOT GOROOT=\u0026quot;/usr/local/go\u0026quot; Hugoをインストールする上で、GOPATHが必要なので設定しましょう。\nGOPATHとGOROOTが同じ場所にならないようにすることに注意してください。\n同じ場所に設定してしまうと、\nwarning: GOPATH set to GOROOT (/usr/local/go) has no effect といったワーニングが表示されてしまいます。\nなので、GOPATHとGOROOTを別にしてやりましょう。\nそれではGOPATHを設定していきます。\nvi ~/.bash_profile 上記のコマンドで、.bash_profileをひらいて、下記のコマンドを追加します。\nexport GOPATH=$HOME/go export PATH=$GOPATH/bin:$PATH:$HOME/bin 設定を反映させて、確認します。\n$ source ~/.bash_profile $ echo $GOPATH /home/[user]/go $ echo $PATH /home/[user]/go/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/root/bin:/root/bin:/root/bin 無事追加できました。\n以上がGo言語の設定になります。\nHugoをCentOS7にインストール それでは、いよいよHugoをインストールしましょう。\nGitHubからHugoを取得します。\nmkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended インストールできたら hugo してみましょう\nGitInfoを使っているとエラーになる場合がある Gitのバージョンが古いと、hugoした際に、情報を取得できないくてエラーになってしまうようです。\nhugo v0.93.0-DEV+extended linux/amd64 BuildDate=unknown ERROR 2022/01/27 Failed to read Git log: Unknown option: -C usage: git [--version] [--help] [-c name=value] [--exec-path[=\u0026lt;path\u0026gt;]] [--html-path] [--man-path] [--info-path] [-p|--paginate|--no-pager] [--no-replace-objects] [--bare] [--git-dir=\u0026lt;path\u0026gt;] [--work-tree=\u0026lt;path\u0026gt;] [--namespace=\u0026lt;name\u0026gt;] \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] 私の環境ではGitのバージョンがgit version 1.8.3.1 となっていたため、これをアップデートして正しく動作するようにします。\nまずはすでにインストールされているGitを削除します。\n$ sudo yum -y remove git 次に、2系の配布がされているiusリポジトリを追加します。\n私の環境はCentOS7だったので下記のコマンドでyumからインストールします。\n$ sudo yum -y install https://repo.ius.io/ius-release-el7.rpm iusはサードパーティのリポジトリのため、常に有効にならないように設定ファイルを確認しておきます。enabled = 0 となっていたら、常に有効にならない設定です。\n[ius-debuginfo] name = IUS for Enterprise Linux 7 - $basearch - Debug baseurl = https://repo.ius.io/7/$basearch/debug/ enabled = 0 repo_gpgcheck = 0 gpgcheck = 1 gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-IUS-7 [ius-source] name = IUS for Enterprise Linux 7 - Source baseurl = https://repo.ius.io/7/src/ enabled = 0 repo_gpgcheck = 0 gpgcheck = 1 gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-IUS-7 それでは。インストール可能なGitを調べます。\nyumでiusを使うときは、yumコマンドの際に、--enablerepo=iusオプションをつけます。\n$ sudo yum list --enablerepo=ius | grep git2 … git224.x86_64 2.24.4-1.el7.ius ius … インストール可能なGitがあったので、インストールをします。\n$ sudo yum -y install --enablerepo=ius git224 インストールが無事完了したことを確認しましょう\n$ git --version git version 2.24.3 バージョンが表示されていたら、正常にインストールが完了してます。\nこれで GitInfo 使ったhugoのサーバでもhugoコマンドが実行できるようになりました。\nおすすめの書籍  改訂2版 わかばちゃんと学ぶ Git使い方入門〈GitHub、SourceTree、コマンド操作対応〉   マンガと実践で学ぶGitの入門書が最新情報に対応して改訂しました! Gitの概念はもちろん、GitHubについても丁寧に解説しています。これからGitを使い始める人にオススメの1冊です。 本書ではクリック操作でGitを使えるSourceTreeを中心に解説しているので、初心者でも安心です。 せっかく学ぶなら、やっぱり楽しい方がいい 「Gitって難しそう」 「勉強しようとは思っているけど、なかなか一歩が踏み出せない」 そんな方のために、楽しくGitを理解できる本を作りました。 ・個性的なキャラクターたちが登場するマンガ ・感覚的にわかる図解 ・丁寧な実践パート 上記3つの特長で、Gitを無理なく学べます。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）)   【プレーンテキストでらくらくライティング! Markdownを使いこなそう! 】 本書は、文章を書く=ライティングを「気楽に」行うための道具としての「Markdown」形式を紹介し、その使い方を詳しく解説しています。Wordなどのワープロソフトに限定されることなく、テキストエディタやMarkdown専用エディタ、ポメラなどの文書入力専用機、さらにはスマートホン上でも「見出し」や「強調」といった文章執筆に必要な情報を共有するための書式であるMarkdownの書き方やその定義や起源を、初心者でもわかりやすく紹介しています。 〈本書の対象読者〉 執筆のストレスを減らして集中したい人 PCが古くて軽いアプリで執筆したい人 いろいろなアプリで原稿を使いまわしたい人 思いついた時にスマホでメモ書きして原稿にまとめたい人 続きを読む 。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-27T13:31:52+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-27-01-wyoshi/catch_huc7082b0252bf301b68f9a1efcdf78a08_226327_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-27-01-wyoshi/","title":"Amazon EC2でもGo言語とHugoを使えるようにする方法"},{"content":"HUGOは非常に強力な静的HTMLジェネレーターです。\n複数のXMLを設置する機会があり、どうやったら設置できるのかなと悪戦苦闘しながら実装できましたので、そのやり方を共有します。\n今回は sitemap.xml を複数設置する必要があったため、その方法になります。\nこの方法の出力やファイル形式を変えることで、RSSやJSON、AMPなどの形式も出力できるようになると思います。\nconfig に設定を追加する まずは config.yaml に出力用の設定をします。\n設定の内容は下記のようになります。\n私は yaml 形式の設定ファイルを使っているのですが、toml や json 形式の設定ファイルを使っている方は、HUGO のページを見ながらそれぞれにあった記述にしてください。\nmediaTypes:application/xml:suffixes:xmloutputFormats:Sitemap:MediaType:application/xmlbaseName:\u0026#34;google_sitemap\u0026#34;noUgly:trueoutputs:home:[HTML, Sitemap, RSS]上から順に説明します。\n出力ファイルの形式 mediaTypes:application/xml:suffixes:xmlここでは出力したい形式を選択してます。今回は、xmlのタイプを選んでます。\nちなみに、この部分は記述しないでも問題がない部分です。\n私の環境では出力した場合に、エラーにならずに正常にファイルが出力されました。\nsuffixesの部分では複数の形式を記述することが可能です。\n例えば、rss+xmlの場合は\nmediaTypes:application/rss+xml:suffixes:- xml- rssとなります。\n出力ファイルの種類 次に、outputFormats部分ですが、この部分が出力の際に重要になってきます。\n今回はサイトマップ形式で出力するので、下記のようにしました。\noutputFormats:Sitemap:MediaType:application/xmlbaseName:\u0026#34;google_sitemap\u0026#34;noUgly:true上の yaml を説明すると、\nSitemap 形式で MediaTypeはサイトマップを表すapplication/xmlを使用して、google_sitemapというファイル名のXMLを出力します。\n出力の形式 出力形式のオプションは以下のようになります。\n 1つのページに多くの出力形式で出力可能 1つのページを好きなだけ多くの出力形式で出力することができ、ファイルシステム上の一意なパスに解決する限り、無限に出力形式を定義することができるのです。\n表では、AMPとHTMLの比較が最も良い例です。AMPはHTML版を上書きしないようにPathにampという値を持っています。\n例えば、/index.htmlと/amp/index.htmlの両方を持つことができるようになりました。    MediaTypeはは既存のもののみ MediaTypeは、既に定義されているメディアタイプのTypeと一致する必要があります。    再定義可能 新しい出力形式を定義したり、組み込みの出力形式を再定義することができます。\n例えば、AMPページを別のパスに配置したい場合などです。   出力フォーマットを追加または変更するには、サイトの設定ファイルのoutputFormatsセクションで、すべてのサイトまたは特定の言語について定義します。\n   name mediaType path baseName rel protocol isPlainText isHTML noUgly permalinkable     HTML text/html  index canonical  false true false true   AMP text/html amp index amphtml  false true false true   CSS text/css  styles stylesheet  true false false false   CSV text/csv  index alternate  true false false false   Calendar text/calendar  index alternate webcal:// true false false false   JSON application/json  index alternate  true false false false   ROBOTS text/plain  robots alternate  true false false false   RSS application/rss+xml  index alternate  false false true false   Sitemap application/xml  sitemap sitemap  false false true false   WebAppManifest application/manifest+json  manifest manifest  true false false false     出力形式を設定する 以下は、出力形式に関する設定オプションの全リストとそのデフォルト値になります。\n name 出力形式の識別子です。これは、ページに必要な出力形式を定義するために使用されます。 mediaType 定義されたメディアタイプのTypeと一致しなければなりません。 path 出力ファイルを保存するサブパス。 baseName ファイル名です。デフォルトはindex。 rel リンクタグのrel値を作成するために使用します。デフォルトはalternate。 protocol この出力形式に対して、baseURL の \u0026ldquo;http://\u0026rdquo; または \u0026ldquo;https://\u0026rdquo; を置き換えます。 isPlainText テンプレートにGoのプレーンテキストテンプレートパーサーを使用します。デフォルト: false。 isHTML HTMLタイプのフォーマットにのみ関連する状況で使用されます; 例えば、ページのエイリアスなどです。 noUgly uglyURLs がサイト内で true に設定されている場合、醜い URL をオフにするために使用されます。デフォルト：false notAlternative このフォーマットをPageのAlternativeOutputFormatsフォーマットのリストに含めることが意味をなさない場合（例えば、CSSなど）有効にします。\n注意点として、必ずしも他のフォーマットを置き換えるわけではないので、ここではalternateではなくalternativeという用語を使っています。デフォルト：false permalinkable .Permalink と .RelPermalink が main ではなくレンダリング出力形式を返すようにしました。これは、HTMLとAMPでデフォルトで有効になっています。デフォルト：false weight 0 以外の値を設定すると、最初のソート条件として使用されます。  出力するページを選択 最後に出力するページに関してです。\noutputs:home:[HTML, Sitemap, RSS]この部分はどのページで出力するかを選択できます。\n今回はサイトマップを作成したいので、ドキュメントルートに当たる home (/index.html) 部分でのみの出力としてます。\nHTML形式と、Sitemap、RSSを出力するようにしてます。HTMLでは index.html を出力し、RSSでは index.xml のRSS形式のフィードを出力してます。そして、今回追加したSitemapでサイトマップ形式のファイルを出力するようにしました。\n各ページの初期状態での出力は下記を参考にしてください。\n   page HTML     home HTML, RSS   section HTML, RSS   taxonomy HTML, RSS   term HTML, RSS    テンプレートファイルを追加する 設定が終わったので、次はテンプレートファイルを設置します。\nサイトマップ用のテンプレートを作成して、layouts/_defaultディレクトリに配置します。\nここが一番のポイントで、配置する際のファイル名は [page].[outputFormatsの名前].[suffixe] となります。\nつまり、今回でいうと home.sitemap.xml となります。\nただし、pageの場合は下記のようにmarkdownに埋め込んで出力します。\n--- title: \u0026#34;Search\u0026#34; layout: \u0026#34;search\u0026#34; outputs: - html - json --- これによって、layouts/page/search.html と layouts/page/search.json ファイルを使用して出力ファイルを作成します。\nおすすめの書籍  Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）)   【プレーンテキストでらくらくライティング! Markdownを使いこなそう! 】 本書は、文章を書く=ライティングを「気楽に」行うための道具としての「Markdown」形式を紹介し、その使い方を詳しく解説しています。Wordなどのワープロソフトに限定されることなく、テキストエディタやMarkdown専用エディタ、ポメラなどの文書入力専用機、さらにはスマートホン上でも「見出し」や「強調」といった文章執筆に必要な情報を共有するための書式であるMarkdownの書き方やその定義や起源を、初心者でもわかりやすく紹介しています。 〈本書の対象読者〉 執筆のストレスを減らして集中したい人 PCが古くて軽いアプリで執筆したい人 いろいろなアプリで原稿を使いまわしたい人 思いついた時にスマホでメモ書きして原稿にまとめたい人 続きを読む 。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-26T14:37:51+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/catch_hub5e89b620d2afe5c10cf3894738f1203_83896_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-26-01-wyoshi/","title":"HUGOでxmlやファイルを複数出力する方法"},{"content":"出典元：Building UI Components With SVG and CSS - Ahmad Shadeed \nSVGはアイコンやイラストだけでなく、開発者が時々忘れてしまう隠れた力をたくさん持っています。\nCSSと比較してSVGを使用することが非常に理にかなっているユースケースはたくさんあります。たとえば、円形の読み込みアニメーションを作成したり、画像にマスクを適用したりします。このような場合、CSSを使用できないという意味ではありませんが、使用する手法（マスクなど）に基づいてクロスブラウザの問題と戦うのは難しい場合があるため、SVGを使用すると時間と労力を節約できます。\nSVGの優れている点は、応答性、パフォーマンス、およびHTML＆CSSを使用してすぐに使用できることです。この記事では、SVGをHTMLおよびCSSとともに使用して特定のUIコンポーネントを構築できるさまざまなユースケースを紹介することを目標としています。\nそれでは、ユースケースを見てみましょう。\nカットアウトアバター 切り抜かれたアバターは、FacebookのCSSを調べているときに見つけたものです。\nメッセンジャーでは、ユーザーアバターにバッジを付けることができ、バッジ用のスペースを割り当てるためにアバターが切り取られます。\n \nこれは、CSSの白い境界線を追加することで実行できます（簡単な修正として）が、さらに動的SVGコンポーネントに取り入れてみましょう。\n.badge { border: 2px solid #ff; } borderが機能する場合、なぜSVGを使用するのか考えているかもしれませんが、間違いではありません。\nしかし、他よりも優れた解決策があります。数学の授業で、教師が問題にさまざまな解決策がある可能性があり、そのうちの1つが柔軟性の点で優れている可能性があると述べたことを覚えていますか？今回の問題もそれと同じです。\nとにかく、border の解決策がどのようにすぐに失敗するかを示してみましょう。\n失敗例\n ホバー時：カードの背景が変わるため、白い境界線が奇妙に見えます。 ダークモード：白い境界線は黒っぽい背景の上になります  次の図では、バッジの白い境界線が暗い背景とホバー状態にどのように干渉しているかに注目してください。\n \nホバー時に境界線colorを変更することでそれを解決できますが、それは最善の解決策とは思えません。\n.card__badge { border: 2px solid #ff; } .card:hover .card__badge { border-color: lightgrey; } @media (prefers-color-scheme: dark) { .card__badge { border-color: #454545; } } SVGを使用すると、バッジの下の領域をカットすることで、上記の問題をより適切に解決できます。そうすれば、あらゆる種類のバックグラウンドで機能します。\n次の図を見てください。\n \nアバターを含めるためにSVG \u0026lt;image\u0026gt;要素を使用しています。バッジ領域を切り取るには、2つの\u0026lt;circle\u0026gt;要素を作成する必要があります。1つは白で、もう1つは黒です。\nマスクでは、黒で塗りつぶされた要素はすべて非表示になります、白の要素は表示されます。黒い円は、半径18の右下隅に配置されています。\n開発者ツールでは、上記は減算と呼ばれます。大きい円から小さい円を引きます。\nこれが最後のデモです\n タイトルの装飾 あるクライアントのプロジェクトで、SVGとCSSを組み合わせてセクションタイトルをデザイン・構築したことがあります。\nセキュリティに関連するブランドなので、このようなスタイルを使うことがあるかもしれません。\n \nコンポーネントは短いタイトルと長いタイトルで動作する必要があり、タイトルが長すぎる場合は、レイアウトを壊さずに複数の行に折り返す必要があります。\nそれを構築するためには、以下のような対応が必要です。\n 最初に、固定部分（右側）をコピーして、インラインSVGとして追加する。 CSSを使用して、タイトルの下に行を作成しました。また、行の最初と最後にある小さな円にも使用。 不要なポジショニングを使用しないように、flexboxを使用してコンポーネントレイアウトを作成。   \nそれでは基本的なHTMLとCSSから始めましょう。\n\u0026lt;h2 class=\u0026#34;c-section__title\u0026#34;\u0026gt; \u0026lt;span\u0026gt;CSS is awesome\u0026lt;/span\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;128\u0026#34; height=\u0026#34;34.5\u0026#34; viewBox=\u0026#34;0 0 128 34.5\u0026#34; preserveAspectRatio=\u0026#34;none\u0026#34;\u0026gt; \u0026lt;path fill=\u0026#34;none\u0026#34; stroke=\u0026#34;#d8d8d8\u0026#34; stroke-width=\u0026#34;2\u0026#34; d=\u0026#34;M127 1H33.5L1 33.5\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/h2\u0026gt; .c-section__title { max-width: 700px; width: fit-content; display: flex; margin-left: auto; margin-right: auto; }  \n次のステップでは、span 要素の下にボーダーを追加して、SVGに接続された線を追加したいと思います。\n \nSVGが回線に接続されていないことに気づきました。\nflexboxを使用しているので、修正するのは簡単です。flex-item をflex-endに揃える必要があります。\n.c-section__title { max-width: 700px; width: fit-content; display: flex; align-items: flex-end; margin-left: auto; margin-right: auto; } 次に、絶対位置指定で擬似要素を使って、最初と最後に円を追加する必要があります。\n また、SVGを使うと何がいいかというと、SVGのパスを点線にして、アニメーションさせることができるのです。\nそのためには、SVGで書き出されたパスがアウトライン化されていないことを確認する必要があります。\n\u0026lt;path d=\u0026#34;M127 1H33.5L1 33.5\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;#d8d8d8\u0026#34; stroke-width=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; このテクニックは、Jake Archibald氏の素晴らしい記事 から学びました。このアイデアは、パスの長さを求めるというものです。\nChrome DevToolsで、SVGを検査し、\u0026lt;path\u0026gt;要素を選択すると、その末尾の横に== $0と表示されることがわかります。これを選択したまま、コンソールに移動し、以下のスクリプトを記述します。\n$0.getTotalLength() // 139.46 このようなことをしなくても、DOMから要素を選択するには、$0が手っ取り早いです。\nlet sectionPath = document.querySelector(\u0026#39;#path\u0026#39;); console.log(sectionPath.getTotalLength()); それはこの例の文脈の中での簡単なヒントでした。\nさて、長さが決まったら、あとは好きなようにやってみましょう。例えば、ホバー時にアニメーションさせることができます。\n.c-section__title--dashed path { stroke-dasharray: 139; stroke-dashoffset: 0; transition: 0.7s; } .c-section__title--dashed:hover path { stroke-dashoffset: 139; } または、単純に点線に変えることもできます（この場合、パスの長さを知る必要はありません）。\n \n SVGを使ったカスタムリンクの下線 SVGを使って、ワクワクするようなカスタムリンクのアンダーラインを作成することができます。私は数年前に、ランダムにパスを生成し、ホバー時にそれを再描画するスクリプトを作成しました。\n次の図で、プレビューの前と後を考えてみてください。\n \nアイデアは、各リンクにSVGを挿入することであり、次のようになります。\n\u0026lt;svg width=\u0026#34;400\u0026#34; height=\u0026#34;35\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;path id=\u0026#34;pathItem\u0026#34; d=\u0026#34;M5 5 Q 30 15 170 5\u0026#34; stroke=\u0026#34;black\u0026#34; fill=\u0026#34;transparent\u0026#34; stroke-width=\u0026#34;7\u0026#34; stroke-linecap=\u0026#34;round\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; この手法は d 属性値を変更することによって起こります。これは、パスが実際にどのように描画されるかを示すビジュアルです。\n カスタムSVGテープ クライアントのプロジェクトに携わっているとき、CSSでどこにでも配置可能で、1つのCSS変数のみで色を変更できるほどダイナミックな方法で、テープをセクションに取り付ける方法が必要でした。\n次の図を考えて見ましょう。\n \nAdobe Illustratorで、テープをレイヤーに分割しました。\n ベース：塗りつぶしの色を取ります 透明な黒：暗い領域を示します 透明な白：明るい領域を示します   \nSVGコードを見てみましょう。\n\u0026lt;svg\u0026gt; \u0026lt;defs\u0026gt; \u0026lt;g id=\u0026#34;tape\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt; \u0026lt;!-- path contents --\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/defs\u0026gt; \u0026lt;/svg\u0026gt; fill=currentColorを追加したことに注意してください。\ncurrentColorキーワードは、CSS color プロパティから値を継承するため、1つのプロパティのみを使用して色を動的に変更できます。\n単色のベースと、明るい領域と暗い領域に他の2つのレイヤーがあることを考えると、色を変更すると、テープの外観が異なります。\n \nさらに良いことに、SVGをテンプレートに変換し、\u0026lt;use\u0026gt; SVG要素の助けを借りて、SVGを複製せずにテープを再利用することができます。\n\u0026lt;svg style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;defs\u0026gt; \u0026lt;g id=\u0026#34;tape\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt; \u0026lt;!-- path contents --\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/defs\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;!-- An example of using the tape from a template --\u0026gt; \u0026lt;svg class=\u0026#34;tape\u0026#34; style=\u0026#34;--angle: 10deg; color: red; --size: 120px;\u0026#34; aria-hidden=\u0026#34;true\u0026#34; focusable=\u0026#34;false\u0026#34; viewBox=\u0026#34;0 0 123 47\u0026#34;\u0026gt; \u0026lt;use href=\u0026#34;#tape\u0026#34;\u0026gt;\u0026lt;/use\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;use\u0026gt;要素を介してテープを追加した方法に注目してください。これの良いところは、CSS変数をインラインスタイルとして使用することです。\nCSSは次のようになります。\n.tape { width: var(--size); transform: rotate(var(--angle)); }  まとめ SVGを使用してUIコンポーネントを構築すると、作業がより簡単かつ簡単になります。一部のUIコンポーネントは、100％完璧なユースケースやSVG（アバターカットアウトなど）ではない場合がありますが、作業しているプロジェクトのコンテキストによって異なります。\nおすすめの書籍  SVGエッセンシャルズ 第2版   SVGの解説書。SVGは2001年にW3C勧告として公開されたXMLベースの画像フォーマットです。 ベクターグラフィックスなので拡大縮小、変形しても美しさが損なわれません。 会社のロゴをSVGで作る企業も増えていますし、D3.jsによるデータビジュアライゼーションでも基盤技術としてSVGが使われています。 本書では簡潔なサンプルを数多く使い、基本的な図形の作成、アニメーションや複雑なグラフィックスの作成、さらにはスクリプトによる制御など、SVGの基礎から応用までをわかりやすく解説します。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   【特典付き】HTML5\u0026amp;CSS3デザイン 現場の新標準ガイド【第2版】 (Compass Booksシリーズ)   体系的に学ぶHTMLとCSSの仕様と実践 フロントエンドエンジニアはじめ、Web制作に関わっている人のためのHTML5/CSS3ガイドブックです。 HTMLとCSSの最新仕様を整理するとともに、主要ブラウザの対応状況など、現時点でどのポイントに留意して制作を進めていけばよいか、現場で必要不可欠な情報を解説しています。 また、フレキシブルボックスレイアウトやグリッドレイアウトなど、現在知っておくべきHTML\u0026#43;CSSレイアウトの手法についても、詳細に解説しています。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-24T16:18:06+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/catch_huca2437bae218f92182b398b39750fa47_117863_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-24-01-wyoshi/","title":"SVGとCSSを使用したUIコンポーネントの構築"},{"content":"hampelによる異常値部分を追加しよう 前回はgoogle custom search の検索結果を利用して社会的に関心の高そうな列の抽出を試みました。\n今回は、以前紹介したhampelによる時系列データの異常値検知を組み込んで見たいと思います。\n前回取得した「人権侵犯事件の種類別」ごとにtime_code、valueをまとめcsvにしてhampelメソッドを適用します。\ntime_codeは月次なのですが、月ごとの事件数はかなりムラがあって比較が難しいので年次にまとめます。\n私人等に関するもの_暴行・虐待_家族間のもの_夫の妻に対するもの date,value 2007,2537 2008,2645 2009,2461 2010,2250 2011,2242 2012,2031 2013,1683 2014,1477 2015,1352 2016,1297 2017,1113 2018,900 2019,782 2020,534 コロナの影響なのか結構急激に下がっているのに検知しませんでした。\n母数が流石に少なすぎるのかちょっと見直しが必要ですね。\n閾値を色々変えてみましたがだめでした。\n残念です。\n年次のものについては一旦前の年との増減分を比較して閾値を超えたらアラートをあげるようにしようと思います。\nプログラム プログラムは以下の通りです。\nシェルプログラムから以前作ったhampelメソッドのpython を呼び出しています。\ngrep -e \u0026ldquo;^$nyear\u0026rdquo; -e \u0026ldquo;^$lyear\u0026rdquo; で直近２年間に異常値があった場合のみ検知するように絞りをかけています。\nfunction getHampel(){ echo \u0026quot;$column\u0026quot;|while read line;do cat \u0026quot;$STCSV\u0026quot;|grep \u0026quot;総数\u0026quot;|grep \u0026quot;,\\\u0026quot;$line\\\u0026quot;,\u0026quot;|$AWK -F, '{print $7\u0026quot;,\u0026quot;$10;}'|$SED -e \u0026quot;s|\\\u0026quot;||g\u0026quot; \u0026gt; \u0026quot;$TMPHCSV\u0026quot;; #月次だとムラがあって比較が難しいので年次にする years=$(cat \u0026quot;$TMPHCSV\u0026quot;|cut -c 1-4|sort|uniq -c|grep \u0026quot;^ 12\u0026quot;|$AWK '{print $2;}'); echo \u0026quot;date,value\u0026quot; \u0026gt; \u0026quot;$TMPHYCSV\u0026quot; echo \u0026quot;$years\u0026quot;|while read year;do local mcnt=$(cat \u0026quot;$TMPHCSV\u0026quot;|grep \u0026quot;^$year\u0026quot;|$AWK -F, '{print $2;}'|$AWK '{sum+=$0} END{print sum;}'); echo \u0026quot;$year,$mcnt\u0026quot; \u0026gt;\u0026gt;\u0026quot;$TMPHYCSV\u0026quot;; done #0:date:2021001111 value:5230 nyear=$(date +%Y); lyear=$((nyear-1)); hampelalert=$(python gethampel.py \u0026quot;$TMPHYCSV\u0026quot;|grep -e \u0026quot;^$nyear\u0026quot; -e \u0026quot;^$lyear\u0026quot;|tr \u0026quot;\\n\u0026quot; \u0026quot;:\u0026quot;); if [ -n \u0026quot;$hampelalert\u0026quot; ];then echo \u0026quot;$line,$hampelalert\u0026quot;; fi done } ","date":"2022-01-24T13:50:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-25-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-25-01-ani/","title":"e-Stat hampelで時系列データの異常値検知"},{"content":"Google Custom Search APIの検索結果と統計名の列名をマッチンングさせる 今回は、前回取得したGoogle Custom Search APIの検索結果と統計名の列名をマッチンングさせて社会的に関心の高い列名を取得してみたいと思います。\n今回は「人権侵犯事件統計」 を取り扱ってみたいと思います。\n人権侵犯事件統は、法務省の人権擁護機関で取り扱った人権侵犯事件及び人権相談に関する統計報告を集計したものとのことです。\ne-Stat から統計データを取得する まずはe-StatのAPIにアクセスして統計データを取得します。\n将来的には新着の統計データを日時で取得して処理するようにしますが、今回は「人権侵犯事件統計」だけ取得します。\ncurl -s \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxxxxxxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003286680\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; -o \u0026quot;$STCSV\u0026quot; 統計データの中身を見てみる \u0026quot;RESULT\u0026quot; \u0026quot;STATUS\u0026quot;,\u0026quot;0\u0026quot; \u0026quot;ERROR_MSG\u0026quot;,\u0026quot;正常に終了しました。\u0026quot; \u0026quot;DATE\u0026quot;,\u0026quot;2022-01-21T09:58:51.856+09:00\u0026quot; \u0026quot;RESULT_INF\u0026quot; \u0026quot;TOTAL_NUMBER\u0026quot;,\u0026quot;403425\u0026quot; \u0026quot;FROM_NUMBER\u0026quot;,\u0026quot;1\u0026quot; \u0026quot;TO_NUMBER\u0026quot;,\u0026quot;100000\u0026quot; \u0026quot;NEXT_KEY\u0026quot;,\u0026quot;100001\u0026quot; \u0026quot;TABLE_INF\u0026quot;,\u0026quot;0003286680\u0026quot; \u0026quot;STAT_NAME\u0026quot;,\u0026quot;00250010\u0026quot;,\u0026quot;人権侵犯事件統計\u0026quot; \u0026quot;GOV_ORG\u0026quot;,\u0026quot;00250\u0026quot;,\u0026quot;法務省\u0026quot; \u0026quot;STATISTICS_NAME\u0026quot;,\u0026quot;人権侵犯事件統計\u0026quot; \u0026quot;TITLE\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;人権侵犯事件 種類別　人権侵犯事件の受理及び 処理件数　（月次）\u0026quot; \u0026quot;CYCLE\u0026quot;,\u0026quot;月次\u0026quot; \u0026quot;SURVEY_DATE\u0026quot;,\u0026quot;201801\u0026quot; \u0026quot;OPEN_DATE\u0026quot;,\u0026quot;2022-01-20\u0026quot; \u0026quot;SMALL_AREA\u0026quot;,\u0026quot;0\u0026quot; \u0026quot;COLLECT_AREA\u0026quot;,\u0026quot;該当なし\u0026quot; \u0026quot;MAIN_CATEGORY\u0026quot;,\u0026quot;14\u0026quot;,\u0026quot;司法・安全・環境\u0026quot; \u0026quot;SUB_CATEGORY\u0026quot;,\u0026quot;01\u0026quot;,\u0026quot;司法\u0026quot; \u0026quot;OVERALL_TOTAL_NUMBER\u0026quot;,\u0026quot;0\u0026quot; \u0026quot;UPDATED_DATE\u0026quot;,\u0026quot;2022-01-20\u0026quot; \u0026quot;STATISTICS_NAME_SPEC\u0026quot;,\u0026quot;人権侵犯事件統計\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot; \u0026quot;TITLE_SPEC\u0026quot;,\u0026quot;人権侵犯事件\u0026quot;,\u0026quot;種類別　人権侵犯事件の受理 及び処理件数　（月次）\u0026quot;,\u0026quot;処理の合計件数と，その内訳であ る措置，措置猶予，侵犯事実不存在，侵犯事実不明確，打切\u0026gt;り，中止，移送及び啓発の各件数の合計とが一致しない場合\u0026gt;があるのは，１つの事件につき複数の措置を採る場合がある\u0026gt;こと等による。\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot; \u0026quot;VALUE\u0026quot; \u0026quot;tab_code\u0026quot;,\u0026quot;表章項目\u0026quot;,\u0026quot;cat01_code\u0026quot;,\u0026quot;人権侵犯事件の受理\u0026gt;・処理別\u0026quot;,\u0026quot;cat02_code\u0026quot;,\u0026quot;人権侵犯事件の種類別\u0026quot;,\u0026quot;time_code\u0026quot;,\u0026quot;時間軸(月次)\u0026quot;,\u0026quot;unit\u0026quot;,\u0026quot;value\u0026quot;,\u0026quot;annotation\u0026quot; \u0026quot;100\u0026quot;,\u0026quot;件数\u0026quot;,\u0026quot;100\u0026quot;,\u0026quot;総数\u0026quot;,\u0026quot;100\u0026quot;,\u0026quot;総数\u0026quot;,\u0026quot;2021001111\u0026quot;,\u0026quot;2021年11月\u0026quot;,\u0026quot;件\u0026quot;,\u0026quot;1430\u0026quot;,\u0026quot;\u0026quot; \u0026quot;100\u0026quot;,\u0026quot;件数\u0026quot;,\u0026quot;100\u0026quot;,\u0026quot;総数\u0026quot;,\u0026quot;100\u0026quot;,\u0026quot;総数\u0026quot;,\u0026quot;2021001010\u0026quot;,\u0026quot;2021年10月\u0026quot;,\u0026quot;件\u0026quot;,\u0026quot;1329\u0026quot;,\u0026quot;\u0026quot; データの中身を見てみると\u0026quot;VALUE\u0026quot;から上がヘッダー的な項目で、データは\u0026quot;VALUE\u0026quot;以下にありそうです。\nVALUE より上の行を削除しましょう。\nsed でマッチした行より上を削除する方法ががあると良いのですがわからないのでgrepと組み合わせます。\ngrep -n でマッチした行数を取得できます。\nsed -e \u0026ldquo;1,26d\u0026rdquo; で1行目から26行目までを削除できます\n\u0026quot;tab_code\u0026quot;,\u0026quot;表章項目\u0026quot;,\u0026quot;cat01_code\u0026quot;,\u0026quot;人権侵犯事件の受理・処理別\u0026quot;,\u0026quot;cat02_code\u0026quot;,\u0026quot;人権侵犯事件の種類別\u0026quot;,\u0026quot;time_code\u0026quot;,\u0026quot;時間軸(月次)\u0026quot;,\u0026quot;unit\u0026quot;,\u0026quot;value\u0026quot;,\u0026quot;annotation\u0026quot; \u0026quot;100\u0026quot;,\u0026quot;件数\u0026quot;,\u0026quot;100\u0026quot;,\u0026quot;総数\u0026quot;,\u0026quot;100\u0026quot;,\u0026quot;総数\u0026quot;,\u0026quot;2007000101\u0026quot;,\u0026quot;2007年1月\u0026quot;,\u0026quot;件\u0026quot;,\u0026quot;2170\u0026quot;,\u0026quot;\u0026quot; . . \u0026quot;100\u0026quot;,\u0026quot;件数\u0026quot;,\u0026quot;100\u0026quot;,\u0026quot;総数\u0026quot;,\u0026quot;130\u0026quot;,\u0026quot;私人等に関するもの\u0026quot;,\u0026quot;2021001111\u0026quot;,\u0026quot;2021年11月\u0026quot;,\u0026quot;件\u0026quot;,\u0026quot;1230\u0026quot;,\u0026quot;\u0026quot; VALUE以下の内容を見てみると「_code」はコードが入るだけなので無視して良さそうです。\n表章項目も「件数」しかないので無視して良さそうです。\n時間軸、unite、value、annotationもいらなそうです。\n「人権侵犯事件の受理・処理別」は\n\u0026quot;旧受\u0026quot; \u0026quot;総数\u0026quot; \u0026quot;新受_計\u0026quot; \u0026quot;新受_申告_委員受\u0026quot; \u0026quot;新受_申告_職員受\u0026quot; \u0026quot;新受_人権擁護委員の通報\u0026quot; \u0026quot;新受_関係行政機関の通報\u0026quot; \u0026quot;人権侵犯事件の受理・処理別\u0026quot; これは一旦は総数だけ使えば良さそうです\n「人権侵犯事件の種類別」は\n\u0026quot;総数\u0026quot; \u0026quot;私人等に関するもの\u0026quot; \u0026quot;私人等に関するもの_売春\u0026quot; \u0026quot;私人等に関するもの_その他\u0026quot; \u0026quot;私人等に関するもの_村八分\u0026quot; \u0026quot;私人等に関するもの_交通事故\u0026quot; \u0026quot;私人等に関するもの_人身売買\u0026quot; . . . 人権侵犯事件の種類が並べられています。この部分から社会的関心の高いものを抽出できると良さそうですね。\n抽出対象の列をどこにするのかも将来的に自動化したいのですが今回は固定で「人権侵犯事件の種類別」の列を抽出対象にしたいと思います。\nmecabを使ってマッチングキーワードを最適化する  cat \u0026quot;$STCSV\u0026quot;|$SED -e \u0026quot;1,$((vnum+1))d\u0026quot;|$AWK -F, '{print $6;}'|sed -e \u0026quot;s|\\\u0026quot;||g\u0026quot;|sort|uniq; \u0026quot;私人等に関するもの_売春\u0026quot; \u0026quot;私人等に関するもの_その他\u0026quot; \u0026quot;私人等に関するもの_村八分\u0026quot; \u0026quot;私人等に関するもの_交通事故\u0026quot; \u0026quot;私人等に関するもの_人身売買\u0026quot; \u0026quot;私人等に関するもの_医療関係\u0026quot; \u0026quot;私人等に関するもの_私的制裁\u0026quot; \u0026quot;私人等に関するもの_差別待遇_女性\u0026quot; \u0026quot;私人等に関するもの_差別待遇_その他\u0026quot; \u0026quot;私人等に関するもの_差別待遇_外国人\u0026quot; \u0026quot;私人等に関するもの_差別待遇_性自認\u0026quot; 「私人等に関するもの_交通事故」という文字列はニュースなどではそのまま使われないでしょうからそのままgoogle custom search の検索結果にマッチングをかけてもダメそうです。\nmecab を使って文字列を分解してマッチングをかけたいと思います。\nmecabはオープンソースの形態素解析エンジンです入力した文字列を構文解析してくれます。\necho \u0026quot;私人等に関するもの_差別待遇_女性\u0026quot;|mecab 私人\t名詞,一般,*,*,*,*,私人,シジン,シジン 等\t名詞,接尾,一般,*,*,*,等,トウ,トー に関する\t助詞,格助詞,連語,*,*,*,に関する,ニカンスル,ニカンスル も\t助詞,係助詞,*,*,*,*,も,モ,モ の\t助詞,連体化,*,*,*,*,の,ノ,ノ _\t名詞,サ変接続,*,*,*,*,* 差別\t名詞,サ変接続,*,*,*,*,差別,サベツ,サベツ 待遇\t名詞,サ変接続,*,*,*,*,待遇,タイグウ,タイグー _\t名詞,サ変接続,*,*,*,*,* 女性\t名詞,一般,*,*,*,*,女性,ジョセイ,ジョセイ EOS 取り出すのは名詞だけで良さそうですし、名詞でも1文字だけのものは除外したほうが良さそうですね\necho \u0026quot;私人等に関するもの_差別待遇_女性\u0026quot;|mecab|grep \u0026quot;名詞\u0026quot;|awk '{print $1;}'|grep -v ^.$ 私人 差別 待遇 女性 マッチングしてみる このキーワードでgoogle custom search の検索結果にマッチングをかけカウント数を取得して見ましょう。\n11,私人等に関するもの_強制・強要_家族間のもの_親の子に対するもの 11,私人等に関するもの_社会福祉施設関係_施設職員によるもの 14,私人等に関するもの_差別待遇_同和問題（うち公務員によるもの） 18,私人等に関するもの_社会福祉施設関係_施設職員によるもの（うち公営の施設に従事する職員によるもの） 19,私人等に関するもの_プライバシー関係_インターネット（うち同和問題に関する侵犯） インターネットがマッチしたのは良いのですが「同和問題」の中の「問題」の部分でカウント数を稼いでしまって思うような感じにはなりません。\n「もの」とかもカウント数を稼いでいるので汎用的なキーワードを除外する処理を入れる必要がありそうです。\n自動化の道のりは遠いですね。\nプログラム function getStatistics(){ : #curl -s \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=$ESID\u0026amp;lang=J\u0026amp;statsDataId=0003286680\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; -o \u0026quot;$STCSV\u0026quot; } function matchGcs(){ #VALUEより上の行を削除する vnum=$(cat \u0026quot;$STCSV\u0026quot;|grep -n \u0026quot;VALUE\u0026quot;|$AWK -F: '{print $1;}') echo \u0026quot;$vnum\u0026quot; cat \u0026quot;$STCSV\u0026quot;|$SED -e \u0026quot;1,$((vnum+1))d\u0026quot;|$AWK -F, '{print $6;}'|$SED -e \u0026quot;s|\\\u0026quot;||g\u0026quot;|sort|uniq|while read line;do local mcnt=$(echo \u0026quot;$line\u0026quot;|mecab|grep \u0026quot;名詞\u0026quot;|awk '{print $1;}'|grep -v -e ^.$|while read word;do cat \u0026quot;$GCSCSV\u0026quot;|grep \u0026quot;$word\u0026quot;|wc -l done| awk '{sum+=$0} END{print sum;}'); echo \u0026quot;$mcnt,$line\u0026quot; done|sort|uniq|sort -n } function main(){ #統計名でgoogle cloud searchを検索する getGcs;\u0026lt;---前回作成したもの #統計データを取得する getStatistics; #統計データの列情報とgoogle cloud searchの検索結果をマッチングする matchGcs; } main; exit; ","date":"2022-01-21T13:50:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-21-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-21-01-ani/","title":"e-Stat でGoogle Custom Search APIを使おう（４）"},{"content":"google Custom Searchの検索結果をcsvに整形する 統計データから列名を取得してgoogle Custom Searchの検索結果に当てに行きマッチする回数の高い列名を社会的関心の高い項目に設定したいと思います。\n全開でgoogle Custom Searchの検索の絞り込みができたのでAPIを叩く回数は統計名ごとに3回にしたいと思います。\nstart パラメータを1から開始して10ずつインクリメントしていきます。\ncurl -s 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxx\u0026amp;cx=xxxxxx\u0026amp;q=人権侵犯事件統計\u0026amp;start=1' curl -s 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxx\u0026amp;cx=xxxxxx\u0026amp;q=人権侵犯事件統計\u0026amp;start=11' curl -s 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxx\u0026amp;cx=xxxxxx\u0026amp;q=人権侵犯事件統計\u0026amp;start=21' 3回APIを叩いた結果に対してマッチングをかけていきたいと思うのですが、google Custom Searchの検索結果を見やすくするため前準備としてcsvに整形したいと思います。\ngoogle Custom Searchの検索結果はjsonですがjsonのパースはjqを使います。\njqのインストール jqのインストールは簡単です。\nbrew install jq jqを使ってgoogle Custom Searchの検索結果をjsonをパースする  \u0026quot;items\u0026quot;: [ ¦ { ¦ ¦ \u0026quot;kind\u0026quot;: \u0026quot;customsearch#result\u0026quot;, ¦ ¦ \u0026quot;title\u0026quot;: \u0026quot;昨年の人権侵犯事件 いじめ、教員関係が半減 | 教育新聞\u0026quot;, ¦ ¦ \u0026quot;htmlTitle\u0026quot;: \u0026quot;昨年の\\u003cb\\u003e人権侵犯事件\\u003c/b\\u003e いじめ、教員関係が半減 | 教育新聞\u0026quot;, ¦ ¦ \u0026quot;link\u0026quot;: \u0026quot;https://www.kyobun.co.jp/news/20210323_03/\u0026quot;, ¦ ¦ \u0026quot;displayLink\u0026quot;: \u0026quot;www.kyobun.co.jp\u0026quot;, ¦ ¦ \u0026quot;snippet\u0026quot;: \u0026quot;2021/03/23 ... それによると、昨年1年間に、同省の人権擁護機関が新たに救済手続きを開始した人権侵犯事件は9589件で、前年よりも5831件減少。同省の担当者は「他の統計 ...\u0026quot;, ¦ ¦ \u0026quot;htmlSnippet\u0026quot;: \u0026quot;2021/03/23 \\u003cb\\u003e...\\u003c/b\\u003e それによると、昨年1年間に、同省の人権擁護機関が新たに救済手続きを開始した\\u003cb\\u003e人権侵犯事件\\u003c/b\\u003eは9589件で、前年よりも5831件減少。同省の担当者は「他の\\u003cb\\u003e統計\\u003c/b\\u003e\u0026amp;nbsp;...\u0026quot;, items配列の中に検索結果が保存されているみたいです。\n取得する項目は、title、snippet、linkにします。\njqでカウントを取得する方法は length です。\njq '.items | length' 配列以下の要素の取り方は\n jq -r .items[0].title です。\n返却結果にダブルクォーテーションが入るのが邪魔なのでオプション -r をつけています。\nプログラムの内容、出力結果 プログラムは以下となります\n#!/bin/bash #グーグルカスタムサーチの結果を取得します APKEY=\u0026quot;xxxxxxxxxxxxxxxxxxxxxxxxx\u0026quot;; EGID=\u0026quot;xxxxxxxxxxxx\u0026quot;; START=1; STATISTICS=\u0026quot;$1\u0026quot;; AWK=`which gawk`; SED=`which gsed`; TMP=\u0026quot;gcstmp.json\u0026quot; RST=\u0026quot;gcsrst.csv\u0026quot;; cnt=0; function parse(){ items=$(cat \u0026quot;$TMP\u0026quot;|jq .items); length=$(echo \u0026quot;$items\u0026quot;|jq '.| length'); pcnt=0; while :;do if [ \u0026quot;$pcnt\u0026quot; -ge \u0026quot;$length\u0026quot; ];then break; fi item=$(echo \u0026quot;$items\u0026quot;|jq .[$pcnt]); title=$(echo \u0026quot;$item\u0026quot;|jq -r .title); snippet=$(echo \u0026quot;$item\u0026quot;|jq -r .snippet); link=$(echo \u0026quot;$item\u0026quot;|jq -r .link); echo \u0026quot;$title,$snippet,$link\u0026quot;|tee -a \u0026quot;$RST\u0026quot;; pcnt=$((pcnt+1)); done } function main(){ :\u0026gt;\u0026quot;$RST\u0026quot;; while :;do if [ \u0026quot;$cnt\u0026quot; -ge 3 ];then break; fi st=$((cnt*10+1)) curl \u0026quot;https://www.googleapis.com/customsearch/v1?key=$APKEY\u0026amp;cx=$EGID\u0026amp;q=$STATISTICS\u0026amp;start=$st\u0026quot; -o $TMP parse; cnt=$((cnt+1)); done } main; exit; 整形した検索結果は以下のようになります\n昨年の人権侵犯事件 いじめ、教員関係が半減 | 教育新聞,2021/03/23 ... それによると、昨年1年間に、同省の人権擁護機関が新たに救済手続きを開始した人権侵犯事件は9589件で、前年よりも5831件減少。同省の担当者は「他の統計 ...,https://www.kyobun.co.jp/news/20210323_03/ 難民とLGBT：世界における人権侵害の状況 | 難民研究フォーラム ...,2020/12/24 ... マッピング. 2019年末現在、「LGBTであること」や「同性間の性行為」などを刑法において犯罪としている国をマッピング ...,https://refugeestudies.jp/2020/12/lgbt/ 人権擁護委員 - Wikipedia,全国の人権擁護委員の2011年（平成23年）中の活動実績は、次のとおりである。 人権啓発活動従事回数 - 227,683回; 人権相談事件取扱件数 - 159,157件; 人権侵犯事件関与 ...,https://ja.wikipedia.org/wiki/%E4%BA%BA%E6%A8%A9%E6%93%81%E8%AD%B7%E5%A7%94%E5%93%A1 法務省：インターネットによる人権侵害をなくしましょう – Gov base,2021/04/30 ... ※プロバイダ責任制限法等については、後述の「参考」をご覧ください。 インターネットに関する人権侵犯事件の新規救済手続開始件数. 法務省の人権擁護機関 ...,https://www.gov-base.info/2021/04/30/112474 ","date":"2022-01-20T17:50:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-20-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-20-01-ani/","title":"e-Stat でGoogle Custom Search APIを使おう（３）"},{"content":"出典元：Web design trends for 2022 | Layout\nこの2年間で学んだことは、私たちは常に新しいものに適応し続けなければならないということです。2022年に向けて、デザイナーは人生のカオスを受け入れ、それをデザインで表現し始めています。\n2022年のトレンドは、より大胆で、よりクリエイティブで、よりインタラクティブなデザインに移行しています。クリエイターは、より破壊的なものに傾倒し、「良い」ウェブデザインとされるものの境界を押し広げようとしています。\n2022年に期待されるトレンドを取り入れ、新しい年のクリエイティビティを高めてください。\nインタラクティブなミニサイト あなたの実力をアピールしてください。専門性の高いコンテンツとインタラクションで、小規模で統制のとれた環境でスキルを発揮することは、デザイナーが新しいクライアントを獲得するための一つの方法です。また、潜在的な顧客に対しては、「作ることを楽しむ」ことで、オンリーワンの体験を提供できることをアピールしています。\n \n韓国の開発者、Jungik Leeが制作した、3つの簡単なタスクのいずれかをクリアするミニサイトです。たくさんの色と簡単な操作で、いろいろなものを作ったり動かしたりすることができ、カラフルな丸でページが埋め尽くされる様子は、実に楽しいものです。\n \nアムステルダム在住のウェブデザイナー、ヴィクトワール・ドゥイさんの小さなポートフォリオサイト では、インタラクティビティを駆使して人々の関心を集めています。カーソルを動かすだけで、色を変えたり、糸を引っ張ったり、オブジェクトを動かしたりすることができます。\nレトロな雰囲気のあるデザイン 米国のWebデザイナーの平均年齢は37歳で、ミレニアル世代に位置づけられます。ミレニアル世代はインターネットを日常的に利用するようになった最初の世代ですから、多くのデザイナーがウェブ創成期に流行したアートやタイポグラフィー、カラーに影響を受けているのは当然といえば当然でしょう。\n \nWild SoulsのEコマースサイトは、カラフルなシェイプと重なり合うスタイルで、食品会社にふさわしい楽しくて活気のある美学を表現しています。 ナッツ、ナッツバター、ハチミツ、マーマレードの専門店で、商品の上にカーソルを置くと、90年代にインスパイアされたビジュアルテーマをもとに、新しい質感や形がセンスよく追加されます。\n \nカートゥーン ネットワークは、白と黒を基調とし、大胆な色使いと楽しいアニメーションで、レトロでありながらトレンドを押さえたサイトです。\nオープンコンセプトデザイン この大流行が、私たちのデザイン嗜好にも影響を与えているのかもしれません。なぜなら、デザインに多くのオープンスペースを設けるという新たなトレンドが生まれたからです。6フィート（約3.5メートル）とはいかないまでも、デザイナーはセクション間のスペースをどんどん広げ、見出しに集中し、時にはヒーロー画像を完全に削除して、ユーザーに十分なスペースを与えています。\n \nどんな種類の蒸留酒もシャープでキレがあり、コロラド州デンバーにあるベア・クリーク蒸留所のウェブサイトも、余計な添加物を排除しています。ウェブサイトのデザインコンセプトは、彼らが精製するウォッカ、バーボン、ラム、ウイスキーと同様にクリーンです。\n \nアタルソン は、ニューヨークを拠点に、プロダクトとパッケージのデザイン、素材調達、製造を行っている会社です。サステナビリティは彼らのプロセスの中核であり、クリーンな製造という考え方は、ホワイトスペースの使用によってサイトでも視覚的に反映されています。このオープンスペースにより、デザインされた製品にスポットライトが当たり、画像上のホバー効果により、製品の概要や企業価値の説明が表現されています。\nより多くのカスタマイズ ユーザーがオンライン上で時間とお金を費やす機会が増えるにつれ、プロバイダーはより幅広い層のユーザーにアピールするための新たな方法を見出しています。そのため、多くのプロバイダーは、サイトやアプリで利用できるパーソナライゼーションのレベルを高め、すべてのサイトが従うべき標準的なアクセシビリティのベストプラクティスを超えるインクルージョン機能の大幅な改善を行っています。\n \nPinterest の「ビューティー」カテゴリは、サイト内で最も検索されているカテゴリの一つであり、同社はすべてのユーザーに対してより包括的に対応する必要性を認識していました。Pinterestは現在、「skin tone range」機能を提供することで、このカテゴリーにおいてより速く、よりパーソナライズされた体験を生み出しています。多くのユーザーにとって、これはアプリ上の明るい肌色の過飽和状態に対する答えであり、すべてのPinterestユーザーがより迅速かつ容易に自分に合った外見を見つけることができるようになりました。\n \nMastercardは、「True Name」システムを構築することで、より多くのカード会員が取引時に自分の本当のアイデンティティを表現できるようにする方法を見出しました。これにより、トランス系やノンバイナリのMastercard保有者は、法的に名前が変更されているかどうかにかかわらず、デッドネームの代わりに本名をカードに記載することができるようになりました。\n3Dオブジェクト、2Dスクロール 3Dモデルを使ったデザインと、フラットな2Dのコンテンツ表現は、説得力があり、完全に一体化しているように見えます。インタラクティブな3D要素を背景に、消化しやすいコンテンツを予測可能な方法で提示することは、ユーザーが物理的な概念をよりよく理解するために特に有効です。\n \nロシア・モスクワの中心部に位置するこの新しいビジネス街のプロモーションサイトは、3Dのセンターピースとシンプルでフラットなコンテンツに焦点を当てた素晴らしい例です。トップページにはスコルコボ・パークの可動式模型が表示されていますが、目立つように配置されたコンテンツの影に隠れることはありません。\n \nOne Ocean Scienceは、海洋保全と研究のグローバルリーダーを学際的な視点でつなぐことを目的とした、知識共有型のサミットです。ホームページでは、地球の3Dモデルの上を2Dでスクロールし、スクロールに合わせて様々な地域とそこで行われている研究を強調することでユーザーに情報を与えてます。\nブルータリズム・ライト ブルータリズムとは、非常にブロック的で幾何学的な、厳しい芸術や建築のスタイルを指します。ウェブデザインでは、従来のルールにとらわれず、ミニマリズムを追求した、大胆かつシンプルなスタイルが目立ちます。白と黒を基調としたサイトが多く、装飾はほとんどなく、文字も太く、峻厳な仕上がりになっているのが特徴です。\n \nイタリアのクリエイティブ・エージェンシー、カロセリングのブランド・アイデンティティは、正直で率直であることです。現実的な期待値を設定し、戦略の影響を考え抜き、クライアントの時間的・予算的制約を尊重することを信条としています。ブルータリスティックなサイトは、飾り気のない代理店のパートナーとしての彼らのストーリーを表現するのに役立っています。\n \nパリを拠点とするカリフォルニア生まれのデザイナー、リック・オウエンスは、かつて自身の家具デザインに対する哲学を \u0026ldquo;ブルータリズムの洞窟の中でブルータリズムの火のそばのブルータリズムの岩の上に立つ毛皮 \u0026ldquo;と表現したことがあります。彼の服やアクセサリーラインのウェブサイトには、家具はありませんが、イメージやレイアウトに明確なブルータリズムのインスピレーションを感じることができます。\nガラスモルフィズム グラスモーフィズム とは、その名の通り、画面がガラスでできている、あるいはガラスで覆われているかのように見せる技術で、一般的にはユーザーインターフェースの背景をぼかすために使用されます。2022年には、デザイナーがガラスのようなアニメーションオブジェクトやテキストを作成し、フロントエンドの境界を押し広げることで、このトレンドはさらに人気を集めると思われます。\n \nデジタル製品エージェンシーの Dovetail Studios は、異なる角度で回転する入れ子のリングのGlassmorphicセットをアニメーション化しました。目を引くとともに、彼らの3Dモデリング能力の高さがうかがえます。サイト内の他のアイコンも、この効果を反映しています。\n \n同じくデジタル・クリエイティブ・エージェンシーのLo and Behold Studios も、ホームページでGlassmorphicのアニメーション・オブジェクトを使用しています。しかし、全体的に明るいテーマであるため、ユーザーがDovetailのサイトを見たときに感じる印象とはまったく異なるものとなっています。\nクリエイティブなスクロール効果 多くのデザイナーは、昨年の横スクロールのトレンドを発展させ、さらにスクロールの効果を試しています。水平、横、多方向のいずれであっても、ユーザーがサイト内を移動する方向を変えることは、全体としてよりダイナミックな体験をユーザーに与える簡単な方法です。\n \nオランダの家具メーカー Moooi は、ユーザーがスクロールするにつれて、コレクションの奥深くに入り込んでいきます。同社のサイトでは、3つの体験ができます。美しく咲き、重力に逆らっていくまるで紙芝居のような体験です。それぞれ、画面を開くとコレクションが次々と現れ、スクロールするたびに新しいパターンや飾り模様に飛び込んでいきます。\n \n写真家のKayla Fisherさんの サイト では、サイドバイサイドスクロールで、メニューは画面の左側にべったりと配置されています。これによって、ユーザーにより深く入り込んでもらうための大きなボタンを見失うことなく、視覚的に魅力的な方法で彼女の作品を見ることができます。\n特大のタイポグラフィ ウェブサイトは、企業としてのあり方を大胆に表現するものであるべきです。多くの企業がこの考えを真摯に受け止め、見出しに特大のタイポグラフィを使用したり、ヒーロー画像（キャッチ画像）の代わりに使用したりしています。\n \nテクノロジー研究集団 HUMAIN は、人間の体験と技術革新の間のギャップを埋めるために活動しています。クロノス・グループの支援を受け、オンラインと生活の両方で人間の経験を向上させるために新技術を使用する新しい方法を見つけることを目的としています。複雑なストーリーを持つこの企業は、ヒーロー画像の代わりにテキストを使用することで、サイトに入った瞬間からその使命を訴えています。\n \nヘッドホンといえば、視覚的なものと同じくらい聴覚的なアイデアが思い浮かびます。ヘッドホンメーカーの AIAIAI の社名は、名前と同じくらい感嘆詞で、サイトを訪れたユーザーに大胆な主張を叫んでいます。大きなテキストで会社を紹介した後、折り返しのすぐ下に小さなヒーローに隣接した動画が表示され、ヒーロー画像→テキストという従来のパターンを崩しているのです。\n可視化された境界線 目に見えるボーダーは、デザインに構造を与え、コンテンツを通してユーザーの注意を引きつけます。シンプルな線だけで構成されるボーダーは、整然としたサイトを必要とするクライアント向けのデザインに役立ちます。一方、ファンキーでインタラクティブなボーダーは、大胆な色使いやインタラクティブな効果によって、オンライン訪問者にさらなる視覚的な興味を与えることができます。\n \n独立機関である Bonjour Paris は、可視化されたボーダーと水平スクロールを組み合わせることで、ミニマルでありながら興味をそそるサイトになっています。線状のボーダーは、サイト全体からプロジェクトセクションまで続き、曖昧で忙しい印象を与えることなく、新しい形を生み出しています。\n \nオーストラリアのレストラン「 Curry Cafe 」は2つの店舗を持ち、サイトのスクロールボーダーは、ユーザーがカラフルで魅力的な他のコンテンツを消費するための強固なフレームワークを提供します。\n抽象的なビジュアルを持つコラージュ部品 ウェブが始まってから、私たちは長い道のりを歩んできました。あるデザイナーは構造化された美学を受け入れ、またあるデザイナーは逆の方向に進んでいます。大胆な色使い、重なり合う画像、複数のテクスチャーなど、それぞれの要素が丁寧にデザインされていれば、シームレスに融合することができるのです。\n \nIlluminating Radioactivity は、 スティムソンセンター 、 Reinventing Civil Defenseプロジェクト 、 [Bombshelltoe Policy x Arts Collective]https://bombshelltoe.com/ が共同で作成した教育用ウェブサイトです。放射能」という言葉の歴史や意味、私たちの連想、そして放射能が科学、娯楽、医療などの分野でどのような役割を担ってきたのかが紹介されています。スクロールすると、歴史を物語る古い写真と、鮮やかで抽象的な形状の組み合わせが目に飛び込んできます。\n \nオーストラリアの The Loved Up Co は、パートナーとの夜の生活に必要なものがすべて揃った便利なキットで、デートの夜を華やかにするお手伝いをしています。ホームページでは、白黒写真のボディに、笑顔の口元や花、カクテルを組み合わせたコラージュ風の人物を掲載。また、抽象的な形や円、ジグソーパズルを随所に配し、コンテンツの中で視線を動かし続けています。\nウェブの未来をデザインする これらのトレンドに注目し、気になるコンセプトを試してみてはいかがでしょうか。2022年のウェブデザインのトレンドは、昨年のトレンドの延長線上にあることにお気づきの方もいらっしゃるのではないでしょうか。\n気に入ったものはありましたか？私たちが見逃しているものがあれば、教えてください。そして、残るスタイルも流行り廃りも、デザイナーが今年、クライアントと一緒に何を作るかにかかっていることを忘れないでください。\n","date":"2022-01-20T17:36:49+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/catch_hua4378086a6141903b68a22e47c9014eb_24823_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-20-02-wyoshi/","title":"2022年のウェブデザインのトレンドとレイアウト"},{"content":"はじめに 「未経験でもWebデザイナー、コーダーになろう」ではWebデザイナーやコーダーなどWeb業界を目指す方に、現役Webデザイナー兼コーダーができるだけわかりやすく、Webサイトをデザインしたり、作ったりする方法は情報を伝える講座です。\n初心者の方、そうでない方など、いろいろな方大歓迎です。\nまずはWebデザイナーやコーダーと言われる人たちがいる、Web業界の実際はこうだよというのをお伝えします。\nWeb業界に入るためには未経験だと厳しい？  未経験だと厳しい？ 学校で習わないと難しそう。  このようなことを思っているかもしれません。しかし、そんなことなありません。\nWebで働いてみたいという気持ちとポートフォリオと呼ばれる作品集。\nなにより少しでもできるてしまえば、入れる業界だと思います。\n \u0026quot;\u0026quot; \n初期費用が色々かかる？  パソコンを用意 Photoshopなどの高いアプリを買う必要がある  こういったことで、初期費用が色々かかるかと思っている人も多いと思います。\n今の時代は様々なWebサービスを駆使していろいろなことが無料でできます。\nもちろん、パソコンを持っていたほうが作業は簡単かもしれませんが、iPhoneやiPad、廉価なChromeBookやWindowsなどでもデザインからコーディングまでできてしまいます。\n特にiPhoneやiPadはデザインに特化することができると思います。\nそういったサービスやコンテンツ、アプリを使用してデザインからコーディングを行って誰でも簡単に自分のサイトを持つことができるようになりました。\nほんといい時代になりましたね。\nWEBデザイナーとは Webデザイナーと聞いてイメージするのは\n カッコいいサイトをデザインしている人 美的センスがいりそう Photoshopを使ってデザインをしている  と思うかもしれません。しかし、それが重要だと私は思いません。\nもっと重要なのは「情報をわかりやすくして、配置する力」ではないかと思います。\n \u0026quot;\u0026quot; \nWEBデザイナーとは「情報をわかりやすくして、配置する人」 Webデザイナーと一般的なデザイナーの違いは「Webデザイナーは何かを表現するものではない」と言う点だと思います。\n「Webデザイナーは情報をわかりやすくして、配置する人」こういうものではないかなと私は考えてます。\nデザインする上で、大事なのはそれぞれの関係性はどうなっているかです。\nそれをわかりやすく伝える、そのためには関連性があるものは近くにあったほうがいい。\nそうやって散らばっている情報と情報をつなげていく。それがWebデザイナーではないかと思います。\n \u0026quot;\u0026quot; \nWebコーダーは「Webデザインを表示して、使い勝手を作る人」 WebコーダーはWebデザインを実際にHTMLと言われる言語に書き換えて、CSSと呼ばれる言語でHTMLをお化粧していきます。\nお化粧をしていく上で大事なのはGoogleやBingのクローラーと呼ばれるプログラムに拾われやすくするということを意識しなければなりません。\nこれを SEO といいますが、今は知らなくても大丈夫です。\n簡単に言えば、ネットという広い海に出すためにわかりやすい地図を作ってくれる人にわかりやすく伝えるということです。\nデザイナーは見た目を作っていきますが、コーダーは使い勝手を作っていると言ってもいいのかもしれません。\nその他にも、Javascriptと呼ばれる言語を使って動きやいろいろな処理を行う場合もあります。\nWebデザイナーとコーダーは別のほうがいい？ Webデザイナーとコーダーが別々の作業を行って、もう片方の仕事内容を知らないでもいいかといえば、そうではありません。相互に理解していたほうがいいと思います。\nWebデザイナーがコーディングを知らない場合 例えば、Webデザイナーがボタンを押したときや開閉機能をつけたときの挙動をデザインしたとします。その場合の動作は誰が考えるのでしょう？\n多くの場合はデザイナーの頭の中に「ふわっと出したい」や「回転しながら出したい」といった考えがあるかと思います。スライドするコンテンツについても同様です。\nその際に、コーディングを知らなかったら指示を出せずに、コーダーの解釈でデザインが行われてしまいます。\nWebコーダーがデザインを知らない場合 逆にコーダーがデザインを知らないと、どうでしょうか。\n小さなデザインを見落として、デザイナーが作ったものと違うものが出来上がってしまうかもしれません。\n小さなデザインだったら気にならないのでは？と思うかもしれませんが、デザインではその違いが大きな違いにつながったりします。\nお互いに知ることが大事 お互いのことを知っていることで、仕事の効率も上がると思いますし、デザイナーはそのうち「自分で書いたほうがより良いデザインができる」と考え、コーダーは「なんかデザインがおかしいから、デザインから自分でやってみる」といったことも往々にしてあります。\nわたしはそうでした。\n特にWebのコンテンツはいろいろなことができてしまうので、知っているのと知らないのでは雲泥の差になります。\n 両方できるメリット Webデザインとコーディングが両方できると、なんとアプリを作ることができてしまいます。なので、自分の力を増やしていくために、片方だけではなくデザインとコーディング、両方の力を養っていったほうが断然いいですね。    \u0026quot;\u0026quot; \nWebデザイナーとコーダーに重要なこと Webデザイナーとコーダーになる上で特に大事なことが2点あります。\n サイトのターゲットは誰なのか サイトの最終的なゴール地点はどこなのか サイトの使い勝手はいいか 必要としている情報に簡単にアクセスできるか サイトのやブランドの持つイメージ  上記のようなことに注意して、デザインやコーディングを行っていく必要があります。\n例えば、若者向けのサイトなのに、すごく文字が大きかったり、その逆などは使う側にとってのストレスとなってしまいます。\nデザインで言えば 配色 や 文字サイズ には特に気をつける必要があります。\nコーダーで言えば 対象としているブラウザで崩れがないか や 動きがうるさくないか といったことに気をつける必要があります。\n UXとは？ UX（User eXperience）といいます。日本語ではユーザー体験となりますね。ユーザーのストレスにならないようにすることを、Webを通してユーザーに快適な空間や体験を与えるということです。   次回の予定 次回からはまず、簡単なWebデザインをしていきたいと思います。\nといっても、いきなりデザインを行うのは大変なのでまずは既存のサイトや、簡単な1ページのサイトの大枠を作成できたらなと思います。\nそれではまたの講座で会いましょう。\nおすすめの書籍  HTML\u0026amp;CSSとWebデザインが1冊できちんと身につく本[増補改訂版]   美しいデザインでサイト制作の知識とワザが「1冊で」身につく本格入門! PC\u0026amp;モバイルサイトデザインの基礎力とHTML・CSSコーディングの知識が1冊で同時に身につく! ウェブ制作を仕事にするならHTMLとCSSを学ぶことから始めますが、本書は体系立てた文法学習よりも、まずは「コーディングとはどのような作業なのか」を理解できる初学者向け入門書です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   1冊ですべて身につくHTML \u0026amp; CSSとWebデザイン入門講座   【全国の書店員さんがオススメする本「CPU大賞」第1位受賞!】 ずっと、一番売れているHTML本!\nWeb界隈やデザイナーに大人気! Web関連の情報やデザインについて記事が学べる『Webクリエイターボックス』の管理人、 Manaによる渾身のHTML \u0026amp; CSSとWebデザインが学べる本です。\n著者は、カナダやオーストラリア、イギリスの企業でWebデザイナーとして働き、現在は全国各地でWeb関連のセミナーに登壇し、Webサイト制作のインストラクターとして教育に携わっている。ブログ「Webクリエイターボックス」は2010年日本のアルファブロガーアワードを受賞。\nAmazonで詳細を見る\n\n\nAmazon.co.jpアソシエイトを使用\n  これだけで基本がしっかり身につく HTML/CSS\u0026amp;Webデザイン1冊目の本   Webサイト制作をこれから学ぶ人へ送る “1冊目\u0026#34;に最適の入門書! 【学びをサポートする4大特典つき】\n本書は手を動かしてWebサイトを作りながら HTML/CSSとWebデザインの基本を楽しく学べる入門書です。\n初学者が1冊目に読む本としてふさわしい内容を盛り込んでいるため、これを読めば必要な基礎知識がひととおり身につきます。 Amazonで詳細を見る\n\n\nAmazon.co.jpアソシエイトを使用\n ","date":"2022-01-20T14:10:38+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/catch_hu5536d92fadedd0441c43cc63d14f7fb2_1427671_0x400_resize_box_3.png","permalink":"https://suzukiiichiro.github.io/posts/2022-01-20-01-wyoshi/","title":"第0回「Webデザイナー、コーダーってなに？」〜 未経験でもWebデザイナー、コーダーになろう"},{"content":"Google Custom Search API 10件目以降の取得方法について 「木材流通統計調査」をgoogleで検索してみると最初の方は、政府関係の木材流通統計調査の概要説明などが上位に並んでいる感じです。\nそういったものからは木材流通統計調査の社会的関心がある項目を抽出することは難しそうです。\n２０件目超えたあたりに以下の記事が来ました。\nビジネス特集 木材が消えた？身近に迫る “ウッドショック”\n2021/06/01 — 【NHK】世界的に木材の価格が高騰している。 \u0026hellip; 農林水産省の「木材流通統計調査」によると、4月の「杉の丸太」の価格は去年の同じ月と比べて10％ \u0026hellip;\n22/01/19 にこのページにアクセスしました。\nここから「丸太の価格」などの高騰が「ウッドショック」と呼ばれる社会的現象を起こしていることがわかります。\nGoogle Custom Search APIは10件までしか結果を取得しないので、10件目以降の結果を取得する必要がありそうです。\n眺めてみると50件くらい取得すれば良さそうです。\nGoogle Custom Search APIの10件目以降を取得する方法はクエリのパラメータ startに開始位置を設定すれば良さそうです。\n最大100件目まで取得できるみたいです（10件ずつなのでstartの値を変えて10回叩く必要がありますね）。\nhttps://developers.google.com/custom-search/v1/reference/rest/v1/cse/list\nThe index of the first result to return. The default number of results per page is 10, so \u0026amp;start=11 would start at the top of the second page of results. Note: The JSON API will never return more than 100 results, even if more than 100 documents match the query, so setting the sum of start + num to a number greater than 100 will produce an error. Also note that the maximum value for num is 10.\ncurlで叩くと以下の方法になります。\ncurl 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxxxxxxx\u0026amp;cx=xxxxxxxxxxxxxxxxx\u0026amp;q=木材流通統計調査\u0026amp;start=11' Google Custom Search API 検索対象をnewsだけに絞り込めないか しかし、よくよく考えてみると社会的関心の高い項目を抽出しようと思ったらニュースなどに検索結果を絞り込んだほうが良い気がして来ました。\ngoogle検索結果のニュースタブをクリックして出て来た結果の方が使えそうです。\n ニュース \nニュースだと「ビジネス特集 木材が消えた？身近に迫る “ウッドショック”」が上位に来ていますし、以下のような興味深い記事もすぐ出て来ます。\nウッドショックはいつ収まるのか？ 住宅価格への影響は？ 木材価格高騰の直接原因と根本原因～時事解説\n輸入材不足の余波で国産材の価格は春先から上昇を続けてきた。農林水産省の木材流通統計調査によると、9月の丸太価格は杉が前年同月比2.4倍、檜は2.9倍の水準だ。木材の使用量で差はあるが、住宅1棟につき少なくとも数十万円以上のコスト増が主に中小工務店らの経営に重くのしかかる。\nGoogle Custom Search API でnewsだけに検索結果を絞り込む方法を調べてみました。\n昔は、クエリにsearchType=image imgType=news をいれれば絞り込めていたみたですが試したところエラーになって現在は使用できなそうです。\ngoogleの仕様書を見てもimgTypeに現在はnewsは指定できないみたいです。\nhttps://developers.google.com/custom-search/v1/reference/rest/v1/cse/list\nschema.org で絞り込む 現在は、検索エンジンの設定画面にある「schema.org」を使用して絞り込むみたいです。\nhttps://cse.google.com/cse/\nschema.orgで設定できる項目は非常に沢山あって何を設定するか迷います。\nhttps://schema.org/docs/full.html\n10個まで設定できるとのことで、とりあえずArticle,review,newsを文言に含むものにしてみました。\ncurlで叩く方法パラメータは今までと全く同じです。\ncurl 'https://www.googleapis.com/customsearch/v1?key=xxxxxxxxxxxxxxxx\u0026amp;cx=xxxxxxxxxxxxxxxxx\u0026amp;q=木材流通統計調査' ウッドショック 林野庁・農林水産省作成資料 - 一般社団法人 宮城県\n木質バイオマス発電のFITは両刃の剣だ（2ページ目） | コラム | 環境\n【ウッドショック】木材価格の高騰は私たちにどう影響？ 住宅の\nなど取得したいコンテンツの絞り込みができました。\n","date":"2022-01-19T18:31:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-19-02-ani/","title":"e-Stat でGoogle Custom Search APIを使おう（２）"},{"content":"出典元：8 Essential CSS Tips and Tricks Every Developer Should Know\nCSSは、HTMLスケルトンを設定した後、Webページにスタイルを追加するために使用されます。さらに、わずか数行のコードでCSSで洗練されたデザインを作成できます。\nすべての開発者は、プロジェクトを迅速かつ効率的に開発するために、これらのCSSのトリックを知っている必要があります。あなたの生産性を次のレベルに確実に向上させます。\nそれでは始めてみましょう。\nhover効果 ：hoverセレクターを使用して、HTML要素にホバー効果を追加できます。\n次の例ではボタン要素にホバー効果を追加します。\n\u0026lt;button\u0026gt;Hover Over Me\u0026lt;/button\u0026gt; button:hover { color: #0062FF; border: #0062FF solid 1px; background: #FFFF99; } このコードをいじって、フェードイン、拡縮、変形などのエフェクトを追加できます。\nCSSホバーへのフェードイン効果 button{ opacity: 0.5 } button:hover{ opacity: 1; } CSSホバーへの拡縮効果 button:hover{ -webkit-transform: scale(1.2); -ms-transform: scale(1.2); transform: scale(1.2); } divコンテナに合うように画像のサイズを変更します height、width、およびobject-fitプロパティを使用して、divコンテナに合うように画像のサイズを変更できます。\n\u0026lt;img class=\u0026#34;random-image\u0026#34; src=\u0026#34;画像ファイル\u0026#34; /\u0026gt; .random-image { eight: 100%; width: 100%; object-fit: contain; } すべてのスタイルをオーバーライドする !important を使用して、属性の他のすべてのスタイル宣言（インラインスタイルを含む）をオーバーライドできます。\n\u0026lt;p class=\u0026#34;className\u0026#34; id=\u0026#34;idName\u0026#34; style=\u0026#34;background-color: orange;\u0026#34;\u0026gt; Hello World! \u0026lt;/p\u0026gt; p { background-color: yellow; } .className { background-color: blue !important; } #idName { background-color: green; } この例では、!importantルールが他のすべての背景色宣言をオーバーライドし、背景色が緑ではなく青に設定されるようにします。\nただし、!important は便利ではありますが、使いすぎると上書きできないといった不具合にもつながるので、できるだけ階層を持ったCSSの記述を心がけてください。\n三点リーダー text-overflow のCSSプロパティを使用して、オーバーフローしたテキストを省略記号（\u0026hellip;）で切り捨てることができます。\n\u0026lt;p class=\u0026#34;text\u0026#34;\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit, sed do eiusmod tempor. \u0026lt;/p\u0026gt; .text { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 200px; } 文字の変形 text-transform CSSプロパティを使用して、テキストを強制的に大文字、小文字、または大文字にすることができます。\n指定文字を大文字にする（Uppercase） text-transform: uppercase;のCSSを使用すると、クラスなどで指定した範囲をすべて大文字表示にできます。\n\u0026lt;p class=\u0026#34;uppercase\u0026#34;\u0026gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. \u0026lt;/p\u0026gt; .uppercase { text-transform: uppercase; } 指定文字を小文字にする（Lowercase） text-transform: lowercase;のCSSを使用することで、クラスなどで指定した範囲をすべて小文字表示にできます。\n\u0026lt;p class=\u0026#34;lowercase\u0026#34;\u0026gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. \u0026lt;/p\u0026gt; .lowercase { text-transform: lowercase; } 先頭を大文字に（Capitalize） 先頭文字のみを大文字（Capitalize）したい場合は text-transform: capitalize; のCSSを使用します。\n\u0026lt;p class=\u0026#34;capitalize\u0026#34;\u0026gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. \u0026lt;/p\u0026gt; .capitalize { text-transform: capitalize; } 単一行プロパティ宣言の使用 CSSの省略形のプロパティを使用して、コードを簡潔で読みやすくすることができます。\nたとえば、CSS backgroundは、background-color、background-image、background-repeat、およびbackground-positionの値を定義できる省略形のプロパティです。\n同様に、フォント、境界線、マージン、およびパディングのプロパティを定義できます。\n単一行のbackgroundプロパティ宣言 background-color: black; background-image: url(images/xyz.png); background-repeat: no-repeat; background-position: left top; 上記の宣言を1行に簡略化できます。\nbackground: black url(images/xyz.png) no-repeat left top; 省略形のプロパティは非常に使いやすいですが、ブラウザ依存などもあるので、使用する際には、 tricky edgecases （MDN Web Docsで概説されている）を考慮する必要があります。\nツールチップ ツールチップは、ユーザーがマウスポインターを要素上に移動したときに、要素に関する詳細情報を表示する方法です。\n右方向のツールチップ \u0026lt;div class=\u0026#34;tooltip_div\u0026#34;\u0026gt; Right Tooltip \u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;This is the Tooltip text\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; body { text-align: center; } .tooltip_div { position: relative; display: inline-block; } .tooltip_div .tooltip { visibility: hidden; width: 170px; background-color: blue; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; /* Positioning the tooltip */ position: absolute; z-index: 1; top: -5px; left: 105%; } .tooltip_div:hover .tooltip { visibility: visible; } 左方向のツールチップ \u0026lt;div class=\u0026#34;tooltip_div\u0026#34;\u0026gt; Left Tooltip \u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;This is the Tooltip text\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; body { text-align: center; } .tooltip_div { position: relative; display: inline-block; } .tooltip_div .tooltip { visibility: hidden; width: 170px; background-color: blue; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; /* Positioning the tooltip */ position: absolute; z-index: 1; top: -5px; right: 105%; } .tooltip_div:hover .tooltip { visibility: visible; } 上方向のツールチップ \u0026lt;div class=\u0026#34;tooltip_div\u0026#34;\u0026gt; Top Tooltip \u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;This is the Tooltip text\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; body { text-align: center; } .tooltip_div { position: relative; display: inline-block; } .tooltip_div .tooltip { visibility: hidden; width: 170px; background-color: blue; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; /* Positioning the tooltip */ position: absolute; z-index: 1; bottom: 100%; left: 50%; margin-left: -60px; } .tooltip_div:hover .tooltip { visibility: visible; } 下方向のツールチップ \u0026lt;div class=\u0026#34;tooltip_div\u0026#34;\u0026gt; Bottom Tooltip \u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;This is the Tooltip text\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; body { text-align: center; } .tooltip_div { position: relative; display: inline-block; } .tooltip_div .tooltip { visibility: hidden; width: 170px; background-color: blue; color: #fff; text-align: center; border-radius: 6px; padding: 5px 0; /* Positioning the tooltip */ position: absolute; z-index: 1; top: 100%; left: 50%; margin-left: -60px; } .tooltip_div:hover .tooltip { visibility: visible; } Bootstrapライブラリを使用して、カスタムの Bootstrap tooltips を作成することもできます。\n影を追加 text-shadowおよびbox-shadowCSSプロパティをそれぞれ使用して、テキストおよび要素にCSSシャドウ効果を追加できます。\n文字に影を追加 text-shadow CSSプロパティは、テキストに影とレイヤーを追加します。 text-shadowプロパティは、テキストに適用されるシャドウのコンマ区切りリストを受け入れます。\n/* text-shadowには4つのCSSプロパティがあります:offset-x, offset-y, blur-radius, and color */ /* offset-x | offset-y | blur-radius | color */ text-shadow: 2px 2px 4px red; /* color | offset-x | offset-y | blur-radius */ text-shadow: #18fa3e 1px 2px 10px; color および blur-radius 引数はオプションです。\nこんなこともできます。\nbackground: #e74c3c; color: #fff; font-family: lato; text-shadow: 1px 1px rgba(123, 25, 15, 0.5), 2px 2px rgba(129, 28, 18, 0.51), 3px 3px rgba(135, 31, 20, 0.52), 4px 4px rgba(140, 33, 22, 0.53), 5px 5px rgba(145, 36, 24, 0.54), 6px 6px rgba(150, 38, 26, 0.55), 7px 7px rgba(154, 40, 28, 0.56), 8px 8px rgba(158, 42, 30, 0.57), 9px 9px rgba(162, 44, 31, 0.58), 10px 10px rgba(166, 45, 33, 0.59), 11px 11px rgba(169, 47, 34, 0.6), 12px 12px rgba(173, 48, 36, 0.61), 13px 13px rgba(176, 50, 37, 0.62), 14px 14px rgba(178, 51, 38, 0.63), 15px 15px rgba(181, 52, 39, 0.64), 16px 16px rgba(184, 54, 40, 0.65), 17px 17px rgba(186, 55, 41, 0.66), 18px 18px rgba(189, 56, 42, 0.67), 19px 19px rgba(191, 57, 43, 0.68), 20px 20px rgba(193, 58, 44, 0.69), 21px 21px rgba(195, 59, 45, 0.7), 22px 22px rgba(197, 60, 46, 0.71), 23px 23px rgba(199, 61, 47, 0.72), 24px 24px rgba(201, 62, 47, 0.73), 25px 25px rgba(202, 62, 48, 0.74), 26px 26px rgba(204, 63, 49, 0.75), 27px 27px rgba(206, 64, 49, 0.76), 28px 28px rgba(207, 65, 50, 0.77), 29px 29px rgba(209, 65, 51, 0.78), 30px 30px rgba(210, 66, 51, 0.79), 31px 31px rgba(211, 67, 52, 0.8), 32px 32px rgba(213, 67, 52, 0.81), 33px 33px rgba(214, 68, 53, 0.82), 34px 34px rgba(215, 69, 53, 0.83), 35px 35px rgba(216, 69, 54, 0.84), 36px 36px rgba(218, 70, 54, 0.85), 37px 37px rgba(219, 70, 55, 0.86), 38px 38px rgba(220, 71, 55, 0.87), 39px 39px rgba(221, 71, 56, 0.88), 40px 40px rgba(222, 72, 56, 0.89), 41px 41px rgba(223, 72, 57, 0.9), 42px 42px rgba(224, 73, 57, 0.91), 43px 43px rgba(225, 73, 57, 0.92), 44px 44px rgba(225, 73, 58, 0.93), 45px 45px rgba(226, 74, 58, 0.94), 46px 46px rgba(227, 74, 58, 0.95), 47px 47px rgba(228, 75, 59, 0.96), 48px 48px rgba(229, 75, 59, 0.97), 49px 49px rgba(230, 75, 59, 0.98), 50px 50px rgba(230, 76, 60, 0.99); 要素に影をつける box-shadowプロパティは、HTML要素に影を適用するために使用されます。\nbox-shadowの構文は下記になります。\nbox-shadow: [横方向のオフセット] [縦方向のオフセット] [ぼかしの量] [影の広がり（オプション）] [色]; ぼかし、広がり、色のパラメーターはオプションです。\n実際の記述は次のようになります。\nbox-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px; この記事で使用されている完全なソースコードを確認したい場合は、GitHubリポジトリをご覧ください。\nWebサイトにCSSのテキストシャドウを追加することは、ユーザーの注意を引くのに最適な方法です。Webサイトにある種のエレガンスとユニークな雰囲気を与えることができます。あなたのサイトのテーマに合うようなテキストシャドウの例を、創造力を働かせて試してみてください。\nまとめ いかがだったでしょうか。いままでJSを使ってやっていたことが実はCSSでも可能になっているケースが多いです。\nJavascript記述するよりも、cssのほうが軽量です。\nぜひ皆さんのサイトにも導入してUI、UXの向上につなげてみてください。\nおすすめの書籍  HTML5 \u0026amp; CSS3 デザインレシピ集   本書は、HTML5とCSS3によるWebサイト制作のための\u0026#34;おいしい\u0026#34;レシピ集です。 制作の現場で使われる定番テクニックから、プロ技まで余すところなく集めました。 テキスト/リスト/リンク/画像/ボックス/ テーブル/フォーム/ナビゲーション/ レイアウト/レスポンシブWebデザイン… テーマ別にレシピを整理しているので、引きやすくなっています。 「あのデザインはどう作るんだろう?」が、スグにわかります。 デザイナーからWebプログラマーまで、Web制作に携わるすべての方にお届けします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   HTML5＋CSS3の新しい教科書　改訂新版　基礎から覚える、深く理解できる。   この商品は固定レイアウトで作成されており、タブレットなど大きいディスプレイを備えた端末で読むことに適しています。また、文字列のハイライトや検索、辞書の参照、引用などの機能が使用できません。 〈電子書籍版に関する注意事項〉 本書は固定レイアウト型の電子書籍です。リフロー型と異なりビューア機能が制限されるほか、端末によって見え方が異なりますので、ご購入前にお使いの端末にて「無料サンプル」をお試しください。 【技術の進化に左右されないWebサイトの作り方がわかる！】 Web制作のプロを目指す方に向けて、HTML5\u0026#43;CSS3を使ったWebサイトの作り方を解説した入門書の改訂版。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-19T08:08:44+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/catch_hu144dc8c1d01c2bc536cd605c73db2bc8_60732_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-19-01-wyoshi/","title":"Javascriptを使わないで、CSSでもできる。開発者が知っておくべき重要なCSSのヒントとコツ 8選"},{"content":"統計名でgoogle検索して関心度の高いキーワードを抽出しよう e-Statの解析の目標として、膨大な統計データの中から一般の人に関心度の高いものを抽出してデータを要約したいと考えています。\ngoogle検索で上位にくるものは関心度が高いと言えるでしょうから統計名でgoogle検索して関心度の高いキーワードを抽出したいと思います。\ngoogle検索を自動でするためにGoogle Custom Search APIを使います。\nGoogle Custom Search API は１日１００回までは無料で、それ以上だと１０００回につき５ドル課金されるみたいです。\nhttps://developers.google.com/custom-search/v1/overview#pricing\n１日に発表される統計は10個いかないくらいなので無料の範囲で使えそうです。\nGoogle Custom Search APIを使ってみましょう。\nGoogle Custom Search API を使えるように設定する（2022年1月時点) 以下の手順で設定します。\n・googleアカウントを取得する\ngmailのメールアドレスです。\n・Google Cloud Platformでクレジットカード情報を登録する\nhttps://console.cloud.google.com/billing/create?hl=ja\n・プロジェクトを作成する\nhttps://console.cloud.google.com/projectcreate\n・認証情報を作成する\nhttps://console.cloud.google.com/apis/credentials\n「+認証情報を作成」をクリックして「APIキー」を選択すると\nAPIキーが作成されますのでコピーしておきましょう\n・APIキーの利用制限\nキーの制限をクリックしてAPIキーの利用を制限しておきましょう\n接続元が固定のIPアドレスを持っているなら「アプリケーションの制限」でIPアドレスを設定しましょう。\nAPIの制限もとりあえすCustom Search API １個にしときます。\n保存ボタンをクリックします\n・Custom Search API を有効にする\nhttps://console.cloud.google.com/apis/library/customsearch.googleapis.com\n「有効にする」ボタンをクリックします。\n・検索エンジンIDの取得\nhttps://cse.google.com/create/new\n検索するサイトは「www.google.co.jp（後で削除するので適当で良いです）」\n言語は「日本語」\n検索エンジンの名前は適当で良いです。\n左側の設定ボタンを押すと画面中央中段に「検索エンジンID」があるのでコピーします。\n検索するサイトをで「www.google.co.jp」を「削除」します\n「ウェブ全体を検索」を「オン」にします\nCurlでGoogle Custom Search API検索する 試しに検索してみましょう。\ncurlを利用します。\ncurlでAPIキー、検索エンジンID、キーワードを指定して検索します。\ncurl \u0026lsquo;https://www.googleapis.com/customsearch/v1?key=google apiキー\u0026amp;cx=検索エンジン ID\u0026amp;q=検索キーワード\u0026rsquo;\n「木材流通統計調査」で検索してみました。\ncurl \u0026lsquo;https://www.googleapis.com/customsearch/v1?key=google apiキー\u0026amp;cx=検索エンジンID\u0026amp;q=木材流通統計調査\u0026rsquo;\n結果はjsonで返ってきます。\n見た感じ、ブラウザのgoogle検索の結果と同じ感じなので良さそうですね。\n \u0026quot;items\u0026quot;: [ { \u0026quot;kind\u0026quot;: \u0026quot;customsearch#result\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;木材流通統計調査：農林水産省\u0026quot;, \u0026quot;htmlTitle\u0026quot;: \u0026quot;\\u003cb\\u003e木材流通統計調査\\u003c/b\\u003e：農林水産省\u0026quot;, \u0026quot;link\u0026quot;: \u0026quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/\u0026quot;, \u0026quot;displayLink\u0026quot;: \u0026quot;www.maff.go.jp\u0026quot;, \u0026quot;snippet\u0026quot;: \u0026quot;木材流通構造調査, 木材の販売金額、素材及び材料の入荷先別入荷量、製材品、合板及び集成材の出荷先別出荷量、製材用、合単板及び木材チップ製造用機械の所有状況、 ...\u0026quot;, \u0026quot;htmlSnippet\u0026quot;: \u0026quot;\\u003cb\\u003e木材流通\\u003c/b\\u003e構造\\u003cb\\u003e調査\\u003c/b\\u003e, \\u003cb\\u003e木材\\u003c/b\\u003eの販売金額、素材及び材料の入荷先別入荷量、製材品、合板及び集成材の出荷先別出荷量、製材用、合単板及び\\u003cb\\u003e木材\\u003c/b\\u003eチップ製造用機械の所有状況、\u0026amp;nbsp;...\u0026quot;, \u0026quot;cacheId\u0026quot;: \u0026quot;cMExMff56bgJ\u0026quot;, \u0026quot;formattedUrl\u0026quot;: \u0026quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/\u0026quot;, \u0026quot;htmlFormattedUrl\u0026quot;: \u0026quot;https://www.maff.go.jp/j/tokei/kouhyou/mokuryu/\u0026quot;, \u0026quot;pagemap\u0026quot;: { \u0026quot;cse_thumbnail\u0026quot;: [ { \u0026quot;src\u0026quot;: \u0026quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSmlCF9ltcQbjL9DAnpZfJIotIT2ej4cd_YfBfs5ew-v2FR_NxjLAGdFTTI\u0026quot;, \u0026quot;width\u0026quot;: \u0026quot;200\u0026quot;, \u0026quot;height\u0026quot;: \u0026quot;200\u0026quot; } ], \u0026quot;metatags\u0026quot;: [ { \u0026quot;viewport\u0026quot;: \u0026quot;width=device-width, initial-scale=1\u0026quot;, \u0026quot;format-detection\u0026quot;: \u0026quot;telephone=no\u0026quot; } ], \u0026quot;cse_image\u0026quot;: [ { \u0026quot;src\u0026quot;: \u0026quot;https://www.maff.go.jp/j/shared_new/shared/images/icon_pnavi@2x.png\u0026quot; } ] } },  検索結果 \n","date":"2022-01-19T00:31:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-19-01-ani/","title":"e-Stat でGoogle Custom Search APIを使おう（１）"},{"content":"最近ダークモードと呼ばれる機能に対応したアプリが増え、それと同じようにWebサイトでもダークモードに対応しているものを見かけるようになりました。\n今回はWebサイトの中でファビコンを1サイズで用意して、さらにそのファビコンをダークモードに対応させてみたいと思います。\nダークモードって何？ ダークモードとは画面の色を反転して表示するスマホやタブレットに追加された機能になります。\niPhoneやiPadなどが先行iOS13のリリースの際に実装しました。\n例えば、一般的なアプリの背景は白だったかと思いますが、ダークモードをオンにしているときは背景の色が暗めの配色となり、文字色が反対に明るめの配色になったりします。\nこの機能は光が抑えられるため、目に優しかったりすると言われてます。さらに、画面の発光を抑えられるため、バッテリーの持ちも良くなるとのことでした。\nこのダークモード機能がMacやWindowsなどのパソコンでも使用可能となり、それに伴ってブラウザでも使えるようになりました。\nWEBサイトをダークモードに対応 Webサイトを構築する際に、今までのCSSは下記のような記述になっていたかと思います。\nbody { background-color: #FFF; color: #000; } 背景を白にして、文字色を黒にするといったような記述です。\nこの場合、ダークモードに対応した端末で見た場合に、ダークモードがONであるにもかかわらず、背景が白のサイトが表示されてしまいます。\nこれをダークモードに対応させると、\n@media (prefers-color-scheme: dark) { body { background-color: #000; color: #fff; } } 上記のCSSのように @media (prefers-color-scheme: dark) を追記して、ダークモードの場合は別のCSSで上書きをしてやる必要があります。\n実はこの機能を使うことで、ファビコンも色を変えて、ダークモードに対応させることができてしまうのです。\nファビコンは1つ 今まで、ファビコンは大量に設置する必要がありました。\n全部設置仕様となると、50個近くのファイルを読み込んで、metaに記述する必要がありました。\nそんな手間をしたくないと思います。\nそもそも、そんなに大量のファビコンは必要でしょうか？\nモダンブラウザと呼ばれる最新のブラウザのみに対応であればファビコンは1つで十分です。\n「サイズごとに用意する必要があるのに、そんなことないだろ」と思われるかもしれませんが、近年のブラウザはSVGと呼ばれる形式の画像に対応しております。\nこの画像は従来のピクセルデータではなく、ベクターデータと呼ばれる座標で画像を構築してます。\n座標データなので、縮小、拡大しても画質は綺麗なままです。\nそれではSVGでファビコンを作ったらどうでしょうか？\nそうです。大量のサイズを用意しないで、1ファイルでファビコンを用意できてしまうのです。\nファビコンを設置 ファビコンをIllustratorやXDで作成して、SVG形式で保存します。\n作成したファビコンをWebサイトに反映します。\n\u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;favicon.svg\u0026#34; type=\u0026#34;image/svg+xml\u0026#34;\u0026gt; head部分に上記のlinkタグを記述します。hrefの部分は適宜変更してください。\nこれでファビコンをSVG化することができました。\nファビコンをダークモードに対応させる ダークモードに対応させるためにはもうひと工夫必要です。先程作成したファイルを開いて、CSSのスタイルを追加します。\nIllustratorで色を塗っていた場合、styleタグに色情報が記述されているかと思います。\nそこに、@media (prefers-color-scheme: dark) でダークモードの際の色を指定します。\nfillはSVGの塗りつぶしを意味してます。\n\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; .st0 { fill: #34495E; } @media (prefers-color-scheme: dark) { .st0{ fill:# FFF; } } \u0026lt;/style\u0026gt; これでfaviconもダークモード対応できました。\n実際にブウラウザでアクセスして、ダークモードを切り替えると確認できるかと思います。\nまとめ 今まで大量のfaviconを用意して、metaタグに記述していましたが、モダンブラウザになると、SVGファイル1つで様々なサイズに対応可能です。しかも画質がきれいなので、高画素端末で見ても安心です。\nさらに、SVGファイルのファビコンであればファイル自体にcssのスタイルを記述できるので、@media (prefers-color-scheme: dark) を使ってダークモードに対応することもできます。\nこうした小さなUI、UXの改善がウェブサイトの大きな改善につながるのではないかと思います。\nみなさんも、ぜひダークモードに対応したおしゃれなファビコンを設置してみませんか？\nおすすめの書籍  ブランディングデザインの教科書   企業経営に役立つ「ブランディング」と「デザイン」がこの1冊で一気にわかる! ブランディング成功の秘訣とは──。 これからブランディングをはじめたい経営者やプランナー、ブランド全体をデザインしてみたいというデザイナーや学生の方に向け、100以上のブランド開発実績を持つブランディングデザイナー西澤明洋が「ブランディング」と「デザイン」の方法を徹底解説。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   ICONISM 世界のアイコン・ピクトグラムのデザイン   情報をわかりやすく効果的に伝えるデザインと活用例が満載! アイコンやピクトグラムは、ガイドサインだけでなく、ブランディングやウェブサイト・アプリなど現代生活のあらゆる場面で、コミュニケーションを円滑にするためますます重要な役割を担っています。世界各国の優れたデザインと展開実例を用途別に集めた1冊です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-18T17:17:37+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/catch_hu535661bce2c742bf7a0f6a055ac0b6d1_28043_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-18-01-wyoshi/","title":"ファビコンは1サイズのみでいい。さらにダークモード対応させる"},{"content":"出典元：Top 15 Mobile App Development Trends to Watch for in 2022\nモバイルアプリ開発業界は、驚異的なスピードで進化しています。このデジタルダーウィン時代に生き残り、繁栄するには、変化するモバイルアプリ開発のトレンドに精通する必要があります。 今日、スマートフォンはデジタルメディアの成功の鍵です。これは、ビジネスモデル、運用モデル、および市場を驚くべき速度で根本的に変革します。 2022年までに、モバイルアプリ市場の収益は6,930億ドルに達すると予想されています。\nただし、ほとんどのアプリは失敗してしまっているであるということです。\nこの失敗の主な理由は、最新のモバイルアプリテクノロジーのトレンドを追跡および実装できないことです。または、より技術的に適応力のある競合他社に負ける結果になります。\nモバイルアプリを成功させるための最初のステップは、2022年のモバイルアプリ開発のトレンドを常に把握することです。これらの最新のトレンドのいくつかについて詳しく説明しましょう。\nモバイルアプリ開発の新しいトレンドが数多く出現していますが、ここでは、詳細な事実に基づいた調査の結果、モバイルアプリ開発のトレンドのTOP15を取り上げました。\n5Gの台頭 5Gテクノロジーは数年前から存在していますが、近年より注目されるうようになりました。テクノロジー企業は5Gを本格的に取り入れ始めており、5G対応デバイスが市場に出回っています。来年までに、6億6000万台のスマートフォンが5G接続になると予想されており、これは全デバイスの約47.5％を占めています。 世界中の5G接続が今後数年間でどのように成長すると予測されているかを見てみましょう。\n rise of 5g \n5Gの出現でアプリ開発はどうなる？ 5Gは、アプリの構築と使用の方法を変え、速度と効率が大幅に向上します。\nそれにより期待できることがいくつかあります。\n 5Gは4Gよりも最大100倍高速になります。 レイテンシーは50ミリ秒（4G）から1ミリ秒に短縮されます。 高解像度、低遅延、高速性能により、ビデオストリーミングアプリケーションは大幅に改善されるだろう。 5Gでは、これらの技術をアプリに統合することが容易になるため、ARやVRの機会が増えるだろう。 デバイスとスマートフォン間でのデータ転送がより高速かつスムーズになります。 5Gを使用すると、開発者はアプリのパフォーマンスに悪影響を与えることなく新しい機能を構築できます 識別のための生体認証データの処理が高速化されているため、モバイル決済はより迅速かつ安全になります。  全体として、5Gテクノロジーはアプリをより速く、よりスムーズに、より効率的にすることができます。また、イノベーションの余地も広がります。アプリに関するワクワクするようなアイデアは、もはやアイデアにとどまることはありません。5Gを使えば、それらを実現することができます。5Gが何をもたらすのか、今から楽しみです。\n折りたたみ式デバイス用アプリ 折りたたみ式端末はスマートフォン市場全体のシェアの先端ですが、今後数年で状況が変わってきます。統計局 によると、2022年には5,000万台が出荷されるとのことです。つまりモバイルアプリの開発戦略を練る際には、折りたたみ式デバイスも念頭に置くべきでしょう。2022年のモバイルアプリ開発のトレンドである折りたたみ式デバイスで、あなたのアプリがシームレスに動作することを確認してください。\n端末を折りたたんで大きな画面を提供することは、ユーザーにいい影響を与えます。\n 大きな画面は、詳細で没入感のある体験を提供するためのスペースを意味します。 マルチウィンドウにより、ユーザーは複数のタスクを同時に実行することができます。  ビデオストリーミングやゲームアプリは、画面サイズを大きくするだけで、折りたたみ式デバイスから最大限の利益を得ることができ、余分なスペースを使って追加の情報やコントロールを提供することもできます。このように、画面を意識したアプリの開発は、2022年のモバイルアプリ開発における最大のトレンドの1つとなるでしょう。\n ストリーミング \nAR＆VR ポケモンGOの成功は一時的なものだったかもしれませんが、モバイルアプリ開発におけるARの道を切り開いたと言えるでしょう。それは、VRを使ってユーザーに没入型の体験を提供することが現実的に可能であることを世界に示したのです。\n今日、周りを見渡せば、ブランドがユーザー体験を高めるためにAR＆VRを活用しているシーンは数多く見受けられます。\n IKEAはARを使用して、ユーザーが購入する前に自宅で家具がどのように見えるかを確認できるようにします。 L\u0026rsquo;Orealは、ユーザーが自分の顔に化粧をしたときの見え方を確認できるバーチャルメイクアップアプリを提供しています。 Lenskartは、ユーザーがメガネを買う前にバーチャルで試せるようにしています。  Apple、Google、Metaでさえも、AR \u0026amp; VRにイノベーションをもたらしています。グーグルはグーグルマップに「ライブビュー」という機能を導入し、ユーザーは現実の画像上でリアルタイムに方角を確認することができるようになりました。\nLiDARもまた、最近ARの分野で見られた重要な技術的進歩です。Appleによって光の速度のARと呼ばれる - 私たちは、この技術がiPad Pro、iPhone 12 Pro、iPhone Pro 12 Pro maxでデビューするのを目にしました。それは、ARをまったく新しいレベルに引き上げました。LiDARにより、低照度下でも優れた品質の写真を撮影することが可能になりました。\nAppleはIkeaと提携し、LiDAR技術を利用した新しいスタジオモード機能を開始し、家具の買い方にまで革命を起こしています。この機能を使うと、ユーザーは家具を置きたい場所にデバイスを向けると、LiDARテクノロジーが部屋をスキャンして、実物大の家具モデルをバーチャルに配置することができます。\n今年は、ARとVRが、私たちの想像を絶する方法でモバイルアプリ開発業界を形成することが予想されます。モバイルアプリのトレンドは、より主流になるでしょう。統計局によると、ARとVR技術の世界市場は、2018年の270億ドルから2022年には約2,090億ドルに上昇すると言われています。\nまた、今年はAR＆VRのユーザー数が急増することが予想されます。このようなモバイルアプリの開発トレンドを活用して、モバイルでユーザーにゲームを変えるような体験を提供する絶好のチャンスがあるということです。\n ar and vr \nウェアラブルアプリの統合 ウェアラブルデバイスがすでに世界を席巻しています。\n統計局 によると、接続されたウェアラブルデバイスは2017年に4億5300万に達し、2022年までに9億2900万に達するでしょう。\n今年は、ウェアラブルデバイス業界で多くの重要なことが起こっているのを見ました。\nアップルはWatchOS 8アップデートを発表しました。これは、アップルウォッチユーザーに新機能、新鮮なウォッチフェイス、ウォレットへのアクセスの増加、インターフェイスの再設計をもたらしました。\nGoogleも、同社のウェアOSとSamsungのTizenソフトウェア・プラットフォームを融合した統一ウェアラブル・プラットフォームを発表し、アプリの起動時間を30％向上させました。\nこれは、2022年のモバイルアプリ開発の必須トレンドの1つであるウェアラブルテクノロジーの台頭を意味するものです。\nつまり、アプリ開発者や企業は、スマートウォッチやウェアラブルでユーザーに優れたデジタル体験を提供するアプリを準備し、そうでない企業に対して明確な優位性を獲得する必要があるのです。\nこのモバイルアプリ開発のトレンドを取り入れ、シームレスなデジタル体験を提供することで、ターゲットとなる顧客との距離を縮めましょう。\n食品・食料品の配達アプリ 人々はロックダウン後、在宅時間が多くなるため、食料品の即日配達サービスやミールキットなどのアプリに大きく依存するようになり、この2つは2020年から21年にかけて最も成長したアプリのカテゴリーとなりました。\n food grocery delivery apps \nご覧の通り、2020年には食料品アプリの利用者が40.9％増加しました。ほとんどの人が、食料品の買い物は実店舗に行かず、オンラインで行うことを選んだのです。\n同様のことは、フードデリバリーアプリでも起こりました。安全性が高く、オンラインで食品を注文することを好む人が多いため、32.9％の上昇となりました。\nしかし、2021年にはどちらのアプリも人気が低下しています。食料品アプリが5.8％上昇したのに対し、フードデリバリーアプリの利用者は2.6％減少しました。\n通常の生活に戻れば、その成長も少し低下するかもしれません。食品・食料品アプリは、依然として私たちの生活の重要な一部となるでしょう。人々はオンラインで食べ物を注文することをやめることはないでしょうし、食料品アプリはスマートフォンユーザーの15.5%を占めることに変わりはないでしょう。\nいずれにせよ、時間が経てばわかることですが、2022年に食品・食料品配達アプリがどのような道を歩むのか、興味深いところです。\nモバイルエンターテインメント＆ゲーム エンターテイメントやゲームアプリは、今やライフスタイルの一部となりました。それ無しでは一日たりとも過ごせないという人もいるほどです。\nNetflixの米国とカナダでのアクティブな加入者が約74％であることから、モバイルエンターテイメントアプリの人気は推し量ることができます。それだけでなく、1億5910万人以上の携帯電話ユーザーがおり、モバイルデバイスはゲーマーに人気があり、米国のデジタルゲーマーの89%以上に相当します。\nこの数字は、2022年にはさらに上昇することが予想されます。\n mobile entertainment \nなぜモバイルエンターテインメントとゲームアプリが人気があるのか？  エンターテインメントを手軽に楽しめるようになった。\n高価なガジェットや高価なノートパソコンを買う必要はなく、モバイルで楽しむことができる。 映画を見たり、ゲームをしたりするために、1つの場所に閉じこもる必要がない。外出先でも楽しむことができる。 AR、VR、人工知能などの技術の進歩により、ゲームやエンターテインメントアプリは、より没入感のあるもの。 モバイルエンターテインメント＆ゲームアプリは非日常を提供する。  特にパンデミック時には、人々はゲームやエンターテインメントアプリに時間を費やし、気を紛らわせました。\nAIと機械学習 FaceApp（自撮り写真を加工するアプリ）の画期的な成功の後、ほとんどの人が疑問に思っていました。次は何をするのだろう？そんな時、AIは期待をさらに大きく前進させるものをもたらしてくれました。MyHeritageAppは、写真をリアルなアニメーションに変換するすごい機能をもたらしたのです。このアニメーションはとても印象的で、愛する人があなたに微笑んでいるように感じられます。その結果、多くのリアクションが生まれました。\n昨年、AIで起こった興味深いことはこれだけではありません。Googleがマップアプリに、AIを使ってユーザー体験を向上させる新機能を投入したのも記憶に新しいです。そのひとつが、広い屋内空間でARナビゲーションを提供するライブビューです。\nGoogleはAIを利用して、燃料消費量が少なくなるように道順を最適化し、二酸化炭素排出量の少ないルートを提案することも行っています。\nAIとMLは、ここ数年連続してモバイルアプリ開発のトップトレンドの1つとなっています。しかし、これらの技術の進歩は、2022年のモバイルアプリ開発のハードルを非常に高くしており、今年はそれが何をもたらすのか興味深いところです。\n機械学習もまた、革命的なことが起こるのが待ち望まれるエキサイティングな分野です。ディープラーニングが機械学習と手を組めば、貴重なデータとリアルタイムの分析を提供し、モバイルアプリ開発プロジェクトに素晴らしい効果をもたらすことができます。\nCAGR42％で成長する世界のML産業は、2019年の機械学習から2022年後半には約90億ドル規模になる見込みです。\nAppleは、機械学習における重要なプレイヤーの1つで、その優秀なMLモデルにより、開発者は没入感のある新しい体験を生み出すことができるようになりました。既存の機能を簡単に追加できるだけでなく、新しい機能を作ることもできます。その上、ML APIで新しい機能を追加することもできます。\n今年は、これらの技術に深く入り込み、その機能をきちんと理解し、多くの構成要素に触れることをお勧めします。\nモバイルアプリのセキュリティがより重視 チェック・ポイントの「State of Mobile Security 2021」レポートによると、約46％の組織が、悪意のあるモバイル・アプリケーションをダウンロードした従業員を少なくとも1人抱えているとのことです。従業員のモバイル端末への依存度が高いことを考えると、企業にとって懸念すべき問題であると言えます。\nほとんどの企業は、サイバーセキュリティがデータ保護や情報プライバシーに関する法律に直結していることを考慮して、サイバーセキュリティへの投資を増やそうとしています。\nこのように、デジタルセキュリティは、2022年のモバイルアプリ開発のトップトレンドの1つとして浮上しています。業界の優れた頭脳は、モバイルアプリにまつわる不確実性を引き出すためにレベルアップしています。WWDC 2021で、Appleは \u0026ldquo;iCloud キーチェーン\u0026rdquo; という新機能を導入し、パスワードレスの未来への第一歩を踏み出しました。これによって、アップルはパスワードに代わって、より安全なログインプロセスを提供することになりました。\n nobile app security \n2022年、モバイルアプリ開発業界は、セキュリティファーストのアプローチにシフトし、強固なDevOps戦略のロードマップを構築すると予想されます。\nスーパーアプリ 1つのアプリに1つの目的 - これが、モバイルアプリ開発会社の長年のアプローチです。しかし今、そのアプローチは変わりつつあります。企業は、単一目的のアプリから、複数の目的を解決するワンストップ・ソリューションにシフトしているのです。\nこのようなアプリはスーパーアプリと呼ばれ、アジアで絶大な人気を誇っています。しかし、このトレンドは欧米にも浸透しつつある。米国では、カリフォルニアに本社を置くブレインテクノロジーズ社が開発したNatural AIが面白い例として挙げられます。このアプリは、人々の携帯電話との付き合い方を変え、1つのアプリから複数の目的を解決できるようにすることを目指しています。\n super apps \nさらに、Facebookが単なるソーシャルメディアのプラットフォームからどのように拡張されたかをご覧になったことがあるかと思います。現在では、人々が製品を売買できるマーケットプレイスも提供されています。同様に、オンラインショッピングとは別に、請求書の支払いやAmazonからの支払いもできるようになりました。\n欧米では、スーパーアプリの流行はそれほど高くはなく、人々は1つに決める前にさまざまなソリューションを試すことを好むからです。それでも、最終的には誰もが利便性を求めるものです。スーパーアプリは、2022年に期待すべきモバイルアプリ開発のトレンドと言えるでしょう。\nモバイルコマース EEコマース分野は3兆5,600億ドル相当の売上を誇り、その72.9%はモバイルで発生しています。\nつまり、モバイルコマースはアプリ開発のトレンドとして高まっているのです。\nCOVIDの大流行後、ライフスタイルの大きな変化が見られました。大規模な小売業者から中小企業、個人消費者に至るまで、誰もがモバイルアプリに依存するようになったのです。\nそのため、適応できないEコマース企業は不利な状況に置かれています。彼らは多くの顧客を失い、彼らは変換することができるものを見逃しているもです。\nつまり、企業は、このトレンドに適応し、電子商取引のビジネスアプリを持っている必要があります。それは、彼らがカットスロート競争を生き残ることができる唯一の方法です。\nP2Pモバイルアプリ P2Pモバイルアプリは、モバイルアプリ開発分野を特徴付けるもう一つの重要なトレンドです。eMarketerによると、P2Pモバイルトランザクションの予測価値は2023年までに6,122億3,000万ドルに達するでしょう。これは、現在、P2Pモバイルアプリに大きな可能性があることを意味します。\n p2p mobile apps \nP2Pモバイルアプリが企業やユーザーの間で人気を集めている理由は、その利便性にある。ユーザーは素早く支払いができ、売り手は自分のアカウントに直接支払いを受けることができます。そのため、余計な手間がかかりません。\n今年、私たちの周りで見られるP2Pモバイル・アプリの種類をいくつか紹介ましょう。\n 決済機能を内蔵したソーシャルメディアプラットフォーム 決済のためのシステムを組み込んだモバイルOSシステム。例：Apple Pay、Samsung Pay、Android Payなど。 独自の決済システムを提供している独立系プロバイダー。 銀行を決済の当事者とするP2Pアプリ。 暗号通貨のウォレット。  P2Pモバイルアプリのアイデアがあるなら、それを実現する絶好の機会です。\nブロックチェーン 私たちがブロックチェーンについて初めて耳にしたのは、暗号通貨ブームの時でした。しかし、今ではこの技術は大きく進歩し、さまざまな分野で応用できるようになりました。かなりの勢いで成長しており、2024年までに200億ドルの収益が蓄積されると予想されています。ブロックチェーンは、モバイルアプリ開発においても極めて重要な役割を担っています。\n分散型アプリは最近の流行りです。ブロックチェーンウォレットは7000万個以上あり、そのうちモバイルウォレットは最も好まれるブロックチェーンウォレットの形態です。これらの統計は、ブロックチェーンウォレットのユーザー数が大幅に増加していることも示しています。\n blockchain \nそのほかに、デジタル資産の追跡、デジタルIDの保護、ロイヤルティプログラムの追跡にブロックチェーンを使用する通貨換算器も見られます。\n2022年以降には、インテリジェント・コントラクト、著作権侵害防止ソフトウェア、選挙を穏健化するツール、Blockchain as a service（BaaS）プラットフォームなど、このトレンドがより主流になると見ています。特にモバイルコマースやモバイル決済アプリでは、ブロックチェーンを利用して不正を未然に防ぐことができるのです。\n予測分析 企業は以前からモバイルアプリで予測分析を利用しています。Netflixは、ユーザーの視聴習慣に基づいて映画やテレビ番組を推薦するためにこれを使用しています。また、Amazonは、予測分析を活用して、商品の推薦をパーソナライズしています。\n今年は、予測分析がより主流になると思われます。ここでは、2022年のモバイルアプリ開発において、このトレンドが重要な役割を果たすと考えられる2つの分野を紹介します。\n 開発プロセスの最適化へ\n企業は、開発者から収集したデータを処理することで、問題を事前に発見し、より良い代替案を提案することができます。 ユーザーエクスペリエンスを向上させるために\n企業はユーザーデータを利用して、ユーザーの行動を予測し、その旅をパーソナライズすることができます。  その結果、優れた品質を維持しながら開発期間を大幅に短縮し、イノベーションの実現により注力することが可能になったのです。\nモバイル学習 統計局によると、従業員の35％ がモバイルデバイスを頻繁に使って学習しているとのことです。また、モバイルラーニング市場は、2025年までに585億ドルに達し、2020年から2025年にかけて21.45%のCAGRが約束されると予想されています。つまり、モバイルラーニングは、モバイルアプリ開発のあり方を変える、有望なトレンドといえます。\nモバイルラーニングは多くの理由で有名です。まず、学習が簡単にアクセスできるようになります。学習者はどこでも、誰でも学習できるため、力を得たと感じられます。さらに、継続的なフィードバックや360度学習などの体験により、学習がインタラクティブで楽しいものになりました。\nコースの修了率の向上、学習の迅速化、エンゲージメントの向上、知識の定着率の向上につながるため、現在では企業でもモバイル学習が支持されています。\nそのため、モバイル学習アプリの需要は高いといえます。画期的なアイデアや、社員教育のためにモバイル学習ソリューションを立ち上げる計画があるのなら、今こそ教育アプリ開発を専門とするチームにコンタクトを取るべきでしょう。\nIoT対応のモバイルアプリ インターネットは私たちの生活の中に深く入り込んでいます。スマートフォン、ノートパソコン、タブレットから、音声で操作できるスマートホームデバイスまで、私たちはインターネットに接続された機器に囲まれています。モノのインターネット（IoT）は、単なるトレンドにとどまらず、2022年の市場規模は5940億ドルと推定され、私たちの日常生活の一部となりました。\nここ数年、アマゾンやグーグルのようなブランドがこの技術をフルに活用しているのを目にしました。彼らはそれぞれ「Echo」シリーズのデバイスとGoogle Home Voice Controllerを発表して、IoTの競争を強化しました。\nしかし現在では、Samsung、Xiaomi、Bosch、Honeywellなどのブランドも、モノのインターネット技術に急速に移行しています。小売業における継続的なサプライチェーン、スマートホーム、精通した健康保険プランなどは、もはやSF的なものではなく、現実に生きてきているのです。\nIoTガジェットやシステムの需要増加に伴い、IoT対応アプリの需要も同時に増加するため、2022年のモバイルアプリ開発のトップトレンドのリストに含まれています。\nまとめ GoogleとAppleのApp Storeを合わせると663万個のアプリが存在します。あなたのアプリを目立たせるには、どうしたらいいでしょうか？\n実は、モバイルアプリ開発の最新トレンドを常に把握し、それを活用して堅牢で機能豊富なアプリを提供する方法を知らなければ、できないことなのです。\nモバイルアプリ業界は今後も急速に拡大し、モバイルアプリ開発の領域も進化していくでしょう。新興のモバイルアプリプラットフォーム開発技術、上昇するバックエンドプラットフォーム、マイクロサービス、そして新しいハードウェアの性能と相まって、モバイルアプリソリューションの舵取りを続けていくでしょう。継続的に学習し、常に意識することが、熾烈な競争を勝ち抜く唯一の方法なのです。\nおすすめの書籍  NO RULES(ノー・ルールズ) 世界一「自由」な会社、NETFLIX  5万部突破!! 日経朝刊で「経営者が読むべき1冊」と激賞! (2020年12月26日付) 「日本でこんなマネのできる企業はまずないだろうが、海外の競争相手はネットフリックス流の人材厳選主義を採用しているかもしれない。その迫力と怖さを知るためにも、経営者が手に取るべき本である」 ●Netflixはどうやって190カ国で2億人を獲得できたのか？。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   オードリー・タン デジタルとAIの未来を語る  オードリー・タン氏自身が、自らの考え、行動、夢を語る。 世界のメディアがいま、最も注目するテクノロジー界の叡智が、描くデジタルとAI（人工知能）の未来！ 台湾は、2020年に全世界を襲った新型コロナウイルス（COVID－19）の封じ込めに唯一成功しました。 本書は、その中心的な役割を担った若きデジタル担当政務委員（閣僚）が、コロナ対策成功の秘密、デジタルと民主主義、デジタルと教育、AIと社会・イノベーション、そして日本へのメッセージを、自身の言葉で語りつくします。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2022-01-17T18:11:53+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/catch_hua4378086a6141903b68a22e47c9014eb_24823_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-17-01-wyoshi/","title":"2022年に注目すべきモバイルアプリ開発トレンド 15選"},{"content":"Pandas DataFrameオブジェクト Pandasでcsvをread_csvするとDataFrameオブジェクトとして読み込まれます。\nDataFramオブジェクトは２次元配列な感じです。\n１次元目が列、２次元目が行のイメージみたいです。\n例えば以下のcsvだと\ndate,value 2019,2845 2020,3246 2021,3633 read_csvしたDataFrameオブジェクトの変数名をdfとすると\nそれぞれのデータには以下の方法でアクセスします。\ndf['date'][0]-\u0026gt;2019 df['date'][1]-\u0026gt;2020 df['date'][2]-\u0026gt;2021 df['value'][0]-\u0026gt;2845 df['value][1]-\u0026gt;3246 df['value'][2]-\u0026gt;3633 read_csvするとデフォルトだと１行目を列名とみなすみたいです。\nアクセスの方法も列名が反映され連想配列っぽくなります。\nPandas Seriesオブジェクト hampelの第１引数はPandasのSeriesオブジェクトです。\nSeriesオブジェクトは１次元の配列みたいです。\nDataFrameオブジェクトからSeriesオブジェクトに変換する方法ですが\n以下の方法でできます。\ninput=pd.Series(df['value']) csvを読み込んでhampelメソッドを使い異常値を検出する 。 プログラムは以下の流れになります。\ncsvをread_csvでDataFrameオブジェクトとして読み込む。\nDataFrameオブジェクトからSeriesオブジェクトを生成する。\nSeriesオブジェクトを使ってhampelメソッドを呼び出して異常値を検出する。\nソースコードは以下の通り\nimport matplotlib.pyplot as plt import pandas as pd from hampel import hampel # データ取得 df = pd.read_csv('./kome.csv') print(df.columns) print(df['value']) input = pd.Series(df['value']) rsts = hampel(input, window_size=5, n=3) for rst in rsts: print('%d:date:%s value:%d' % (rst,df['date'][rst],df['value'][rst])) ","date":"2022-01-17T17:46:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-17-02-ani/","title":"s-Stat 時系列データで異常値を検知しよう（３）"},{"content":"hampel フィルタとは 時系列データの異常値検知で良いのないかなあと探しました。\n最近は機械学習で時系列データの異常値検知をやっているものが結構ある感じでしたが、\ne-Statの統計データですが年次や月次だったりするのでデータ数がそんなに多くないので機械学習はどうだろうと思い今回は機械学習以外の方法を探しました。\n標準偏差などを利用して異常値を検出するアルゴリズムとしてHampelフィルターというものがありました。\npythonでhampelというライブラリーで簡単に利用できそうなのでまずこれを試してみます。\npython hampel ライブラリを利用 hampelはpip で簡単にインストールできます\npip install hampel import matplotlib.pyplot as plt import pandas as pd from hampel import hampel input=pd.Series([3, 2, 1 , 3 , 1, 2, 9, 2, 1, 22, 1, 1, 8]) rst = hampel(input, window_size=5, n=3) print(\u0026quot;rst: \u0026quot;, rst) bash-3.2$ python p.py rst: [6, 9, 12] 時系列データをpandasのSeriesに１次元で食わせて\nhampelメソッドを呼び出すだけで簡単に異常値が検出できます。\n異常値が検出された配列の番号が返却されます。\nこの例だと7個目の9,10個目の22,13個目の8です。\nwindon_size などは経験的にパラメータ調整するみたいです。\n次回は前回読み込んだcsvを使って異常値を検出するところまで行きたいと思います。\n","date":"2022-01-17T10:51:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-17-01-ani/","title":"s-Stat 時系列データで異常値を検知しよう（２）"},{"content":"出典元：Prevent Scroll Chaining With Overscroll Behavior - Ahmad Shadeed \nposition: fixedの要素があるとしましょう。スクロールがある場合は、要素の下部の境界に到達すると、ブラウザはbody要素をスクロールし続けることに気付くでしょう。これは望ましくない混乱を招く効果です。ありがたいことに、CSSで修正できます。 この記事では、overscroll-behavior CSSプロパティ、それが解決する問題、その仕組み、および使用場所について説明します。\nはじめに 非常に一般的な問題を取り上げましょう。ビューポートの中央に配置されたモーダルダイアログがあります。そのモーダルの下に、実際のWebページのコンテンツがあります。\n \nモーダルコンテンツの最後に到達すると、ブラウザは代わりにメインページのコンテンツをスクロールし続けます。これはスクロールチェーンと呼ばれます。これはデフォルトの動作であり、overscroll-behaviorという新しいCSSプロパティでオーバーライドできるようになりました。\n \n多くの場合、この動作は不要であり、ユーザーがモーダルコンテンツに集中できなくなる可能性があります。上の図では、モーダルの最後に到達したときに、ページがスクロールし続けていることに注目してください。\n無理やり対応する 以前は、Javascriptを介してbody要素にoverflow: hiddenを適用することでこれを修正していました。モーダルが開かれると、オーバーフローの適用を担当するクラスが本体に追加されます。\nbody.modal-open { overflow: hidden; } .modal.is-open { display: block; } このやり方は、以前はデスクトップブラウザ間で完全に機能していましたが、iOS上のSafariでは動作しませんでした。これを機能させるには、body要素にposition: fixedを追加する必要もあります。\nbody.modal-open { position: fixed; overflow: hidden; } .modal.is-open { display: block; } これは機能しますが、ブラウザが一番上までスクロールし、ユーザーが手元のタスクから気をそらしてしまいます。これは、他の問題を引き起こす修正です。\nベン・フレインによる 記事 に固定されたものを除いて、私はその解決策を知りません。 ベンの記事のスニペットによると、モーダルがアクティブになったら、\u0026lt;body\u0026gt;要素に以下を追加する必要があります。\n.bg-scrolling-element-when-modal-active { /* when modal active */ touch-action: none; -webkit-overflow-scrolling: none; overflow: hidden; /* Other browsers */ overscroll-behavior: none; } 2018年にクライアントプロジェクトに取り組んだことを覚えています。そこでは、iOSのモバイルメニューの本文のスクロールを防ぐことはできないと彼に話しました。\n彼は：\n プログラミングで不可能なことは何もありません。解決策があると確信している。\n といっていました。\n「プログラミング？」と思うかもしれませんが、それはCSSを指します。多くのことを試して、研究し続けましたが、完璧な解決策はありませんでした。\nそれでは時間を遡って、overscroll-behaviorをソリューションに紹介したいと思います。\noverscroll-behaviorについて overscroll-behaviorプロパティは、スクロール領域の境界に到達したときにブラウザが実行する処理を設定します。 Safariを除くすべての主要なブラウザで[サポートされています。プロパティは、overscroll-behavior-xおよびoverscroll-behavior-yの省略形です。 overscroll-behaviorを設定すると、両方の軸が設定されることに注意してください。\n設定可能な値を見てみましょう。\noverscroll-behavior: auto デフォルト値は auto で、これによりスクロールチェーンが可能になります。スクロール要素があり、その境界に達すると、ブラウザは\u0026lt;body\u0026gt;コンテンツをスクロールし続けます。\n \n \noverscroll-behavior: contain その名前から、値containには、要素の境界内にスクロールが含まれます。次の図では、スクロールは青い輪郭のラッパー内に含まれています。\n \n \noverscroll-behavior: none none を設定すると、 contains と同様の効果があり、 さらに ページの上部または下部に達したときのバウンス効果を防ぎます。\nユースケースと例 overscroll-behavior がどのように機能するかがわかったところで、いくつかの便利なユースケースを見てみましょう。\nモバイルナビゲーション モバイルナビゲーションが長すぎる場合、スクロールが速すぎると、本文のコンテンツでスクロールチェーンの問題が発生する可能性があります。\n次の図には、スクロール可能な長いナビゲーションリストがあります。\n \nスクロールが含まれていない場合は、本文のコンテンツもスクロールします。それを避けることができます\n.nav { overscroll-behavior-y: contain; overflow-y: auto; } 動画で見てみましょう。\n \nナビゲーションの下に表示される半透明の背景を追加しました。 overscroll-behavior-yプロパティをオフに切り替えたときの動作に注意してください。\nオフに切り替えると、ボディスクロールが発生します。\nただし、ナビゲーションが短く（つまり、スクロールできない）、ユーザーが理由もなくスクロールしようとすると、overscroll-behavior-y: containであっても、本文がスクロールすることに注意してください。\n \n残念ながら、記事の冒頭で紹介した「無理やり対応」以外の修正方法はわかりません。\nサイドナビゲーション overscroll-behavior のもう1つの便利な使用法は、サイドバーとメインがある場合です。その場合、サイドバーは固定されており、コンテンツが長すぎるとスクロール可能になる可能性があります。\n \nサイドバーの端の境界に達したときにメインセクションがスクロールしないようにするには、次を追加する必要があります。\n.aside { overscroll-behavior-y: contain; } チャットコンポーネント  \nFacebookに触発されたチャットコンポーネントは、 overscroll-behavior の完璧なユースケースです。これを使用して、最後に到達したときにボディがスクロールしないようにすることができます。\n.aside { overscroll-behavior-y: contain; } モーダルコンテンツ 記事内で最初に行った例はモーダルなので、繰り返しません。ただし、モーダル内にリストが必要な場合があり、そのリストがスクロール可能である場合は、スクロールチェーンを発生させたくありません。\n \nモーダルのオプションのリストに注意してください。これはスクロール可能なリストです。その境界に達すると、モーダルコンテンツがスクロールします。これを回避するには、 overscroll-behavior を使用します。\n.list-wrapper { overscroll-behavior-y: contain; overflow-y: auto; max-height: 130px; } 水平リスト Facebookのホームページでこのユースケースを見つけました。ユーザーのリストがあるセクションがあり、次の図に示すように水平方向にスクロールします。\n \nこれはoverscroll-behavior-xのベストな使い方です。\n.list { overscroll-behavior-x: contain; } まとめ CSS overscroll-behavior は、何年も前に無理やり対応していた問題を解決する便利なプロパティです。\nおすすめ書籍  ざっくりつかむ　CSS設計[リフロー版]   Web制作の現場でこれだけは知っておきたい、CSSの扱い方、管理、運用の基本！ Web開発が複雑化した現在、CSSについても仕様や知識を知っているだけでは対応できない問題が増えています。\nAmazonで詳細を見る\n\n\nAmazon.co.jpアソシエイトを使用\n  プロの「引き出し」を増やす　HTML\u0026#43;CSSコーディングの強化書  HTML・CSSの基本は覚えたけれど、デザインカンプから情報を読み取って、イチからコーディングするのはまだ無理……。 初心者を脱して、コーダー／マークアップエンジニアとして制作現場でバリバリ活躍する力をつけたい。 本書はそんな方に向けたものです。\nAmazonで詳細を見る\n\n\nAmazon.co.jpアソシエイトを使用\n ","date":"2022-01-15T12:16:02+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/intro_hube3343b77de99cb499300b8d9b324547_119554_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-15-01-wyoshi/","title":"overflow: scroll で後ろまでスクロールするのを防ぐ方法 - スクロール連鎖の防止"},{"content":"s-Stat 時系列データで異常値を検知しよう たくさんあるデータの中から関心の高そうな項目を抽出して表示しようというテーマでe-Statデータを取り扱っています。\n関心の高そうな項目としては、キーワードが重要というのもあります。これは前回で取り扱ったテーマでgoogle検索などを利用してピックアップしてこうかなと考えております。\nそのほか、値が急上昇、急下降したような場合も関心が高い項目と言えそうです。\n今回は、データの中から値が急上昇、急下降した場合を抽出する方法を考えて行きたいと思います。\nwebで検索した感じだと今回やりたいことは、時系列データの異常値を検知するというものみたいです。\n方法を色々調べてみたのですがpython のhampel を使うのが簡単そうです。\ne-Statのapiを取得したcsvを利用しますので、まずpythonでcsvを取り扱う方法から調べる必要があります。\npython でcsvを取り扱う 今回は、pandasを利用することになるのでpandasでcsvを読み込むことにします。\n課題としては、商品の小売価格の変動が分かりやすいので「小売物価統計調査 小売物価統計調査（動向編） 」から札幌市のコシヒカリの値段を抜粋してcsvを作成したいと思います。\nwget \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003421913\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; -O kouri.csv cat kouri.csv |grep \u0026quot;札幌市\u0026quot;|grep \u0026quot;1001 うるち米(単一原料米,「コシヒカリ」)\u0026quot;|awk -F, '{print $10\u0026quot;,\u0026quot;$13;}'|sed -e \u0026quot;s|\\\u0026quot;||g\u0026quot;|sort -n \u0026gt;kome.csv 2002000101,2483 2002000202,2483 2002000303,2480 2002000404,2520 2002000505,2573 2002000606,2520 2002000707,2431 2002000808,2404 こんな感じで年月と値段の２列のcsvになりました。\npythonのソースコードは以下の通り\nimport matplotlib.pyplot as plt import pandas as pd from hampel import hampel df = pd.read_csv('./kome.csv') print(df) 2002000101 2483 0 2002000202 2483 1 2002000303 2480 2 2002000404 2520 3 2002000505 2573 4 2002000606 2520 .. ... ... 233 2021000707 2470 234 2021000808 2443 デリミタが「,」の時はdelimiter=\u0026quot;;\u0026ldquo;みたく第２引数で指定する必要はないみたいです。\ncsvの読み込み方はいろんなサイトに書かれているのですが、読み込んだcsvを操作する方法についてはすぐ出てこなかったので次回はpandasで読み込んだcsvを操作する方法を取り扱いと思います。\n","date":"2022-01-14T13:40:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-01-ani/","title":"s-Stat 時系列データで異常値を検知しよう（１）"},{"content":"はじめに HTMLをこれから始める人、HTMLってプログラムみたいで難しそうと思っている人、HTMLで挫折してしまった人。そういった人たちでもHTMLがわかるようになってほしいと思って「現役Webデザイナーが教えるHTML初心者講座」を始めてみました。\nまずは簡単にタグを覚える方法を紹介します。\nHTMLってなに？ HTMLとは（Hypertext Markup Language、ハイパーテキスト・マークアップ・ランゲージ）と呼ばれる言語のことで、書き方でタイトルや文章、箇条書き、画像の挿入ができたりします。\n例えば\n\u0026lt;h1\u0026gt;タイトル\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;文章\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;リンク\u0026lt;/a\u0026gt; という内容であればヘッドラインと文章とリンクになります。\n他のプログラムのようにHTML自体で何かを動かすということはできませんが、Web上でなにか公開するとなると、HTMLを使う必要が出てきます。\nタグを覚えよう HTMLにはタグと呼ばれるものがあり、それぞれ意味を持っています。\n「たくさんあって覚えられないよ」という人もいるかと思います。HTMLは覚えたらそれが全てというわけではなく、年々更新されて、知らないようなタグが出てきたりします。\nとはいっても、基本的なタグは変わりません。\nここでは基本的なタグを覚えてみましょう。\n覚え方はすごく簡単です。英語にしたときの頭文字だと思っておけば9割は覚えられました。\n残りの1割程度は頭文字ではなく、単語の確率が高いです。\nこれでHTMLのタグはほぼほぼ覚えられました。\n他の言語と違って、すごく簡単だと思いませんか？\nそれでは主要なタグを見てみましょう。\nヘッドライン \u0026lt;h1\u0026gt; \u0026lt;h2\u0026gt; \u0026lt;h3\u0026gt; \u0026lt;h4\u0026gt; \u0026lt;h5\u0026gt; \u0026lt;h6\u0026gt; Headline（見出し）の頭文字hを使ったタグです。\n文章を書く上で大事なのがhタグです。h1からh6まであります。\nh1は最上位の見出しタグで、基本的にはサイト内に1つしか存在してはならないとされてます。\nそのページのいちばん大事なタイトル部分にh1を設定する事が多いです。\nh2は大見出し的な扱いです。h1よりも重要度は下がってきます。\nh3は小見出し的な扱いです。\nそして、h4、 h5、h6となっていきます。\n文章 \u0026lt;p\u0026gt; Paragraph（文章）の頭文字で、文章を表すタグが\u0026lt;p\u0026gt;です。\n\u0026lt;p\u0026gt;今日はいい天気だ。\u0026lt;/p\u0026gt; とすることで、一つの文章になります。\n段落を構成したい場合は、\n\u0026lt;p\u0026gt;今日はいい天気だ。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;洗濯物もよく乾く。\u0026lt;/p\u0026gt; と\u0026lt;p\u0026gt;を続けて書いてやれば大丈夫です。\n改行 \u0026lt;br\u0026gt; 先程の文章内で改行したいとなったときは Break（壊す）の\u0026lt;br\u0026gt;を使ってみましょう。\n「いい天気だ」の「いい」という部分で改行したい場合は\n\u0026lt;p\u0026gt;今日は\u0026lt;br\u0026gt;いい天気だ。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;洗濯物もよく乾く。\u0026lt;/p\u0026gt; とすることで改行がされます。\nリンク \u0026lt;a\u0026gt; 次に、リンクを張りたい場合は、Anchor（いかり）のリンクの出発点や到達点を指定するタグ\u0026lt;a\u0026gt;を使いましょう。\n\u0026lt;a\u0026gt;タグは今までのタグと少し違い、属性と呼ばれる文字を追記する必要があります。\nたとえば、googleにリンクを張りたいと思ったときは\n\u0026lt;a\u0026gt;リンクだよ\u0026lt;/a\u0026gt; とするのではなく、\n\u0026lt;a href=\u0026#34;https://google.com/\u0026#34;\u0026gt;リンクだよ\u0026lt;/a\u0026gt; とする必要があります。\nこのhrefは「hypertext reference」の略です。日本語訳すると「参照」とかになるのでしょうか。\nhref部分にはリンクしたいサイトのURLを貼り付けて、囲んだタグの中には表示したい文字列を入力します。\n画像 \u0026lt;img\u0026gt; Image（画像）はHTMLでも\u0026lt;img\u0026gt;となってます。\nこのタグも前回のリンクと同じように属性が必要です。\n画像に必要な属性はsrcとaltになります。\nsrcは「source（元）」の略で、画像のURLを入力します。\naltは「alternate」の略です。日本語では「代替」となります。つまり、画像が何らかの原因で表示できなかったり、目の不自由な方に対して、その画像がどういったものなのかを記述することで、画像を表現することができます。\n箱的なもの \u0026lt;div\u0026gt; divはちょっと厄介で、今まで出てきたタグのように意味を持っていません。\nしかし、このタグで囲ったものをグループとして機能させるようにできます。\ndivideやdivisionの略で、分割するという意味になります。\n例えば、サイトを3つの構成に分けたいとしましょう。\nその場合は、\n\u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;コンテンツ1\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;コンテンツ2\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;コンテンツ3\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; などとすることが可能です。\nリスト \u0026lt;ul\u0026gt; \u0026lt;ol\u0026gt; リスト形式の文章を作りたいときには\u0026lt;ul\u0026gt;や\u0026lt;ol\u0026gt;を使用します。\nulは「unordered list」の略で、順序がないリストと言う意味です。\nolは「order list」の略で、順序があるリストと言う意味ですね。\nulやolの中には\u0026lt;li\u0026gt;というタグを記述します。\nこれは「list」を意味するタグです。\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;リスト1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;リスト2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;リスト3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;リスト1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;リスト2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;リスト3\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; ulとolの違いは、ulの場合はliの頭に「・」が付き、olの場合は「数字」が付きます。\n以上が比較的よく使うHTMLタグになります。\nまとめ すごく簡単でしたが、HTMLのタグの説明になります。\nタグが多くて難しいと感じている方は、やりたいことを英語にしたときになんていうのかということを考えれば、HTMLタグに置き換えることができるのではないかと思います。\n例えば、文章を強調したいなと思ったとしたら、強調は強くしたいってことだから「strong」だよな。となります。\nそして、HTMLには\u0026lt;strong\u0026gt;という強調のためのタグが存在しています。\nまた、ここは関係ないところだなというのは、脇に追いやっておきたいので、\u0026lt;aside\u0026gt;というタグを使うことが可能です。\nこのように、HTMLタグは自分がやりたいとを英語にしたときになんて言うのかさえわかってしまえば簡単に記述することが可能です。\nおすすめ書籍  【Amazon.co.jp 限定】1冊ですべて身につくHTML \u0026amp; CSSとWebデザイン入門講座 (DL特典: CSS Flexbox チートシート)  Web界隈やデザイナーに大人気! Web関連の情報やデザインについて記事が学べる『Webクリエイターボックス』の管理人、 Manaによる渾身のHTML \u0026amp; CSSとWebデザインが学べる本\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   これだけで基本がしっかり身につく HTML/CSS\u0026amp;Webデザイン1冊目の本   Webサイト制作をこれから学ぶ人へ送る “1冊目\u0026#34;に最適の入門書! 【学びをサポートする4大特典つき】 本書は手を動かしてWebサイトを作りながら\nHTML/CSSとWebデザインの基本を楽しく学べる入門書です。\n初学者が1冊目に読む本としてふさわしい内容を盛り込んでいるため、\nこれを読めば必要な基礎知識がひととおり身につきます。\nAmazonで詳細を見る\n\n\nAmazon.co.jpアソシエイトを使用\n ","date":"2022-01-13T14:14:30+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/image_hu6fb473ffe2cd11eeea2f386291804615_63092_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-13-01-wyoshi/","title":"現役Webデザイナーが教えるHTML初心者講座 - 初めてのHTML"},{"content":"e-Statで新着一覧を取得しよう 毎日自動的に処理できるようにしたいので新着一覧を取得する必要があります。\n新着一覧は、リスト取得用のAPIでupdateDateに日付を指定してその日の更新分を取得してくるようにしました。\nwget \u0026quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?updatedDate=20220111\u0026amp;appId=xxxxxxxxxxxx\u0026amp;lang=J\u0026quot; -O new.csv STAT_CODEが政府統計コード、TABLE_INFがデータセットIDになります。\n\u0026quot;0003254482\u0026quot;,\u0026quot;00552010\u0026quot;,\u0026quot;知的財産活動調査\u0026quot;,\u0026quot;00552\u0026quot;,\u0026quot;特許庁\u0026quot;,\u0026quot;知的財産活動調査\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;1-1\u0026quot;,\u0026quot;業種別出願件数階級別 売上高、営業利益高、経常 利益高、従業者数、研究関係従業者数及び研究費\u0026quot;,\u0026quot;（注1）各設問項目によって標本数が異なるため、例えば研究関係従業者数の集計結果が従業者数の集計結果を上回るなど、大小関係の逆転が生じ得る点に留意する必要がある。（注2）業種 「個人」において売上高等の記載される場合があるが、これは事業を営む個人事業主が調査票の業種を「個人」として回答したことによる。\u0026quot;,\u0026quot;業種別出願件数階級別\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;年 度次\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;2022-01-11\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;該当なし\u0026quot;,\u0026quot;0\u0026quot;,\u0026quot;2022-01-11\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;情報通信・科学技術\u0026quot;,\u0026quot;03\u0026quot;,\u0026quot;知的財産\u0026quot; データセットID（TABLE_INF）を使って個別データを取得しましょう。\nwget \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxxxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003254482\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; -O 0003254482.csv 知的財産活動調査とは 今日の課題は新着一覧に出てきた「知的財産活動調査」をどう処理するか検討してみましょう。\n知的財産活動調査は、我が国における知的財産活動の現状を定量的に把握することを目的とした一般統計調査とのことです。\n特許権などの利用状況を調査したものみたいです。\n データセット \n知的財産活動調査のデータセット数ですが１４０件もあります。\n統計のデータセット数は１つの時もあればこのように１００を超える時もあるみたいです。\nこれだけデータセット数が多いとこの中から主要なデータセットを選択してサマリーを作成するのは大変ですね。\ngoogle検索で「知的財産活動調査」の分析記事を調べてみると\nhttps://www.semiconportal.com/archive/editorial/industry/17.html\n知的財産担当者数は増加傾向にあり、2004年度は、約45,500人で前年度に比べ16.6 ％増加。\n企業等の知的財産活動費は約9,200 億円で前年度に比べ17.1 ％増加。\n特許権の活用状況 国内における2004年度の特許権の利用率は48.2 ％であり、依然として所有する権利の約半数が利用されていないことがわかる。\nhttps://www.jstage.jst.go.jp/article/jasmin/2018s/0/2018s_246/_article/-char/ja/\n研究開発活動が利益率に対して最も顕著なプラスの効果を持っていたのは「医薬品製造業」であった．また，研究費投資から利益率向上には25年程度のラグがあることも示された\n「知的財産担当者数」「知的財産活動費」「特許権の利用率」あたりがよく出るキーワードみたいです。\n主要なキーワードの抽出方法なのですが、「知的財産活動調査」のように統計名でgoogle検索した結果に対して、「知的財産担当者数」「知的財産活動費」などのデータセット名で検索して件数が多いものを主要なキーワードとして取り扱うことができるか検討してみたいと思います。\n「利益率」という面白いキーワードがあったのですが、統計の中にはそのままのデータはありませんでした。「経常利益高」という項目があるのでこれを「知的財産活動費」で割り算する必要がありそうです。\n「利益率」が出せそうなら出してみるというのも検討してみると面白いかもしれません。\n主要なキーワードとしては、「知的財産担当者数」「知的財産活動費」「特許権の利用率」のようにその統計に固有のものもありますが、「利益率」「担当者数」「費用」「利用率」など汎用的に重要な項目もあるのかなと思いました。\nデータセットの先頭にある「売上高、営業利益高、経常利益高、従業者数、研究関係従業者数及び研究費」は「特許権の利用率」は含まないものの「経常利益高」「知的財産担当者数」「知的財産活動費」を含むものでした。\nデータセットが大量にある統計の場合先頭のデータセットはまとめ的なデータになるのでしょうか。他の統計も見てみようと思います。\nデータセットの中に「標本数」というものがありました。「標本数」は、アンケート結果の回収数です。データの信用性を図る上では大切な項目ですが、サマリーを作成する際は除外しても良い項目かもしれません。\n 知的財産担当者数 \n 知的財産活動費 \n","date":"2022-01-12T13:40:13+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-12-01-ani/","title":"e-Statで新着一覧を取得しよう"},{"content":"簡単にできるHugoで人気の記事を表示する方法の2回目になります。\n前回（簡単にできるHugoで人気の記事を表示する方法 #01）ではGAS（Google App Scripts）を使ってアナリティクスのデータをスプレッドシートに反映するところまで説明しました。\n今回は前回作成したスプレッドシートからデータを取得して、Hugoと連携するところまでやっていきましょう。\nスプレッドシートのデータをJSONで取得 Hugoやjsなどとの連携を簡単にするために、スプレッドシートのデータをjsonで取得できるようにします。\n前回作成したプログラムを開きます。\n開き方は前回の「簡単にできるHugoで人気の記事を表示する方法 #01」にある「スプレッドシートの設定」を確認してください。\nスプレッドシートのデータをjsonで取得するためには、APIを使用するケースもありますが、今回はAPIを使用しないで取得します。\nプログラムの内容は下記になります。\nスプレッドシートのIDはスプレッドシートのURL部分の\ndocs.google.com/spreadsheets/d/ スプレッドシートのID /edit#gid=0\nといったように docs.google.com/spreadsheets/d/ と edit に囲まれた部分になります。\nfunction getData(sheetName) { const sheet = SpreadsheetApp.openById(\u0026#34;スプレッドシートのID\u0026#34;).getSheetByName(sheetName); const rows = sheet.getDataRange().getValues(); const keys = rows.splice(0, 1)[0]; return rows.map(row =\u0026gt; { let obj = {}; row.map((item, index) =\u0026gt; obj[keys[index]] = item); return obj; }); } function doGet(e) { let data = getData(e.parameter.sheetname); return ContentService.createTextOutput(JSON.stringify(data, null, 2)).setMimeType(ContentService.MimeType.JSON); } プログラムの説明 doGetってなに？ doGet(e) はこのプログラムをURLから実行できるようにした際にパラメータの値を取得して処理を行う関数です。\nここでは getData()という関数に、クエリパラメータsheetnameを渡しております。\nURLにすると、https://〜/exec?sheetname=パラメータ\nとなります。\nこのパラメータ部分にスプレッドシートのシート名を渡すことで、該当するスプレッドシートのデータを表示できるようになるというわけです。\ngetDataでやってること getData(sheetName) では先程のクエリパラメータsheetnameの値を使って、シートから情報を取得してjsonに格納している部分です。\n指定したシートIDの値がある範囲からから値を取得するのが下記のプログラムです。\nconst rows = sheet.getDataRange().getValues(); その取得した値からタイトル、jsonのキーとなる部分を keys として格納します。\nそしたら先程取得した rows の値をループで取得しながらjson形式のデータに加工します。\nすると、\n[ [リンク, pv数, session数, users数], [リンク, pv数, session数, users数] ] というデータが\n[ {link: リンク, pv: pv数, session: session数, users: users数}, {link: リンク, pv: pv数, session: session数, users: users数} ] というjson形式に加工することができました。\nここまでを保存しておきます。\nこのプログラムを公開してURLでアクセスできるようにしましょう。\nGASのプログラムをデプロイして公開 それではここまでのファイルをデプロイして、Webでアクセスできるようにしましょう。\n右上にある「デプロイ」を押して、新しいデプロイをクリックします。\nすると、「新しいデプロイ」となるので、歯車のマーク「デプロイを有効にする」をおして、「ウェブアプリ」を選択します。\n \n設定の画面になるので、説明などを入力します。\n「次のユーザーとして実行」は自身のアドレスでかまいません。\n「アクセスできるよユーザー」部分は「 全員 」とします。\nこれによって、Hugoから呼び出した際に実行できるようになります。\n \nここまで設定できたら「デプロイ」を押して、プログラムを公開します。\n表示されたウェブアプリのURLが表示されるので、コピーしておきます。\n先程コピーしたURLの末尾に?sheetname=monthを追加してアクセスしてみましょう。\nhttps://script.google.com/macros/s/〜/exec?sheetname=month\nURLはこのような形になります。\n正常にアクセスできていれば\n \nとjson形式のデータが表示されるはずです。\nエラーが出た場合 TypeError: Cannot read property 'getDataRange' of null（行 3、ファイル「コード」） というエラーが出た場合はパラメータが記述されていないだけなので、パラメータを記述することで正常に取得できます。\nそれ以外の場合は、「デバッグ」を使ってエラーを特定していく必要があります。\nデバッグではdoGetはクエリ取得できないので、e.parameter.sheetname部分を\u0026quot;month\u0026quot;と直書きしてデバッグを実行します。\nデプロイには注意 デプロイで「新しいデプロイ」を選択するとURLが変わる点に注意です。\nGASでウェブアプリのURLを固定するための方法は、「デプロイを管理」から更新をするようにします。\n 「デプロイ」の「デプロイを管理」を押します。 そして、右にある鉛筆マークの「編集」を押します。\nすると、編集画面になり、バージョンや説明を修正することができます。 バージョン部分を「新しいバージョン」として、説明に「最新版」とでも打っておきましょう。 この状態で「デプロイ」をクリックします。  上記の作業で、URLを固定したままウェブアプリを公開することができます。\n \nHugoと連携して人気の記事を表示する アナリティクスとスプレッドシートを使って人気の記事をjsonで取得する事ができるようになったので、Hugoと連携します。\nHugoにはjsonを取得する機能がついているので、その機能を使ってデータを取得します。\n{{ $json := getJSON \u0026#34;https://script.google.com/macros/s/〜/exec?sheetname=month\u0026#34; }} \u0026lt;aside class=\u0026#34;widget archives sidearticle-contents--wrapper\u0026#34; id=\u0026#34;popular-articles--month\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contents-area\u0026#34;\u0026gt; \u0026lt;header\u0026gt;\u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;人気の記事（1ヶ月以内）\u0026lt;/h2\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;sidearticle-contents\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex article-list--tile\u0026#34;\u0026gt; {{ $page := .Site.Pages }} {{ range first .Site.Params.widgets.populerArticles.limit $json }} {{ $article := index (where $page \u0026#34;.RelPermalink\u0026#34; \u0026#34;eq\u0026#34; .link ) 0 }} {{ if $article }} \u0026lt;article\u0026gt; \u0026lt;h3 class=\u0026#34;article-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ $article.RelPermalink }}\u0026#34;\u0026gt;{{- $article.Title -}}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;/article\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; getJSON のURLは先ほど作成したGASのウェブアプリURLになります。\n今回は月間の人気記事を取得したいので、?sheetname=monthとしてあります。\n年の場合はyear日の場合はdayなどとすることで必要な情報を取得できます。\n使用しているテンプレートにも夜と思いますが、layouts/partials/widget/popularArticlesMonth.html として保存しておきましょう。\nこのファイルをHugoで読み込むことで人気の記事を表示する事ができるようになります。\n取得する人気の記事件数はconfig.yamlなどのhugoの設定ファイル内のwidhetsにpopulerArticlesを追加して記述しておきます。\nwidgets:enabled:- popular-articlespopulerArticles:limit:10人気の記事を表示するプログラムの解説 まずはサイト全体の記事を取得しておきます。\n{{ $page := .Site.Pages }} 次に、取得したjsonのデータを設定で指定した範囲で取得します。\n{{ range first .Site.Params.widgets.populerArticles.limit $json }} ... {{ end }} 取得したデータからリンクに一致する記事を探します。\n配列のデータで検索されているので、indexを使って0番目の記事を取得しています。\nあとは通常の記事と同じように扱えます。\n{{ $article := index (where $page \u0026quot;.RelPermalink\u0026quot; \u0026quot;eq\u0026quot; .link ) 0 }} 今回は画像無しでタイトルのみの表示となりますが、データ自体は他の記事と同じなので画像やカテゴリ、本文などにもアクセス可能です。\n自動更新の設定 サイトに人気の記事を表示させることができました。\n今の設定だと人気の記事が更新されないので、GASの「トリガー」を使って定期的にアナリティクスのデータをjsonに反映するようにしておきます。\nfunction setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } function all() { setDay(); setMonth(); setYear(); } 月だけでなく、日、年のデータも取得する夜にしておきます。\nそして、それらをすべて実行する関数「all」も追加しておきましょう。ここで保存しておきます。\nこれで準備ができました。\n左袖にあるストップウォッチアイコンを押して、「トリガー」を追加します。\n \n 「トリガーを追加」を押して、「実行する関数」で実行したい関数を選びます。今回は月間のデータを取得したいので「setMonth」を選択します。 「実行するデプロイを選択」は「Head」のままで構いません。 「イベントのソースを選択」は「時間主導型」に変更して、時間で実行するようにしておきます。 「時間ベースのトリガーのタイプを選択」を更新したい頻度で選択します。月間のデータなので1日おきくらいに更新でもいいかもしれません。「日付ベースのタイマー」を選択します。\n一日おきではなく、毎時で更新したい場合は「時間ベースのタイマー」など各自にあったタイマーを選択してください。 「時刻を選択」で更新したい時間を選びます。とりあえず「午前4時〜5時」くらいに更新するようにしておきます。 「エラー通知設定」は各自で好きなタイミングで受信するようにしてください。私はいっぱい来ると嫌なので、「1週間おきに通知を受け取る」にしてあります。\n以上で設定が終わりました。下にある「保存」を押して保存します。\n   これで定期的にアナリティクスのデータがスプレッドシートに反映されるようになりました。\nまとめ Hugoで人気の記事を表示するには\n Googleアナリティクスの連携 スプレッドシートを使ってjsonを作成  上記の2つを使うことで簡単に導入可能です。\nHugoを使って人気の記事を作成するにはサイトや投稿を公開した際になりますが、GitHub Actionsなどを使えばcron処理で定期的に再構築をかけることが可能なので、数十分おきに人気の記事を更新したり、スプレッドシートとgasのレン系の際にjsonを作成したので、javascriptでjsonを読み取って表示するといったことも可能です。\nソース 前回と今回で作成したソースになります。\nGASとスプレッドシートを使ってHugoに人気の記事を表示する function getData(sheetName) { const sheet = SpreadsheetApp.openById(\u0026#34;シートID\u0026#34;).getSheetByName(sheetName); const rows = sheet.getDataRange().getValues(); const keys = rows.splice(0, 1)[0]; return rows.map(row =\u0026gt; { let obj = {}; row.map((item, index) =\u0026gt; obj[keys[index]] = item); return obj; }); } function doGet(e) { let data = getData(e.parameter.sheetname); return ContentService.createTextOutput(JSON.stringify(data, null, 2)).setMimeType(ContentService.MimeType.JSON); } function getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function getGoogleAnalytics(name) { const id = \u0026#34;ga:ビューID\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } function all() { setDay(); setMonth(); setYear(); } Hugoで人気の記事を表示する \u0026lt;aside class=\u0026#34;widget archives sidearticle-contents--wrapper\u0026#34; id=\u0026#34;popular-articles--month\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contents-area\u0026#34;\u0026gt; \u0026lt;header\u0026gt;\u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;人気の記事（1ヶ月以内）\u0026lt;/h2\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;sidearticle-contents\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex article-list--tile\u0026#34;\u0026gt; {{ $page := .Site.Pages }} {{ range first .Site.Params.widgets.populerArticles.limit $json }} {{ $article := index (where $page \u0026#34;.RelPermalink\u0026#34; \u0026#34;eq\u0026#34; .link ) 0 }} {{ if $article }} \u0026lt;article\u0026gt; \u0026lt;h3 class=\u0026#34;article-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ .context.RelPermalink }}\u0026#34;\u0026gt;{{- .context.Title -}}\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;/article\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; 書籍の紹介  Googleアナリティクス プロフェッショナル　～分析・施策のアイデアを生む最強リファレンス  ウェブ制作者から、マーケター、ウェブアナリストまで必携の1冊 「Googleアナリティクスはどこへ向かうのか?進化し続けるツールのポテンシャルを最大限に引き出したときに、新しい分析や施策のアイディアが生まれる」\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Google Apps Script目的別リファレンス 実践サンプルコード付き Excelのマクロに似た「スクリプト」を書けば、Gmailや「スプレッドシート」などのGoogleサービスを更に効率的に、思うように使えます。そのスクリプトを書いて実行するプログラミング環境が、Google Apps Script(GAS)。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用 ","date":"2022-01-07T11:54:15+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/analytics_huc3037b2e6dc6703167c8466692625b0d_86753_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-07-01-wyoshi/","title":"GASとアナリティクスを使って、Hugoに人気記事を表示させる - 簡単にできるHugoで人気の記事を表示する方法 #2"},{"content":"Hugoには様々な機能があり、ブログを作るにはもってこいの静的サイトジェネレータです。\n関連記事も取得できて、検索機能もある「至れり尽くせり」なジェネレータだと思います。\nしかし、1点だけどうしても重要な機能がありません。\nそれは人気記事の表示です。\n人気記事を表示させるとなると、データベースを用意したりサーバのアクセスカウントを行う必要があります。\nそんな面倒なことはしたくありませんよね？\n今回はHugoでも簡単に人気の記事を表示する方法を紹介いたします。\n必要なもの Hugoで人気記事を出すために必要なものは、\n Googleスプレッドシート Googleアナリティクス  以上です。\nそれでは実際の設定やプログラムを行っていきましょう。\nGoogleアナリティクスの設定 Googleアナリティクスをサイトに設定します。\n設定の際にはv4ではなく、v2が必要です。(2022年1月6日現在)\nv4を設定している場合は、同時にv2も設定する必要があります。\n「アカウントを作成」「アカウントの設定」をした後に、「 プロパティの設定 」で「ユニバーサル アナリティクス プロパティの作成」をONにするとv4とv2の両方でアナリティクスを設定することができます。\n ユニバーサル アナリティクス プロパティの作成 \nあとはv4とv2のコードをサイトに貼り付けるだけです。\n貼り付け方法はGoogleに書いてある通りです。\nスプレッドシートの設定 次にスプレッドシートを設定します。\nGoogleドライブで「新規」「Googleスプレッドシート」でシートを作成します。\n作成したシートに適当な名前をつけます。\nその後に、「拡張機能」の「App Script」を押して、GoogleAppScript（GAS）に移動します。\n ユニバーサル アナリティクス プロパティの作成 \nGASのプログラム 日付の取得 日付を計算するために、「daysjs」というライブラリを追加します。\nライブラリの＋をクリックして、以下を検索します。\n1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB 検索して、days.jsが表示されたら追加をします。\n day.jsライブラリの追加 \nこれで日付の検索が可能になります。\n以下が日付のプログラムです。\n今日から1日、1月、1年前なのかという切り替えが可能です。\n year: 今日から1年間の範囲 month: 今日から1ヶ月の範囲 day: 今日から1日の範囲  function getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function test() { let d = getDate(\u0026#39;day\u0026#39;); console.log(d); } ここまでをテスト実行してみましょう。\nデバッグの隣りにあるセレクトを「test」にして、「実行」を押してみます。\n \n正常に終了されれば実行ログに結果と実行完了が表示されるはずです。\nGASとGoogleアナリティクスの連携 GASとアナリティクスの連携にはビューIDが必要です。\nビューIDはv2で取得できるので、v4とv2を設定したのはこのビューIDを取得するためになります。\nGASのプログラムにGoogleアナリティクスの「アカウント」「プロパティ」「ビュー」「ビューの設定」にあるビューIDを設定します。\n設定する際は「ga:ビューID」と ga: を付ける必要があります。\n先程のプログラムの下に、下記のプログラムを記述します。\nfunction getGoogleAnalytics(name) { const id = \u0026#34;ga:[GAビューID]\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } ここでは、ページのパスをキーとしてページビューとセッション、ユーザー数を集計するようにしています。\n並び順はpageviewsの数の降順です。\n必要なデータがあれば各自で編集することをおすすめいたします。\nそして、各項目のラベルを出力するために、\nrows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); として、先頭行のデータにラベル行を追加しています。\nこの部分も各自のデータに合うようにしてください。\nアナリティクスから取得したデータはスプレッドシートのシート名に紐付けるので、\ngetGoogleAnalytics(\u0026#39;month\u0026#39;); の場合は、「month」というシートにデータを反映するということになります。\nサービスの読み込み GASとアナリティクスを連携させるために、サービスを読み込みます。\nサービスのプラスマークをクリックして、「Analytics Reporting API」を選択、追加します。\n以上でサービスの読み込みは終わりです。\n \nそれでは、実行してみましょう。\n実行 まずははスプレッドシートに「month」という名前のシートを作ります。\n \nシートができたら、再度コードエディターに戻ります。\n先程のデバッグの隣りにあるセレクト「test」を「setMonth」にして、実行を押します。\n承認を求められるので、「権限を確認」を押します。\n \n使用するアカウントをクリクで選んで、「詳細」をクリックして、「〜（安全ではないページ）に移動」をクリックします。\nすると、アクセスの許可を求められるので、「許可」を押します。\n \n実行ログに結果と実行完了が表示されるはずです。\nスプレッドシートを確認すると、アナリティクスのデータが反映されているはずです\n \nこれで月間の人気記事の取得ができました。\n同じように日、年も設定しておきましょう。\nfunction setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } まとめ まずがGASとアナリティクスの連携ができました。\n次回はこのデータを使ってHugoとアナリティクスを連携して、人気記事を表示できるようにしたいと思います。\nここまでの全プログラムは下記になります。\nfunction getDate(type) { let calc = \u0026#39;d\u0026#39;; switch(type) { case \u0026#34;month\u0026#34;: calc = \u0026#39;M\u0026#39;; break; case \u0026#34;year\u0026#34;: calc = \u0026#39;y\u0026#39;; break; default: calc = \u0026#39;d\u0026#39;; break; } const d1 = dayjs.dayjs().locale(\u0026#39;ja\u0026#39;); return {start: d1.subtract(1, calc).format(\u0026#39;YYYY-MM-DD\u0026#39;), end: d1.format(\u0026#39;YYYY-MM-DD\u0026#39;)}; } function getGoogleAnalytics(name) { const id = \u0026#34;ga:[GAビューID]\u0026#34;; const date = getDate(name); const response = AnalyticsReporting.Reports.batchGet({ reportRequests: [{ viewId: id, dateRanges: [{startDate:date.start,endDate: date.end}], samplingLevel: \u0026#39;LARGE\u0026#39;, metrics: [ {expression: \u0026#39;ga:pageviews\u0026#39;}, {expression: \u0026#39;ga:sessions\u0026#39;}, {expression: \u0026#39;ga:users\u0026#39;}, ], dimensions: [ {name: \u0026#39;ga:pagePath\u0026#39;} ], orderBys: [{ fieldName: \u0026#39;ga:pageviews\u0026#39;, sortOrder: \u0026#34;DESCENDING\u0026#34;, }], }] }); let rows = JSON.parse(response).reports[0].data.rows; rows = rows.filter(f =\u0026gt; /posts/.test(f.dimensions[0])).map(f =\u0026gt; { return f.dimensions.concat(f.metrics[0].values); }); let sheet = SpreadsheetApp.getActive().getSheetByName(name); sheet.clear(); rows.unshift([\u0026#34;link\u0026#34;, \u0026#34;pv\u0026#34;, \u0026#39;session\u0026#39;, \u0026#39;users\u0026#39;]); sheet.getRange(1, 1, rows.length, rows[0].length).setValues(rows); } function setMonth() { getGoogleAnalytics(\u0026#39;month\u0026#39;); } function setDay() { getGoogleAnalytics(\u0026#39;day\u0026#39;); } function setYear() { getGoogleAnalytics(\u0026#39;year\u0026#39;); } 書籍の紹介  1週間でGoogleアナリティクス4の基礎が学べる本 (1週間で基礎が学べるシリーズ) 大幅に改訂されたWebマーケティングツール「Googleアナリティクス4」の基礎と活用法を最前線のWebマーケッターたちがやさしく解説! 本書は、WebマーケターのためにGoogleアナリティクス4（GA4・ジーエーフォー）の基礎知識を解説した入門書です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   詳解! Google Apps Script完全入門[第2版] ~GoogleアプリケーションとGoogle Workspaceの最新プログラミングガイド 今や私たちの仕事や生活に無くてはならない存在になったGoogleサービス。これらGoogleサービスの自動化や連携を行うことで、大幅な効率化が図れます。そして、それを可能にするのがGoogle Apps Script(GAS)です。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用 ","date":"2022-01-06T16:50:50+09:00","image":"https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/analytics_huc3037b2e6dc6703167c8466692625b0d_86753_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2022-01-06-01-wyoshi/","title":"簡単にできるHugoで人気の記事を表示する方法 #1"},{"content":"デザイナーでもできる初めてのHugoの2回目になります。\n前回（デザイナーでもできる初めてのHugo #01）はHugoのインストールから公開の方法までを説明しました。\n今回は前回作成したページをGitHub Pagesを使って公開してみたいと思います。\nGitHub Pages用の設定ファイルを作成 GitHub PagesはGitHubにあるコンテンツを静的ページを公開する機能です。\nSSLまでついているので、非常に便利です。\n公開用のファイルは.github/workflows/gh-pages.ymlというYAML形式のファイルになります。\nname:Hugoon:push:# schedule:# - cron: \u0026#39;*/10 * * * *\u0026#39;jobs:gh-pages:runs-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2with:persist-credentials:falsesubmodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod# https://github.com/marketplace/actions/github-pages-action- name:Setupuses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GITHUB_TOKEN }}publish_branch:gh-pagesnameはGitHubでのActionsに表示される名前になります。\n今回は公開用としてgh-pagesというブランチにわけています。ここおらへんはお好みで設定して下さい。\nhugoでテーマを使っている場合はsubmodules: trueとする必要があります。\nまた、Hugoで更新日をGitの日付と合わせたい場合はfetch-depth: 0として、Gitの履歴を取得するようにしましょう。\nGitHub Pagesの設定 GitHub PagesのURLはhttps://ユーザまたは組織名.github.io/リポジトリ名となります。\nGitHubでリポジトリを作成する際に「ユーザまたは組織名.github.io」とすると「https://ユーザまたは組織名.github.io」とすることができます。\nまずは先程のファイルを含めてサイト全体をGitにアップして、gh-pagesというブランチが作られるのを待ちましょう。\nその後に、setings \u0026gt; Pages にでGitHub Pagesの設定を行います。\n GitHub Pagesの設定 \nYour GitHub Pages site is currently being built from the gh-pages branch\nにあるBranchをgh-pagesに変更します。\n設定は以上です。\nHugoの初期設定であればpublishDir: publicとなっているので、GitHub Pagesではpublicがルートディレクトリとして公開されます。\n.gitignoreに「public」を除外するようにしておきましょう。\n/public /resources 最後に設定したURLにアクセスするとサイトが確認できるはずです。\nまとめ GitHub Pagesを使えば、難しいサーバの設定などをすることなく、無料でSSL付きのサイトを公開することが可能です。\nいくつかの制限はありますが、すごく便利な機能なのでみなさんもぜひ使ってみてはいかがでしょうか。\n公開する際はパスワードなどの情報も一緒にアップしないようにしてください。\n書籍の紹介  いちばんやさしいGit\u0026amp;GitHubの教本 人気講師が教えるバージョン管理＆共有入門 「いちばんやさしい教本」シリーズ 実際のワークフローをイメージしながら 実践的なGit/GitHubの使い方が身につく「いちばんやさしい」入門書です。 前半は、手元のパソコンでファイルを実際にバージョン管理しながら、 Gitの基本的な使い方を解説。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Web制作者のためのGitHubの教科書 チームの効率を最大化する共同開発ツール そろそろ「プルリ」しませんか?しくみを理解して使えば怖くない。リポジトリの作成から複数デザインの提示、「Pull Request」を使った分担作業まで、Webサイト制作を例に実践的なワークフローを身に付ける。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2021-12-28T12:07:19+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/settings_hub5e89b620d2afe5c10cf3894738f1203_124480_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-28-hugo-02-ywat/","title":"GitHub Pagesを使って無料でSSL付きのサイトを公開"},{"content":"私のe-Statでのデータマイニングの現在の目的は以下の通りです\n大量の政府公開データの中から\n①面白そうなデータをピックアップする\n②データをわかりやすくサマライズする\n・列情報などを必要な項目に絞り込む\n・前年度比５倍とか急激な変化があった場合をピックアップできるようにする\n最終的にはこれらを自動でできるようにしたいです。\n今回は、まず①面白そうなデータをピックアップすることを目的にe-Statを見てみましょう。\nランキングページを見てみよう e-Statのトップページ（https://www.e-stat.go.jp/）の画面の下の方にランキングという欄があります。\nそのランキングの現在(2021/12/26)３位が「アイスクリーム」なんです。\n ランキング \nアイスクリームが含まれるのはどんなデータか 「アイスクリーム」は柔らかめのキーワードなので面白いデータの予感がします。\n「アイスクリーム」が含まれるデータはどんなデータなんでしょうか？\nちょっと見てみましょう。\nhttps://www.e-stat.go.jp/stat-search?page=1\u0026query=%E3%82%A2%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%A0\u0026layout=dataset\n アイスクリーム \n「アイスクリーム」が含まれるデータは7640件あるみたいです。\nちょっと多いですね。。。\n検索条件なのですが、提供分類、表題を検索　データベース、ファイル内を検索にチェックがついています。\n「検索のしかた」をみてみるとキーワードのOR検索やAND検索もできそうです。\n 検索のしかた \nちなみに検索キーワードでの絞り込みはAPI(統計表情報取得)でももちろんできます。\ncurl \u0026quot;https://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsList?appId=xxxxxxxxxx\u0026amp;searchWord=アイスクリーム\u0026quot; アイスクリームだと数が多すぎるので試しに「ガリガリ君」で検索してみましたが、0件でした。「ハーゲンダッツ」で検索したところ22件引っかかってきました。\n ハーゲンダッツ \n「ハーゲンダッツ」どこに出てくるのかなと思ってAPIを一通り叩いてみたのですがAPIの実行結果からは「ハーゲンダッツ」は見つけられませんでした。\nエクセル表示を見てみたところ、「銘柄」という項目に「バニラアイスクリーム，カップ入り（110mL入り），「ハーゲンダッツ バニラ」」とありました。\nどうも全国のアイスクリームの価格を「ハーゲンダッツ　バニラ」を基準に算出しているみたいです。\n excel \nちなみに、2020年だと１番安いのが長野市の221円で１番高いのが那覇市の300円でした。\n 統計表 \n単にハーゲンダッツの価格ってだけだと少しパンチ力弱いかもしれませんね。。。\n個人的には明治のスーパーカップが１位でジャンボモナカが２位でとかアイスクリーム売れ筋ランキングとかの方が楽しいのですが、政府はそこまで調べてくれないですよね。\n小売統計調査とは 小売物価統計調査はお米の価格から葬儀代まで約８００の小売価格を調査したデータ\n調査結果は、年金等の給付見直しの際の基礎資料や、公共料金の上限値を決める際の資料として、幅広く利用されているそうです。\nアイスクリームは約８００ある中の項目の一つです。\n 銘柄 \n小売物価統計調査をピックアップするとしたら、ここ数年で値段が大きく変化しているものや地域間の差が特に大きいものとかですかね。\n「小売物価統計」でgoogle検索して面白そうな記事を見てみると\n「今年のX’マスケーキは小さくなるか」という記事がありました。\nケーキにもよく使われる小麦や油量種子はとりわけ高騰が目立つ\n→\n小売物価統計調査によると、東京都区部の小売価格で、今年11月の1kgあたりの小麦価格は1年前より約20円上昇した。食用油に至っては1kgあたり約60円と大幅な値上がりで、価格が比較的安定している食品の代名詞ともなってきた鶏卵でさえ、1パックあたり約12円上昇した。\n→\nクリスマスイブにケーキを買って帰る人も多いだろうが、今年は例年と比べて値段がほとんど同じなのにサイズが小さくなっていても不思議ではない。\nこんな感じのものは自動的にピックアップできると理想的なんですけどね。\n今日のところのまとめ 自動的にピックアップするとしたら\n・柔らかめのキーワード\n・ここ数年間で値が急激に変化してるもの\n・地域間の格差が大きいもの\nですかね。データを見ていって判定項目を増やしていきたいと思います。\nその他、アイスクリームでの検索結果には「家計調査」というのもありました。\n家計の４半期での支出額の平均を出したものなのですが、アイスクリームの支出は当然夏が冬の倍くらい多い感じになってます。\nアイスクリームは当たり前ですが、その他季節によって大きく支出が違うものって何なのかは少し興味がありますね。\n毎月や四半期ごとに値があるものについては、期間によって差が大きいものはピックアップしても良いかもしれませんね。\n 家計調査 \n","date":"2021-12-26T21:54:39+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-26-01-ani/","title":"e-Statで面白いデータを探そう。ランキング上位「アイスクリーム」ってなんだ？"},{"content":"今回は前回登場したデータの内容を調べてみましょう。\n「統計表情報取得」（リスト取得）APIで取得したデータをもとにe-Statのサイト（https://www.e-stat.go.jp/）からデータを見つけてみましょう。\n\u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; データを検索してみよう IDで検索できるのが一番良いのですが、キーワード検索のテキストフィールドに入力して検索してもダメでした。\nしょうが無いので、TITLE全文「形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）」で検索しましたがでダメでした。\n少し削って、「形態別国内家計最終消費支出 年度デフレータ—　前年度比」 だと４０５件。\n多すぎるので、SURVEY_DATE、OPEN_DATEを使って調査年、調査月、公開年月で絞り込むと２件に絞り込めました。\nあとはSTATISTICS_NAMEで特定できました。\n詳細ページに行ってみましょう https://www.e-stat.go.jp/stat-search/database?page=1\u0026query=%E5%BD%A2%E6%85%8B%E5%88%A5%E5%9B%BD%E5%86%85%E5%AE%B6%E8%A8%88%E6%9C%80%E7%B5%82%E6%B6%88%E8%B2%BB%E6%94%AF%E5%87%BA%20%E5%B9%B4%E5%BA%A6%E3%83%87%E3%83%95%E3%83%AC%E3%83%BC%E3%82%BF%E2%80%94%E3%80%80%E5%89%8D%E5%B9%B4%E5%BA%A6%20%20%20%20%20%20%20\u0026layout=dataset\u0026year=20100\u0026month=23070900\u0026open_date=202004\u0026statdisp_id=0003384123\u0026metadata=1\u0026data=1\n上段が「統計表情報取得」の内容\n 統計表情報 \n下段が「メタ情報取得」の内容見たいです。\n メタ情報取得 \nDBをクリックするとグラフが表示されました。\n グラフ \n行情報が「1981年度、1982年度、1983年度。。。」\n列情報が「家計最終消費支出（再掲）、家計最終消費支出（再掲）_居住者家計の海外での直接購入、。。。」\nなんと、APIクリックすると丁寧にクエリを表示してくれました(API仕様書とか見る必要ないですね)。\n API \nフォーマットもXML,JSON,CSVが選べますね。\n私はCSVの方が扱いやすいのでこれからはCSVでダウンロードすることにします。\nappIdがカラに空になっているので追加してcurlで叩くだけでいいですね。至れり尽くりです。\ncurl \u0026quot;http://api.e-stat.go.jp/rest/3.0/app/getSimpleStatsData?appId=xxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=Y\u0026amp;cntGetFlg=N\u0026amp;explanationGetFlg=Y\u0026amp;annotationGetFlg=Y\u0026amp;sectionHeaderFlg=1\u0026amp;replaceSpChars=0\u0026quot; \u0026quot;tab_code\u0026quot;,\u0026quot;表章項目\u0026quot;,\u0026quot;cat01_code\u0026quot;,\u0026quot;形態別国内家計最終消費支出\u0026quot;,\u0026quot;time_code\u0026quot;,\u0026quot;時間軸（年度）\u0026quot;,\u0026quot;unit\u0026quot;,\u0026quot;value\u0026quot;,\u0026quot;annotation\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;3.8\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1982100000\u0026quot;,\u0026quot;1982年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;2.3\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1983100000\u0026quot;,\u0026quot;1983年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;\u0026quot; . . . \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;17.6\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1982100000\u0026quot;,\u0026quot;1982年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;15.6\u0026quot;,\u0026quot;\u0026quot; \u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;12\u0026quot;,\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot;,\u0026quot;1983100000\u0026quot;,\u0026quot;1983年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;-1.8\u0026quot;,\u0026quot;\u0026quot; データの見方は？ DBで表示させた「統計表表示」と見比べてみると\n グラフ \n\u0026quot;17\u0026quot;,\u0026quot;前年度比\u0026quot;,\u0026quot;11\u0026quot;,\u0026quot;家計最終消費支出（再掲）\u0026quot;,\u0026quot;1981100000\u0026quot;,\u0026quot;1981年度\u0026quot;,\u0026quot;％\u0026quot;,\u0026quot;3.8\u0026quot;,\u0026quot;\u0026quot; が１行目「1981年度」の１列目「家計最終消費支出（再掲）」に該当するみたいですね。\n１セル、１行のデータ構造みたいですね。\n１列目の情報がしばらく続いて、全行終わると次は２列目の情報みたいな構成だということがわかりました。\n国民経済計算って何 このデータは国民経済計算を算出したものということですが、国民経済計算ってなんでしょう？\n内閣府のサイトによると\n国民経済計算は「四半期別ＧＤＰ速報」と「国民経済計算年次推計」の２つからなっている。「四半期別ＧＤＰ速報」は速報性を重視し、ＧＤＰをはじめとする支出側系列等を、年に８回四半期別に作成・公表している。「国民経済計算年次推計」は、生産・分配・支出・資本蓄積といったフロー面や、資産・負債といったストック面も含めて、年に１回作成・公表している。\nGDPを算出するための何かみたいですね。\ngoogleの検索結果を見てみると、国や地方自治体のサイトや経済学の解説サイトがメインで、たまに今年のGDPはどうだったという記事でちょっと書かれてたりしました。\n記事の中でちょっと気になったのは、\n日本では新型コロナウイルスの影響で個人消費が落ち込んでおり、貯蓄が増加傾向にあります。内閣府の国民経済計算によると、2020年に消費されずに貯蓄に回ったお金は、一律10万円の特別定額給付金の影響もあり、35.8兆円に達しました。この額は前年の5倍の水準です。\n所得に対する貯蓄の割合を示す家計貯蓄率は13.1%と19年度（3.7%）から大きく上昇した。\n前年度から比較して急激に大きくなったという部分(5倍も！)。こういうのは是非ピックアップしたいと思いました。\ne-Statでのマイニングの目的は とわ言え「国民経済計算」全般的に堅い感じですね。。。。\n私のe-Statマイニングの目的は大量の政府公開データに埋もれている中から人の興味を引きそうな面白そうなコンテンツをピックアップしてわかりやすくサマリーを表示することなのです。\nキーワードランキングを見てみると「アイスクリーム」「身長・体重の平均値」みたいな面白そうな柔らかめのコンテンツもあるんです。\n ランキング \n次回から、\n・e-Statの森の中から面白いコンテンツを見つけよう\n・うまくサマライズして表示しよう\n興味深い列情報に絞りたい\n前年度から５倍とか急激に変化した部分をピックアップして伝えたい\nという視点からe-Statを調査していきたいと思います。\n","date":"2021-12-25T21:55:55+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-25-01-ani/","title":"e-Statのデータの見方"},{"content":"知識ゼロからのe-Statマイニング\n日頃から大量のデータを使ってデータマイニングしてみたいなと思って暇なときにサイトを巡回していたらe-Statという日本の統計が閲覧できる政府統計ポータルサイトを発見しました。\nアイスの売り上げから子供の平均身長まで大量の統計資料が公開されており、しかもAPIまであるすごいサイトです。 このe-Statをマイニングしてみようと思います。\nまずはAPIを叩くところまでやってみます。\nまずはアプリケーションIDを取得しよう APIを叩くにはアプリケーションIDが必要です。\nまずはアプリケーションIDを取得しましょう。\nアプリケーションIDを取得するにはユーザー登録が必要です。以下のURLから手順に従ってユーザー登録してください。\nhttps://www.e-stat.go.jp/mypage/user/preregister\nアプリケーションIDはログイン後マイページ内のAPI機能(アプリケーションID発行)で取得できます。\nhttps://www.e-stat.go.jp/mypage/view/api\n入力項目は名称、URL、概要の３つです。\n名称、概要は適当で大丈夫です。\nURLは、http://localhostだと私はダメだったのでこのサイトのURLを設定しました。\n発行ボタンを押すとappIdにアプリケーションIDが払い出されます。\nAPIを叩いてみよう APIの仕様は以下のURLに記載されています。\nhttps://www.e-stat.go.jp/api/api-info/e-stat-manual3-0\n難しいです。\nなんとなく、「統計表情報取得」でリストを取得して、「メタ情報取得」「統計データ取得」で個別のデータを取得する感じでしょうか？\nまずは叩いてみます。\n統計表情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsList?appId=xxxxxxxxx\u0026amp;lang=J\u0026amp;searchKind=\u0026amp;searchWord=\u0026quot; \u0026lt;LIST_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;CYCLE\u0026gt;四半期\u0026lt;/CYCLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;OPEN_DATE\u0026gt;2020-04-01\u0026lt;/OPEN_DATE\u0026gt; \u0026lt;SMALL_AREA\u0026gt;0\u0026lt;/SMALL_AREA\u0026gt; \u0026lt;/LIST_INF\u0026gt; LIST_INF idの「0003384123」」が個別データのidみたいです。これを使ってメタ情報取得、統計情報取得を呼び出します。\n##メタ情報取得\ncurl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getMetaInfo?appId=xxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_META_INFO xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetMetaInfo.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:35:07.926+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;METADATA_INF\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;CLASS_INF\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;tab\u0026quot; name=\u0026quot;表章項目\u0026quot; description=\u0026quot;Excelの書式設定で統計表の数値を\u0026amp;quot;-0.0\u0026amp;quot;としている場合、データベース上\u0026amp;quot;0.0\u0026amp;quot;として収録されているため、Excel統計表の数値とは必ずしも一致しない。\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;前年度比\u0026quot; level=\u0026quot;\u0026quot; unit=\u0026quot;％\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;cat01\u0026quot; name=\u0026quot;形態別国内家計最終消費支出\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;11\u0026quot; name=\u0026quot;家計最終消費支出（再掲）\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;12\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_居住者家計の海外での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;13\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_（控除）非居住者家計の国内での直接購入\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;14\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出\u0026quot; level=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;15\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;16\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_半耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;17\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_非耐久財\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;18\u0026quot; name=\u0026quot;家計最終消費支出（再掲）_国内家計最終消費支出_サービス\u0026quot; level=\u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/CLASS_OBJ\u0026gt; \u0026lt;CLASS_OBJ id=\u0026quot;time\u0026quot; name=\u0026quot;時間軸（年度）\u0026quot;\u0026gt; \u0026lt;CLASS code=\u0026quot;1981100000\u0026quot; name=\u0026quot;1981年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1982100000\u0026quot; name=\u0026quot;1982年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1983100000\u0026quot; name=\u0026quot;1983年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1984100000\u0026quot; name=\u0026quot;1984年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1985100000\u0026quot; name=\u0026quot;1985年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1986100000\u0026quot; name=\u0026quot;1986年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1987100000\u0026quot; name=\u0026quot;1987年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1988100000\u0026quot; name=\u0026quot;1988年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;CLASS code=\u0026quot;1989100000\u0026quot; name=\u0026quot;1989年度\u0026quot; level=\u0026quot;1\u0026quot;/\u0026gt; 上の方がデータ内容の説明なのか？よくわかりません。\n統計情報取得 curl \u0026quot;http://api.e-stat.go.jp/rest/1.0/app/getStatsData?limit=10000\u0026amp;appId=xxxxxxxxxx\u0026amp;lang=J\u0026amp;statsDataId=0003384123\u0026amp;metaGetFlg=N\u0026amp;cntGetFlg=N\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;yes\u0026quot;?\u0026gt; \u0026lt;GET_STATS_DATA xsi:noNamespaceSchemaLocation=\u0026quot;https://api.e-stat.go.jp/rest/1.0/schema/GetStatsData.xsd\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;RESULT\u0026gt; \u0026lt;STATUS\u0026gt;0\u0026lt;/STATUS\u0026gt; \u0026lt;ERROR_MSG\u0026gt;正常に終了しました。\u0026lt;/ERROR_MSG\u0026gt; \u0026lt;DATE\u0026gt;2021-12-24T18:37:22.156+09:00\u0026lt;/DATE\u0026gt; \u0026lt;/RESULT\u0026gt; \u0026lt;PARAMETER\u0026gt; \u0026lt;LANG\u0026gt;J\u0026lt;/LANG\u0026gt; \u0026lt;STATS_DATA_ID\u0026gt;0003384123\u0026lt;/STATS_DATA_ID\u0026gt; \u0026lt;DATA_FORMAT\u0026gt;X\u0026lt;/DATA_FORMAT\u0026gt; \u0026lt;START_POSITION\u0026gt;1\u0026lt;/START_POSITION\u0026gt; \u0026lt;LIMIT\u0026gt;10000\u0026lt;/LIMIT\u0026gt; \u0026lt;METAGET_FLG\u0026gt;N\u0026lt;/METAGET_FLG\u0026gt; \u0026lt;CNT_GET_FLG\u0026gt;N\u0026lt;/CNT_GET_FLG\u0026gt; \u0026lt;/PARAMETER\u0026gt; \u0026lt;STATISTICAL_DATA\u0026gt; \u0026lt;TABLE_INF id=\u0026quot;0003384123\u0026quot;\u0026gt; \u0026lt;STAT_NAME code=\u0026quot;00100409\u0026quot;\u0026gt;国民経済計算\u0026lt;/STAT_NAME\u0026gt; \u0026lt;GOV_ORG code=\u0026quot;00100\u0026quot;\u0026gt;内閣府\u0026lt;/GOV_ORG\u0026gt; \u0026lt;STATISTICS_NAME\u0026gt;四半期別ＧＤＰ速報 過去の値 1次速報値\u0026lt;/STATISTICS_NAME\u0026gt; \u0026lt;TITLE\u0026gt;形態別国内家計最終消費支出 年度デフレータ—　前年度比（1981年～）（2000暦年＝100）\u0026lt;/TITLE\u0026gt; \u0026lt;SURVEY_DATE\u0026gt;201007-201009\u0026lt;/SURVEY_DATE\u0026gt; \u0026lt;TOTAL_NUMBER\u0026gt;232\u0026lt;/TOTAL_NUMBER\u0026gt; \u0026lt;FROM_NUMBER\u0026gt;1\u0026lt;/FROM_NUMBER\u0026gt; \u0026lt;TO_NUMBER\u0026gt;232\u0026lt;/TO_NUMBER\u0026gt; \u0026lt;/TABLE_INF\u0026gt; \u0026lt;DATA_INF\u0026gt; \u0026lt;NOTE char=\u0026quot;***\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;NOTE char=\u0026quot;-\u0026quot;\u0026gt;数字が得られないもの\u0026lt;/NOTE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1981100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;3.8\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1982100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.3\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1983100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1984100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1985100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;1.2\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1986100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.1\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1987100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1988100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;0.5\u0026lt;/VALUE\u0026gt; \u0026lt;VALUE tab=\u0026quot;17\u0026quot; cat01=\u0026quot;11\u0026quot; time=\u0026quot;1989100000\u0026quot; unit=\u0026quot;％\u0026quot;\u0026gt;2.5\u0026lt;/VALUE\u0026gt; VALUEが値みたいですがどういう列情報になっているのでしょうか？\nとりあえずAPIはお手軽に叩けることがわかりました。\n次回以降はデータの内容を理解していこうと思います。\n","date":"2021-12-24T18:12:54+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/anal_hu68ff39aa0e6aafd68051f9cb2318c17a_134679_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-10-ani/","title":"知識ゼロからのe-Statマイニング"},{"content":"hugoでscssやsassを含んだファイルををGitHubに公開、Git Actionで自動ビルドしようとした際に、見慣れないエラーが表示された\nRun hugo --minify Error: Error building site: TOCSS: failed to transform \u0026quot;scss/style.scss\u0026quot; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS. : this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information ... Total in 148 ms Error: Process completed with exit code 255. はて？なにか悪いことでもしたのだろうか。\nそれとも変な記述をしてしまったのだろうか。\nエラーの内容 こういうときは、落ち着いてエラーを見てみよう。\n大抵のことはちゃんと教えてくれているはずだ。\nCheck your Hugo installation; you need the extended version なるほど、extended を使えと行っている。\nextended とはなんだろう。\nエラーの対応 さらに落ち着いて設定ファイルを確認することをおすすめする。\n.github/workflow/gh-pages.yml\n- name:Setupuses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.87.0\u0026#39;#extended: true設定の extended が思いっきりコメントアウトされていました\nコメントを外して、再度Gitにpushしたところ、正常にビルドされて公開できました。\nまとめ scssやsassを含んだファイルをhugoをgitに公開しようとした際に、ビルドできない場合は設定を確認することをおすすめする。\n","date":"2021-12-24T09:43:41+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/af7ef3c0-44c1-4f2f-aad8-1a0664724558_huf3902e4d08fb0294f3a250034e0748e3_207097_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-hugo-ywat/","title":"SCSS/CSSを含んだファイルがGitHub Actionsでビルドできない"},{"content":"エラーの内容 記事投稿時にfailed to unmarshal YAM エラーが起こった時の原因について\nhugo new ファイル名 で投稿用のエントリーを作成し、いざhugo コマンドで記事をアップしようとした時に以下のエラーが出ました。\nStart building sites …\nTotal in 10 ms\nError: Error building site: \u0026ldquo;/xxxx/xxxx/xxxx.github.io/content/posts/2021-12-21-03.md:2:1\u0026rdquo;: failed to unmarshal YAML: yaml: control characters are not allowed\n原因 このようなエラーが出る場合原因として考えられるのがファイルの文字コードがUTF-8になってないことです。\nvim でファイル名を開くと右下に文字コードが表示されますが「iso-2022-jp-3」のようになってませんでしょうか？\n対応 この場合ファイルの文字コードをUTF8に変更してみましょう。\nnkf -wLu ファイル名 \u0026gt;一時保存ファイル名; mv 一時保存ファイル名 ファイル名 一時保存した後にmvで戻したり面倒ですよね。\n面倒を回避できる素晴らしいコマンドがgithubに上がっていますのでこちらもご利用ください。\nhttps://github.com/suzukiiichiro/linuxConfig/blob/master/wLu\nhugo new した時に日本語が含まれていたら文字コードutf8になると思われるので設定で回避できないか次回調べてみたいと思います。\n","date":"2021-12-22T21:22:23+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-03/error_hu7e39d96c0286759ff592e45a50a24444_91990_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-03/","title":"hugo で failed to unmarshal YAML: yaml: control characters are not allowed エラー"},{"content":"github pagesでもgoogle adsenseの審査に通過したい！\nということで色々先人の方達のサイトをみさせていただいたところ\ngoogle adsenseを通過するためにはプライバシーポリシーが必要ということで準備しました。\n内容はとりあえずコピペで行こう まずはコピペOKの親切な方のサイトを探します。\n内容については以下のサイトを参考にさせていただきました。\nhttp://liberty-life-blog.com/wordpress/privacy-policy/\n設定 以下のコマンドでhugoでページを作成します。\nhugo new page/privacy.md コンテンツの構成を以下のように管理しているのでpage以下に保存しました。\ncontent/posts \u0026ndash; 記事\n/page \u0026ndash; about usページなど\n/assetes \u0026ndash; 画像など\nvim content/page/privacy.md --- title: \u0026quot;Privacy\u0026quot; date: 2021-12-22T17:16:15+09:00 draft: false --- ページの内容を２個目の\u0026mdash;以下に貼り付けます\ndraft: true に変更します\nhugo ビルドします\nフッターにリンクを置こう フッターの内容を修正してプライバシーポリシーのリンクを設置します。\nthemes以下にあるファイルを直接書き換えるのではなく\nlayoutsフォルダ以下に同名のファイルを作成することで上書きすることができるみたいです。\nlayouts/partial/footer/footer.html\u0026lt;\u0026ndash;優先順位高い\nthemes/テーマ名/layouts/partial/footer/footer.html\nlayouts/partial/footer/footer.html を新規に作成して\n以下の内容を入力\n\u0026lt;footer class=\u0026quot;site-footer\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;{{ .Site.BaseURL }}privacy/\u0026quot;\u0026gt;プライバシーポリシー\u0026lt;/a\u0026gt; \u0026lt;section class=\u0026quot;copyright\u0026quot;\u0026gt; \u0026amp;copy; {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026quot;2006\u0026quot;))) }} {{ .Site.Params.footer.since }} - {{ end }} {{ now.Format \u0026quot;2006\u0026quot; }} {{ .Site.Title }} \u0026lt;/section\u0026gt; \u0026lt;/footer\u0026gt; リンクの書き方が\n{{ .Site.BaseURL }}privacy/\nのは注意\n","date":"2021-12-22T17:40:27+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-02/privacy_hu6d356af4ff9900abfdb99df6dc97252e_302641_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-02/","title":"プライバシーポリシーページを設置する"},{"content":"CMSではWordpressが有名ですが、phpやサーバの準備などに時間がかかってしまったり、ちょっと敷居が高いイメージがあります。\nWordpressのインストールのためにはサーバも必要ですし、ドメインだって必要です。\n色々用意するのが手間だなと思う人にはHugo+GitHubでさっくりサイトを作るのがおすすめです。\n無料で、httpsも設定できるので非常に便利です。\nHUGOとは HUGOとはGo言語で記述され、速度や使いやすさ、設定のしやすさなどを重視して最適化された静的なHTMLやCSSのサイトジェネレータです。コンテンツとテンプレートを分けて構築し、それらを組み合わせてHTMLをレンダリングします。\nHUGOでブログを記述する際には「Markdown」と呼ばれる言語を使います。\nそして、サイトを公開、再構築する際には「hugo」というコマンドを使用しますが、このコマンドはどのディレクトリからでも実行することができるので、特権アカウントを持っていない共有ホストやその他のシステムで使用することも可能です。\nそして、中程度のサイズの典型的なWebサイトをほんの一瞬でレンダリングします。\n経験則として、各コンテンツは約1ミリ秒でレンダリングされ、ブログやドキュメントなど、どのような種類のウェブサイトでもうまく動作するように設計されています。\nサポートされるアーキテクチャ サポートされるアーキテクチャは2022年1月時点で、Windows、Linux、FreeBSD、NetBSD、DragonFly BSD、OpenBSD、macOS (Darwin)、 Android 用に x64、i386、ARM アーキテクチャ用の Hugo バイナリをビルド済みで提供しています。\nHUGOは、Goコンパイラツールが実行できる場所であれば、ソースからコンパイルすることもできます。例えば、Plan 9やSolarisを含む他のオペレーティングシステムにも対応しています。\nHugoのインストール HUGOをサイトジェネレータとして使用する場合は、すごく簡単で、Hugoバイナリをインストールするだけで、バイナリには外部依存関係はありません。\nバイナリ（クロスプラットフォーム） GitHubにある Releases からプラットフォームに適したバージョンをダウンロードします。\nダウンロードしたバイナリはどこからでも実行可能です。\nグローバルな場所にインストールする必要はなく、権限の無いアカウントや共有ホストやその他のシステムでも動作します。\n理想的には、 /usr/local/bin など使いやすいようにどこかにインストールする必要があります。\nMacでbrewを使う場合 macOSを使用していて、Homebrewを使用している場合は、次のワンライナーを使用してHugoをインストールできます。\n※端末はMacで進めていきます。開発なども便利なのでMacを持っていると何かと便利ですよ。\nbrew install hugo MacPortsの場合 macOSを使用していてMacPortsを使用している場合は、次のワンライナーを使用してHugoをインストールできます。\nport install hugo その他の端末でもコマンドを利用してダウンロード可能です。\n詳しくは Install Hugo を見てみてください。\n設定 HUGOは様々なコマンドラインの機能を備えていますが、コマンドラインに不慣れな場合でも簡単に使用できます。\n以下は、Hugoプロジェクトの開発中に使用する最も一般的なコマンドの説明です。\nインストールの確認 Hugoをインストールしたら、PATHがあることを確認してください。helpコマンドを使用して、Hugoが正しくインストールされていることをテストできます。\nhugo help 実行すると、コンソールに表示される出力は次のようになるかと思います。\nhugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at http://gohugo.io/. Usage: hugo [flags] hugo [command] Available Commands: check Contains some verification checks completion generate the autocompletion script for the specified shell config Print the site configuration convert Convert your content to different formats deploy Deploy your site to a Cloud provider. env Print Hugo version and environment info gen A collection of several useful generators. help Help about any command import Import your site from others. list Listing out various types of content mod Various Hugo Modules helpers. new Create new content for your site server A high performance webserver version Print the version number of Hugo Flags: -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --cleanDestinationDir remove files from destination not found in static directories --config string config file (default is path/config.yaml|json|toml) --configDir string config dir (default \u0026#34;config\u0026#34;) -c, --contentDir string filesystem path to content directory --debug debug output -d, --destination string filesystem path to write files to --disableKinds strings disable different kind of pages (home, RSS etc.) --enableGitInfo add Git revision, date and author info to the pages -e, --environment string build environment --forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, --help help for hugo --i18n-warnings print missing translations --ignoreCache ignores the cache directory --ignoreVendor ignores any _vendor directory --ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern -l, --layoutDir string filesystem path to layout directory --log enable Logging --logFile string log File path (if set, logging enabled automatically) --minify minify any supported output format (HTML, XML etc.) --noChmod don\u0026#39;t sync permission mode of files --noTimes don\u0026#39;t sync modification time of files --path-warnings print warnings on duplicate target paths etc. --poll string set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes --print-mem print memory usage to screen at intervals --quiet build in quiet mode --renderToMemory render to memory (only useful for benchmark testing) -s, --source string filesystem path to read files relative from --templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, --theme strings themes to use (located in /themes/THEMENAME/) --themesDir string filesystem path to themes directory --trace file write trace to file (not useful in general) -v, --verbose verbose output --verboseLog verbose logging -w, --watch watch filesystem for changes and recreate as needed Use \u0026#34;hugo [command] --help\u0026#34; for more information about a command. hugoコマンド 最も一般的な使い方は、カレント・ディレクトリを入力ディレクトリとしてhugoを実行することだと思います。\nデフォルトで public/ ディレクトリにウェブサイトを生成しますが、サイトの設定（configファイル）で publishDir フィールドを変更することにより、出力ディレクトリをカスタマイズすることができます。\nhugo コマンドはサイトを public/ ディレクトリにレンダリングし、ウェブサーバにデプロイする準備ができます。\n$ hugo 0 draft content 0 future content 99 pages created 0 paginator pages created 16 tags created 0 groups created in 90 ms 使ってみる hugoのインストールが終わったら、サイトを作成します。\nhugo new site ＜作成するディレクトリ＞ 色々表示されているかと思いますが、気にしないで大丈夫です。\n設定ファイル hugoの設定はTOMLという形式で記述します。\nTOMLに慣れていない人はJSONやYAMLといった形式でも記述できます。\nその場合はconfig.tomlを削除して下さい。\nbaseURL = \u0026quot;http://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot;  baseURL: サイトの公開URL languageCode: HTMLのlang部分 title: サイトの名前  記事の投稿 記事を作成するにはコマンドを打つ必要があります\nhugo new posts/helloworld.md このコマンドで、postsディレクトリ以下にhelloworld.mdといったファイルが生成されます\nテーマによってはpostsディレクトリではなく、postであったりするので、テーマの詳細を確認して下さい。\n下書きから公開へ 作成されたファイルはmarkdown形式で記述されています。\n--- title: \u0026quot;helloworld\u0026quot; date: 2021-12-22T11:23:09Z draft: true --- draft の部分が下書き状態を表しています。\nfalseにすることで公開となり表示されます。\nHUGOでの下書き、未来、期限切れについて Hugoでは、コンテンツのフロントマターにドラフト、公開日、そして有効期限を設定することができます。デフォルトでは、Hugoは公開(draft: true) しません。\nまた、以下の場合はコンテンツを公開しないので、注意してください\n publishdate が将来の公開日を指定したコンテンツ draft: trueのステータスを持つコンテンツ 有効期限（expirydate）を過ぎたコンテンツ   予約投稿 公開日付（publishdate）が未来で、公開状態にある記事は予約投稿として扱われます。    有効期限付き expirydate に日付を指定することで、記事の有効期限を設定することも可能です。   確認 サイトの確認を行うには\nhugoをインストールしたディレクトリで\nhugo server を実行します。\nこの場合は公開されている記事のみを表示した状態のサーバが立ち上がります。\n未公開も含めたい場合は\nhugo server -D とすることで表示できます。\n公開 公開をするにはサイト全体を構築し直す必要があります。\nhugo このコマンドでサイト全体が自動的に生成されます。\n作成されたサイトは初期状態ではpublicディレクトリに展開されます。\nconfigのpublicDirに任意のディレクトリを設定することも可能です\npublicDir = 'docs' この場合はdocsディレクトリに公開ファイルが展開されます。\n終わりに 駆け足でしたが、hugoの簡単な使い方になります。\n大きな設定も不要で、markdownで記述できるので初心者やデザイナーなどでもとっつきやすいのではないかと思います。\nみなさんもぜひ、hugoを試してみて下さい。\n書籍の紹介  Hugoで始める静的サイト構築入門　静的サイトジェネレーターで作る自作サイト (技術の泉シリーズ（NextPublishing）)   本書は静的サイトジェネレーターの一つであるHugoの解説書です。できるだけ低コストでサイトを運用したい、WordPressなどの各種CMSから移行したい、というケースに合わせて構築方法などを解説します。Hugoを利用してオリジナリティーのあるサイトを自分で構築、管理したい方に向けての一冊です。 Amazonで詳細を見る   Amazon.co.jpアソシエイトを使用   【特典付き! 】Webサイト高速化のための 静的サイトジェネレーター活用入門 (Compass Booksシリーズ)   GatsbyJSで実現する、高速\u0026amp;実用的なサイト構築 「高速化\u0026amp;最適化」「メタデータ対応」「SPAやPWAへの対応」など、これからのWebサイトに求められる要素に対応するための、静的サイトジェネレーターの活用書。 本書は「GatsbyJS(Gatsby)」を使って、「ReactやJavaScript(ECMAScript)に自信が無くても、実用レベルのWebサイトを構築できるようになる」ことを目標にしています。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用   Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）)  本書は、文章を書く=ライティングを「気楽に」行うための道具としての「Markdown」形式を紹介し、その使い方を詳しく解説しています。Wordなどのワープロソフトに限定されることなく、テキストエディタやMarkdown専用エディタ、ポメラなどの文書入力専用機、さらにはスマートホン上でも「見出し」や「強調」といった文章執筆に必要な情報を共有するための書式であるMarkdownの書き方やその定義や起源を、初心者でもわかりやすく紹介しています。 Amazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2021-12-22T13:07:49+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/2021-12-22-hugo-01_hub5e89b620d2afe5c10cf3894738f1203_83896_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-22-hugo-01-ywat/","title":"デザイナーでもできる初めてのHUGO #01"},{"content":"Hugoでテーマが反映されない（画面が真っ白のまま）\n$ git submodule update --init --recursive ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21/2021-12-21_hud06831bf5e2aede9b7d29f34463c4a46_63839_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21/","title":"Hugoでテーマが反映されない（画面が真っ白のまま）"},{"content":"記事を投稿する hugo で記事を作成して、投稿するためには専用のコマンドを使ってファイルを作成するか、posts などのディレクトリに markdown の.md ファイルを設置する必要があります。\n今回はhugoでの記事の投稿の仕方を説明していきます。\nhugo new で記事を投稿 HUGOで記事を投稿するには、専用のコマンド hugo new を使う必要があります。\nこのコマンドを実行すると、提供されたパスに基づいて、作成するファイルの種類を推測し、新しいコンテンツファイルを作成して、日付とタイトルを自動的に設定します。\n-k KIND で種類を指定することもできます。\nテーマまたはサイトでアーキタイプが提供されている場合は、それらが使用されます。\nこれは、サイトのルートディレクトリ内で実行してください。\nhugo new [path] [flags] postsというディレクトリにファイルを作成する場合は以下のようになります。\n$ hugo new posts/[ファイル名].md このファイルを開いてみてみると、\n--- title: \u0026#34;Test\u0026#34; date: [作成日時] draft: true --- このようなファイルが作成されているかと思います。ファイルの中身の構成は下記のようになります。\n title: 記事のタイトル date: 記事の作成日 draft: 下書きかどうか  draft: false にする事でドラフトを公開にすることができる\n上記のような作成ファイルの他に、HUGOには様々な情報を Params として付与することが可能です\n新規作成した際にできるファイルの初期値を変えたい場合はどうしたらいいでしょうか？\nhugo newをカスタマイズする hugo new した際にできるファイルの初期値を変えるには、\n archetypes/posts.md archetypes/default.md  などのファイルを修正してやることで可能です。\n実際にファイルを見てみると初期状態では下記のようになっていました。\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true --- ではここに、画像やカテゴリのフィールドを追加してみましょう。\n先程のを開いて、編集します。\n今回はキャッチ画像とカテゴリを追加するので、image と categories を追加します。\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true image: \u0026#34;\u0026#34; categories: - カテゴリ名 --- この状態でファイルを保存して、hugo new で新規作成して見ましょう。\nすると、初期状態のファイルではなかった image と categories の項目が追加されているかと思います。\nさらに、categories には「カテゴリ名」というカテゴリも反映されているかと思います。このように、初期値を調整することが可能なのです。\nこれを応用すると、初期状態を下書きではなく、公開状態でファイルを新規作成することも可能です。\n公開用ビルドする さて、記事がかけたところで、サイトを公開しようといたしましょう。\n残念なことに、hugo で作成したファイルは markdown 形式であるために、そのままではwebページに公開できません。\n作成したファイルを静的HTMLとして書き出し、ビルド（構築）する必要があるのです。\nビルドは一瞬で終わってしまうのが hugo のすごいところです。\nhugoで作成したファイルをビルドするためのコマンドが以下になります。\n$ hugo 上記のコマンドを実行することで、publicディレクトリにHTMファイルが生成されます。\n実行した際に、サイトの情報も表示されているので、合わせて確認するとなにか新しい発見があるかもしれません。\nStart building sites … hugo v0.91.0+extended darwin/amd64 BuildDate=unknown | JA -------------------+------ Pages | 185 Paginator pages | 42 Non-page files | 205 Static files | 9 Processed images | 620 Aliases | 56 Sitemaps | 1 Cleaned | 0 Total in 981 ms さて、public ディレクトリのファイルをサーバにアップすることでサイトが公開できるということになります。\nおすすめの書籍  Markdownライティング入門　プレーンテキストで気楽に書こう！ (技術の泉シリーズ（NextPublishing）)   【プレーンテキストでらくらくライティング! Markdownを使いこなそう! 】 本書は、文章を書く=ライティングを「気楽に」行うための道具としての「Markdown」形式を紹介し、その使い方を詳しく解説しています。Wordなどのワープロソフトに限定されることなく、テキストエディタやMarkdown専用エディタ、ポメラなどの文書入力専用機、さらにはスマートホン上でも「見出し」や「強調」といった文章執筆に必要な情報を共有するための書式であるMarkdownの書き方やその定義や起源を、初心者でもわかりやすく紹介しています。 〈本書の対象読者〉 執筆のストレスを減らして集中したい人 PCが古くて軽いアプリで執筆したい人 いろいろなアプリで原稿を使いまわしたい人 思いついた時にスマホでメモ書きして原稿にまとめたい人 続きを読む 。\nAmazonで詳細を見る   Amazon.co.jpアソシエイトを使用  ","date":"2021-12-21T18:08:57+09:00","image":"https://suzukiiichiro.github.io/posts/2021-12-21-01/2021-12-21-1_hubb580b3412968a99eba9faea3f838cef_148014_0x400_resize_q75_box.jpg","permalink":"https://suzukiiichiro.github.io/posts/2021-12-21-01/","title":"Hugoで記事の投稿の仕方"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/","title":""}]